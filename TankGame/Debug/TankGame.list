
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a94  08007a94  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007a94  08007a94  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a94  08007a94  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000005e8  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006b8  200006b8  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d65  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e3d  00000000  00000000  00036e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  00039ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  0003ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002027a  00000000  00000000  0003be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c92  00000000  00000000  0005c102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbb1e  00000000  00000000  00072d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e8b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005464  00000000  00000000  0012e904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00133d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00133d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007724 	.word	0x08007724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08007724 	.word	0x08007724

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000ee 	.word	0x200000ee
 800039c:	200000f0 	.word	0x200000f0
 80003a0:	200000f2 	.word	0x200000f2
 80003a4:	20000104 	.word	0x20000104
 80003a8:	200000f4 	.word	0x200000f4
 80003ac:	20000108 	.word	0x20000108

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 faab 	bl	8002a0c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f002 f8fc 	bl	80026b4 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fc32 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fc2a 	bl	8002d30 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fc1e 	bl	8002d30 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f002 f8d4 	bl	80026b4 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f002 f8ce 	bl	80026b4 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f002 f8c8 	bl	80026b4 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f002 f8b9 	bl	80026b4 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f002 f8ae 	bl	80026b4 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000108 	.word	0x20000108
 80005a8:	2000010b 	.word	0x2000010b
 80005ac:	200000ec 	.word	0x200000ec
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000ee 	.word	0x200000ee
 80005b8:	200000f0 	.word	0x200000f0
 80005bc:	200000f2 	.word	0x200000f2
 80005c0:	200000f4 	.word	0x200000f4
 80005c4:	20000104 	.word	0x20000104
 80005c8:	20000109 	.word	0x20000109
 80005cc:	2000010a 	.word	0x2000010a

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000104 	.word	0x20000104
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	2000010c 	.word	0x2000010c

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 ffb6 	bl	80026b4 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000010b 	.word	0x2000010b
 80007ac:	2000010c 	.word	0x2000010c

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000109 	.word	0x20000109

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fa28 	bl	8002d30 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fa1c 	bl	8002d30 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000104 	.word	0x20000104
 8000930:	200000ee 	.word	0x200000ee
 8000934:	200000f0 	.word	0x200000f0
 8000938:	20000108 	.word	0x20000108

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f9f0 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f001 feaf 	bl	80026b4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f9e5 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f001 fea4 	bl	80026b4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f9da 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f001 fe99 	bl	80026b4 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000104 	.word	0x20000104
 800098c:	200000f2 	.word	0x200000f2

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 f9b7 	bl	8002d30 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000104 	.word	0x20000104
 80009e0:	200000f4 	.word	0x200000f4

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 f98d 	bl	8002d30 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }

  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000104 	.word	0x20000104
 8000a34:	200000f4 	.word	0x200000f4

08000a38 <HAL_GPIO_EXTI_Callback>:
const uint16_t Column_pins[] =
		{ GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]

	if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000a42:	4bc1      	ldr	r3, [pc, #772]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000a4a:	f001 fe27 	bl	800269c <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	f200 8294 	bhi.w	8000f7e <HAL_GPIO_EXTI_Callback+0x546>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000a56:	f001 fe21 	bl	800269c <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4aba      	ldr	r2, [pc, #744]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000a5e:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a68:	2300      	movs	r3, #0
 8000a6a:	737b      	strb	r3, [r7, #13]
 8000a6c:	e00b      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	4ab6      	ldr	r2, [pc, #728]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d101      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9f0      	bls.n	8000a6e <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000a8c:	4bb0      	ldr	r3, [pc, #704]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f94c 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000a98:	4bad      	ldr	r3, [pc, #692]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 f946 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000aa4:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f940 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000ab0:	4ba7      	ldr	r3, [pc, #668]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 f93a 	bl	8002d30 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000abc:	2300      	movs	r3, #0
 8000abe:	733b      	strb	r3, [r7, #12]
 8000ac0:	e02d      	b.n	8000b1e <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	4aa3      	ldr	r2, [pc, #652]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aca:	7b3b      	ldrb	r3, [r7, #12]
 8000acc:	4aa2      	ldr	r2, [pc, #648]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f002 f92b 	bl	8002d30 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4a9f      	ldr	r2, [pc, #636]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	4998      	ldr	r1, [pc, #608]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000aea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f002 f905 	bl	8002d00 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_GPIO_EXTI_Callback+0xc8>

			column_number = col;
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b00:	7b3b      	ldrb	r3, [r7, #12]
 8000b02:	4a94      	ldr	r2, [pc, #592]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	4a93      	ldr	r2, [pc, #588]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	f002 f90c 	bl	8002d30 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d9ce      	bls.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b24:	4b8a      	ldr	r3, [pc, #552]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 f900 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000b30:	4b87      	ldr	r3, [pc, #540]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b32:	2102      	movs	r1, #2
 8000b34:	2201      	movs	r2, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 f8fa 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000b3c:	4b84      	ldr	r3, [pc, #528]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 f8f4 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000b48:	4b81      	ldr	r3, [pc, #516]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 f8ee 	bl	8002d30 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	f000 8211 	beq.w	8000f82 <HAL_GPIO_EXTI_Callback+0x54a>
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	f000 820b 	beq.w	8000f82 <HAL_GPIO_EXTI_Callback+0x54a>
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	//1 - 6 - 9 for the Right Player
	//4 -7 -12 for the left player
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	f200 8200 	bhi.w	8000f86 <HAL_GPIO_EXTI_Callback+0x54e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_EXTI_Callback+0x154>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bcd 	.word	0x08000bcd
 8000b90:	08000c49 	.word	0x08000c49
 8000b94:	08000c89 	.word	0x08000c89
 8000b98:	08000cc9 	.word	0x08000cc9
 8000b9c:	08000d39 	.word	0x08000d39
 8000ba0:	08000d95 	.word	0x08000d95
 8000ba4:	08000dab 	.word	0x08000dab
 8000ba8:	08000dc1 	.word	0x08000dc1
 8000bac:	08000e0f 	.word	0x08000e0f
 8000bb0:	08000f87 	.word	0x08000f87
 8000bb4:	08000f87 	.word	0x08000f87
 8000bb8:	08000e81 	.word	0x08000e81
 8000bbc:	08000ef1 	.word	0x08000ef1
 8000bc0:	08000f11 	.word	0x08000f11
 8000bc4:	08000f33 	.word	0x08000f33
 8000bc8:	08000f87 	.word	0x08000f87
	case 1:
		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000bcc:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d113      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x1c4>
			R_Health = (R_Health + 10 - 1) % 10;
 8000bd4:	4b63      	ldr	r3, [pc, #396]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f103 0109 	add.w	r1, r3, #9
 8000bdc:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000bde:	fb83 2301 	smull	r2, r3, r3, r1
 8000be2:	109a      	asrs	r2, r3, #2
 8000be4:	17cb      	asrs	r3, r1, #31
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	1aca      	subs	r2, r1, r3
 8000bf2:	4b5c      	ldr	r3, [pc, #368]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000bf4:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000bf6:	f000 fed1 	bl	800199c <HealthSetting>
 8000bfa:	e016      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
		} else if (screen == 5) {
 8000bfc:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d112      	bne.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
			R_bullets = (R_bullets + 10 - 1) % 10;
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f103 0109 	add.w	r1, r3, #9
 8000c0c:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000c0e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c12:	109a      	asrs	r2, r3, #2
 8000c14:	17cb      	asrs	r3, r1, #31
 8000c16:	1ad2      	subs	r2, r2, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1aca      	subs	r2, r1, r3
 8000c22:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000c24:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000c26:	f000 fe81 	bl	800192c <bulletsSetting>
		}
		if (screen == 0) {
 8000c2a:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 81ab 	bne.w	8000f8a <HAL_GPIO_EXTI_Callback+0x552>
			screen = 1;
 8000c34:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000c3a:	f000 f9d9 	bl	8000ff0 <refreshAll>
			initializeObjects();
 8000c3e:	f000 fbdb 	bl	80013f8 <initializeObjects>
			displayObjects();
 8000c42:	f000 fdf7 	bl	8001834 <displayObjects>
		}

		/* code */
		break;
 8000c46:	e1a0      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0x552>
	case 2:
		HAL_UART_Transmit(&huart1, "2", 1,
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4948      	ldr	r1, [pc, #288]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c50:	4848      	ldr	r0, [pc, #288]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c52:	f004 fabe 	bl	80051d2 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8197 	bne.w	8000f8e <HAL_GPIO_EXTI_Callback+0x556>
			screen = 2;
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2014      	movs	r0, #20
 8000c6a:	f7ff fd6f 	bl	800074c <setCursor>
			print("                    ");
 8000c6e:	4842      	ldr	r0, [pc, #264]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000c70:	f7ff fdb4 	bl	80007dc <print>
			setCursor(0, 1);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fd68 	bl	800074c <setCursor>
			print("                      ");
 8000c7c:	483f      	ldr	r0, [pc, #252]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000c7e:	f7ff fdad 	bl	80007dc <print>
			showAbout();
 8000c82:	f000 fe25 	bl	80018d0 <showAbout>
		}
		/* code */
		break;
 8000c86:	e182      	b.n	8000f8e <HAL_GPIO_EXTI_Callback+0x556>
	case 3:
		HAL_UART_Transmit(&huart1, "3", 1,
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	493c      	ldr	r1, [pc, #240]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x348>)
 8000c90:	4838      	ldr	r0, [pc, #224]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c92:	f004 fa9e 	bl	80051d2 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 8179 	bne.w	8000f92 <HAL_GPIO_EXTI_Callback+0x55a>
			screen = 3;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2014      	movs	r0, #20
 8000caa:	f7ff fd4f 	bl	800074c <setCursor>
			print("                    ");
 8000cae:	4832      	ldr	r0, [pc, #200]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000cb0:	f7ff fd94 	bl	80007dc <print>
			setCursor(0, 1);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fd48 	bl	800074c <setCursor>
			print("                      ");
 8000cbc:	482f      	ldr	r0, [pc, #188]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000cbe:	f7ff fd8d 	bl	80007dc <print>
			showSetting();
 8000cc2:	f000 fe13 	bl	80018ec <showSetting>
		}
		/* code */
		break;
 8000cc6:	e164      	b.n	8000f92 <HAL_GPIO_EXTI_Callback+0x55a>
	case 4:
		HAL_UART_Transmit(&huart1, "4", 1,
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	2201      	movs	r2, #1
 8000cce:	492d      	ldr	r1, [pc, #180]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x34c>)
 8000cd0:	4828      	ldr	r0, [pc, #160]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000cd2:	f004 fa7e 	bl	80051d2 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d113      	bne.n	8000d06 <HAL_GPIO_EXTI_Callback+0x2ce>
			L_Health = (L_Health + 10 - 1) % 10;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x350>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f103 0109 	add.w	r1, r3, #9
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000ce8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cec:	109a      	asrs	r2, r3, #2
 8000cee:	17cb      	asrs	r3, r1, #31
 8000cf0:	1ad2      	subs	r2, r2, r3
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1aca      	subs	r2, r1, r3
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x350>)
 8000cfe:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000d00:	f000 fe4c 	bl	800199c <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 10 - 1) % 10;
			bulletsSetting();
		}

		break;
 8000d04:	e147      	b.n	8000f96 <HAL_GPIO_EXTI_Callback+0x55e>
		} else if (screen == 5) {
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	f040 8143 	bne.w	8000f96 <HAL_GPIO_EXTI_Callback+0x55e>
			L_bullets = (L_bullets + 10 - 1) % 10;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x354>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f103 0109 	add.w	r1, r3, #9
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d1a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d1e:	109a      	asrs	r2, r3, #2
 8000d20:	17cb      	asrs	r3, r1, #31
 8000d22:	1ad2      	subs	r2, r2, r3
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	1aca      	subs	r2, r1, r3
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x354>)
 8000d30:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000d32:	f000 fdfb 	bl	800192c <bulletsSetting>
		break;
 8000d36:	e12e      	b.n	8000f96 <HAL_GPIO_EXTI_Callback+0x55e>
	case 5:
		HAL_UART_Transmit(&huart1, "5", 1,
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4914      	ldr	r1, [pc, #80]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000d42:	f004 fa46 	bl	80051d2 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000d46:	e12f      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
 8000d48:	2000069c 	.word	0x2000069c
 8000d4c:	080078f4 	.word	0x080078f4
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	080078fc 	.word	0x080078fc
 8000d58:	0800790c 	.word	0x0800790c
 8000d5c:	080078e4 	.word	0x080078e4
 8000d60:	2000055c 	.word	0x2000055c
 8000d64:	20000560 	.word	0x20000560
 8000d68:	66666667 	.word	0x66666667
 8000d6c:	20000568 	.word	0x20000568
 8000d70:	0800773c 	.word	0x0800773c
 8000d74:	200001e8 	.word	0x200001e8
 8000d78:	08007740 	.word	0x08007740
 8000d7c:	08007758 	.word	0x08007758
 8000d80:	08007770 	.word	0x08007770
 8000d84:	08007774 	.word	0x08007774
 8000d88:	20000564 	.word	0x20000564
 8000d8c:	2000056c 	.word	0x2000056c
 8000d90:	08007778 	.word	0x08007778
	case 6:
		HAL_UART_Transmit(&huart1, "6", 1,
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4985      	ldr	r1, [pc, #532]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x578>)
 8000d9c:	4885      	ldr	r0, [pc, #532]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000d9e:	f004 fa18 	bl	80051d2 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(0);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f946 	bl	8001034 <changeFoxStateR>
		break;
 8000da8:	e0fe      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
	case 7:
		HAL_UART_Transmit(&huart1, "7", 1,
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	2201      	movs	r2, #1
 8000db0:	4981      	ldr	r1, [pc, #516]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x580>)
 8000db2:	4880      	ldr	r0, [pc, #512]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000db4:	f004 fa0d 	bl	80051d2 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 f93b 	bl	8001034 <changeFoxStateR>
		/* code */
		break;
 8000dbe:	e0f3      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
	case 8:
		//back btn
		refreshAll();
 8000dc0:	f000 f916 	bl	8000ff0 <refreshAll>
		if (screen == 4 | screen == 5) {
 8000dc4:	4b7d      	ldr	r3, [pc, #500]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b7a      	ldr	r3, [pc, #488]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_EXTI_Callback+0x3bc>
			screen = 3;
 8000de8:	4b74      	ldr	r3, [pc, #464]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000dea:	2203      	movs	r2, #3
 8000dec:	601a      	str	r2, [r3, #0]
			showSetting();
 8000dee:	f000 fd7d 	bl	80018ec <showSetting>
 8000df2:	e004      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x3c6>
		} else {
			screen = 0;
 8000df4:	4b71      	ldr	r3, [pc, #452]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
			showMain();
 8000dfa:	f000 fd47 	bl	800188c <showMain>
		}

		HAL_UART_Transmit(&huart1, "B", 1,
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	2201      	movs	r2, #1
 8000e04:	496e      	ldr	r1, [pc, #440]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x588>)
 8000e06:	486b      	ldr	r0, [pc, #428]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000e08:	f004 f9e3 	bl	80051d2 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000e0c:	e0cc      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
	case 9:

		if (screen == 4) {
 8000e0e:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d112      	bne.n	8000e3c <HAL_GPIO_EXTI_Callback+0x404>
			R_Health = (R_Health + 1) % 10;
 8000e16:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e22:	109a      	asrs	r2, r3, #2
 8000e24:	17cb      	asrs	r3, r1, #31
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	1aca      	subs	r2, r1, r3
 8000e32:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000e34:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000e36:	f000 fdb1 	bl	800199c <HealthSetting>
 8000e3a:	e015      	b.n	8000e68 <HAL_GPIO_EXTI_Callback+0x430>
		} else if (screen == 5) {
 8000e3c:	4b5f      	ldr	r3, [pc, #380]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d111      	bne.n	8000e68 <HAL_GPIO_EXTI_Callback+0x430>
			R_bullets = (R_bullets + 1) % 10;
 8000e44:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1c59      	adds	r1, r3, #1
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e50:	109a      	asrs	r2, r3, #2
 8000e52:	17cb      	asrs	r3, r1, #31
 8000e54:	1ad2      	subs	r2, r2, r3
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	1aca      	subs	r2, r1, r3
 8000e60:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000e62:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e64:	f000 fd62 	bl	800192c <bulletsSetting>
		}
		//right player
		if (screen == 1) {
 8000e68:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	f040 8094 	bne.w	8000f9a <HAL_GPIO_EXTI_Callback+0x562>
			movement(&playerR, currentStateR);
 8000e72:	4b57      	ldr	r3, [pc, #348]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x598>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4856      	ldr	r0, [pc, #344]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x59c>)
 8000e7a:	f000 f919 	bl	80010b0 <movement>
		}
		break;
 8000e7e:	e08c      	b.n	8000f9a <HAL_GPIO_EXTI_Callback+0x562>
		break;
	case 11:
		/* code */
		break;
	case 12:
		if (screen == 4) {
 8000e80:	4b4e      	ldr	r3, [pc, #312]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d112      	bne.n	8000eae <HAL_GPIO_EXTI_Callback+0x476>
			L_Health = (L_Health + 1) % 10;
 8000e88:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1c59      	adds	r1, r3, #1
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e90:	fb83 2301 	smull	r2, r3, r3, r1
 8000e94:	109a      	asrs	r2, r3, #2
 8000e96:	17cb      	asrs	r3, r1, #31
 8000e98:	1ad2      	subs	r2, r2, r3
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	1aca      	subs	r2, r1, r3
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000ea6:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000ea8:	f000 fd78 	bl	800199c <HealthSetting>
 8000eac:	e015      	b.n	8000eda <HAL_GPIO_EXTI_Callback+0x4a2>
		} else if (screen == 5) {
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	d111      	bne.n	8000eda <HAL_GPIO_EXTI_Callback+0x4a2>
			L_bullets = (L_bullets + 1) % 10;
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1c59      	adds	r1, r3, #1
 8000ebc:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000ebe:	fb83 2301 	smull	r2, r3, r3, r1
 8000ec2:	109a      	asrs	r2, r3, #2
 8000ec4:	17cb      	asrs	r3, r1, #31
 8000ec6:	1ad2      	subs	r2, r2, r3
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	1aca      	subs	r2, r1, r3
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000ed4:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000ed6:	f000 fd29 	bl	800192c <bulletsSetting>
		}
		if (screen == 1) {
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d15d      	bne.n	8000f9e <HAL_GPIO_EXTI_Callback+0x566>
			movement(&playerL, currentStateL);
 8000ee2:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x5a8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	483e      	ldr	r0, [pc, #248]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x5ac>)
 8000eea:	f000 f8e1 	bl	80010b0 <movement>
		}
		/* code */
		break;
 8000eee:	e056      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0x566>
	case 13:
		/* code */
		if (screen = 3) {
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fc27 	bl	800074c <setCursor>
			print("                   ");
 8000efe:	483a      	ldr	r0, [pc, #232]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000f00:	f7ff fc6c 	bl	80007dc <print>
			HealthSetting();
 8000f04:	f000 fd4a 	bl	800199c <HealthSetting>
			screen = 4;
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f0e:	e04b      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
	case 14:
		/* code */
		if (screen == 3) {
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d144      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x56a>
			screen = 5;
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2014      	movs	r0, #20
 8000f22:	f7ff fc13 	bl	800074c <setCursor>
			print("                   ");
 8000f26:	4830      	ldr	r0, [pc, #192]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000f28:	f7ff fc58 	bl	80007dc <print>
			bulletsSetting();
 8000f2c:	f000 fcfe 	bl	800192c <bulletsSetting>
		}
		break;
 8000f30:	e037      	b.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x56a>
	case 15:
		if (screen == 3) {
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d109      	bne.n	8000f4e <HAL_GPIO_EXTI_Callback+0x516>
			vfx = (vfx + 1) % 2;
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	bfb8      	it	lt
 8000f48:	425b      	neglt	r3, r3
 8000f4a:	4a28      	ldr	r2, [pc, #160]	; (8000fec <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000f4c:	6013      	str	r3, [r2, #0]
		}
		if (screen == 4 | screen == 5) {
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf0c      	ite	eq
 8000f56:	2301      	moveq	r3, #1
 8000f58:	2300      	movne	r3, #0
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_EXTI_Callback+0x56e>
			screen = 3;
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	601a      	str	r2, [r3, #0]
			showSetting();
 8000f78:	f000 fcb8 	bl	80018ec <showSetting>
		}
		/* code */
		break;
 8000f7c:	e013      	b.n	8000fa6 <HAL_GPIO_EXTI_Callback+0x56e>
		return;
 8000f7e:	bf00      	nop
 8000f80:	e012      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		return; // Reject invalid scan
 8000f82:	bf00      	nop
 8000f84:	e010      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
	case 16:
		/* code */
		break;

	default:
		break;
 8000f86:	bf00      	nop
 8000f88:	e00e      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000f8a:	bf00      	nop
 8000f8c:	e00c      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000f8e:	bf00      	nop
 8000f90:	e00a      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000f92:	bf00      	nop
 8000f94:	e008      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000f96:	bf00      	nop
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000f9a:	bf00      	nop
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000f9e:	bf00      	nop
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000fa2:	bf00      	nop
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
		break;
 8000fa6:	bf00      	nop
	}
}
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800777c 	.word	0x0800777c
 8000fb4:	200001e8 	.word	0x200001e8
 8000fb8:	08007780 	.word	0x08007780
 8000fbc:	2000055c 	.word	0x2000055c
 8000fc0:	08007784 	.word	0x08007784
 8000fc4:	20000560 	.word	0x20000560
 8000fc8:	66666667 	.word	0x66666667
 8000fcc:	20000568 	.word	0x20000568
 8000fd0:	20000588 	.word	0x20000588
 8000fd4:	20000570 	.word	0x20000570
 8000fd8:	20000564 	.word	0x20000564
 8000fdc:	2000056c 	.word	0x2000056c
 8000fe0:	2000058c 	.word	0x2000058c
 8000fe4:	2000057c 	.word	0x2000057c
 8000fe8:	08007788 	.word	0x08007788
 8000fec:	20000004 	.word	0x20000004

08000ff0 <refreshAll>:

void refreshAll(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fba8 	bl	800074c <setCursor>
	print("                   ");
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <refreshAll+0x40>)
 8000ffe:	f7ff fbed 	bl	80007dc <print>
	setCursor(0, 1);
 8001002:	2101      	movs	r1, #1
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fba1 	bl	800074c <setCursor>
	print("                   ");
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <refreshAll+0x40>)
 800100c:	f7ff fbe6 	bl	80007dc <print>
	setCursor(20, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2014      	movs	r0, #20
 8001014:	f7ff fb9a 	bl	800074c <setCursor>
	print("                   ");
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <refreshAll+0x40>)
 800101a:	f7ff fbdf 	bl	80007dc <print>
	setCursor(20, 1);
 800101e:	2101      	movs	r1, #1
 8001020:	2014      	movs	r0, #20
 8001022:	f7ff fb93 	bl	800074c <setCursor>
	print("                   ");
 8001026:	4802      	ldr	r0, [pc, #8]	; (8001030 <refreshAll+0x40>)
 8001028:	f7ff fbd8 	bl	80007dc <print>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	08007788 	.word	0x08007788

08001034 <changeFoxStateR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void changeFoxStateR(int Player) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	byte *currentFoxR = foxStates[currentStateR];
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <changeFoxStateR+0x70>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <changeFoxStateR+0x74>)
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	60fb      	str	r3, [r7, #12]
	byte *currentFoxL = foxStates[currentStateL];
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <changeFoxStateR+0x78>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <changeFoxStateR+0x74>)
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	60bb      	str	r3, [r7, #8]

	if (!Player) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d110      	bne.n	800107c <changeFoxStateR+0x48>
		createChar(7, currentFoxR);
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	2007      	movs	r0, #7
 800105e:	f7ff fbe8 	bl	8000832 <createChar>
		currentStateR = (currentStateR + 1) % 4;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <changeFoxStateR+0x70>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	425a      	negs	r2, r3
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	bf58      	it	pl
 8001074:	4253      	negpl	r3, r2
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <changeFoxStateR+0x70>)
 8001078:	6013      	str	r3, [r2, #0]
	} else {
		createChar(8, currentFoxL);
		currentStateL = (currentStateL + 1) % 4;
	}
}
 800107a:	e00f      	b.n	800109c <changeFoxStateR+0x68>
		createChar(8, currentFoxL);
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	2008      	movs	r0, #8
 8001080:	f7ff fbd7 	bl	8000832 <createChar>
		currentStateL = (currentStateL + 1) % 4;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <changeFoxStateR+0x78>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	425a      	negs	r2, r3
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	bf58      	it	pl
 8001096:	4253      	negpl	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <changeFoxStateR+0x78>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000588 	.word	0x20000588
 80010a8:	20000050 	.word	0x20000050
 80010ac:	2000058c 	.word	0x2000058c

080010b0 <movement>:

void movement(Player *player, int currentState) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b093      	sub	sp, #76	; 0x4c
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	char buffer[50]; // Buffer to hold the string

	sprintf(buffer, "Player X: %d, Player Y: %d", player->x, player->y); // Convert integers to string
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f107 000c 	add.w	r0, r7, #12
 80010c6:	4994      	ldr	r1, [pc, #592]	; (8001318 <movement+0x268>)
 80010c8:	f005 f922 	bl	8006310 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f87d 	bl	80001d0 <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f107 010c 	add.w	r1, r7, #12
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	488e      	ldr	r0, [pc, #568]	; (800131c <movement+0x26c>)
 80010e4:	f004 f875 	bl	80051d2 <HAL_UART_Transmit>
	HAL_MAX_DELAY); // Transmit string over UART
	int oldX = player->x;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	647b      	str	r3, [r7, #68]	; 0x44
	int oldY = player->y;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
	switch (currentState) {
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	f200 8152 	bhi.w	80013a0 <movement+0x2f0>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <movement+0x54>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	08001199 	.word	0x08001199
 800110c:	08001259 	.word	0x08001259
 8001110:	0800132d 	.word	0x0800132d
	case 0:	//top
		if (player->x == 1 && lcd[0][player->y] != 4
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d10f      	bne.n	800113c <movement+0x8c>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a7f      	ldr	r2, [pc, #508]	; (8001320 <movement+0x270>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	2b04      	cmp	r3, #4
 8001126:	d009      	beq.n	800113c <movement+0x8c>
				&& lcd[0][player->y] != 3) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a7c      	ldr	r2, [pc, #496]	; (8001320 <movement+0x270>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	2b03      	cmp	r3, #3
 8001132:	d003      	beq.n	800113c <movement+0x8c>
			player->x = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e02c      	b.n	8001196 <movement+0xe6>
		} else if (player->x == 0 && player->y >= 20) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d11f      	bne.n	8001184 <movement+0xd4>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b13      	cmp	r3, #19
 800114a:	dd1b      	ble.n	8001184 <movement+0xd4>
			if (lcd[1][(player->y) - 20] != 4
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	3b14      	subs	r3, #20
 8001152:	4a73      	ldr	r2, [pc, #460]	; (8001320 <movement+0x270>)
 8001154:	4413      	add	r3, r2
 8001156:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800115a:	2b04      	cmp	r3, #4
 800115c:	d01a      	beq.n	8001194 <movement+0xe4>
					&& lcd[1][(player->y) - 20] != 3) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	3b14      	subs	r3, #20
 8001164:	4a6e      	ldr	r2, [pc, #440]	; (8001320 <movement+0x270>)
 8001166:	4413      	add	r3, r2
 8001168:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800116c:	2b03      	cmp	r3, #3
 800116e:	d011      	beq.n	8001194 <movement+0xe4>
				player->x = 1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
				player->y = (player->y) - 20;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f1a3 0214 	sub.w	r2, r3, #20
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	605a      	str	r2, [r3, #4]
			if (lcd[1][(player->y) - 20] != 4
 8001182:	e007      	b.n	8001194 <movement+0xe4>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT TOP", 8,
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2208      	movs	r2, #8
 800118a:	4966      	ldr	r1, [pc, #408]	; (8001324 <movement+0x274>)
 800118c:	4863      	ldr	r0, [pc, #396]	; (800131c <movement+0x26c>)
 800118e:	f004 f820 	bl	80051d2 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001192:	e105      	b.n	80013a0 <movement+0x2f0>
			if (lcd[1][(player->y) - 20] != 4
 8001194:	bf00      	nop
		break;
 8001196:	e103      	b.n	80013a0 <movement+0x2f0>
	case 1://right
		if (player->y >= 0 && player->y < 19) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db25      	blt.n	80011ec <movement+0x13c>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b12      	cmp	r3, #18
 80011a6:	dc21      	bgt.n	80011ec <movement+0x13c>
					if (lcd[player->x][(player->y)+1]!=3 && lcd[player->x][(player->y)+1]!=4) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	3301      	adds	r3, #1
 80011b2:	495b      	ldr	r1, [pc, #364]	; (8001320 <movement+0x270>)
 80011b4:	2026      	movs	r0, #38	; 0x26
 80011b6:	fb00 f202 	mul.w	r2, r0, r2
 80011ba:	440a      	add	r2, r1
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d045      	beq.n	8001250 <movement+0x1a0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4954      	ldr	r1, [pc, #336]	; (8001320 <movement+0x270>)
 80011d0:	2026      	movs	r0, #38	; 0x26
 80011d2:	fb00 f202 	mul.w	r2, r0, r2
 80011d6:	440a      	add	r2, r1
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d037      	beq.n	8001250 <movement+0x1a0>
						player->y = (player->y) + 1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	605a      	str	r2, [r3, #4]
					if (lcd[player->x][(player->y)+1]!=3 && lcd[player->x][(player->y)+1]!=4) {
 80011ea:	e031      	b.n	8001250 <movement+0x1a0>
					}
				} else if (player->y <39  && player->y >= 20) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b26      	cmp	r3, #38	; 0x26
 80011f2:	dc25      	bgt.n	8001240 <movement+0x190>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b13      	cmp	r3, #19
 80011fa:	dd21      	ble.n	8001240 <movement+0x190>
					if (lcd[player->x][(player->y)+1]!=3 && lcd[player->x][(player->y)+1]!=4) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	3301      	adds	r3, #1
 8001206:	4946      	ldr	r1, [pc, #280]	; (8001320 <movement+0x270>)
 8001208:	2026      	movs	r0, #38	; 0x26
 800120a:	fb00 f202 	mul.w	r2, r0, r2
 800120e:	440a      	add	r2, r1
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d01d      	beq.n	8001254 <movement+0x1a4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	3301      	adds	r3, #1
 8001222:	493f      	ldr	r1, [pc, #252]	; (8001320 <movement+0x270>)
 8001224:	2026      	movs	r0, #38	; 0x26
 8001226:	fb00 f202 	mul.w	r2, r0, r2
 800122a:	440a      	add	r2, r1
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00f      	beq.n	8001254 <movement+0x1a4>
						player->y = (player->y) + 1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	605a      	str	r2, [r3, #4]
					if (lcd[player->x][(player->y)+1]!=3 && lcd[player->x][(player->y)+1]!=4) {
 800123e:	e009      	b.n	8001254 <movement+0x1a4>
					}
				}
				else{
					HAL_UART_Transmit(&huart1, "CANT LEFT", 9,
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	2209      	movs	r2, #9
 8001246:	4938      	ldr	r1, [pc, #224]	; (8001328 <movement+0x278>)
 8001248:	4834      	ldr	r0, [pc, #208]	; (800131c <movement+0x26c>)
 800124a:	f003 ffc2 	bl	80051d2 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
				}
				break;
 800124e:	e0a7      	b.n	80013a0 <movement+0x2f0>
					if (lcd[player->x][(player->y)+1]!=3 && lcd[player->x][(player->y)+1]!=4) {
 8001250:	bf00      	nop
 8001252:	e0a5      	b.n	80013a0 <movement+0x2f0>
					if (lcd[player->x][(player->y)+1]!=3 && lcd[player->x][(player->y)+1]!=4) {
 8001254:	bf00      	nop
				break;
 8001256:	e0a3      	b.n	80013a0 <movement+0x2f0>

	case 2://left
		if (player->y > 0 && player->y <= 19) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd25      	ble.n	80012ac <movement+0x1fc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b13      	cmp	r3, #19
 8001266:	dc21      	bgt.n	80012ac <movement+0x1fc>
					if (lcd[player->x][(player->y)-1]!=3 && lcd[player->x][(player->y)-1]!=4) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	3b01      	subs	r3, #1
 8001272:	492b      	ldr	r1, [pc, #172]	; (8001320 <movement+0x270>)
 8001274:	2026      	movs	r0, #38	; 0x26
 8001276:	fb00 f202 	mul.w	r2, r0, r2
 800127a:	440a      	add	r2, r1
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d045      	beq.n	8001310 <movement+0x260>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	3b01      	subs	r3, #1
 800128e:	4924      	ldr	r1, [pc, #144]	; (8001320 <movement+0x270>)
 8001290:	2026      	movs	r0, #38	; 0x26
 8001292:	fb00 f202 	mul.w	r2, r0, r2
 8001296:	440a      	add	r2, r1
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b04      	cmp	r3, #4
 800129e:	d037      	beq.n	8001310 <movement+0x260>
						player->y = (player->y) - 1;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	605a      	str	r2, [r3, #4]
					if (lcd[player->x][(player->y)-1]!=3 && lcd[player->x][(player->y)-1]!=4) {
 80012aa:	e031      	b.n	8001310 <movement+0x260>
					}
				} else if (player->y <=39  && player->y > 20) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b27      	cmp	r3, #39	; 0x27
 80012b2:	dc25      	bgt.n	8001300 <movement+0x250>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b14      	cmp	r3, #20
 80012ba:	dd21      	ble.n	8001300 <movement+0x250>
					if (lcd[player->x][(player->y)-1]!=3 && lcd[player->x][(player->y)-1]!=4) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4916      	ldr	r1, [pc, #88]	; (8001320 <movement+0x270>)
 80012c8:	2026      	movs	r0, #38	; 0x26
 80012ca:	fb00 f202 	mul.w	r2, r0, r2
 80012ce:	440a      	add	r2, r1
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d01d      	beq.n	8001314 <movement+0x264>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	490f      	ldr	r1, [pc, #60]	; (8001320 <movement+0x270>)
 80012e4:	2026      	movs	r0, #38	; 0x26
 80012e6:	fb00 f202 	mul.w	r2, r0, r2
 80012ea:	440a      	add	r2, r1
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d00f      	beq.n	8001314 <movement+0x264>
						player->y = (player->y) - 1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	605a      	str	r2, [r3, #4]
					if (lcd[player->x][(player->y)-1]!=3 && lcd[player->x][(player->y)-1]!=4) {
 80012fe:	e009      	b.n	8001314 <movement+0x264>
					}
				}
				else{
					HAL_UART_Transmit(&huart1, "CANT LEFT", 9,
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	2209      	movs	r2, #9
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <movement+0x278>)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <movement+0x26c>)
 800130a:	f003 ff62 	bl	80051d2 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
				}
				break;
 800130e:	e047      	b.n	80013a0 <movement+0x2f0>
					if (lcd[player->x][(player->y)-1]!=3 && lcd[player->x][(player->y)-1]!=4) {
 8001310:	bf00      	nop
 8001312:	e045      	b.n	80013a0 <movement+0x2f0>
					if (lcd[player->x][(player->y)-1]!=3 && lcd[player->x][(player->y)-1]!=4) {
 8001314:	bf00      	nop
				break;
 8001316:	e043      	b.n	80013a0 <movement+0x2f0>
 8001318:	0800779c 	.word	0x0800779c
 800131c:	200001e8 	.word	0x200001e8
 8001320:	20000650 	.word	0x20000650
 8001324:	080077b8 	.word	0x080077b8
 8001328:	080077c4 	.word	0x080077c4
		break;
	case 3:	//bot
		if (player->x == 0 && lcd[1][player->y] != 4
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d113      	bne.n	800135c <movement+0x2ac>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a2c      	ldr	r2, [pc, #176]	; (80013ec <movement+0x33c>)
 800133a:	4413      	add	r3, r2
 800133c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001340:	2b04      	cmp	r3, #4
 8001342:	d00b      	beq.n	800135c <movement+0x2ac>
				&& lcd[1][player->y] != 3) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a28      	ldr	r2, [pc, #160]	; (80013ec <movement+0x33c>)
 800134a:	4413      	add	r3, r2
 800134c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001350:	2b03      	cmp	r3, #3
 8001352:	d003      	beq.n	800135c <movement+0x2ac>
			player->x = 1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e020      	b.n	800139e <movement+0x2ee>
		} else if (player->x == 1 && player->y < 20) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d114      	bne.n	800138e <movement+0x2de>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b13      	cmp	r3, #19
 800136a:	dc10      	bgt.n	800138e <movement+0x2de>
			if (lcd[0][(player->y) + 20] != 4) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	3314      	adds	r3, #20
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <movement+0x33c>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	2b04      	cmp	r3, #4
 8001378:	d011      	beq.n	800139e <movement+0x2ee>
				player->x = 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
				player->y = (player->y) + 20;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f103 0214 	add.w	r2, r3, #20
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	605a      	str	r2, [r3, #4]
			if (lcd[0][(player->y) + 20] != 4) {
 800138c:	e007      	b.n	800139e <movement+0x2ee>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT BOT", 8,
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	2208      	movs	r2, #8
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <movement+0x340>)
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <movement+0x344>)
 8001398:	f003 ff1b 	bl	80051d2 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 800139c:	e7ff      	b.n	800139e <movement+0x2ee>
 800139e:	bf00      	nop
	}

	lcd[player->x][player->y] = player->c;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	7a0c      	ldrb	r4, [r1, #8]
 80013ac:	490f      	ldr	r1, [pc, #60]	; (80013ec <movement+0x33c>)
 80013ae:	2026      	movs	r0, #38	; 0x26
 80013b0:	fb00 f202 	mul.w	r2, r0, r2
 80013b4:	440a      	add	r2, r1
 80013b6:	4413      	add	r3, r2
 80013b8:	4622      	mov	r2, r4
 80013ba:	701a      	strb	r2, [r3, #0]

	// Clear the old position on the LCD
	setCursor(oldY, oldX);
 80013bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80013be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013c0:	f7ff f9c4 	bl	800074c <setCursor>
	write(' ');
 80013c4:	2020      	movs	r0, #32
 80013c6:	f7ff fa6b 	bl	80008a0 <write>

	// Write the player's character at the new position on the LCD
	setCursor(player->y, player->x);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f7ff f9b9 	bl	800074c <setCursor>
	write(player->c);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a1b      	ldrb	r3, [r3, #8]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fa5e 	bl	80008a0 <write>

}
 80013e4:	bf00      	nop
 80013e6:	374c      	adds	r7, #76	; 0x4c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	20000650 	.word	0x20000650
 80013f0:	080077d0 	.word	0x080077d0
 80013f4:	200001e8 	.word	0x200001e8

080013f8 <initializeObjects>:

void initializeObjects() {
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af00      	add	r7, sp, #0
	playerR.x = 1;
 80013fe:	4ba8      	ldr	r3, [pc, #672]	; (80016a0 <initializeObjects+0x2a8>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
	playerR.y = 19;
 8001404:	4ba6      	ldr	r3, [pc, #664]	; (80016a0 <initializeObjects+0x2a8>)
 8001406:	2213      	movs	r2, #19
 8001408:	605a      	str	r2, [r3, #4]
	playerR.c = 7;
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <initializeObjects+0x2a8>)
 800140c:	2207      	movs	r2, #7
 800140e:	721a      	strb	r2, [r3, #8]
	playerL.c = 8;
 8001410:	4ba4      	ldr	r3, [pc, #656]	; (80016a4 <initializeObjects+0x2ac>)
 8001412:	2208      	movs	r2, #8
 8001414:	721a      	strb	r2, [r3, #8]
	playerL.x = 1;
 8001416:	4ba3      	ldr	r3, [pc, #652]	; (80016a4 <initializeObjects+0x2ac>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
	playerL.y = 0;
 800141c:	4ba1      	ldr	r3, [pc, #644]	; (80016a4 <initializeObjects+0x2ac>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	e015      	b.n	8001454 <initializeObjects+0x5c>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	e00c      	b.n	8001448 <initializeObjects+0x50>
			lcd[i][j] = ' ';  // Empty cell
 800142e:	4a9e      	ldr	r2, [pc, #632]	; (80016a8 <initializeObjects+0x2b0>)
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	2126      	movs	r1, #38	; 0x26
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	441a      	add	r2, r3
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	4413      	add	r3, r2
 800143e:	2220      	movs	r2, #32
 8001440:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	3301      	adds	r3, #1
 8001446:	623b      	str	r3, [r7, #32]
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	2b25      	cmp	r3, #37	; 0x25
 800144c:	ddef      	ble.n	800142e <initializeObjects+0x36>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b01      	cmp	r3, #1
 8001458:	dde6      	ble.n	8001428 <initializeObjects+0x30>
		}
	}

	//hearts
	for (int i = 0; i < NUM_HEARTS; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e036      	b.n	80014ce <initializeObjects+0xd6>
		hearts[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001460:	f004 ff18 	bl	8006294 <rand>
 8001464:	4602      	mov	r2, r0
 8001466:	4b91      	ldr	r3, [pc, #580]	; (80016ac <initializeObjects+0x2b4>)
 8001468:	fb83 1302 	smull	r1, r3, r3, r2
 800146c:	4413      	add	r3, r2
 800146e:	1119      	asrs	r1, r3, #4
 8001470:	17d3      	asrs	r3, r2, #31
 8001472:	1ac9      	subs	r1, r1, r3
 8001474:	460b      	mov	r3, r1
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	1a5b      	subs	r3, r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	1ad1      	subs	r1, r2, r3
 800147e:	3103      	adds	r1, #3
 8001480:	488b      	ldr	r0, [pc, #556]	; (80016b0 <initializeObjects+0x2b8>)
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4403      	add	r3, r0
 800148e:	6019      	str	r1, [r3, #0]
		hearts[i].y = rand() % 2;       // Random number between 0 and 1
 8001490:	f004 ff00 	bl	8006294 <rand>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	bfb8      	it	lt
 800149e:	425b      	neglt	r3, r3
 80014a0:	4619      	mov	r1, r3
 80014a2:	4883      	ldr	r0, [pc, #524]	; (80016b0 <initializeObjects+0x2b8>)
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	3304      	adds	r3, #4
 80014b2:	6019      	str	r1, [r3, #0]
		hearts[i].c = 1;
 80014b4:	497e      	ldr	r1, [pc, #504]	; (80016b0 <initializeObjects+0x2b8>)
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3308      	adds	r3, #8
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	3301      	adds	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	ddc5      	ble.n	8001460 <initializeObjects+0x68>
	}

	//  mistery boxes
	for (int i = 0; i < NUM_BOXES; i++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	e036      	b.n	8001548 <initializeObjects+0x150>
		boxes[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 80014da:	f004 fedb 	bl	8006294 <rand>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b72      	ldr	r3, [pc, #456]	; (80016ac <initializeObjects+0x2b4>)
 80014e2:	fb83 1302 	smull	r1, r3, r3, r2
 80014e6:	4413      	add	r3, r2
 80014e8:	1119      	asrs	r1, r3, #4
 80014ea:	17d3      	asrs	r3, r2, #31
 80014ec:	1ac9      	subs	r1, r1, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a5b      	subs	r3, r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	1ad1      	subs	r1, r2, r3
 80014f8:	3103      	adds	r1, #3
 80014fa:	486e      	ldr	r0, [pc, #440]	; (80016b4 <initializeObjects+0x2bc>)
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4403      	add	r3, r0
 8001508:	6019      	str	r1, [r3, #0]
		boxes[i].y = rand() % 2;       // Random number between 0 and 1
 800150a:	f004 fec3 	bl	8006294 <rand>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	bfb8      	it	lt
 8001518:	425b      	neglt	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	4865      	ldr	r0, [pc, #404]	; (80016b4 <initializeObjects+0x2bc>)
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4403      	add	r3, r0
 800152a:	3304      	adds	r3, #4
 800152c:	6019      	str	r1, [r3, #0]
		boxes[i].c = 2;
 800152e:	4961      	ldr	r1, [pc, #388]	; (80016b4 <initializeObjects+0x2bc>)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3308      	adds	r3, #8
 800153e:	2202      	movs	r2, #2
 8001540:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	3301      	adds	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b01      	cmp	r3, #1
 800154c:	ddc5      	ble.n	80014da <initializeObjects+0xe2>
	}

	//bullets
	for (int i = 0; i < NUM_BULLETS; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e036      	b.n	80015c2 <initializeObjects+0x1ca>
		bullets[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001554:	f004 fe9e 	bl	8006294 <rand>
 8001558:	4602      	mov	r2, r0
 800155a:	4b54      	ldr	r3, [pc, #336]	; (80016ac <initializeObjects+0x2b4>)
 800155c:	fb83 1302 	smull	r1, r3, r3, r2
 8001560:	4413      	add	r3, r2
 8001562:	1119      	asrs	r1, r3, #4
 8001564:	17d3      	asrs	r3, r2, #31
 8001566:	1ac9      	subs	r1, r1, r3
 8001568:	460b      	mov	r3, r1
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	1a5b      	subs	r3, r3, r1
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	1ad1      	subs	r1, r2, r3
 8001572:	3103      	adds	r1, #3
 8001574:	4850      	ldr	r0, [pc, #320]	; (80016b8 <initializeObjects+0x2c0>)
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4403      	add	r3, r0
 8001582:	6019      	str	r1, [r3, #0]
		bullets[i].y = rand() % 2;       // Random number between 0 and 1
 8001584:	f004 fe86 	bl	8006294 <rand>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	bfb8      	it	lt
 8001592:	425b      	neglt	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	4848      	ldr	r0, [pc, #288]	; (80016b8 <initializeObjects+0x2c0>)
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4403      	add	r3, r0
 80015a4:	3304      	adds	r3, #4
 80015a6:	6019      	str	r1, [r3, #0]
		bullets[i].c = 5;
 80015a8:	4943      	ldr	r1, [pc, #268]	; (80016b8 <initializeObjects+0x2c0>)
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3308      	adds	r3, #8
 80015b8:	2205      	movs	r2, #5
 80015ba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	ddc5      	ble.n	8001554 <initializeObjects+0x15c>
	}
	//obstacles
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	e036      	b.n	800163c <initializeObjects+0x244>
		obstacles[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 80015ce:	f004 fe61 	bl	8006294 <rand>
 80015d2:	4602      	mov	r2, r0
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <initializeObjects+0x2b4>)
 80015d6:	fb83 1302 	smull	r1, r3, r3, r2
 80015da:	4413      	add	r3, r2
 80015dc:	1119      	asrs	r1, r3, #4
 80015de:	17d3      	asrs	r3, r2, #31
 80015e0:	1ac9      	subs	r1, r1, r3
 80015e2:	460b      	mov	r3, r1
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	1a5b      	subs	r3, r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	1ad1      	subs	r1, r2, r3
 80015ec:	3103      	adds	r1, #3
 80015ee:	4833      	ldr	r0, [pc, #204]	; (80016bc <initializeObjects+0x2c4>)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4403      	add	r3, r0
 80015fc:	6019      	str	r1, [r3, #0]
		obstacles[i].y = rand() % 2;       // Random number between 0 and 1
 80015fe:	f004 fe49 	bl	8006294 <rand>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	bfb8      	it	lt
 800160c:	425b      	neglt	r3, r3
 800160e:	4619      	mov	r1, r3
 8001610:	482a      	ldr	r0, [pc, #168]	; (80016bc <initializeObjects+0x2c4>)
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4403      	add	r3, r0
 800161e:	3304      	adds	r3, #4
 8001620:	6019      	str	r1, [r3, #0]
		obstacles[i].c = 4;
 8001622:	4926      	ldr	r1, [pc, #152]	; (80016bc <initializeObjects+0x2c4>)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3308      	adds	r3, #8
 8001632:	2204      	movs	r2, #4
 8001634:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	3301      	adds	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b05      	cmp	r3, #5
 8001640:	ddc5      	ble.n	80015ce <initializeObjects+0x1d6>
	}
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e024      	b.n	8001692 <initializeObjects+0x29a>
		lcd[hearts[i].y][hearts[i].x] = hearts[i].c;
 8001648:	4919      	ldr	r1, [pc, #100]	; (80016b0 <initializeObjects+0x2b8>)
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3304      	adds	r3, #4
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	4915      	ldr	r1, [pc, #84]	; (80016b0 <initializeObjects+0x2b8>)
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	4c11      	ldr	r4, [pc, #68]	; (80016b0 <initializeObjects+0x2b8>)
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4423      	add	r3, r4
 8001678:	3308      	adds	r3, #8
 800167a:	781c      	ldrb	r4, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <initializeObjects+0x2b0>)
 800167e:	2326      	movs	r3, #38	; 0x26
 8001680:	fb00 f303 	mul.w	r3, r0, r3
 8001684:	4413      	add	r3, r2
 8001686:	440b      	add	r3, r1
 8001688:	4622      	mov	r2, r4
 800168a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	3301      	adds	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b02      	cmp	r3, #2
 8001696:	ddd7      	ble.n	8001648 <initializeObjects+0x250>
	}
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	e035      	b.n	800170a <initializeObjects+0x312>
 800169e:	bf00      	nop
 80016a0:	20000570 	.word	0x20000570
 80016a4:	2000057c 	.word	0x2000057c
 80016a8:	20000650 	.word	0x20000650
 80016ac:	92492493 	.word	0x92492493
 80016b0:	20000590 	.word	0x20000590
 80016b4:	200005b4 	.word	0x200005b4
 80016b8:	200005cc 	.word	0x200005cc
 80016bc:	20000608 	.word	0x20000608
		lcd[bullets[i].y][bullets[i].x] = bullets[i].c;
 80016c0:	4956      	ldr	r1, [pc, #344]	; (800181c <initializeObjects+0x424>)
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3304      	adds	r3, #4
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	4952      	ldr	r1, [pc, #328]	; (800181c <initializeObjects+0x424>)
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	4c4e      	ldr	r4, [pc, #312]	; (800181c <initializeObjects+0x424>)
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4423      	add	r3, r4
 80016f0:	3308      	adds	r3, #8
 80016f2:	781c      	ldrb	r4, [r3, #0]
 80016f4:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <initializeObjects+0x428>)
 80016f6:	2326      	movs	r3, #38	; 0x26
 80016f8:	fb00 f303 	mul.w	r3, r0, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	440b      	add	r3, r1
 8001700:	4622      	mov	r2, r4
 8001702:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3301      	adds	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b04      	cmp	r3, #4
 800170e:	ddd7      	ble.n	80016c0 <initializeObjects+0x2c8>
	}
	for (int i = 0; i < NUM_BOXES; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	e024      	b.n	8001760 <initializeObjects+0x368>
		lcd[boxes[i].y][boxes[i].x] = boxes[i].c;
 8001716:	4943      	ldr	r1, [pc, #268]	; (8001824 <initializeObjects+0x42c>)
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3304      	adds	r3, #4
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	493e      	ldr	r1, [pc, #248]	; (8001824 <initializeObjects+0x42c>)
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	4c3a      	ldr	r4, [pc, #232]	; (8001824 <initializeObjects+0x42c>)
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4423      	add	r3, r4
 8001746:	3308      	adds	r3, #8
 8001748:	781c      	ldrb	r4, [r3, #0]
 800174a:	4a35      	ldr	r2, [pc, #212]	; (8001820 <initializeObjects+0x428>)
 800174c:	2326      	movs	r3, #38	; 0x26
 800174e:	fb00 f303 	mul.w	r3, r0, r3
 8001752:	4413      	add	r3, r2
 8001754:	440b      	add	r3, r1
 8001756:	4622      	mov	r2, r4
 8001758:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	ddd7      	ble.n	8001716 <initializeObjects+0x31e>
	}
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	e024      	b.n	80017b6 <initializeObjects+0x3be>
		lcd[obstacles[i].y][obstacles[i].x] = obstacles[i].c;
 800176c:	492e      	ldr	r1, [pc, #184]	; (8001828 <initializeObjects+0x430>)
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	492a      	ldr	r1, [pc, #168]	; (8001828 <initializeObjects+0x430>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	4c26      	ldr	r4, [pc, #152]	; (8001828 <initializeObjects+0x430>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4423      	add	r3, r4
 800179c:	3308      	adds	r3, #8
 800179e:	781c      	ldrb	r4, [r3, #0]
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <initializeObjects+0x428>)
 80017a2:	2326      	movs	r3, #38	; 0x26
 80017a4:	fb00 f303 	mul.w	r3, r0, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	4622      	mov	r2, r4
 80017ae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	ddd7      	ble.n	800176c <initializeObjects+0x374>
	}
	//WALLS
	lcd[1][1] = 3;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <initializeObjects+0x428>)
 80017be:	2203      	movs	r2, #3
 80017c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	lcd[0][22] = 3;
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <initializeObjects+0x428>)
 80017c6:	2203      	movs	r2, #3
 80017c8:	759a      	strb	r2, [r3, #22]
	lcd[1][18] = 3;
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <initializeObjects+0x428>)
 80017cc:	2203      	movs	r2, #3
 80017ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd[0][37] = 3;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <initializeObjects+0x428>)
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//[0][38] [0][39] [1][38] [1][39]  are dead
	//Wolves
	lcd[playerR.x][playerR.y] = playerR.c;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <initializeObjects+0x434>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <initializeObjects+0x434>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4912      	ldr	r1, [pc, #72]	; (800182c <initializeObjects+0x434>)
 80017e4:	7a0c      	ldrb	r4, [r1, #8]
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <initializeObjects+0x428>)
 80017e8:	2026      	movs	r0, #38	; 0x26
 80017ea:	fb00 f202 	mul.w	r2, r0, r2
 80017ee:	440a      	add	r2, r1
 80017f0:	4413      	add	r3, r2
 80017f2:	4622      	mov	r2, r4
 80017f4:	701a      	strb	r2, [r3, #0]
	lcd[playerL.x][playerL.y] = playerL.c;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <initializeObjects+0x438>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <initializeObjects+0x438>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <initializeObjects+0x438>)
 8001800:	7a0c      	ldrb	r4, [r1, #8]
 8001802:	4907      	ldr	r1, [pc, #28]	; (8001820 <initializeObjects+0x428>)
 8001804:	2026      	movs	r0, #38	; 0x26
 8001806:	fb00 f202 	mul.w	r2, r0, r2
 800180a:	440a      	add	r2, r1
 800180c:	4413      	add	r3, r2
 800180e:	4622      	mov	r2, r4
 8001810:	701a      	strb	r2, [r3, #0]
	//lcd[1][0]=8;
	//lcd[1][19]=7;
}
 8001812:	bf00      	nop
 8001814:	372c      	adds	r7, #44	; 0x2c
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	200005cc 	.word	0x200005cc
 8001820:	20000650 	.word	0x20000650
 8001824:	200005b4 	.word	0x200005b4
 8001828:	20000608 	.word	0x20000608
 800182c:	20000570 	.word	0x20000570
 8001830:	2000057c 	.word	0x2000057c

08001834 <displayObjects>:

void displayObjects() {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	// Display the objects based on the screen array
	for (int i = 0; i < LCD_HEIGHT; i++) {
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e01b      	b.n	8001878 <displayObjects+0x44>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001840:	2300      	movs	r3, #0
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	e012      	b.n	800186c <displayObjects+0x38>
			setCursor(j, i);
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f7fe ff7f 	bl	800074c <setCursor>
			write(lcd[i][j]);
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <displayObjects+0x54>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2126      	movs	r1, #38	; 0x26
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	441a      	add	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f81d 	bl	80008a0 <write>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b25      	cmp	r3, #37	; 0x25
 8001870:	dde9      	ble.n	8001846 <displayObjects+0x12>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	dde0      	ble.n	8001840 <displayObjects+0xc>
		}
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000650 	.word	0x20000650

0800188c <showMain>:

//MENU PART
void showMain(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8001890:	2100      	movs	r1, #0
 8001892:	2000      	movs	r0, #0
 8001894:	f7fe ff5a 	bl	800074c <setCursor>
	print("1- Play");
 8001898:	480a      	ldr	r0, [pc, #40]	; (80018c4 <showMain+0x38>)
 800189a:	f7fe ff9f 	bl	80007dc <print>
	setCursor(0, 1);
 800189e:	2101      	movs	r1, #1
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7fe ff53 	bl	800074c <setCursor>
	print("2- About");
 80018a6:	4808      	ldr	r0, [pc, #32]	; (80018c8 <showMain+0x3c>)
 80018a8:	f7fe ff98 	bl	80007dc <print>
	write(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7fe fff7 	bl	80008a0 <write>
	setCursor(20, 0);
 80018b2:	2100      	movs	r1, #0
 80018b4:	2014      	movs	r0, #20
 80018b6:	f7fe ff49 	bl	800074c <setCursor>
	print("3- Setting");
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <showMain+0x40>)
 80018bc:	f7fe ff8e 	bl	80007dc <print>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	080077dc 	.word	0x080077dc
 80018c8:	080077e4 	.word	0x080077e4
 80018cc:	080077f0 	.word	0x080077f0

080018d0 <showAbout>:

void showAbout(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80018d4:	2100      	movs	r1, #0
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7fe ff38 	bl	800074c <setCursor>
	print("Kimiya & Atiye");
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <showAbout+0x18>)
 80018de:	f7fe ff7d 	bl	80007dc <print>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	080077fc 	.word	0x080077fc

080018ec <showSetting>:

void showSetting(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7fe ff2a 	bl	800074c <setCursor>
	print("Right vs Left");
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <showSetting+0x34>)
 80018fa:	f7fe ff6f 	bl	80007dc <print>
	setCursor(0, 1);
 80018fe:	2101      	movs	r1, #1
 8001900:	2000      	movs	r0, #0
 8001902:	f7fe ff23 	bl	800074c <setCursor>
	print("0-Bullets");
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <showSetting+0x38>)
 8001908:	f7fe ff68 	bl	80007dc <print>
	setCursor(20, 0);
 800190c:	2100      	movs	r1, #0
 800190e:	2014      	movs	r0, #20
 8001910:	f7fe ff1c 	bl	800074c <setCursor>
	print("*-Health");
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <showSetting+0x3c>)
 8001916:	f7fe ff61 	bl	80007dc <print>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	0800780c 	.word	0x0800780c
 8001924:	0800781c 	.word	0x0800781c
 8001928:	08007828 	.word	0x08007828

0800192c <bulletsSetting>:

void bulletsSetting(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 8001932:	2101      	movs	r1, #1
 8001934:	2000      	movs	r0, #0
 8001936:	f7fe ff09 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Bullets:%d", R_bullets);
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <bulletsSetting+0x5c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4912      	ldr	r1, [pc, #72]	; (800198c <bulletsSetting+0x60>)
 8001944:	4618      	mov	r0, r3
 8001946:	f004 fce3 	bl	8006310 <siprintf>
	print(RBStr);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe ff44 	bl	80007dc <print>
	setCursor(20, 0);
 8001954:	2100      	movs	r1, #0
 8001956:	2014      	movs	r0, #20
 8001958:	f7fe fef8 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Bullets:%d", L_bullets);
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <bulletsSetting+0x64>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	463b      	mov	r3, r7
 8001962:	490c      	ldr	r1, [pc, #48]	; (8001994 <bulletsSetting+0x68>)
 8001964:	4618      	mov	r0, r3
 8001966:	f004 fcd3 	bl	8006310 <siprintf>
	print(LBStr);
 800196a:	463b      	mov	r3, r7
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe ff35 	bl	80007dc <print>
	setCursor(20, 1);
 8001972:	2101      	movs	r1, #1
 8001974:	2014      	movs	r0, #20
 8001976:	f7fe fee9 	bl	800074c <setCursor>

	print("#-Confirm");
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <bulletsSetting+0x6c>)
 800197c:	f7fe ff2e 	bl	80007dc <print>
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000568 	.word	0x20000568
 800198c:	08007834 	.word	0x08007834
 8001990:	2000056c 	.word	0x2000056c
 8001994:	08007848 	.word	0x08007848
 8001998:	08007858 	.word	0x08007858

0800199c <HealthSetting>:

void HealthSetting(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 80019a2:	2101      	movs	r1, #1
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7fe fed1 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Health:%d", R_Health);
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HealthSetting+0x5c>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4912      	ldr	r1, [pc, #72]	; (80019fc <HealthSetting+0x60>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fcab 	bl	8006310 <siprintf>
	print(RBStr);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe ff0c 	bl	80007dc <print>
	setCursor(20, 0);
 80019c4:	2100      	movs	r1, #0
 80019c6:	2014      	movs	r0, #20
 80019c8:	f7fe fec0 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Health:%d", L_Health);
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HealthSetting+0x64>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	463b      	mov	r3, r7
 80019d2:	490c      	ldr	r1, [pc, #48]	; (8001a04 <HealthSetting+0x68>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f004 fc9b 	bl	8006310 <siprintf>
	print(LBStr);
 80019da:	463b      	mov	r3, r7
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fefd 	bl	80007dc <print>
	setCursor(20, 1);
 80019e2:	2101      	movs	r1, #1
 80019e4:	2014      	movs	r0, #20
 80019e6:	f7fe feb1 	bl	800074c <setCursor>

	print("#-Confirm");
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <HealthSetting+0x6c>)
 80019ec:	f7fe fef6 	bl	80007dc <print>
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000560 	.word	0x20000560
 80019fc:	08007864 	.word	0x08007864
 8001a00:	20000564 	.word	0x20000564
 8001a04:	08007874 	.word	0x08007874
 8001a08:	08007858 	.word	0x08007858

08001a0c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b099      	sub	sp, #100	; 0x64
 8001a10:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a12:	f000 fde9 	bl	80025e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a16:	f000 f8eb 	bl	8001bf0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a1a:	f000 fa7b 	bl	8001f14 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a1e:	f000 f94f 	bl	8001cc0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001a22:	f000 f9e7 	bl	8001df4 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8001a26:	f000 fa53 	bl	8001ed0 <MX_USB_PCD_Init>
	MX_USART1_UART_Init();
 8001a2a:	f000 fa21 	bl	8001e70 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8001a2e:	f000 f987 	bl	8001d40 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a38:	485c      	ldr	r0, [pc, #368]	; (8001bac <main+0x1a0>)
 8001a3a:	f001 f979 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a44:	4859      	ldr	r0, [pc, #356]	; (8001bac <main+0x1a0>)
 8001a46:	f001 f973 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a50:	4856      	ldr	r0, [pc, #344]	; (8001bac <main+0x1a0>)
 8001a52:	f001 f96d 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5c:	4853      	ldr	r0, [pc, #332]	; (8001bac <main+0x1a0>)
 8001a5e:	f001 f967 	bl	8002d30 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, "yo", 2,
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	2202      	movs	r2, #2
 8001a68:	4951      	ldr	r1, [pc, #324]	; (8001bb0 <main+0x1a4>)
 8001a6a:	4852      	ldr	r0, [pc, #328]	; (8001bb4 <main+0x1a8>)
 8001a6c:	f003 fbb1 	bl	80051d2 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	srand(time(NULL));  // Initialize the random number generator
 8001a70:	2000      	movs	r0, #0
 8001a72:	f004 fc6d 	bl	8006350 <time>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fbdb 	bl	8006238 <srand>

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
 8001a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a86:	9303      	str	r3, [sp, #12]
 8001a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	4844      	ldr	r0, [pc, #272]	; (8001bb8 <main+0x1ac>)
 8001aa8:	f7fe fbea 	bl	8000280 <LiquidCrystal>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	byte *foxStates[4] = { leftFox, rightFox, topFox, bottomFox };
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <main+0x1b0>)
 8001aae:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	createChar(2, MisteryBox);
 8001ab8:	4941      	ldr	r1, [pc, #260]	; (8001bc0 <main+0x1b4>)
 8001aba:	2002      	movs	r0, #2
 8001abc:	f7fe feb9 	bl	8000832 <createChar>
	createChar(3, wall);
 8001ac0:	4940      	ldr	r1, [pc, #256]	; (8001bc4 <main+0x1b8>)
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	f7fe feb5 	bl	8000832 <createChar>
	createChar(4, obstacle);
 8001ac8:	493f      	ldr	r1, [pc, #252]	; (8001bc8 <main+0x1bc>)
 8001aca:	2004      	movs	r0, #4
 8001acc:	f7fe feb1 	bl	8000832 <createChar>
	createChar(1, heart);
 8001ad0:	493e      	ldr	r1, [pc, #248]	; (8001bcc <main+0x1c0>)
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7fe fead 	bl	8000832 <createChar>
	createChar(5, bullet);
 8001ad8:	493d      	ldr	r1, [pc, #244]	; (8001bd0 <main+0x1c4>)
 8001ada:	2005      	movs	r0, #5
 8001adc:	f7fe fea9 	bl	8000832 <createChar>
	RTC_TimeTypeDef mytime;
	RTC_DateTypeDef mydate;
	mydate.Year = 19;
 8001ae0:	2313      	movs	r3, #19
 8001ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	mydate.Month = 6;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mydate.Date = 5;
 8001aec:	2305      	movs	r3, #5
 8001aee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8001af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af6:	2200      	movs	r2, #0
 8001af8:	4619      	mov	r1, r3
 8001afa:	4836      	ldr	r0, [pc, #216]	; (8001bd4 <main+0x1c8>)
 8001afc:	f003 f8df 	bl	8004cbe <HAL_RTC_SetDate>
	char timeStr[20];
	char dateStr[20];
	showMain();
 8001b00:	f7ff fec4 	bl	800188c <showMain>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (screen == 2) {
 8001b04:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <main+0x1cc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d13b      	bne.n	8001b84 <main+0x178>
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	482f      	ldr	r0, [pc, #188]	; (8001bd4 <main+0x1c8>)
 8001b16:	f003 f874 	bl	8004c02 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8001b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <main+0x1c8>)
 8001b24:	f003 f94f 	bl	8004dc6 <HAL_RTC_GetDate>
			setCursor(20, 0);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2014      	movs	r0, #20
 8001b2c:	f7fe fe0e 	bl	800074c <setCursor>
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8001b30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b34:	461a      	mov	r2, r3
 8001b36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b3a:	4619      	mov	r1, r3
					mytime.Seconds);
 8001b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8001b40:	f107 0014 	add.w	r0, r7, #20
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	460b      	mov	r3, r1
 8001b48:	4924      	ldr	r1, [pc, #144]	; (8001bdc <main+0x1d0>)
 8001b4a:	f004 fbe1 	bl	8006310 <siprintf>

			print(timeStr);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fe42 	bl	80007dc <print>
			setCursor(20, 1);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2014      	movs	r0, #20
 8001b5c:	f7fe fdf6 	bl	800074c <setCursor>
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8001b60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b64:	461a      	mov	r2, r3
 8001b66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b6a:	4619      	mov	r1, r3
					mydate.Date);
 8001b6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8001b70:	4638      	mov	r0, r7
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	460b      	mov	r3, r1
 8001b76:	491a      	ldr	r1, [pc, #104]	; (8001be0 <main+0x1d4>)
 8001b78:	f004 fbca 	bl	8006310 <siprintf>

			print(dateStr);
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fe2c 	bl	80007dc <print>

		}

		if (screen == 3) {
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <main+0x1cc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d1bb      	bne.n	8001b04 <main+0xf8>
			setCursor(20, 1);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2014      	movs	r0, #20
 8001b90:	f7fe fddc 	bl	800074c <setCursor>
			if (vfx) {
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <main+0x1d8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <main+0x198>
				print("vfx on-# to turn off");
 8001b9c:	4812      	ldr	r0, [pc, #72]	; (8001be8 <main+0x1dc>)
 8001b9e:	f7fe fe1d 	bl	80007dc <print>
 8001ba2:	e7af      	b.n	8001b04 <main+0xf8>
			} else {
				print("vfx off-# to turn on");
 8001ba4:	4811      	ldr	r0, [pc, #68]	; (8001bec <main+0x1e0>)
 8001ba6:	f7fe fe19 	bl	80007dc <print>
		if (screen == 2) {
 8001baa:	e7ab      	b.n	8001b04 <main+0xf8>
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	08007884 	.word	0x08007884
 8001bb4:	200001e8 	.word	0x200001e8
 8001bb8:	48000c00 	.word	0x48000c00
 8001bbc:	080078d4 	.word	0x080078d4
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	20000020 	.word	0x20000020
 8001bc8:	20000028 	.word	0x20000028
 8001bcc:	20000010 	.word	0x20000010
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000164 	.word	0x20000164
 8001bd8:	2000055c 	.word	0x2000055c
 8001bdc:	08007888 	.word	0x08007888
 8001be0:	08007894 	.word	0x08007894
 8001be4:	20000004 	.word	0x20000004
 8001be8:	080078a4 	.word	0x080078a4
 8001bec:	080078bc 	.word	0x080078bc

08001bf0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b09e      	sub	sp, #120	; 0x78
 8001bf4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bfa:	2228      	movs	r2, #40	; 0x28
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 fb12 	bl	8006228 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001c14:	463b      	mov	r3, r7
 8001c16:	223c      	movs	r2, #60	; 0x3c
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fb04 	bl	8006228 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001c20:	230b      	movs	r3, #11
 8001c22:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c28:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c32:	2310      	movs	r3, #16
 8001c34:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c36:	2301      	movs	r3, #1
 8001c38:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c42:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c48:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fa96 	bl	8003180 <HAL_RCC_OscConfig>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <SystemClock_Config+0x6e>
		Error_Handler();
 8001c5a:	f000 fa15 	bl	8002088 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c5e:	230f      	movs	r3, #15
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c62:	2302      	movs	r3, #2
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001c74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fabe 	bl	80041fc <HAL_RCC_ClockConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SystemClock_Config+0x9a>
		Error_Handler();
 8001c86:	f000 f9ff 	bl	8002088 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <SystemClock_Config+0xcc>)
 8001c8c:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 fcdf 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xc4>
		Error_Handler();
 8001cb0:	f000 f9ea 	bl	8002088 <Error_Handler>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3778      	adds	r7, #120	; 0x78
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	00030021 	.word	0x00030021

08001cc0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <MX_I2C1_Init+0x78>)
 8001cc8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001ccc:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <MX_I2C1_Init+0x7c>)
 8001cce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001cfa:	480e      	ldr	r0, [pc, #56]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001cfc:	f001 f848 	bl	8002d90 <HAL_I2C_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001d06:	f000 f9bf 	bl	8002088 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001d0e:	f001 f8ce 	bl	8002eae <HAL_I2CEx_ConfigAnalogFilter>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001d18:	f000 f9b6 	bl	8002088 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_I2C1_Init+0x74>)
 8001d20:	f001 f910 	bl	8002f44 <HAL_I2CEx_ConfigDigitalFilter>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001d2a:	f000 f9ad 	bl	8002088 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000110 	.word	0x20000110
 8001d38:	40005400 	.word	0x40005400
 8001d3c:	2000090e 	.word	0x2000090e

08001d40 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001d54:	2300      	movs	r3, #0
 8001d56:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <MX_RTC_Init+0xac>)
 8001d5a:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <MX_RTC_Init+0xb0>)
 8001d5c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <MX_RTC_Init+0xac>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 39;
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <MX_RTC_Init+0xac>)
 8001d66:	2227      	movs	r2, #39	; 0x27
 8001d68:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 999;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <MX_RTC_Init+0xac>)
 8001d6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d70:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <MX_RTC_Init+0xac>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <MX_RTC_Init+0xac>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <MX_RTC_Init+0xac>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001d84:	4819      	ldr	r0, [pc, #100]	; (8001dec <MX_RTC_Init+0xac>)
 8001d86:	f002 fe1f 	bl	80049c8 <HAL_RTC_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_RTC_Init+0x54>
		Error_Handler();
 8001d90:	f000 f97a 	bl	8002088 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2201      	movs	r2, #1
 8001dac:	4619      	mov	r1, r3
 8001dae:	480f      	ldr	r0, [pc, #60]	; (8001dec <MX_RTC_Init+0xac>)
 8001db0:	f002 fe8d 	bl	8004ace <HAL_RTC_SetTime>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_RTC_Init+0x7e>
		Error_Handler();
 8001dba:	f000 f965 	bl	8002088 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_RTC_Init+0xac>)
 8001dd6:	f002 ff72 	bl	8004cbe <HAL_RTC_SetDate>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_RTC_Init+0xa4>
		Error_Handler();
 8001de0:	f000 f952 	bl	8002088 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000164 	.word	0x20000164
 8001df0:	40002800 	.word	0x40002800

08001df4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <MX_SPI1_Init+0x78>)
 8001dfc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e04:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e12:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e26:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e42:	2207      	movs	r2, #7
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e4e:	2208      	movs	r2, #8
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_SPI1_Init+0x74>)
 8001e54:	f003 f8c4 	bl	8004fe0 <HAL_SPI_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001e5e:	f000 f913 	bl	8002088 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000184 	.word	0x20000184
 8001e6c:	40013000 	.word	0x40013000

08001e70 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <MX_USART1_UART_Init+0x5c>)
 8001e78:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001e7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e80:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_USART1_UART_Init+0x58>)
 8001eb4:	f003 f93f 	bl	8005136 <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001ebe:	f000 f8e3 	bl	8002088 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200001e8 	.word	0x200001e8
 8001ecc:	40013800 	.word	0x40013800

08001ed0 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_USB_PCD_Init+0x3c>)
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <MX_USB_PCD_Init+0x40>)
 8001ed8:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USB_PCD_Init+0x3c>)
 8001edc:	2208      	movs	r2, #8
 8001ede:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_USB_PCD_Init+0x3c>)
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USB_PCD_Init+0x3c>)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_USB_PCD_Init+0x3c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USB_PCD_Init+0x3c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_USB_PCD_Init+0x3c>)
 8001efa:	f001 f86f 	bl	8002fdc <HAL_PCD_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8001f04:	f000 f8c0 	bl	8002088 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000270 	.word	0x20000270
 8001f10:	40005c00 	.word	0x40005c00

08001f14 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001f2a:	4b53      	ldr	r3, [pc, #332]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4a52      	ldr	r2, [pc, #328]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f34:	6153      	str	r3, [r2, #20]
 8001f36:	4b50      	ldr	r3, [pc, #320]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f4c:	6153      	str	r3, [r2, #20]
 8001f4e:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4a46      	ldr	r2, [pc, #280]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f64:	6153      	str	r3, [r2, #20]
 8001f66:	4b44      	ldr	r3, [pc, #272]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	4a40      	ldr	r2, [pc, #256]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6153      	str	r3, [r2, #20]
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <MX_GPIO_Init+0x164>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	4b35      	ldr	r3, [pc, #212]	; (8002078 <MX_GPIO_Init+0x164>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4a34      	ldr	r2, [pc, #208]	; (8002078 <MX_GPIO_Init+0x164>)
 8001fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fac:	6153      	str	r3, [r2, #20]
 8001fae:	4b32      	ldr	r3, [pc, #200]	; (8002078 <MX_GPIO_Init+0x164>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001fc0:	482e      	ldr	r0, [pc, #184]	; (800207c <MX_GPIO_Init+0x168>)
 8001fc2:	f000 feb5 	bl	8002d30 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8001fcc:	482c      	ldr	r0, [pc, #176]	; (8002080 <MX_GPIO_Init+0x16c>)
 8001fce:	f000 feaf 	bl	8002d30 <HAL_GPIO_WritePin>
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 8001fd2:	2337      	movs	r3, #55	; 0x37
 8001fd4:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fd6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fda:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4825      	ldr	r0, [pc, #148]	; (800207c <MX_GPIO_Init+0x168>)
 8001fe8:	f000 fd10 	bl	8002a0c <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 8001fec:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001ff0:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	481d      	ldr	r0, [pc, #116]	; (800207c <MX_GPIO_Init+0x168>)
 8002006:	f000 fd01 	bl	8002a0c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800200a:	2301      	movs	r3, #1
 800200c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002020:	f000 fcf4 	bl	8002a0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002024:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002028:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800202a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800202e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002030:	2302      	movs	r3, #2
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4812      	ldr	r0, [pc, #72]	; (8002084 <MX_GPIO_Init+0x170>)
 800203c:	f000 fce6 	bl	8002a0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8002040:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8002044:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4809      	ldr	r0, [pc, #36]	; (8002080 <MX_GPIO_Init+0x16c>)
 800205a:	f000 fcd7 	bl	8002a0c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2101      	movs	r1, #1
 8002062:	2028      	movs	r0, #40	; 0x28
 8002064:	f000 fc25 	bl	80028b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002068:	2028      	movs	r0, #40	; 0x28
 800206a:	f000 fc3e 	bl	80028ea <HAL_NVIC_EnableIRQ>

}
 800206e:	bf00      	nop
 8002070:	3730      	adds	r7, #48	; 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	48001000 	.word	0x48001000
 8002080:	48000c00 	.word	0x48000c00
 8002084:	48000400 	.word	0x48000400

08002088 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800208c:	b672      	cpsid	i
}
 800208e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002090:	e7fe      	b.n	8002090 <Error_Handler+0x8>
	...

08002094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_MspInit+0x44>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_MspInit+0x44>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6193      	str	r3, [r2, #24]
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_MspInit+0x44>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_MspInit+0x44>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_MspInit+0x44>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_MspInit+0x44>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80020ca:	2006      	movs	r0, #6
 80020cc:	f000 fbe6 	bl	800289c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_I2C_MspInit+0x7c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d127      	bne.n	800214e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_I2C_MspInit+0x80>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_I2C_MspInit+0x80>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6153      	str	r3, [r2, #20]
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_I2C_MspInit+0x80>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002116:	23c0      	movs	r3, #192	; 0xc0
 8002118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211a:	2312      	movs	r3, #18
 800211c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211e:	2301      	movs	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002126:	2304      	movs	r3, #4
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <HAL_I2C_MspInit+0x84>)
 8002132:	f000 fc6b 	bl	8002a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_I2C_MspInit+0x80>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_I2C_MspInit+0x80>)
 800213c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_I2C_MspInit+0x80>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40005400 	.word	0x40005400
 800215c:	40021000 	.word	0x40021000
 8002160:	48000400 	.word	0x48000400

08002164 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_RTC_MspInit+0x44>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d111      	bne.n	800219a <HAL_RTC_MspInit+0x36>
 8002176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002184:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_RTC_MspInit+0x48>)
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	461a      	mov	r2, r3
 8002196:	2301      	movs	r3, #1
 8002198:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40002800 	.word	0x40002800
 80021ac:	10908100 	.word	0x10908100

080021b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a17      	ldr	r2, [pc, #92]	; (800222c <HAL_SPI_MspInit+0x7c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d128      	bne.n	8002224 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_SPI_MspInit+0x80>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_SPI_MspInit+0x80>)
 80021d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_SPI_MspInit+0x80>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_SPI_MspInit+0x80>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_SPI_MspInit+0x80>)
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	6153      	str	r3, [r2, #20]
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_SPI_MspInit+0x80>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002202:	23e0      	movs	r3, #224	; 0xe0
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002212:	2305      	movs	r3, #5
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f000 fbf4 	bl	8002a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40013000 	.word	0x40013000
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_UART_MspInit+0x8c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12f      	bne.n	80022b6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_UART_MspInit+0x90>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	6193      	str	r3, [r2, #24]
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002278:	6153      	str	r3, [r2, #20]
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_UART_MspInit+0x90>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002286:	2330      	movs	r3, #48	; 0x30
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002296:	2307      	movs	r3, #7
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <HAL_UART_MspInit+0x94>)
 80022a2:	f000 fbb3 	bl	8002a0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2025      	movs	r0, #37	; 0x25
 80022ac:	f000 fb01 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022b0:	2025      	movs	r0, #37	; 0x25
 80022b2:	f000 fb1a 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40021000 	.word	0x40021000
 80022c8:	48000800 	.word	0x48000800

080022cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_PCD_MspInit+0x80>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d129      	bne.n	8002342 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_PCD_MspInit+0x84>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <HAL_PCD_MspInit+0x84>)
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	6153      	str	r3, [r2, #20]
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_PCD_MspInit+0x84>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002306:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800230a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002318:	230e      	movs	r3, #14
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002326:	f000 fb71 	bl	8002a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_PCD_MspInit+0x84>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_PCD_MspInit+0x84>)
 8002330:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_PCD_MspInit+0x84>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40005c00 	.word	0x40005c00
 8002350:	40021000 	.word	0x40021000

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a0:	f000 f968 	bl	8002674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <USART1_IRQHandler+0x10>)
 80023ae:	f002 ff9b 	bl	80052e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200001e8 	.word	0x200001e8

080023bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80023c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023c4:	f000 fccc 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023cc:	f000 fcc8 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80023d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023d4:	f000 fcc4 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80023d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023dc:	f000 fcc0 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_kill>:

int _kill(int pid, int sig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fe:	f003 fee9 	bl	80061d4 <__errno>
 8002402:	4603      	mov	r3, r0
 8002404:	2216      	movs	r2, #22
 8002406:	601a      	str	r2, [r3, #0]
  return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_exit>:

void _exit (int status)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffe7 	bl	80023f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002426:	e7fe      	b.n	8002426 <_exit+0x12>

08002428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e00a      	b.n	8002450 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800243a:	f3af 8000 	nop.w
 800243e:	4601      	mov	r1, r0
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	b2ca      	uxtb	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf0      	blt.n	800243a <_read+0x12>
  }

  return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e009      	b.n	8002488 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60ba      	str	r2, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	dbf1      	blt.n	8002474 <_write+0x12>
  }
  return len;
 8002490:	687b      	ldr	r3, [r7, #4]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <_close>:

int _close(int file)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c2:	605a      	str	r2, [r3, #4]
  return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_isatty>:

int _isatty(int file)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <_sbrk+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <_sbrk+0x60>)
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <_sbrk+0x64>)
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <_sbrk+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d207      	bcs.n	8002544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002534:	f003 fe4e 	bl	80061d4 <__errno>
 8002538:	4603      	mov	r3, r0
 800253a:	220c      	movs	r2, #12
 800253c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e009      	b.n	8002558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <_sbrk+0x64>)
 8002554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000a000 	.word	0x2000a000
 8002564:	00000400 	.word	0x00000400
 8002568:	200006a0 	.word	0x200006a0
 800256c:	200006b8 	.word	0x200006b8

08002570 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <SystemInit+0x20>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <SystemInit+0x20>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002598:	f7ff ffea 	bl	8002570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800259e:	490d      	ldr	r1, [pc, #52]	; (80025d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <LoopForever+0xe>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a4:	e002      	b.n	80025ac <LoopCopyDataInit>

080025a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025aa:	3304      	adds	r3, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b0:	d3f9      	bcc.n	80025a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <LoopForever+0x16>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b8:	e001      	b.n	80025be <LoopFillZerobss>

080025ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025bc:	3204      	adds	r2, #4

080025be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c0:	d3fb      	bcc.n	80025ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c2:	f003 fe0d 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025c6:	f7ff fa21 	bl	8001a0c <main>

080025ca <LoopForever>:

LoopForever:
    b LoopForever
 80025ca:	e7fe      	b.n	80025ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80025d8:	08007a9c 	.word	0x08007a9c
  ldr r2, =_sbss
 80025dc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80025e0:	200006b8 	.word	0x200006b8

080025e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC1_2_IRQHandler>
	...

080025e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_Init+0x28>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_Init+0x28>)
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f8:	2003      	movs	r0, #3
 80025fa:	f000 f94f 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fe:	2000      	movs	r0, #0
 8002600:	f000 f808 	bl	8002614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002604:	f7ff fd46 	bl	8002094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000

08002614 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x54>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_InitTick+0x58>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262a:	fbb3 f3f1 	udiv	r3, r3, r1
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f967 	bl	8002906 <HAL_SYSTICK_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00e      	b.n	8002660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b0f      	cmp	r3, #15
 8002646:	d80a      	bhi.n	800265e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002648:	2200      	movs	r2, #0
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f000 f92f 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <HAL_InitTick+0x5c>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000060 	.word	0x20000060
 800266c:	20000068 	.word	0x20000068
 8002670:	20000064 	.word	0x20000064

08002674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x20>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_IncTick+0x24>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4413      	add	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_IncTick+0x24>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000068 	.word	0x20000068
 8002698:	200006a4 	.word	0x200006a4

0800269c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;  
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_GetTick+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200006a4 	.word	0x200006a4

080026b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff ffee 	bl	800269c <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d005      	beq.n	80026da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_Delay+0x44>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026da:	bf00      	nop
 80026dc:	f7ff ffde 	bl	800269c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d8f7      	bhi.n	80026dc <HAL_Delay+0x28>
  {
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000068 	.word	0x20000068

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f7ff ff8e 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff29 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff3e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff8e 	bl	80027f0 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff31 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa2 	bl	8002858 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800292c:	2b02      	cmp	r3, #2
 800292e:	d008      	beq.n	8002942 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2204      	movs	r2, #4
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e020      	b.n	8002984 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 020e 	bic.w	r2, r2, #14
 8002950:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d005      	beq.n	80029b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2204      	movs	r2, #4
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e027      	b.n	8002a02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 020e 	bic.w	r2, r2, #14
 80029c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
    } 
  }
  return status;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1a:	e154      	b.n	8002cc6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8146 	beq.w	8002cc0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d005      	beq.n	8002a4c <HAL_GPIO_Init+0x40>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d130      	bne.n	8002aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a82:	2201      	movs	r2, #1
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0201 	and.w	r2, r3, #1
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d017      	beq.n	8002aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d123      	bne.n	8002b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	08da      	lsrs	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3208      	adds	r2, #8
 8002afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	6939      	ldr	r1, [r7, #16]
 8002b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0203 	and.w	r2, r3, #3
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80a0 	beq.w	8002cc0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b80:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <HAL_GPIO_Init+0x2d8>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_GPIO_Init+0x2d8>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6193      	str	r3, [r2, #24]
 8002b8c:	4b55      	ldr	r3, [pc, #340]	; (8002ce4 <HAL_GPIO_Init+0x2d8>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b98:	4a53      	ldr	r2, [pc, #332]	; (8002ce8 <HAL_GPIO_Init+0x2dc>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	220f      	movs	r2, #15
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bc2:	d019      	beq.n	8002bf8 <HAL_GPIO_Init+0x1ec>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a49      	ldr	r2, [pc, #292]	; (8002cec <HAL_GPIO_Init+0x2e0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_GPIO_Init+0x1e8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a48      	ldr	r2, [pc, #288]	; (8002cf0 <HAL_GPIO_Init+0x2e4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_GPIO_Init+0x1e4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a47      	ldr	r2, [pc, #284]	; (8002cf4 <HAL_GPIO_Init+0x2e8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <HAL_GPIO_Init+0x1e0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <HAL_GPIO_Init+0x2ec>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_GPIO_Init+0x1dc>
 8002be4:	2304      	movs	r3, #4
 8002be6:	e008      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002be8:	2305      	movs	r3, #5
 8002bea:	e006      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bec:	2303      	movs	r3, #3
 8002bee:	e004      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e002      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	f002 0203 	and.w	r2, r2, #3
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	4093      	lsls	r3, r2
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c0a:	4937      	ldr	r1, [pc, #220]	; (8002ce8 <HAL_GPIO_Init+0x2dc>)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c18:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c3c:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c90:	4a1a      	ldr	r2, [pc, #104]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_GPIO_Init+0x2f0>)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f47f aea3 	bne.w	8002a1c <HAL_GPIO_Init+0x10>
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	48000400 	.word	0x48000400
 8002cf0:	48000800 	.word	0x48000800
 8002cf4:	48000c00 	.word	0x48000c00
 8002cf8:	48001000 	.word	0x48001000
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e001      	b.n	8002d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fe5a 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40010400 	.word	0x40010400

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e081      	b.n	8002ea6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff f990 	bl	80020dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002de0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e006      	b.n	8002e18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d104      	bne.n	8002e2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69d9      	ldr	r1, [r3, #28]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d138      	bne.n	8002f36 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e032      	b.n	8002f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2224      	movs	r2, #36	; 0x24
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d139      	bne.n	8002fce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e033      	b.n	8002fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	; 0x24
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fde:	b08b      	sub	sp, #44	; 0x2c
 8002fe0:	af06      	add	r7, sp, #24
 8002fe2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e0c4      	b.n	8003178 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff f962 	bl	80022cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2203      	movs	r2, #3
 800300c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 f8a0 	bl	800615a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	e040      	b.n	80030a2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3301      	adds	r3, #1
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3303      	adds	r3, #3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	3338      	adds	r3, #56	; 0x38
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	333c      	adds	r3, #60	; 0x3c
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	3340      	adds	r3, #64	; 0x40
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	3301      	adds	r3, #1
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3b9      	bcc.n	8003020 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e044      	b.n	800313c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	3301      	adds	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	7bfa      	ldrb	r2, [r7, #15]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d3b5      	bcc.n	80030b2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	687e      	ldr	r6, [r7, #4]
 800314e:	466d      	mov	r5, sp
 8003150:	f106 0410 	add.w	r4, r6, #16
 8003154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	1d33      	adds	r3, r6, #4
 800315e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003160:	6838      	ldr	r0, [r7, #0]
 8003162:	f003 f815 	bl	8006190 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003186:	af00      	add	r7, sp, #0
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003190:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f001 b823 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 817d 	beq.w	80034b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031bc:	4bbc      	ldr	r3, [pc, #752]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c8:	4bb9      	ldr	r3, [pc, #740]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d15c      	bne.n	800328e <HAL_RCC_OscConfig+0x10e>
 80031d4:	4bb6      	ldr	r3, [pc, #728]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d155      	bne.n	800328e <HAL_RCC_OscConfig+0x10e>
 80031e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80031f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d102      	bne.n	8003214 <HAL_RCC_OscConfig+0x94>
 800320e:	4ba8      	ldr	r3, [pc, #672]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	e015      	b.n	8003240 <HAL_RCC_OscConfig+0xc0>
 8003214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003218:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003230:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800323c:	4b9c      	ldr	r3, [pc, #624]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003244:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003248:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003254:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0220 	orr.w	r2, r2, #32
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 811f 	beq.w	80034b4 <HAL_RCC_OscConfig+0x334>
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 8116 	bne.w	80034b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f000 bfaf 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x12e>
 80032a0:	4b83      	ldr	r3, [pc, #524]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a82      	ldr	r2, [pc, #520]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e036      	b.n	800331c <HAL_RCC_OscConfig+0x19c>
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x158>
 80032be:	4b7c      	ldr	r3, [pc, #496]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7b      	ldr	r2, [pc, #492]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b79      	ldr	r3, [pc, #484]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a78      	ldr	r2, [pc, #480]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e021      	b.n	800331c <HAL_RCC_OscConfig+0x19c>
 80032d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x184>
 80032ea:	4b71      	ldr	r3, [pc, #452]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a70      	ldr	r2, [pc, #448]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b6e      	ldr	r3, [pc, #440]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6d      	ldr	r2, [pc, #436]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0x19c>
 8003304:	4b6a      	ldr	r3, [pc, #424]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 800330a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a66      	ldr	r2, [pc, #408]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331c:	4b64      	ldr	r3, [pc, #400]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f023 020f 	bic.w	r2, r3, #15
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	495f      	ldr	r1, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003332:	4313      	orrs	r3, r2
 8003334:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d059      	beq.n	80033fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7ff f9a9 	bl	800269c <HAL_GetTick>
 800334a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003350:	f7ff f9a4 	bl	800269c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	; 0x64
 800335e:	d902      	bls.n	8003366 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	f000 bf43 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
 8003366:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800336a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800337a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d102      	bne.n	8003398 <HAL_RCC_OscConfig+0x218>
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e015      	b.n	80033c4 <HAL_RCC_OscConfig+0x244>
 8003398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80033c0:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80033cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033d0:	fa92 f2a2 	rbit	r2, r2
 80033d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80033d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80033dc:	fab2 f282 	clz	r2, r2
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	f042 0220 	orr.w	r2, r2, #32
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f002 021f 	and.w	r2, r2, #31
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f202 	lsl.w	r2, r1, r2
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ab      	beq.n	8003350 <HAL_RCC_OscConfig+0x1d0>
 80033f8:	e05d      	b.n	80034b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7ff f94f 	bl	800269c <HAL_GetTick>
 80033fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7ff f94a 	bl	800269c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b64      	cmp	r3, #100	; 0x64
 8003412:	d902      	bls.n	800341a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	f000 bee9 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
 800341a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800342e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <HAL_RCC_OscConfig+0x2cc>
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	e015      	b.n	8003478 <HAL_RCC_OscConfig+0x2f8>
 800344c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003450:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003464:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003468:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_RCC_OscConfig+0x330>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800347c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003480:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003484:	fa92 f2a2 	rbit	r2, r2
 8003488:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800348c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	f042 0220 	orr.w	r2, r2, #32
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f002 021f 	and.w	r2, r2, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ab      	bne.n	8003404 <HAL_RCC_OscConfig+0x284>
 80034ac:	e003      	b.n	80034b6 <HAL_RCC_OscConfig+0x336>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 817d 	beq.w	80037c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034cc:	4ba6      	ldr	r3, [pc, #664]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034d8:	4ba3      	ldr	r3, [pc, #652]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d172      	bne.n	80035ca <HAL_RCC_OscConfig+0x44a>
 80034e4:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d16c      	bne.n	80035ca <HAL_RCC_OscConfig+0x44a>
 80034f0:	2302      	movs	r3, #2
 80034f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003502:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d102      	bne.n	8003520 <HAL_RCC_OscConfig+0x3a0>
 800351a:	4b93      	ldr	r3, [pc, #588]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e013      	b.n	8003548 <HAL_RCC_OscConfig+0x3c8>
 8003520:	2302      	movs	r3, #2
 8003522:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003532:	2302      	movs	r3, #2
 8003534:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003538:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003544:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	2202      	movs	r2, #2
 800354a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800354e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003552:	fa92 f2a2 	rbit	r2, r2
 8003556:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800355a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800355e:	fab2 f282 	clz	r2, r2
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	f042 0220 	orr.w	r2, r2, #32
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f002 021f 	and.w	r2, r2, #31
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCC_OscConfig+0x410>
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f000 be2e 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b75      	ldr	r3, [pc, #468]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	21f8      	movs	r1, #248	; 0xf8
 80035a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035ae:	fa91 f1a1 	rbit	r1, r1
 80035b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035ba:	fab1 f181 	clz	r1, r1
 80035be:	b2c9      	uxtb	r1, r1
 80035c0:	408b      	lsls	r3, r1
 80035c2:	4969      	ldr	r1, [pc, #420]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c8:	e0fd      	b.n	80037c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8088 	beq.w	80036ec <HAL_RCC_OscConfig+0x56c>
 80035dc:	2301      	movs	r3, #1
 80035de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80035ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	461a      	mov	r2, r3
 8003604:	2301      	movs	r3, #1
 8003606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7ff f848 	bl	800269c <HAL_GetTick>
 800360c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003612:	f7ff f843 	bl	800269c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d902      	bls.n	8003628 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	f000 bde2 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
 8003628:	2302      	movs	r3, #2
 800362a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800363a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HAL_RCC_OscConfig+0x4d8>
 8003652:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	e013      	b.n	8003680 <HAL_RCC_OscConfig+0x500>
 8003658:	2302      	movs	r3, #2
 800365a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800366a:	2302      	movs	r3, #2
 800366c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003670:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800367c:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2202      	movs	r2, #2
 8003682:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003686:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800368a:	fa92 f2a2 	rbit	r2, r2
 800368e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003692:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003696:	fab2 f282 	clz	r2, r2
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f042 0220 	orr.w	r2, r2, #32
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f002 021f 	and.w	r2, r2, #31
 80036a6:	2101      	movs	r1, #1
 80036a8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0af      	beq.n	8003612 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	21f8      	movs	r1, #248	; 0xf8
 80036c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036d0:	fa91 f1a1 	rbit	r1, r1
 80036d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80036d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036dc:	fab1 f181 	clz	r1, r1
 80036e0:	b2c9      	uxtb	r1, r1
 80036e2:	408b      	lsls	r3, r1
 80036e4:	4920      	ldr	r1, [pc, #128]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
 80036ea:	e06c      	b.n	80037c6 <HAL_RCC_OscConfig+0x646>
 80036ec:	2301      	movs	r3, #1
 80036ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80036fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800370c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	461a      	mov	r2, r3
 8003714:	2300      	movs	r3, #0
 8003716:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe ffc0 	bl	800269c <HAL_GetTick>
 800371c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003722:	f7fe ffbb 	bl	800269c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	f000 bd5a 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
 8003738:	2302      	movs	r3, #2
 800373a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800374a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d104      	bne.n	800376c <HAL_RCC_OscConfig+0x5ec>
 8003762:	4b01      	ldr	r3, [pc, #4]	; (8003768 <HAL_RCC_OscConfig+0x5e8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e015      	b.n	8003794 <HAL_RCC_OscConfig+0x614>
 8003768:	40021000 	.word	0x40021000
 800376c:	2302      	movs	r3, #2
 800376e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800377e:	2302      	movs	r3, #2
 8003780:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003784:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003790:	4bc8      	ldr	r3, [pc, #800]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2202      	movs	r2, #2
 8003796:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800379a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800379e:	fa92 f2a2 	rbit	r2, r2
 80037a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037aa:	fab2 f282 	clz	r2, r2
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f042 0220 	orr.w	r2, r2, #32
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f002 021f 	and.w	r2, r2, #31
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ad      	bne.n	8003722 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8110 	beq.w	80039fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d079      	beq.n	80038e0 <HAL_RCC_OscConfig+0x760>
 80037ec:	2301      	movs	r3, #1
 80037ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	4bab      	ldr	r3, [pc, #684]	; (8003ab8 <HAL_RCC_OscConfig+0x938>)
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	461a      	mov	r2, r3
 8003812:	2301      	movs	r3, #1
 8003814:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe ff41 	bl	800269c <HAL_GetTick>
 800381a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe ff3c 	bl	800269c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d902      	bls.n	8003836 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	f000 bcdb 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
 8003836:	2302      	movs	r3, #2
 8003838:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003850:	2202      	movs	r2, #2
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003858:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f2a3 	rbit	r2, r3
 8003862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003874:	2202      	movs	r2, #2
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800388e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003890:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800389c:	2102      	movs	r1, #2
 800389e:	6019      	str	r1, [r3, #0]
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	fa93 f1a3 	rbit	r1, r3
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038b6:	6019      	str	r1, [r3, #0]
  return result;
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0a0      	beq.n	8003820 <HAL_RCC_OscConfig+0x6a0>
 80038de:	e08d      	b.n	80039fc <HAL_RCC_OscConfig+0x87c>
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003902:	601a      	str	r2, [r3, #0]
  return result;
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800390c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	4b68      	ldr	r3, [pc, #416]	; (8003ab8 <HAL_RCC_OscConfig+0x938>)
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	461a      	mov	r2, r3
 800391e:	2300      	movs	r3, #0
 8003920:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe febb 	bl	800269c <HAL_GetTick>
 8003926:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe feb6 	bl	800269c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d902      	bls.n	8003942 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	f000 bc55 	b.w	80041ec <HAL_RCC_OscConfig+0x106c>
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800394a:	2202      	movs	r2, #2
 800394c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fa93 f2a3 	rbit	r2, r3
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800396e:	2202      	movs	r2, #2
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003992:	2202      	movs	r2, #2
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fa93 f2a3 	rbit	r2, r3
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ae:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 80039b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039ba:	2102      	movs	r1, #2
 80039bc:	6019      	str	r1, [r3, #0]
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	fa93 f1a3 	rbit	r1, r3
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039d4:	6019      	str	r1, [r3, #0]
  return result;
 80039d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d197      	bne.n	800392c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 81a1 	beq.w	8003d54 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a18:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d116      	bne.n	8003a52 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	61d3      	str	r3, [r2, #28]
 8003a30:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a46:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a4a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_OscConfig+0x93c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <HAL_RCC_OscConfig+0x93c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a16      	ldr	r2, [pc, #88]	; (8003abc <HAL_RCC_OscConfig+0x93c>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fe17 	bl	800269c <HAL_GetTick>
 8003a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a72:	e009      	b.n	8003a88 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a74:	f7fe fe12 	bl	800269c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	; 0x64
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e3b1      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_RCC_OscConfig+0x93c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ef      	beq.n	8003a74 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x940>
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a02      	ldr	r2, [pc, #8]	; (8003ab4 <HAL_RCC_OscConfig+0x934>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	e03c      	b.n	8003b2c <HAL_RCC_OscConfig+0x9ac>
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	10908120 	.word	0x10908120
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10c      	bne.n	8003aea <HAL_RCC_OscConfig+0x96a>
 8003ad0:	4bc1      	ldr	r3, [pc, #772]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4ac0      	ldr	r2, [pc, #768]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6213      	str	r3, [r2, #32]
 8003adc:	4bbe      	ldr	r3, [pc, #760]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4abd      	ldr	r2, [pc, #756]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	6213      	str	r3, [r2, #32]
 8003ae8:	e020      	b.n	8003b2c <HAL_RCC_OscConfig+0x9ac>
 8003aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x994>
 8003afa:	4bb7      	ldr	r3, [pc, #732]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4ab6      	ldr	r2, [pc, #728]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	6213      	str	r3, [r2, #32]
 8003b06:	4bb4      	ldr	r3, [pc, #720]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4ab3      	ldr	r2, [pc, #716]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6213      	str	r3, [r2, #32]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0x9ac>
 8003b14:	4bb0      	ldr	r3, [pc, #704]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4aaf      	ldr	r2, [pc, #700]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	4bad      	ldr	r3, [pc, #692]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4aac      	ldr	r2, [pc, #688]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8081 	beq.w	8003c40 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fdad 	bl	800269c <HAL_GetTick>
 8003b42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fe fda8 	bl	800269c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e345      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
 8003b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b68:	2202      	movs	r2, #2
 8003b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	fa93 f2a3 	rbit	r2, r3
 8003b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	fa93 f2a3 	rbit	r2, r3
 8003b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ba6:	601a      	str	r2, [r3, #0]
  return result;
 8003ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d102      	bne.n	8003bcc <HAL_RCC_OscConfig+0xa4c>
 8003bc6:	4b84      	ldr	r3, [pc, #528]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	e013      	b.n	8003bf4 <HAL_RCC_OscConfig+0xa74>
 8003bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fa93 f2a3 	rbit	r2, r3
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	4b79      	ldr	r3, [pc, #484]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bf8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	6011      	str	r1, [r2, #0]
 8003c00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	fa92 f1a2 	rbit	r1, r2
 8003c0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c16:	6011      	str	r1, [r2, #0]
  return result;
 8003c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c1c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f002 021f 	and.w	r2, r2, #31
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d084      	beq.n	8003b48 <HAL_RCC_OscConfig+0x9c8>
 8003c3e:	e07f      	b.n	8003d40 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7fe fd2c 	bl	800269c <HAL_GetTick>
 8003c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	e00b      	b.n	8003c62 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fe fd27 	bl	800269c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e2c4      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c8e:	2202      	movs	r2, #2
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	fa93 f2a3 	rbit	r2, r3
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ca8:	601a      	str	r2, [r3, #0]
  return result;
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f043 0302 	orr.w	r3, r3, #2
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d102      	bne.n	8003cce <HAL_RCC_OscConfig+0xb4e>
 8003cc8:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	e013      	b.n	8003cf6 <HAL_RCC_OscConfig+0xb76>
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	fa93 f2a3 	rbit	r2, r3
 8003ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003cfe:	2102      	movs	r1, #2
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	fa92 f1a2 	rbit	r1, r2
 8003d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d18:	6011      	str	r1, [r2, #0]
  return result;
 8003d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d1e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	fab2 f282 	clz	r2, r2
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f002 021f 	and.w	r2, r2, #31
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d184      	bne.n	8003c4a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d40:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8242 	beq.w	80041ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <HAL_RCC_OscConfig+0xc58>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	f000 8213 	beq.w	800419a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	f040 8162 	bne.w	800404a <HAL_RCC_OscConfig+0xeca>
 8003d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003d8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	fa93 f2a3 	rbit	r2, r3
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003daa:	601a      	str	r2, [r3, #0]
  return result;
 8003dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003db4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe fc66 	bl	800269c <HAL_GetTick>
 8003dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCC_OscConfig+0xc70>
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fe fc5e 	bl	800269c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e1fd      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
 8003df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fa93 f2a3 	rbit	r2, r3
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e14:	601a      	str	r2, [r3, #0]
  return result;
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e20:	fab3 f383 	clz	r3, r3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_OscConfig+0xcba>
 8003e34:	4bb0      	ldr	r3, [pc, #704]	; (80040f8 <HAL_RCC_OscConfig+0xf78>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	e027      	b.n	8003e8a <HAL_RCC_OscConfig+0xd0a>
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	fa93 f2a3 	rbit	r2, r3
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	4b9c      	ldr	r3, [pc, #624]	; (80040f8 <HAL_RCC_OscConfig+0xf78>)
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e8e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003e92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e96:	6011      	str	r1, [r2, #0]
 8003e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e9c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	fa92 f1a2 	rbit	r1, r2
 8003ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eaa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003eae:	6011      	str	r1, [r2, #0]
  return result;
 8003eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	fab2 f282 	clz	r2, r2
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	f042 0220 	orr.w	r2, r2, #32
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	f002 021f 	and.w	r2, r2, #31
 8003eca:	2101      	movs	r1, #1
 8003ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d182      	bne.n	8003ddc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0xf78>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	430b      	orrs	r3, r1
 8003ef8:	497f      	ldr	r1, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0xf78>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	fa93 f2a3 	rbit	r2, r3
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f22:	601a      	str	r2, [r3, #0]
  return result;
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2301      	movs	r3, #1
 8003f42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fe fbaa 	bl	800269c <HAL_GetTick>
 8003f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f4c:	e009      	b.n	8003f62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fe fba5 	bl	800269c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e144      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fa93 f2a3 	rbit	r2, r3
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f86:	601a      	str	r2, [r3, #0]
  return result;
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d102      	bne.n	8003fac <HAL_RCC_OscConfig+0xe2c>
 8003fa6:	4b54      	ldr	r3, [pc, #336]	; (80040f8 <HAL_RCC_OscConfig+0xf78>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	e027      	b.n	8003ffc <HAL_RCC_OscConfig+0xe7c>
 8003fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fa93 f2a3 	rbit	r2, r3
 8003fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fcc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003fda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	fa93 f2a3 	rbit	r2, r3
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <HAL_RCC_OscConfig+0xf78>)
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004000:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004004:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800400e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	fa92 f1a2 	rbit	r1, r2
 8004018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800401c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004020:	6011      	str	r1, [r2, #0]
  return result;
 8004022:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004026:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	fab2 f282 	clz	r2, r2
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	f042 0220 	orr.w	r2, r2, #32
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	f002 021f 	and.w	r2, r2, #31
 800403c:	2101      	movs	r1, #1
 800403e:	fa01 f202 	lsl.w	r2, r1, r2
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d082      	beq.n	8003f4e <HAL_RCC_OscConfig+0xdce>
 8004048:	e0cf      	b.n	80041ea <HAL_RCC_OscConfig+0x106a>
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004052:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	fa93 f2a3 	rbit	r2, r3
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800406e:	601a      	str	r2, [r3, #0]
  return result;
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004078:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004084:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fe fb04 	bl	800269c <HAL_GetTick>
 8004094:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004098:	e009      	b.n	80040ae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe faff 	bl	800269c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e09e      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	fa93 f2a3 	rbit	r2, r3
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040d2:	601a      	str	r2, [r3, #0]
  return result;
 80040d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d104      	bne.n	80040fc <HAL_RCC_OscConfig+0xf7c>
 80040f2:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <HAL_RCC_OscConfig+0xf78>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	e029      	b.n	800414c <HAL_RCC_OscConfig+0xfcc>
 80040f8:	40021000 	.word	0x40021000
 80040fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004100:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fa93 f2a3 	rbit	r2, r3
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004126:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800412a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004134:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	fa93 f2a3 	rbit	r2, r3
 800413e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004142:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_OscConfig+0x1078>)
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004150:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004154:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004158:	6011      	str	r1, [r2, #0]
 800415a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800415e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	fa92 f1a2 	rbit	r1, r2
 8004168:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800416c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004170:	6011      	str	r1, [r2, #0]
  return result;
 8004172:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004176:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	fab2 f282 	clz	r2, r2
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	f042 0220 	orr.w	r2, r2, #32
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f002 021f 	and.w	r2, r2, #31
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f202 	lsl.w	r2, r1, r2
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d180      	bne.n	800409a <HAL_RCC_OscConfig+0xf1a>
 8004198:	e027      	b.n	80041ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e01e      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_RCC_OscConfig+0x1078>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d10b      	bne.n	80041e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80041ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000

080041fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b09e      	sub	sp, #120	; 0x78
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e162      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004214:	4b90      	ldr	r3, [pc, #576]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d910      	bls.n	8004244 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b8d      	ldr	r3, [pc, #564]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	498b      	ldr	r1, [pc, #556]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e14a      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b82      	ldr	r3, [pc, #520]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	497f      	ldr	r1, [pc, #508]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80dc 	beq.w	8004428 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d13c      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xf6>
 8004278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800427c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d102      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xa6>
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	e00f      	b.n	80042c2 <HAL_RCC_ClockConfig+0xc6>
 80042a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	667b      	str	r3, [r7, #100]	; 0x64
 80042b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042b4:	663b      	str	r3, [r7, #96]	; 0x60
 80042b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042be:	4b67      	ldr	r3, [pc, #412]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80042c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ca:	fa92 f2a2 	rbit	r2, r2
 80042ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80042d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042d2:	fab2 f282 	clz	r2, r2
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f042 0220 	orr.w	r2, r2, #32
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f002 021f 	and.w	r2, r2, #31
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d17b      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0f3      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d13c      	bne.n	8004374 <HAL_RCC_ClockConfig+0x178>
 80042fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <HAL_RCC_ClockConfig+0x128>
 800431e:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	e00f      	b.n	8004344 <HAL_RCC_ClockConfig+0x148>
 8004324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	647b      	str	r3, [r7, #68]	; 0x44
 8004332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004336:	643b      	str	r3, [r7, #64]	; 0x40
 8004338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004340:	4b46      	ldr	r3, [pc, #280]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004348:	63ba      	str	r2, [r7, #56]	; 0x38
 800434a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434c:	fa92 f2a2 	rbit	r2, r2
 8004350:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004354:	fab2 f282 	clz	r2, r2
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f042 0220 	orr.w	r2, r2, #32
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f002 021f 	and.w	r2, r2, #31
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f202 	lsl.w	r2, r1, r2
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d13a      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0b2      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
 8004374:	2302      	movs	r3, #2
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_RCC_ClockConfig+0x1a0>
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	e00d      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1bc>
 800439c:	2302      	movs	r3, #2
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	2302      	movs	r3, #2
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2202      	movs	r2, #2
 80043ba:	61ba      	str	r2, [r7, #24]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	fa92 f2a2 	rbit	r2, r2
 80043c2:	617a      	str	r2, [r7, #20]
  return result;
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	fab2 f282 	clz	r2, r2
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	f042 0220 	orr.w	r2, r2, #32
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f002 021f 	and.w	r2, r2, #31
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e079      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	491a      	ldr	r1, [pc, #104]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f8:	f7fe f950 	bl	800269c <HAL_GetTick>
 80043fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fe f94c 	bl	800269c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e061      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d214      	bcs.n	8004460 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	4906      	ldr	r1, [pc, #24]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d005      	beq.n	8004460 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e040      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
 8004458:	40022000 	.word	0x40022000
 800445c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	491a      	ldr	r1, [pc, #104]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4912      	ldr	r1, [pc, #72]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800449e:	f000 f829 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044a2:	4601      	mov	r1, r0
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ac:	22f0      	movs	r2, #240	; 0xf0
 80044ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	fa92 f2a2 	rbit	r2, r2
 80044b6:	60fa      	str	r2, [r7, #12]
  return result;
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	fab2 f282 	clz	r2, r2
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	40d3      	lsrs	r3, r2
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <HAL_RCC_ClockConfig+0x2ec>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	fa21 f303 	lsr.w	r3, r1, r3
 80044ca:	4a08      	ldr	r2, [pc, #32]	; (80044ec <HAL_RCC_ClockConfig+0x2f0>)
 80044cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCC_ClockConfig+0x2f4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe f89e 	bl	8002614 <HAL_InitTick>
  
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3778      	adds	r7, #120	; 0x78
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08007914 	.word	0x08007914
 80044ec:	20000060 	.word	0x20000060
 80044f0:	20000064 	.word	0x20000064

080044f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b08b      	sub	sp, #44	; 0x2c
 80044f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800450e:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b04      	cmp	r3, #4
 800451c:	d002      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x30>
 800451e:	2b08      	cmp	r3, #8
 8004520:	d003      	beq.n	800452a <HAL_RCC_GetSysClockFreq+0x36>
 8004522:	e03c      	b.n	800459e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004526:	623b      	str	r3, [r7, #32]
      break;
 8004528:	e03c      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004530:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004534:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	fa92 f2a2 	rbit	r2, r2
 800453c:	607a      	str	r2, [r7, #4]
  return result;
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	fab2 f282 	clz	r2, r2
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	40d3      	lsrs	r3, r2
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	220f      	movs	r2, #15
 8004558:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	fa92 f2a2 	rbit	r2, r2
 8004560:	60fa      	str	r2, [r7, #12]
  return result;
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	fab2 f282 	clz	r2, r2
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	40d3      	lsrs	r3, r2
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	fbb2 f2f3 	udiv	r2, r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e004      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	623b      	str	r3, [r7, #32]
      break;
 800459c:	e002      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045a0:	623b      	str	r3, [r7, #32]
      break;
 80045a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a4:	6a3b      	ldr	r3, [r7, #32]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	372c      	adds	r7, #44	; 0x2c
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	007a1200 	.word	0x007a1200
 80045bc:	0800792c 	.word	0x0800792c
 80045c0:	0800793c 	.word	0x0800793c
 80045c4:	003d0900 	.word	0x003d0900

080045c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000060 	.word	0x20000060

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045e6:	f7ff ffef 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045ea:	4601      	mov	r1, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	603a      	str	r2, [r7, #0]
  return result;
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	40d3      	lsrs	r3, r2
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x40>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	08007924 	.word	0x08007924

08004624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800462a:	f7ff ffcd 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004638:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800463c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	603a      	str	r2, [r7, #0]
  return result;
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	08007924 	.word	0x08007924

08004668 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b092      	sub	sp, #72	; 0x48
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80d4 	beq.w	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10e      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a2:	61d3      	str	r3, [r2, #28]
 80046a4:	4b48      	ldr	r3, [pc, #288]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d118      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c2:	4b42      	ldr	r3, [pc, #264]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a41      	ldr	r2, [pc, #260]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ce:	f7fd ffe5 	bl	800269c <HAL_GetTick>
 80046d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	e008      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d6:	f7fd ffe1 	bl	800269c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b64      	cmp	r3, #100	; 0x64
 80046e2:	d901      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e169      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e8:	4b38      	ldr	r3, [pc, #224]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8084 	beq.w	800480e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004710:	429a      	cmp	r2, r3
 8004712:	d07c      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004714:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800471e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	461a      	mov	r2, r3
 800473e:	2301      	movs	r3, #1
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	461a      	mov	r2, r3
 8004762:	2300      	movs	r3, #0
 8004764:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d04b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fd ff91 	bl	800269c <HAL_GetTick>
 800477a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fd ff8d 	bl	800269c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f241 3288 	movw	r2, #5000	; 0x1388
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e113      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004794:	2302      	movs	r3, #2
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	2302      	movs	r3, #2
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	61fb      	str	r3, [r7, #28]
  return result;
 80047ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d108      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047c2:	4b01      	ldr	r3, [pc, #4]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	e00d      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40007000 	.word	0x40007000
 80047d0:	10908100 	.word	0x10908100
 80047d4:	2302      	movs	r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	4b78      	ldr	r3, [pc, #480]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2202      	movs	r2, #2
 80047e6:	613a      	str	r2, [r7, #16]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	fa92 f2a2 	rbit	r2, r2
 80047ee:	60fa      	str	r2, [r7, #12]
  return result;
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	fab2 f282 	clz	r2, r2
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	f002 021f 	and.w	r2, r2, #31
 8004802:	2101      	movs	r1, #1
 8004804:	fa01 f202 	lsl.w	r2, r1, r2
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0b7      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800480e:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	496a      	ldr	r1, [pc, #424]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004820:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	4a65      	ldr	r2, [pc, #404]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004832:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004840:	4b60      	ldr	r3, [pc, #384]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f023 0203 	bic.w	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	495d      	ldr	r1, [pc, #372]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485e:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	4956      	ldr	r1, [pc, #344]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800487c:	4b51      	ldr	r3, [pc, #324]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	494e      	ldr	r1, [pc, #312]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800489a:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f023 0210 	bic.w	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4947      	ldr	r1, [pc, #284]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048b8:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	493f      	ldr	r1, [pc, #252]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f023 0220 	bic.w	r2, r3, #32
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4938      	ldr	r1, [pc, #224]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f4:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4930      	ldr	r1, [pc, #192]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004912:	4b2c      	ldr	r3, [pc, #176]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	4929      	ldr	r1, [pc, #164]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004930:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4921      	ldr	r1, [pc, #132]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	491a      	ldr	r1, [pc, #104]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495c:	4313      	orrs	r3, r2
 800495e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800496c:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	4912      	ldr	r1, [pc, #72]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	490b      	ldr	r1, [pc, #44]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	4903      	ldr	r1, [pc, #12]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3748      	adds	r7, #72	; 0x48
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e073      	b.n	8004ac6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7f5b      	ldrb	r3, [r3, #29]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fbb8 	bl	8002164 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d055      	beq.n	8004ab4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	22ca      	movs	r2, #202	; 0xca
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2253      	movs	r2, #83	; 0x53
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa49 	bl	8004eb0 <RTC_EnterInitMode>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d12c      	bne.n	8004a82 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6919      	ldr	r1, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	041a      	lsls	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fa50 	bl	8004f1e <RTC_ExitInitMode>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d110      	bne.n	8004aaa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	22ff      	movs	r2, #255	; 0xff
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ab2:	e001      	b.n	8004ab8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ace:	b590      	push	{r4, r7, lr}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	7f1b      	ldrb	r3, [r3, #28]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_RTC_SetTime+0x1c>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e087      	b.n	8004bfa <HAL_RTC_SetTime+0x12c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2202      	movs	r2, #2
 8004af4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d126      	bne.n	8004b4a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa27 	bl	8004f68 <RTC_ByteToBcd2>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa20 	bl	8004f68 <RTC_ByteToBcd2>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b2c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fa18 	bl	8004f68 <RTC_ByteToBcd2>
 8004b38:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b3a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	78db      	ldrb	r3, [r3, #3]
 8004b42:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e018      	b.n	8004b7c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b6a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b70:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	78db      	ldrb	r3, [r3, #3]
 8004b76:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	22ca      	movs	r2, #202	; 0xca
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2253      	movs	r2, #83	; 0x53
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f98f 	bl	8004eb0 <RTC_EnterInitMode>
 8004b92:	4603      	mov	r3, r0
 8004b94:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d120      	bne.n	8004bde <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ba6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6899      	ldr	r1, [r3, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f9a2 	bl	8004f1e <RTC_ExitInitMode>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004bde:	7cfb      	ldrb	r3, [r7, #19]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	22ff      	movs	r2, #255	; 0xff
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]

  return status;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd90      	pop	{r4, r7, pc}

08004c02 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004c34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c38:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	0d9b      	lsrs	r3, r3, #22
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11a      	bne.n	8004cb4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f98e 	bl	8004fa4 <RTC_Bcd2ToByte>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f985 	bl	8004fa4 <RTC_Bcd2ToByte>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	789b      	ldrb	r3, [r3, #2]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f97c 	bl	8004fa4 <RTC_Bcd2ToByte>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cbe:	b590      	push	{r4, r7, lr}
 8004cc0:	b087      	sub	sp, #28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	7f1b      	ldrb	r3, [r3, #28]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_RTC_SetDate+0x1c>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e071      	b.n	8004dbe <HAL_RTC_SetDate+0x100>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10e      	bne.n	8004d0a <HAL_RTC_SetDate+0x4c>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	785b      	ldrb	r3, [r3, #1]
 8004cfc:	f023 0310 	bic.w	r3, r3, #16
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	330a      	adds	r3, #10
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d11c      	bne.n	8004d4a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	78db      	ldrb	r3, [r3, #3]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f927 	bl	8004f68 <RTC_ByteToBcd2>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f920 	bl	8004f68 <RTC_ByteToBcd2>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d2c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	789b      	ldrb	r3, [r3, #2]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f918 	bl	8004f68 <RTC_ByteToBcd2>
 8004d38:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004d3a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e00e      	b.n	8004d68 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	78db      	ldrb	r3, [r3, #3]
 8004d4e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d56:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004d5c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	22ca      	movs	r2, #202	; 0xca
 8004d6e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2253      	movs	r2, #83	; 0x53
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f899 	bl	8004eb0 <RTC_EnterInitMode>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10c      	bne.n	8004da2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d96:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f8c0 	bl	8004f1e <RTC_ExitInitMode>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004da2:	7cfb      	ldrb	r3, [r7, #19]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	22ff      	movs	r2, #255	; 0xff
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]

  return status;
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd90      	pop	{r4, r7, pc}

08004dc6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b086      	sub	sp, #24
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004de0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004de4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	0b5b      	lsrs	r3, r3, #13
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d11a      	bne.n	8004e5a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	78db      	ldrb	r3, [r3, #3]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f8bb 	bl	8004fa4 <RTC_Bcd2ToByte>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f8b2 	bl	8004fa4 <RTC_Bcd2ToByte>
 8004e40:	4603      	mov	r3, r0
 8004e42:	461a      	mov	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	789b      	ldrb	r3, [r3, #2]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f8a9 	bl	8004fa4 <RTC_Bcd2ToByte>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0d      	ldr	r2, [pc, #52]	; (8004eac <HAL_RTC_WaitForSynchro+0x48>)
 8004e76:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e78:	f7fd fc10 	bl	800269c <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e7e:	e009      	b.n	8004e94 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e80:	f7fd fc0c 	bl	800269c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e8e:	d901      	bls.n	8004e94 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e007      	b.n	8004ea4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ee      	beq.n	8004e80 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	0001ff5f 	.word	0x0001ff5f

08004eb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d122      	bne.n	8004f14 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004edc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ede:	f7fd fbdd 	bl	800269c <HAL_GetTick>
 8004ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004ee4:	e00c      	b.n	8004f00 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ee6:	f7fd fbd9 	bl	800269c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef4:	d904      	bls.n	8004f00 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <RTC_EnterInitMode+0x64>
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d1e8      	bne.n	8004ee6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f38:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff8b 	bl	8004e64 <HAL_RTC_WaitForSynchro>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2204      	movs	r2, #4
 8004f58:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004f76:	e005      	b.n	8004f84 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	3b0a      	subs	r3, #10
 8004f82:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	d8f6      	bhi.n	8004f78 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	b2db      	uxtb	r3, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	b2db      	uxtb	r3, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e09d      	b.n	800512e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d108      	bne.n	800500c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d009      	beq.n	8005018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
 800500a:	e005      	b.n	8005018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fd f8bc 	bl	80021b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005058:	d902      	bls.n	8005060 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	e002      	b.n	8005066 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005064:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800506e:	d007      	beq.n	8005080 <HAL_SPI_Init+0xa0>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005078:	d002      	beq.n	8005080 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c2:	ea42 0103 	orr.w	r1, r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f003 0204 	and.w	r2, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050fc:	ea42 0103 	orr.w	r1, r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e040      	b.n	80051ca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fd f86b 	bl	8002234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2224      	movs	r2, #36	; 0x24
 8005162:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fbbd 	bl	80058f4 <UART_SetConfig>
 800517a:	4603      	mov	r3, r0
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e022      	b.n	80051ca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fd85 	bl	8005c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fe0c 	bl	8005de0 <UART_CheckIdleState>
 80051c8:	4603      	mov	r3, r0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b08a      	sub	sp, #40	; 0x28
 80051d6:	af02      	add	r7, sp, #8
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d178      	bne.n	80052dc <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_UART_Transmit+0x24>
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e071      	b.n	80052de <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2221      	movs	r2, #33	; 0x21
 8005206:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005208:	f7fd fa48 	bl	800269c <HAL_GetTick>
 800520c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	88fa      	ldrh	r2, [r7, #6]
 800521a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d108      	bne.n	800523a <HAL_UART_Transmit+0x68>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e003      	b.n	8005242 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005242:	e030      	b.n	80052a6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fe6e 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e03c      	b.n	80052de <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	881a      	ldrh	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005276:	b292      	uxth	r2, r2
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	3302      	adds	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e008      	b.n	8005294 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b292      	uxth	r2, r2
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1c8      	bne.n	8005244 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2140      	movs	r1, #64	; 0x40
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fe37 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e005      	b.n	80052de <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b0ba      	sub	sp, #232	; 0xe8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800530e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005312:	f640 030f 	movw	r3, #2063	; 0x80f
 8005316:	4013      	ands	r3, r2
 8005318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800531c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d115      	bne.n	8005350 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00f      	beq.n	8005350 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 82ab 	beq.w	800589c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4798      	blx	r3
      }
      return;
 800534e:	e2a5      	b.n	800589c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8117 	beq.w	8005588 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800535a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800536a:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_UART_IRQHandler+0x298>)
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 810a 	beq.w	8005588 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d011      	beq.n	80053a4 <HAL_UART_IRQHandler+0xbc>
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2201      	movs	r2, #1
 8005392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <HAL_UART_IRQHandler+0xec>
 80053b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2202      	movs	r2, #2
 80053c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d011      	beq.n	8005404 <HAL_UART_IRQHandler+0x11c>
 80053e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2204      	movs	r2, #4
 80053f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fa:	f043 0202 	orr.w	r2, r3, #2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d017      	beq.n	8005440 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800541c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005420:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00b      	beq.n	8005440 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2208      	movs	r2, #8
 800542e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005436:	f043 0208 	orr.w	r2, r3, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	2b00      	cmp	r3, #0
 800544a:	d012      	beq.n	8005472 <HAL_UART_IRQHandler+0x18a>
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00c      	beq.n	8005472 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8211 	beq.w	80058a0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800548a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04f      	beq.n	800556a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fd97 	bl	8005ffe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d141      	bne.n	8005562 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800550a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800550e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800552e:	2b00      	cmp	r3, #0
 8005530:	d013      	beq.n	800555a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	4a13      	ldr	r2, [pc, #76]	; (8005584 <HAL_UART_IRQHandler+0x29c>)
 8005538:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd fa26 	bl	8002990 <HAL_DMA_Abort_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d017      	beq.n	800557a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	e00f      	b.n	800557a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9b4 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	e00b      	b.n	800557a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9b0 	bl	80058c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	e007      	b.n	800557a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9ac 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005578:	e192      	b.n	80058a0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557a:	bf00      	nop
    return;
 800557c:	e190      	b.n	80058a0 <HAL_UART_IRQHandler+0x5b8>
 800557e:	bf00      	nop
 8005580:	04000120 	.word	0x04000120
 8005584:	080060c7 	.word	0x080060c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	2b01      	cmp	r3, #1
 800558e:	f040 814b 	bne.w	8005828 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8144 	beq.w	8005828 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 813d 	beq.w	8005828 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2210      	movs	r2, #16
 80055b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	f040 80b5 	bne.w	8005730 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8164 	beq.w	80058a4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055e6:	429a      	cmp	r2, r3
 80055e8:	f080 815c 	bcs.w	80058a4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	f000 8086 	beq.w	800570e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800561a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800562c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005630:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005638:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1da      	bne.n	8005602 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800565c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005670:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005674:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005678:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e1      	bne.n	800564c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3308      	adds	r3, #8
 800568e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800569a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e3      	bne.n	8005688 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056de:	f023 0310 	bic.w	r3, r3, #16
 80056e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e4      	bne.n	80056ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005708:	4618      	mov	r0, r3
 800570a:	f7fd f908 	bl	800291e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005720:	b29b      	uxth	r3, r3
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8d7 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800572e:	e0b9      	b.n	80058a4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800573c:	b29b      	uxth	r3, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80ab 	beq.w	80058a8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80a6 	beq.w	80058a8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800577e:	647b      	str	r3, [r7, #68]	; 0x44
 8005780:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e4      	bne.n	800575c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	623b      	str	r3, [r7, #32]
   return(result);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057b6:	633a      	str	r2, [r7, #48]	; 0x30
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e3      	bne.n	8005792 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0310 	bic.w	r3, r3, #16
 80057f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	617b      	str	r3, [r7, #20]
   return(result);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e4      	bne.n	80057de <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f85b 	bl	80058dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005826:	e03f      	b.n	80058a8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <HAL_UART_IRQHandler+0x56a>
 8005834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fc7b 	bl	8006146 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005850:	e02d      	b.n	80058ae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00e      	beq.n	800587c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800585e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01c      	beq.n	80058ac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
    }
    return;
 800587a:	e017      	b.n	80058ac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d012      	beq.n	80058ae <HAL_UART_IRQHandler+0x5c6>
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00c      	beq.n	80058ae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fc2c 	bl	80060f2 <UART_EndTransmit_IT>
    return;
 800589a:	e008      	b.n	80058ae <HAL_UART_IRQHandler+0x5c6>
      return;
 800589c:	bf00      	nop
 800589e:	e006      	b.n	80058ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80058a0:	bf00      	nop
 80058a2:	e004      	b.n	80058ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80058a4:	bf00      	nop
 80058a6:	e002      	b.n	80058ae <HAL_UART_IRQHandler+0x5c6>
      return;
 80058a8:	bf00      	nop
 80058aa:	e000      	b.n	80058ae <HAL_UART_IRQHandler+0x5c6>
    return;
 80058ac:	bf00      	nop
  }

}
 80058ae:	37e8      	adds	r7, #232	; 0xe8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005922:	f023 030c 	bic.w	r3, r3, #12
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	6979      	ldr	r1, [r7, #20]
 800592c:	430b      	orrs	r3, r1
 800592e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4aa7      	ldr	r2, [pc, #668]	; (8005c0c <UART_SetConfig+0x318>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d120      	bne.n	80059b6 <UART_SetConfig+0xc2>
 8005974:	4ba6      	ldr	r3, [pc, #664]	; (8005c10 <UART_SetConfig+0x31c>)
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	2b03      	cmp	r3, #3
 800597e:	d817      	bhi.n	80059b0 <UART_SetConfig+0xbc>
 8005980:	a201      	add	r2, pc, #4	; (adr r2, 8005988 <UART_SetConfig+0x94>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	08005999 	.word	0x08005999
 800598c:	080059a5 	.word	0x080059a5
 8005990:	080059ab 	.word	0x080059ab
 8005994:	0800599f 	.word	0x0800599f
 8005998:	2301      	movs	r3, #1
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e0b5      	b.n	8005b0a <UART_SetConfig+0x216>
 800599e:	2302      	movs	r3, #2
 80059a0:	77fb      	strb	r3, [r7, #31]
 80059a2:	e0b2      	b.n	8005b0a <UART_SetConfig+0x216>
 80059a4:	2304      	movs	r3, #4
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e0af      	b.n	8005b0a <UART_SetConfig+0x216>
 80059aa:	2308      	movs	r3, #8
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e0ac      	b.n	8005b0a <UART_SetConfig+0x216>
 80059b0:	2310      	movs	r3, #16
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e0a9      	b.n	8005b0a <UART_SetConfig+0x216>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a96      	ldr	r2, [pc, #600]	; (8005c14 <UART_SetConfig+0x320>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d124      	bne.n	8005a0a <UART_SetConfig+0x116>
 80059c0:	4b93      	ldr	r3, [pc, #588]	; (8005c10 <UART_SetConfig+0x31c>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059cc:	d011      	beq.n	80059f2 <UART_SetConfig+0xfe>
 80059ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059d2:	d817      	bhi.n	8005a04 <UART_SetConfig+0x110>
 80059d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059d8:	d011      	beq.n	80059fe <UART_SetConfig+0x10a>
 80059da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059de:	d811      	bhi.n	8005a04 <UART_SetConfig+0x110>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <UART_SetConfig+0xf8>
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e8:	d006      	beq.n	80059f8 <UART_SetConfig+0x104>
 80059ea:	e00b      	b.n	8005a04 <UART_SetConfig+0x110>
 80059ec:	2300      	movs	r3, #0
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e08b      	b.n	8005b0a <UART_SetConfig+0x216>
 80059f2:	2302      	movs	r3, #2
 80059f4:	77fb      	strb	r3, [r7, #31]
 80059f6:	e088      	b.n	8005b0a <UART_SetConfig+0x216>
 80059f8:	2304      	movs	r3, #4
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e085      	b.n	8005b0a <UART_SetConfig+0x216>
 80059fe:	2308      	movs	r3, #8
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e082      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a04:	2310      	movs	r3, #16
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e07f      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a82      	ldr	r2, [pc, #520]	; (8005c18 <UART_SetConfig+0x324>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d124      	bne.n	8005a5e <UART_SetConfig+0x16a>
 8005a14:	4b7e      	ldr	r3, [pc, #504]	; (8005c10 <UART_SetConfig+0x31c>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005a1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a20:	d011      	beq.n	8005a46 <UART_SetConfig+0x152>
 8005a22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a26:	d817      	bhi.n	8005a58 <UART_SetConfig+0x164>
 8005a28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a2c:	d011      	beq.n	8005a52 <UART_SetConfig+0x15e>
 8005a2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a32:	d811      	bhi.n	8005a58 <UART_SetConfig+0x164>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <UART_SetConfig+0x14c>
 8005a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a3c:	d006      	beq.n	8005a4c <UART_SetConfig+0x158>
 8005a3e:	e00b      	b.n	8005a58 <UART_SetConfig+0x164>
 8005a40:	2300      	movs	r3, #0
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e061      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a46:	2302      	movs	r3, #2
 8005a48:	77fb      	strb	r3, [r7, #31]
 8005a4a:	e05e      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e05b      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a52:	2308      	movs	r3, #8
 8005a54:	77fb      	strb	r3, [r7, #31]
 8005a56:	e058      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e055      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a6e      	ldr	r2, [pc, #440]	; (8005c1c <UART_SetConfig+0x328>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d124      	bne.n	8005ab2 <UART_SetConfig+0x1be>
 8005a68:	4b69      	ldr	r3, [pc, #420]	; (8005c10 <UART_SetConfig+0x31c>)
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005a70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a74:	d011      	beq.n	8005a9a <UART_SetConfig+0x1a6>
 8005a76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a7a:	d817      	bhi.n	8005aac <UART_SetConfig+0x1b8>
 8005a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a80:	d011      	beq.n	8005aa6 <UART_SetConfig+0x1b2>
 8005a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a86:	d811      	bhi.n	8005aac <UART_SetConfig+0x1b8>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <UART_SetConfig+0x1a0>
 8005a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a90:	d006      	beq.n	8005aa0 <UART_SetConfig+0x1ac>
 8005a92:	e00b      	b.n	8005aac <UART_SetConfig+0x1b8>
 8005a94:	2300      	movs	r3, #0
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e037      	b.n	8005b0a <UART_SetConfig+0x216>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e034      	b.n	8005b0a <UART_SetConfig+0x216>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e031      	b.n	8005b0a <UART_SetConfig+0x216>
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e02e      	b.n	8005b0a <UART_SetConfig+0x216>
 8005aac:	2310      	movs	r3, #16
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e02b      	b.n	8005b0a <UART_SetConfig+0x216>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a5a      	ldr	r2, [pc, #360]	; (8005c20 <UART_SetConfig+0x32c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d124      	bne.n	8005b06 <UART_SetConfig+0x212>
 8005abc:	4b54      	ldr	r3, [pc, #336]	; (8005c10 <UART_SetConfig+0x31c>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ac4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ac8:	d011      	beq.n	8005aee <UART_SetConfig+0x1fa>
 8005aca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ace:	d817      	bhi.n	8005b00 <UART_SetConfig+0x20c>
 8005ad0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad4:	d011      	beq.n	8005afa <UART_SetConfig+0x206>
 8005ad6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ada:	d811      	bhi.n	8005b00 <UART_SetConfig+0x20c>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <UART_SetConfig+0x1f4>
 8005ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae4:	d006      	beq.n	8005af4 <UART_SetConfig+0x200>
 8005ae6:	e00b      	b.n	8005b00 <UART_SetConfig+0x20c>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e00d      	b.n	8005b0a <UART_SetConfig+0x216>
 8005aee:	2302      	movs	r3, #2
 8005af0:	77fb      	strb	r3, [r7, #31]
 8005af2:	e00a      	b.n	8005b0a <UART_SetConfig+0x216>
 8005af4:	2304      	movs	r3, #4
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e007      	b.n	8005b0a <UART_SetConfig+0x216>
 8005afa:	2308      	movs	r3, #8
 8005afc:	77fb      	strb	r3, [r7, #31]
 8005afe:	e004      	b.n	8005b0a <UART_SetConfig+0x216>
 8005b00:	2310      	movs	r3, #16
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e001      	b.n	8005b0a <UART_SetConfig+0x216>
 8005b06:	2310      	movs	r3, #16
 8005b08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d15b      	bne.n	8005bcc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005b14:	7ffb      	ldrb	r3, [r7, #31]
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d827      	bhi.n	8005b6a <UART_SetConfig+0x276>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x22c>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	08005b6b 	.word	0x08005b6b
 8005b30:	08005b5b 	.word	0x08005b5b
 8005b34:	08005b6b 	.word	0x08005b6b
 8005b38:	08005b6b 	.word	0x08005b6b
 8005b3c:	08005b6b 	.word	0x08005b6b
 8005b40:	08005b63 	.word	0x08005b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b44:	f7fe fd4c 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005b48:	61b8      	str	r0, [r7, #24]
        break;
 8005b4a:	e013      	b.n	8005b74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b4c:	f7fe fd6a 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 8005b50:	61b8      	str	r0, [r7, #24]
        break;
 8005b52:	e00f      	b.n	8005b74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b54:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <UART_SetConfig+0x330>)
 8005b56:	61bb      	str	r3, [r7, #24]
        break;
 8005b58:	e00c      	b.n	8005b74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5a:	f7fe fccb 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8005b5e:	61b8      	str	r0, [r7, #24]
        break;
 8005b60:	e008      	b.n	8005b74 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b66:	61bb      	str	r3, [r7, #24]
        break;
 8005b68:	e004      	b.n	8005b74 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	77bb      	strb	r3, [r7, #30]
        break;
 8005b72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8082 	beq.w	8005c80 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	005a      	lsls	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	441a      	add	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b0f      	cmp	r3, #15
 8005b96:	d916      	bls.n	8005bc6 <UART_SetConfig+0x2d2>
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9e:	d212      	bcs.n	8005bc6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f023 030f 	bic.w	r3, r3, #15
 8005ba8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	89fb      	ldrh	r3, [r7, #14]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	89fa      	ldrh	r2, [r7, #14]
 8005bc2:	60da      	str	r2, [r3, #12]
 8005bc4:	e05c      	b.n	8005c80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	77bb      	strb	r3, [r7, #30]
 8005bca:	e059      	b.n	8005c80 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d835      	bhi.n	8005c3e <UART_SetConfig+0x34a>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0x2e4>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c29 	.word	0x08005c29
 8005be4:	08005c3f 	.word	0x08005c3f
 8005be8:	08005c2f 	.word	0x08005c2f
 8005bec:	08005c3f 	.word	0x08005c3f
 8005bf0:	08005c3f 	.word	0x08005c3f
 8005bf4:	08005c3f 	.word	0x08005c3f
 8005bf8:	08005c37 	.word	0x08005c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bfc:	f7fe fcf0 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005c00:	61b8      	str	r0, [r7, #24]
        break;
 8005c02:	e021      	b.n	8005c48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7fe fd0e 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 8005c08:	61b8      	str	r0, [r7, #24]
        break;
 8005c0a:	e01d      	b.n	8005c48 <UART_SetConfig+0x354>
 8005c0c:	40013800 	.word	0x40013800
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40004400 	.word	0x40004400
 8005c18:	40004800 	.word	0x40004800
 8005c1c:	40004c00 	.word	0x40004c00
 8005c20:	40005000 	.word	0x40005000
 8005c24:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <UART_SetConfig+0x3a4>)
 8005c2a:	61bb      	str	r3, [r7, #24]
        break;
 8005c2c:	e00c      	b.n	8005c48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2e:	f7fe fc61 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8005c32:	61b8      	str	r0, [r7, #24]
        break;
 8005c34:	e008      	b.n	8005c48 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	61bb      	str	r3, [r7, #24]
        break;
 8005c3c:	e004      	b.n	8005c48 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	77bb      	strb	r3, [r7, #30]
        break;
 8005c46:	bf00      	nop
    }

    if (pclk != 0U)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	085a      	lsrs	r2, r3, #1
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	441a      	add	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b0f      	cmp	r3, #15
 8005c66:	d909      	bls.n	8005c7c <UART_SetConfig+0x388>
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6e:	d205      	bcs.n	8005c7c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e001      	b.n	8005c80 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	007a1200 	.word	0x007a1200

08005c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9a:	d10a      	bne.n	8005db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b098      	sub	sp, #96	; 0x60
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005df0:	f7fc fc54 	bl	800269c <HAL_GetTick>
 8005df4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d12e      	bne.n	8005e62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f88c 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d021      	beq.n	8005e62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e32:	653b      	str	r3, [r7, #80]	; 0x50
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e6      	bne.n	8005e1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e062      	b.n	8005f28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d149      	bne.n	8005f04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f856 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d03c      	beq.n	8005f04 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	623b      	str	r3, [r7, #32]
   return(result);
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e6      	bne.n	8005e8a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005edc:	61fa      	str	r2, [r7, #28]
 8005ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e5      	bne.n	8005ebc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e011      	b.n	8005f28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3758      	adds	r7, #88	; 0x58
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f40:	e049      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d045      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4a:	f7fc fba7 	bl	800269c <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d302      	bcc.n	8005f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e048      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d031      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d110      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2208      	movs	r2, #8
 8005f86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f838 	bl	8005ffe <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2208      	movs	r2, #8
 8005f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e029      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb0:	d111      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f81e 	bl	8005ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e00f      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d0a6      	beq.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b095      	sub	sp, #84	; 0x54
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800601a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	643b      	str	r3, [r7, #64]	; 0x40
 8006026:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800602a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e6      	bne.n	8006006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	61fb      	str	r3, [r7, #28]
   return(result);
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3308      	adds	r3, #8
 8006056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800605e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e5      	bne.n	8006038 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	2b01      	cmp	r3, #1
 8006072:	d118      	bne.n	80060a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	60bb      	str	r3, [r7, #8]
   return(result);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f023 0310 	bic.w	r3, r3, #16
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6979      	ldr	r1, [r7, #20]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	613b      	str	r3, [r7, #16]
   return(result);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e6      	bne.n	8006074 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060ba:	bf00      	nop
 80060bc:	3754      	adds	r7, #84	; 0x54
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fbef 	bl	80058c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b088      	sub	sp, #32
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	60bb      	str	r3, [r7, #8]
   return(result);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6979      	ldr	r1, [r7, #20]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	613b      	str	r3, [r7, #16]
   return(result);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fbbb 	bl	80058b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613e:	bf00      	nop
 8006140:	3720      	adds	r7, #32
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006162:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006166:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	b29b      	uxth	r3, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	b29b      	uxth	r3, r3
 8006178:	4013      	ands	r3, r2
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006190:	b084      	sub	sp, #16
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	f107 0014 	add.w	r0, r7, #20
 800619e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	b004      	add	sp, #16
 80061d0:	4770      	bx	lr
	...

080061d4 <__errno>:
 80061d4:	4b01      	ldr	r3, [pc, #4]	; (80061dc <__errno+0x8>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	2000006c 	.word	0x2000006c

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	; (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	; (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	; (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	; (8006224 <__libc_init_array+0x44>)
 80061f4:	f001 fa96 	bl	8007724 <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	08007a94 	.word	0x08007a94
 800621c:	08007a94 	.word	0x08007a94
 8006220:	08007a94 	.word	0x08007a94
 8006224:	08007a98 	.word	0x08007a98

08006228 <memset>:
 8006228:	4402      	add	r2, r0
 800622a:	4603      	mov	r3, r0
 800622c:	4293      	cmp	r3, r2
 800622e:	d100      	bne.n	8006232 <memset+0xa>
 8006230:	4770      	bx	lr
 8006232:	f803 1b01 	strb.w	r1, [r3], #1
 8006236:	e7f9      	b.n	800622c <memset+0x4>

08006238 <srand>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4b10      	ldr	r3, [pc, #64]	; (800627c <srand+0x44>)
 800623c:	681d      	ldr	r5, [r3, #0]
 800623e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006240:	4604      	mov	r4, r0
 8006242:	b9b3      	cbnz	r3, 8006272 <srand+0x3a>
 8006244:	2018      	movs	r0, #24
 8006246:	f000 f8df 	bl	8006408 <malloc>
 800624a:	4602      	mov	r2, r0
 800624c:	63a8      	str	r0, [r5, #56]	; 0x38
 800624e:	b920      	cbnz	r0, 800625a <srand+0x22>
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <srand+0x48>)
 8006252:	480c      	ldr	r0, [pc, #48]	; (8006284 <srand+0x4c>)
 8006254:	2142      	movs	r1, #66	; 0x42
 8006256:	f000 f895 	bl	8006384 <__assert_func>
 800625a:	490b      	ldr	r1, [pc, #44]	; (8006288 <srand+0x50>)
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <srand+0x54>)
 800625e:	e9c0 1300 	strd	r1, r3, [r0]
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <srand+0x58>)
 8006264:	6083      	str	r3, [r0, #8]
 8006266:	230b      	movs	r3, #11
 8006268:	8183      	strh	r3, [r0, #12]
 800626a:	2100      	movs	r1, #0
 800626c:	2001      	movs	r0, #1
 800626e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006272:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006274:	2200      	movs	r2, #0
 8006276:	611c      	str	r4, [r3, #16]
 8006278:	615a      	str	r2, [r3, #20]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	2000006c 	.word	0x2000006c
 8006280:	08007950 	.word	0x08007950
 8006284:	08007967 	.word	0x08007967
 8006288:	abcd330e 	.word	0xabcd330e
 800628c:	e66d1234 	.word	0xe66d1234
 8006290:	0005deec 	.word	0x0005deec

08006294 <rand>:
 8006294:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <rand+0x5c>)
 8006296:	b510      	push	{r4, lr}
 8006298:	681c      	ldr	r4, [r3, #0]
 800629a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800629c:	b9b3      	cbnz	r3, 80062cc <rand+0x38>
 800629e:	2018      	movs	r0, #24
 80062a0:	f000 f8b2 	bl	8006408 <malloc>
 80062a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80062a6:	b928      	cbnz	r0, 80062b4 <rand+0x20>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <rand+0x60>)
 80062ac:	4812      	ldr	r0, [pc, #72]	; (80062f8 <rand+0x64>)
 80062ae:	214e      	movs	r1, #78	; 0x4e
 80062b0:	f000 f868 	bl	8006384 <__assert_func>
 80062b4:	4a11      	ldr	r2, [pc, #68]	; (80062fc <rand+0x68>)
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <rand+0x6c>)
 80062b8:	e9c0 2300 	strd	r2, r3, [r0]
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <rand+0x70>)
 80062be:	6083      	str	r3, [r0, #8]
 80062c0:	230b      	movs	r3, #11
 80062c2:	8183      	strh	r3, [r0, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	2300      	movs	r3, #0
 80062c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80062cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80062ce:	4a0e      	ldr	r2, [pc, #56]	; (8006308 <rand+0x74>)
 80062d0:	6920      	ldr	r0, [r4, #16]
 80062d2:	6963      	ldr	r3, [r4, #20]
 80062d4:	490d      	ldr	r1, [pc, #52]	; (800630c <rand+0x78>)
 80062d6:	4342      	muls	r2, r0
 80062d8:	fb01 2203 	mla	r2, r1, r3, r2
 80062dc:	fba0 0101 	umull	r0, r1, r0, r1
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	eb42 0001 	adc.w	r0, r2, r1
 80062e6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80062ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80062ee:	bd10      	pop	{r4, pc}
 80062f0:	2000006c 	.word	0x2000006c
 80062f4:	08007950 	.word	0x08007950
 80062f8:	08007967 	.word	0x08007967
 80062fc:	abcd330e 	.word	0xabcd330e
 8006300:	e66d1234 	.word	0xe66d1234
 8006304:	0005deec 	.word	0x0005deec
 8006308:	5851f42d 	.word	0x5851f42d
 800630c:	4c957f2d 	.word	0x4c957f2d

08006310 <siprintf>:
 8006310:	b40e      	push	{r1, r2, r3}
 8006312:	b500      	push	{lr}
 8006314:	b09c      	sub	sp, #112	; 0x70
 8006316:	ab1d      	add	r3, sp, #116	; 0x74
 8006318:	9002      	str	r0, [sp, #8]
 800631a:	9006      	str	r0, [sp, #24]
 800631c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006320:	4809      	ldr	r0, [pc, #36]	; (8006348 <siprintf+0x38>)
 8006322:	9107      	str	r1, [sp, #28]
 8006324:	9104      	str	r1, [sp, #16]
 8006326:	4909      	ldr	r1, [pc, #36]	; (800634c <siprintf+0x3c>)
 8006328:	f853 2b04 	ldr.w	r2, [r3], #4
 800632c:	9105      	str	r1, [sp, #20]
 800632e:	6800      	ldr	r0, [r0, #0]
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	a902      	add	r1, sp, #8
 8006334:	f000 f9ac 	bl	8006690 <_svfiprintf_r>
 8006338:	9b02      	ldr	r3, [sp, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	b01c      	add	sp, #112	; 0x70
 8006340:	f85d eb04 	ldr.w	lr, [sp], #4
 8006344:	b003      	add	sp, #12
 8006346:	4770      	bx	lr
 8006348:	2000006c 	.word	0x2000006c
 800634c:	ffff0208 	.word	0xffff0208

08006350 <time>:
 8006350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <time+0x30>)
 8006354:	2200      	movs	r2, #0
 8006356:	4669      	mov	r1, sp
 8006358:	4604      	mov	r4, r0
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	f000 f842 	bl	80063e4 <_gettimeofday_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	bfbe      	ittt	lt
 8006364:	f04f 32ff 	movlt.w	r2, #4294967295
 8006368:	f04f 33ff 	movlt.w	r3, #4294967295
 800636c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006374:	b10c      	cbz	r4, 800637a <time+0x2a>
 8006376:	e9c4 0100 	strd	r0, r1, [r4]
 800637a:	b004      	add	sp, #16
 800637c:	bd10      	pop	{r4, pc}
 800637e:	bf00      	nop
 8006380:	2000006c 	.word	0x2000006c

08006384 <__assert_func>:
 8006384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006386:	4614      	mov	r4, r2
 8006388:	461a      	mov	r2, r3
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <__assert_func+0x2c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4605      	mov	r5, r0
 8006390:	68d8      	ldr	r0, [r3, #12]
 8006392:	b14c      	cbz	r4, 80063a8 <__assert_func+0x24>
 8006394:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <__assert_func+0x30>)
 8006396:	9100      	str	r1, [sp, #0]
 8006398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800639c:	4906      	ldr	r1, [pc, #24]	; (80063b8 <__assert_func+0x34>)
 800639e:	462b      	mov	r3, r5
 80063a0:	f000 f80e 	bl	80063c0 <fiprintf>
 80063a4:	f000 fe32 	bl	800700c <abort>
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <__assert_func+0x38>)
 80063aa:	461c      	mov	r4, r3
 80063ac:	e7f3      	b.n	8006396 <__assert_func+0x12>
 80063ae:	bf00      	nop
 80063b0:	2000006c 	.word	0x2000006c
 80063b4:	080079c2 	.word	0x080079c2
 80063b8:	080079cf 	.word	0x080079cf
 80063bc:	080079fd 	.word	0x080079fd

080063c0 <fiprintf>:
 80063c0:	b40e      	push	{r1, r2, r3}
 80063c2:	b503      	push	{r0, r1, lr}
 80063c4:	4601      	mov	r1, r0
 80063c6:	ab03      	add	r3, sp, #12
 80063c8:	4805      	ldr	r0, [pc, #20]	; (80063e0 <fiprintf+0x20>)
 80063ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ce:	6800      	ldr	r0, [r0, #0]
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	f000 fa87 	bl	80068e4 <_vfiprintf_r>
 80063d6:	b002      	add	sp, #8
 80063d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063dc:	b003      	add	sp, #12
 80063de:	4770      	bx	lr
 80063e0:	2000006c 	.word	0x2000006c

080063e4 <_gettimeofday_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d07      	ldr	r5, [pc, #28]	; (8006404 <_gettimeofday_r+0x20>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	f001 f98f 	bl	8007714 <_gettimeofday>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d102      	bne.n	8006400 <_gettimeofday_r+0x1c>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	b103      	cbz	r3, 8006400 <_gettimeofday_r+0x1c>
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	200006b0 	.word	0x200006b0

08006408 <malloc>:
 8006408:	4b02      	ldr	r3, [pc, #8]	; (8006414 <malloc+0xc>)
 800640a:	4601      	mov	r1, r0
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	f000 b86f 	b.w	80064f0 <_malloc_r>
 8006412:	bf00      	nop
 8006414:	2000006c 	.word	0x2000006c

08006418 <_free_r>:
 8006418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800641a:	2900      	cmp	r1, #0
 800641c:	d044      	beq.n	80064a8 <_free_r+0x90>
 800641e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006422:	9001      	str	r0, [sp, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f1a1 0404 	sub.w	r4, r1, #4
 800642a:	bfb8      	it	lt
 800642c:	18e4      	addlt	r4, r4, r3
 800642e:	f001 f83d 	bl	80074ac <__malloc_lock>
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <_free_r+0x94>)
 8006434:	9801      	ldr	r0, [sp, #4]
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	b933      	cbnz	r3, 8006448 <_free_r+0x30>
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	6014      	str	r4, [r2, #0]
 800643e:	b003      	add	sp, #12
 8006440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006444:	f001 b838 	b.w	80074b8 <__malloc_unlock>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d908      	bls.n	800645e <_free_r+0x46>
 800644c:	6825      	ldr	r5, [r4, #0]
 800644e:	1961      	adds	r1, r4, r5
 8006450:	428b      	cmp	r3, r1
 8006452:	bf01      	itttt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	1949      	addeq	r1, r1, r5
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	e7ed      	b.n	800643a <_free_r+0x22>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x50>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x46>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1855      	adds	r5, r2, r1
 800646c:	42a5      	cmp	r5, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x70>
 8006470:	6824      	ldr	r4, [r4, #0]
 8006472:	4421      	add	r1, r4
 8006474:	1854      	adds	r4, r2, r1
 8006476:	42a3      	cmp	r3, r4
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1e0      	bne.n	800643e <_free_r+0x26>
 800647c:	681c      	ldr	r4, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	4421      	add	r1, r4
 8006484:	6011      	str	r1, [r2, #0]
 8006486:	e7da      	b.n	800643e <_free_r+0x26>
 8006488:	d902      	bls.n	8006490 <_free_r+0x78>
 800648a:	230c      	movs	r3, #12
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	e7d6      	b.n	800643e <_free_r+0x26>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	1961      	adds	r1, r4, r5
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1949      	addeq	r1, r1, r5
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7ca      	b.n	800643e <_free_r+0x26>
 80064a8:	b003      	add	sp, #12
 80064aa:	bd30      	pop	{r4, r5, pc}
 80064ac:	200006a8 	.word	0x200006a8

080064b0 <sbrk_aligned>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4e0e      	ldr	r6, [pc, #56]	; (80064ec <sbrk_aligned+0x3c>)
 80064b4:	460c      	mov	r4, r1
 80064b6:	6831      	ldr	r1, [r6, #0]
 80064b8:	4605      	mov	r5, r0
 80064ba:	b911      	cbnz	r1, 80064c2 <sbrk_aligned+0x12>
 80064bc:	f000 fcd6 	bl	8006e6c <_sbrk_r>
 80064c0:	6030      	str	r0, [r6, #0]
 80064c2:	4621      	mov	r1, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	f000 fcd1 	bl	8006e6c <_sbrk_r>
 80064ca:	1c43      	adds	r3, r0, #1
 80064cc:	d00a      	beq.n	80064e4 <sbrk_aligned+0x34>
 80064ce:	1cc4      	adds	r4, r0, #3
 80064d0:	f024 0403 	bic.w	r4, r4, #3
 80064d4:	42a0      	cmp	r0, r4
 80064d6:	d007      	beq.n	80064e8 <sbrk_aligned+0x38>
 80064d8:	1a21      	subs	r1, r4, r0
 80064da:	4628      	mov	r0, r5
 80064dc:	f000 fcc6 	bl	8006e6c <_sbrk_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	d101      	bne.n	80064e8 <sbrk_aligned+0x38>
 80064e4:	f04f 34ff 	mov.w	r4, #4294967295
 80064e8:	4620      	mov	r0, r4
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	200006ac 	.word	0x200006ac

080064f0 <_malloc_r>:
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	1ccd      	adds	r5, r1, #3
 80064f6:	f025 0503 	bic.w	r5, r5, #3
 80064fa:	3508      	adds	r5, #8
 80064fc:	2d0c      	cmp	r5, #12
 80064fe:	bf38      	it	cc
 8006500:	250c      	movcc	r5, #12
 8006502:	2d00      	cmp	r5, #0
 8006504:	4607      	mov	r7, r0
 8006506:	db01      	blt.n	800650c <_malloc_r+0x1c>
 8006508:	42a9      	cmp	r1, r5
 800650a:	d905      	bls.n	8006518 <_malloc_r+0x28>
 800650c:	230c      	movs	r3, #12
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	2600      	movs	r6, #0
 8006512:	4630      	mov	r0, r6
 8006514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006518:	4e2e      	ldr	r6, [pc, #184]	; (80065d4 <_malloc_r+0xe4>)
 800651a:	f000 ffc7 	bl	80074ac <__malloc_lock>
 800651e:	6833      	ldr	r3, [r6, #0]
 8006520:	461c      	mov	r4, r3
 8006522:	bb34      	cbnz	r4, 8006572 <_malloc_r+0x82>
 8006524:	4629      	mov	r1, r5
 8006526:	4638      	mov	r0, r7
 8006528:	f7ff ffc2 	bl	80064b0 <sbrk_aligned>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	4604      	mov	r4, r0
 8006530:	d14d      	bne.n	80065ce <_malloc_r+0xde>
 8006532:	6834      	ldr	r4, [r6, #0]
 8006534:	4626      	mov	r6, r4
 8006536:	2e00      	cmp	r6, #0
 8006538:	d140      	bne.n	80065bc <_malloc_r+0xcc>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	4631      	mov	r1, r6
 800653e:	4638      	mov	r0, r7
 8006540:	eb04 0803 	add.w	r8, r4, r3
 8006544:	f000 fc92 	bl	8006e6c <_sbrk_r>
 8006548:	4580      	cmp	r8, r0
 800654a:	d13a      	bne.n	80065c2 <_malloc_r+0xd2>
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	3503      	adds	r5, #3
 8006550:	1a6d      	subs	r5, r5, r1
 8006552:	f025 0503 	bic.w	r5, r5, #3
 8006556:	3508      	adds	r5, #8
 8006558:	2d0c      	cmp	r5, #12
 800655a:	bf38      	it	cc
 800655c:	250c      	movcc	r5, #12
 800655e:	4629      	mov	r1, r5
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff ffa5 	bl	80064b0 <sbrk_aligned>
 8006566:	3001      	adds	r0, #1
 8006568:	d02b      	beq.n	80065c2 <_malloc_r+0xd2>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	442b      	add	r3, r5
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	e00e      	b.n	8006590 <_malloc_r+0xa0>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	1b52      	subs	r2, r2, r5
 8006576:	d41e      	bmi.n	80065b6 <_malloc_r+0xc6>
 8006578:	2a0b      	cmp	r2, #11
 800657a:	d916      	bls.n	80065aa <_malloc_r+0xba>
 800657c:	1961      	adds	r1, r4, r5
 800657e:	42a3      	cmp	r3, r4
 8006580:	6025      	str	r5, [r4, #0]
 8006582:	bf18      	it	ne
 8006584:	6059      	strne	r1, [r3, #4]
 8006586:	6863      	ldr	r3, [r4, #4]
 8006588:	bf08      	it	eq
 800658a:	6031      	streq	r1, [r6, #0]
 800658c:	5162      	str	r2, [r4, r5]
 800658e:	604b      	str	r3, [r1, #4]
 8006590:	4638      	mov	r0, r7
 8006592:	f104 060b 	add.w	r6, r4, #11
 8006596:	f000 ff8f 	bl	80074b8 <__malloc_unlock>
 800659a:	f026 0607 	bic.w	r6, r6, #7
 800659e:	1d23      	adds	r3, r4, #4
 80065a0:	1af2      	subs	r2, r6, r3
 80065a2:	d0b6      	beq.n	8006512 <_malloc_r+0x22>
 80065a4:	1b9b      	subs	r3, r3, r6
 80065a6:	50a3      	str	r3, [r4, r2]
 80065a8:	e7b3      	b.n	8006512 <_malloc_r+0x22>
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	bf0c      	ite	eq
 80065b0:	6032      	streq	r2, [r6, #0]
 80065b2:	605a      	strne	r2, [r3, #4]
 80065b4:	e7ec      	b.n	8006590 <_malloc_r+0xa0>
 80065b6:	4623      	mov	r3, r4
 80065b8:	6864      	ldr	r4, [r4, #4]
 80065ba:	e7b2      	b.n	8006522 <_malloc_r+0x32>
 80065bc:	4634      	mov	r4, r6
 80065be:	6876      	ldr	r6, [r6, #4]
 80065c0:	e7b9      	b.n	8006536 <_malloc_r+0x46>
 80065c2:	230c      	movs	r3, #12
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	4638      	mov	r0, r7
 80065c8:	f000 ff76 	bl	80074b8 <__malloc_unlock>
 80065cc:	e7a1      	b.n	8006512 <_malloc_r+0x22>
 80065ce:	6025      	str	r5, [r4, #0]
 80065d0:	e7de      	b.n	8006590 <_malloc_r+0xa0>
 80065d2:	bf00      	nop
 80065d4:	200006a8 	.word	0x200006a8

080065d8 <__ssputs_r>:
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	688e      	ldr	r6, [r1, #8]
 80065de:	429e      	cmp	r6, r3
 80065e0:	4682      	mov	sl, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	4690      	mov	r8, r2
 80065e6:	461f      	mov	r7, r3
 80065e8:	d838      	bhi.n	800665c <__ssputs_r+0x84>
 80065ea:	898a      	ldrh	r2, [r1, #12]
 80065ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065f0:	d032      	beq.n	8006658 <__ssputs_r+0x80>
 80065f2:	6825      	ldr	r5, [r4, #0]
 80065f4:	6909      	ldr	r1, [r1, #16]
 80065f6:	eba5 0901 	sub.w	r9, r5, r1
 80065fa:	6965      	ldr	r5, [r4, #20]
 80065fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006600:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006604:	3301      	adds	r3, #1
 8006606:	444b      	add	r3, r9
 8006608:	106d      	asrs	r5, r5, #1
 800660a:	429d      	cmp	r5, r3
 800660c:	bf38      	it	cc
 800660e:	461d      	movcc	r5, r3
 8006610:	0553      	lsls	r3, r2, #21
 8006612:	d531      	bpl.n	8006678 <__ssputs_r+0xa0>
 8006614:	4629      	mov	r1, r5
 8006616:	f7ff ff6b 	bl	80064f0 <_malloc_r>
 800661a:	4606      	mov	r6, r0
 800661c:	b950      	cbnz	r0, 8006634 <__ssputs_r+0x5c>
 800661e:	230c      	movs	r3, #12
 8006620:	f8ca 3000 	str.w	r3, [sl]
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006634:	6921      	ldr	r1, [r4, #16]
 8006636:	464a      	mov	r2, r9
 8006638:	f000 ff10 	bl	800745c <memcpy>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	6126      	str	r6, [r4, #16]
 800664a:	6165      	str	r5, [r4, #20]
 800664c:	444e      	add	r6, r9
 800664e:	eba5 0509 	sub.w	r5, r5, r9
 8006652:	6026      	str	r6, [r4, #0]
 8006654:	60a5      	str	r5, [r4, #8]
 8006656:	463e      	mov	r6, r7
 8006658:	42be      	cmp	r6, r7
 800665a:	d900      	bls.n	800665e <__ssputs_r+0x86>
 800665c:	463e      	mov	r6, r7
 800665e:	6820      	ldr	r0, [r4, #0]
 8006660:	4632      	mov	r2, r6
 8006662:	4641      	mov	r1, r8
 8006664:	f000 ff08 	bl	8007478 <memmove>
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	1b9b      	subs	r3, r3, r6
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	4433      	add	r3, r6
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	2000      	movs	r0, #0
 8006676:	e7db      	b.n	8006630 <__ssputs_r+0x58>
 8006678:	462a      	mov	r2, r5
 800667a:	f000 ff23 	bl	80074c4 <_realloc_r>
 800667e:	4606      	mov	r6, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	d1e1      	bne.n	8006648 <__ssputs_r+0x70>
 8006684:	6921      	ldr	r1, [r4, #16]
 8006686:	4650      	mov	r0, sl
 8006688:	f7ff fec6 	bl	8006418 <_free_r>
 800668c:	e7c7      	b.n	800661e <__ssputs_r+0x46>
	...

08006690 <_svfiprintf_r>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	4698      	mov	r8, r3
 8006696:	898b      	ldrh	r3, [r1, #12]
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	b09d      	sub	sp, #116	; 0x74
 800669c:	4607      	mov	r7, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	4614      	mov	r4, r2
 80066a2:	d50e      	bpl.n	80066c2 <_svfiprintf_r+0x32>
 80066a4:	690b      	ldr	r3, [r1, #16]
 80066a6:	b963      	cbnz	r3, 80066c2 <_svfiprintf_r+0x32>
 80066a8:	2140      	movs	r1, #64	; 0x40
 80066aa:	f7ff ff21 	bl	80064f0 <_malloc_r>
 80066ae:	6028      	str	r0, [r5, #0]
 80066b0:	6128      	str	r0, [r5, #16]
 80066b2:	b920      	cbnz	r0, 80066be <_svfiprintf_r+0x2e>
 80066b4:	230c      	movs	r3, #12
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	e0d1      	b.n	8006862 <_svfiprintf_r+0x1d2>
 80066be:	2340      	movs	r3, #64	; 0x40
 80066c0:	616b      	str	r3, [r5, #20]
 80066c2:	2300      	movs	r3, #0
 80066c4:	9309      	str	r3, [sp, #36]	; 0x24
 80066c6:	2320      	movs	r3, #32
 80066c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066d0:	2330      	movs	r3, #48	; 0x30
 80066d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800687c <_svfiprintf_r+0x1ec>
 80066d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066da:	f04f 0901 	mov.w	r9, #1
 80066de:	4623      	mov	r3, r4
 80066e0:	469a      	mov	sl, r3
 80066e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e6:	b10a      	cbz	r2, 80066ec <_svfiprintf_r+0x5c>
 80066e8:	2a25      	cmp	r2, #37	; 0x25
 80066ea:	d1f9      	bne.n	80066e0 <_svfiprintf_r+0x50>
 80066ec:	ebba 0b04 	subs.w	fp, sl, r4
 80066f0:	d00b      	beq.n	800670a <_svfiprintf_r+0x7a>
 80066f2:	465b      	mov	r3, fp
 80066f4:	4622      	mov	r2, r4
 80066f6:	4629      	mov	r1, r5
 80066f8:	4638      	mov	r0, r7
 80066fa:	f7ff ff6d 	bl	80065d8 <__ssputs_r>
 80066fe:	3001      	adds	r0, #1
 8006700:	f000 80aa 	beq.w	8006858 <_svfiprintf_r+0x1c8>
 8006704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006706:	445a      	add	r2, fp
 8006708:	9209      	str	r2, [sp, #36]	; 0x24
 800670a:	f89a 3000 	ldrb.w	r3, [sl]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80a2 	beq.w	8006858 <_svfiprintf_r+0x1c8>
 8006714:	2300      	movs	r3, #0
 8006716:	f04f 32ff 	mov.w	r2, #4294967295
 800671a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800671e:	f10a 0a01 	add.w	sl, sl, #1
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	9307      	str	r3, [sp, #28]
 8006726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800672a:	931a      	str	r3, [sp, #104]	; 0x68
 800672c:	4654      	mov	r4, sl
 800672e:	2205      	movs	r2, #5
 8006730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006734:	4851      	ldr	r0, [pc, #324]	; (800687c <_svfiprintf_r+0x1ec>)
 8006736:	f7f9 fd53 	bl	80001e0 <memchr>
 800673a:	9a04      	ldr	r2, [sp, #16]
 800673c:	b9d8      	cbnz	r0, 8006776 <_svfiprintf_r+0xe6>
 800673e:	06d0      	lsls	r0, r2, #27
 8006740:	bf44      	itt	mi
 8006742:	2320      	movmi	r3, #32
 8006744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006748:	0711      	lsls	r1, r2, #28
 800674a:	bf44      	itt	mi
 800674c:	232b      	movmi	r3, #43	; 0x2b
 800674e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006752:	f89a 3000 	ldrb.w	r3, [sl]
 8006756:	2b2a      	cmp	r3, #42	; 0x2a
 8006758:	d015      	beq.n	8006786 <_svfiprintf_r+0xf6>
 800675a:	9a07      	ldr	r2, [sp, #28]
 800675c:	4654      	mov	r4, sl
 800675e:	2000      	movs	r0, #0
 8006760:	f04f 0c0a 	mov.w	ip, #10
 8006764:	4621      	mov	r1, r4
 8006766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800676a:	3b30      	subs	r3, #48	; 0x30
 800676c:	2b09      	cmp	r3, #9
 800676e:	d94e      	bls.n	800680e <_svfiprintf_r+0x17e>
 8006770:	b1b0      	cbz	r0, 80067a0 <_svfiprintf_r+0x110>
 8006772:	9207      	str	r2, [sp, #28]
 8006774:	e014      	b.n	80067a0 <_svfiprintf_r+0x110>
 8006776:	eba0 0308 	sub.w	r3, r0, r8
 800677a:	fa09 f303 	lsl.w	r3, r9, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	46a2      	mov	sl, r4
 8006784:	e7d2      	b.n	800672c <_svfiprintf_r+0x9c>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	9103      	str	r1, [sp, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfbb      	ittet	lt
 8006792:	425b      	neglt	r3, r3
 8006794:	f042 0202 	orrlt.w	r2, r2, #2
 8006798:	9307      	strge	r3, [sp, #28]
 800679a:	9307      	strlt	r3, [sp, #28]
 800679c:	bfb8      	it	lt
 800679e:	9204      	strlt	r2, [sp, #16]
 80067a0:	7823      	ldrb	r3, [r4, #0]
 80067a2:	2b2e      	cmp	r3, #46	; 0x2e
 80067a4:	d10c      	bne.n	80067c0 <_svfiprintf_r+0x130>
 80067a6:	7863      	ldrb	r3, [r4, #1]
 80067a8:	2b2a      	cmp	r3, #42	; 0x2a
 80067aa:	d135      	bne.n	8006818 <_svfiprintf_r+0x188>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	1d1a      	adds	r2, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	9203      	str	r2, [sp, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfb8      	it	lt
 80067b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067bc:	3402      	adds	r4, #2
 80067be:	9305      	str	r3, [sp, #20]
 80067c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800688c <_svfiprintf_r+0x1fc>
 80067c4:	7821      	ldrb	r1, [r4, #0]
 80067c6:	2203      	movs	r2, #3
 80067c8:	4650      	mov	r0, sl
 80067ca:	f7f9 fd09 	bl	80001e0 <memchr>
 80067ce:	b140      	cbz	r0, 80067e2 <_svfiprintf_r+0x152>
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	eba0 000a 	sub.w	r0, r0, sl
 80067d6:	fa03 f000 	lsl.w	r0, r3, r0
 80067da:	9b04      	ldr	r3, [sp, #16]
 80067dc:	4303      	orrs	r3, r0
 80067de:	3401      	adds	r4, #1
 80067e0:	9304      	str	r3, [sp, #16]
 80067e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e6:	4826      	ldr	r0, [pc, #152]	; (8006880 <_svfiprintf_r+0x1f0>)
 80067e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ec:	2206      	movs	r2, #6
 80067ee:	f7f9 fcf7 	bl	80001e0 <memchr>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d038      	beq.n	8006868 <_svfiprintf_r+0x1d8>
 80067f6:	4b23      	ldr	r3, [pc, #140]	; (8006884 <_svfiprintf_r+0x1f4>)
 80067f8:	bb1b      	cbnz	r3, 8006842 <_svfiprintf_r+0x1b2>
 80067fa:	9b03      	ldr	r3, [sp, #12]
 80067fc:	3307      	adds	r3, #7
 80067fe:	f023 0307 	bic.w	r3, r3, #7
 8006802:	3308      	adds	r3, #8
 8006804:	9303      	str	r3, [sp, #12]
 8006806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006808:	4433      	add	r3, r6
 800680a:	9309      	str	r3, [sp, #36]	; 0x24
 800680c:	e767      	b.n	80066de <_svfiprintf_r+0x4e>
 800680e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006812:	460c      	mov	r4, r1
 8006814:	2001      	movs	r0, #1
 8006816:	e7a5      	b.n	8006764 <_svfiprintf_r+0xd4>
 8006818:	2300      	movs	r3, #0
 800681a:	3401      	adds	r4, #1
 800681c:	9305      	str	r3, [sp, #20]
 800681e:	4619      	mov	r1, r3
 8006820:	f04f 0c0a 	mov.w	ip, #10
 8006824:	4620      	mov	r0, r4
 8006826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800682a:	3a30      	subs	r2, #48	; 0x30
 800682c:	2a09      	cmp	r2, #9
 800682e:	d903      	bls.n	8006838 <_svfiprintf_r+0x1a8>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0c5      	beq.n	80067c0 <_svfiprintf_r+0x130>
 8006834:	9105      	str	r1, [sp, #20]
 8006836:	e7c3      	b.n	80067c0 <_svfiprintf_r+0x130>
 8006838:	fb0c 2101 	mla	r1, ip, r1, r2
 800683c:	4604      	mov	r4, r0
 800683e:	2301      	movs	r3, #1
 8006840:	e7f0      	b.n	8006824 <_svfiprintf_r+0x194>
 8006842:	ab03      	add	r3, sp, #12
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	462a      	mov	r2, r5
 8006848:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <_svfiprintf_r+0x1f8>)
 800684a:	a904      	add	r1, sp, #16
 800684c:	4638      	mov	r0, r7
 800684e:	f3af 8000 	nop.w
 8006852:	1c42      	adds	r2, r0, #1
 8006854:	4606      	mov	r6, r0
 8006856:	d1d6      	bne.n	8006806 <_svfiprintf_r+0x176>
 8006858:	89ab      	ldrh	r3, [r5, #12]
 800685a:	065b      	lsls	r3, r3, #25
 800685c:	f53f af2c 	bmi.w	80066b8 <_svfiprintf_r+0x28>
 8006860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006862:	b01d      	add	sp, #116	; 0x74
 8006864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006868:	ab03      	add	r3, sp, #12
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	462a      	mov	r2, r5
 800686e:	4b06      	ldr	r3, [pc, #24]	; (8006888 <_svfiprintf_r+0x1f8>)
 8006870:	a904      	add	r1, sp, #16
 8006872:	4638      	mov	r0, r7
 8006874:	f000 f9d4 	bl	8006c20 <_printf_i>
 8006878:	e7eb      	b.n	8006852 <_svfiprintf_r+0x1c2>
 800687a:	bf00      	nop
 800687c:	080079fe 	.word	0x080079fe
 8006880:	08007a08 	.word	0x08007a08
 8006884:	00000000 	.word	0x00000000
 8006888:	080065d9 	.word	0x080065d9
 800688c:	08007a04 	.word	0x08007a04

08006890 <__sfputc_r>:
 8006890:	6893      	ldr	r3, [r2, #8]
 8006892:	3b01      	subs	r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	b410      	push	{r4}
 8006898:	6093      	str	r3, [r2, #8]
 800689a:	da08      	bge.n	80068ae <__sfputc_r+0x1e>
 800689c:	6994      	ldr	r4, [r2, #24]
 800689e:	42a3      	cmp	r3, r4
 80068a0:	db01      	blt.n	80068a6 <__sfputc_r+0x16>
 80068a2:	290a      	cmp	r1, #10
 80068a4:	d103      	bne.n	80068ae <__sfputc_r+0x1e>
 80068a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068aa:	f000 baef 	b.w	8006e8c <__swbuf_r>
 80068ae:	6813      	ldr	r3, [r2, #0]
 80068b0:	1c58      	adds	r0, r3, #1
 80068b2:	6010      	str	r0, [r2, #0]
 80068b4:	7019      	strb	r1, [r3, #0]
 80068b6:	4608      	mov	r0, r1
 80068b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068bc:	4770      	bx	lr

080068be <__sfputs_r>:
 80068be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c0:	4606      	mov	r6, r0
 80068c2:	460f      	mov	r7, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	18d5      	adds	r5, r2, r3
 80068c8:	42ac      	cmp	r4, r5
 80068ca:	d101      	bne.n	80068d0 <__sfputs_r+0x12>
 80068cc:	2000      	movs	r0, #0
 80068ce:	e007      	b.n	80068e0 <__sfputs_r+0x22>
 80068d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d4:	463a      	mov	r2, r7
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff ffda 	bl	8006890 <__sfputc_r>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d1f3      	bne.n	80068c8 <__sfputs_r+0xa>
 80068e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068e4 <_vfiprintf_r>:
 80068e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	460d      	mov	r5, r1
 80068ea:	b09d      	sub	sp, #116	; 0x74
 80068ec:	4614      	mov	r4, r2
 80068ee:	4698      	mov	r8, r3
 80068f0:	4606      	mov	r6, r0
 80068f2:	b118      	cbz	r0, 80068fc <_vfiprintf_r+0x18>
 80068f4:	6983      	ldr	r3, [r0, #24]
 80068f6:	b90b      	cbnz	r3, 80068fc <_vfiprintf_r+0x18>
 80068f8:	f000 fcaa 	bl	8007250 <__sinit>
 80068fc:	4b89      	ldr	r3, [pc, #548]	; (8006b24 <_vfiprintf_r+0x240>)
 80068fe:	429d      	cmp	r5, r3
 8006900:	d11b      	bne.n	800693a <_vfiprintf_r+0x56>
 8006902:	6875      	ldr	r5, [r6, #4]
 8006904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006906:	07d9      	lsls	r1, r3, #31
 8006908:	d405      	bmi.n	8006916 <_vfiprintf_r+0x32>
 800690a:	89ab      	ldrh	r3, [r5, #12]
 800690c:	059a      	lsls	r2, r3, #22
 800690e:	d402      	bmi.n	8006916 <_vfiprintf_r+0x32>
 8006910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006912:	f000 fd3b 	bl	800738c <__retarget_lock_acquire_recursive>
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	071b      	lsls	r3, r3, #28
 800691a:	d501      	bpl.n	8006920 <_vfiprintf_r+0x3c>
 800691c:	692b      	ldr	r3, [r5, #16]
 800691e:	b9eb      	cbnz	r3, 800695c <_vfiprintf_r+0x78>
 8006920:	4629      	mov	r1, r5
 8006922:	4630      	mov	r0, r6
 8006924:	f000 fb04 	bl	8006f30 <__swsetup_r>
 8006928:	b1c0      	cbz	r0, 800695c <_vfiprintf_r+0x78>
 800692a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800692c:	07dc      	lsls	r4, r3, #31
 800692e:	d50e      	bpl.n	800694e <_vfiprintf_r+0x6a>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	b01d      	add	sp, #116	; 0x74
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	4b7b      	ldr	r3, [pc, #492]	; (8006b28 <_vfiprintf_r+0x244>)
 800693c:	429d      	cmp	r5, r3
 800693e:	d101      	bne.n	8006944 <_vfiprintf_r+0x60>
 8006940:	68b5      	ldr	r5, [r6, #8]
 8006942:	e7df      	b.n	8006904 <_vfiprintf_r+0x20>
 8006944:	4b79      	ldr	r3, [pc, #484]	; (8006b2c <_vfiprintf_r+0x248>)
 8006946:	429d      	cmp	r5, r3
 8006948:	bf08      	it	eq
 800694a:	68f5      	ldreq	r5, [r6, #12]
 800694c:	e7da      	b.n	8006904 <_vfiprintf_r+0x20>
 800694e:	89ab      	ldrh	r3, [r5, #12]
 8006950:	0598      	lsls	r0, r3, #22
 8006952:	d4ed      	bmi.n	8006930 <_vfiprintf_r+0x4c>
 8006954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006956:	f000 fd1a 	bl	800738e <__retarget_lock_release_recursive>
 800695a:	e7e9      	b.n	8006930 <_vfiprintf_r+0x4c>
 800695c:	2300      	movs	r3, #0
 800695e:	9309      	str	r3, [sp, #36]	; 0x24
 8006960:	2320      	movs	r3, #32
 8006962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006966:	f8cd 800c 	str.w	r8, [sp, #12]
 800696a:	2330      	movs	r3, #48	; 0x30
 800696c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b30 <_vfiprintf_r+0x24c>
 8006970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006974:	f04f 0901 	mov.w	r9, #1
 8006978:	4623      	mov	r3, r4
 800697a:	469a      	mov	sl, r3
 800697c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006980:	b10a      	cbz	r2, 8006986 <_vfiprintf_r+0xa2>
 8006982:	2a25      	cmp	r2, #37	; 0x25
 8006984:	d1f9      	bne.n	800697a <_vfiprintf_r+0x96>
 8006986:	ebba 0b04 	subs.w	fp, sl, r4
 800698a:	d00b      	beq.n	80069a4 <_vfiprintf_r+0xc0>
 800698c:	465b      	mov	r3, fp
 800698e:	4622      	mov	r2, r4
 8006990:	4629      	mov	r1, r5
 8006992:	4630      	mov	r0, r6
 8006994:	f7ff ff93 	bl	80068be <__sfputs_r>
 8006998:	3001      	adds	r0, #1
 800699a:	f000 80aa 	beq.w	8006af2 <_vfiprintf_r+0x20e>
 800699e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069a0:	445a      	add	r2, fp
 80069a2:	9209      	str	r2, [sp, #36]	; 0x24
 80069a4:	f89a 3000 	ldrb.w	r3, [sl]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80a2 	beq.w	8006af2 <_vfiprintf_r+0x20e>
 80069ae:	2300      	movs	r3, #0
 80069b0:	f04f 32ff 	mov.w	r2, #4294967295
 80069b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069b8:	f10a 0a01 	add.w	sl, sl, #1
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069c4:	931a      	str	r3, [sp, #104]	; 0x68
 80069c6:	4654      	mov	r4, sl
 80069c8:	2205      	movs	r2, #5
 80069ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ce:	4858      	ldr	r0, [pc, #352]	; (8006b30 <_vfiprintf_r+0x24c>)
 80069d0:	f7f9 fc06 	bl	80001e0 <memchr>
 80069d4:	9a04      	ldr	r2, [sp, #16]
 80069d6:	b9d8      	cbnz	r0, 8006a10 <_vfiprintf_r+0x12c>
 80069d8:	06d1      	lsls	r1, r2, #27
 80069da:	bf44      	itt	mi
 80069dc:	2320      	movmi	r3, #32
 80069de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069e2:	0713      	lsls	r3, r2, #28
 80069e4:	bf44      	itt	mi
 80069e6:	232b      	movmi	r3, #43	; 0x2b
 80069e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ec:	f89a 3000 	ldrb.w	r3, [sl]
 80069f0:	2b2a      	cmp	r3, #42	; 0x2a
 80069f2:	d015      	beq.n	8006a20 <_vfiprintf_r+0x13c>
 80069f4:	9a07      	ldr	r2, [sp, #28]
 80069f6:	4654      	mov	r4, sl
 80069f8:	2000      	movs	r0, #0
 80069fa:	f04f 0c0a 	mov.w	ip, #10
 80069fe:	4621      	mov	r1, r4
 8006a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a04:	3b30      	subs	r3, #48	; 0x30
 8006a06:	2b09      	cmp	r3, #9
 8006a08:	d94e      	bls.n	8006aa8 <_vfiprintf_r+0x1c4>
 8006a0a:	b1b0      	cbz	r0, 8006a3a <_vfiprintf_r+0x156>
 8006a0c:	9207      	str	r2, [sp, #28]
 8006a0e:	e014      	b.n	8006a3a <_vfiprintf_r+0x156>
 8006a10:	eba0 0308 	sub.w	r3, r0, r8
 8006a14:	fa09 f303 	lsl.w	r3, r9, r3
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	46a2      	mov	sl, r4
 8006a1e:	e7d2      	b.n	80069c6 <_vfiprintf_r+0xe2>
 8006a20:	9b03      	ldr	r3, [sp, #12]
 8006a22:	1d19      	adds	r1, r3, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	9103      	str	r1, [sp, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	bfbb      	ittet	lt
 8006a2c:	425b      	neglt	r3, r3
 8006a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a32:	9307      	strge	r3, [sp, #28]
 8006a34:	9307      	strlt	r3, [sp, #28]
 8006a36:	bfb8      	it	lt
 8006a38:	9204      	strlt	r2, [sp, #16]
 8006a3a:	7823      	ldrb	r3, [r4, #0]
 8006a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a3e:	d10c      	bne.n	8006a5a <_vfiprintf_r+0x176>
 8006a40:	7863      	ldrb	r3, [r4, #1]
 8006a42:	2b2a      	cmp	r3, #42	; 0x2a
 8006a44:	d135      	bne.n	8006ab2 <_vfiprintf_r+0x1ce>
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	1d1a      	adds	r2, r3, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	9203      	str	r2, [sp, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfb8      	it	lt
 8006a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a56:	3402      	adds	r4, #2
 8006a58:	9305      	str	r3, [sp, #20]
 8006a5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b40 <_vfiprintf_r+0x25c>
 8006a5e:	7821      	ldrb	r1, [r4, #0]
 8006a60:	2203      	movs	r2, #3
 8006a62:	4650      	mov	r0, sl
 8006a64:	f7f9 fbbc 	bl	80001e0 <memchr>
 8006a68:	b140      	cbz	r0, 8006a7c <_vfiprintf_r+0x198>
 8006a6a:	2340      	movs	r3, #64	; 0x40
 8006a6c:	eba0 000a 	sub.w	r0, r0, sl
 8006a70:	fa03 f000 	lsl.w	r0, r3, r0
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	4303      	orrs	r3, r0
 8006a78:	3401      	adds	r4, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a80:	482c      	ldr	r0, [pc, #176]	; (8006b34 <_vfiprintf_r+0x250>)
 8006a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a86:	2206      	movs	r2, #6
 8006a88:	f7f9 fbaa 	bl	80001e0 <memchr>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d03f      	beq.n	8006b10 <_vfiprintf_r+0x22c>
 8006a90:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <_vfiprintf_r+0x254>)
 8006a92:	bb1b      	cbnz	r3, 8006adc <_vfiprintf_r+0x1f8>
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	3307      	adds	r3, #7
 8006a98:	f023 0307 	bic.w	r3, r3, #7
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa2:	443b      	add	r3, r7
 8006aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa6:	e767      	b.n	8006978 <_vfiprintf_r+0x94>
 8006aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aac:	460c      	mov	r4, r1
 8006aae:	2001      	movs	r0, #1
 8006ab0:	e7a5      	b.n	80069fe <_vfiprintf_r+0x11a>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	3401      	adds	r4, #1
 8006ab6:	9305      	str	r3, [sp, #20]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f04f 0c0a 	mov.w	ip, #10
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ac4:	3a30      	subs	r2, #48	; 0x30
 8006ac6:	2a09      	cmp	r2, #9
 8006ac8:	d903      	bls.n	8006ad2 <_vfiprintf_r+0x1ee>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0c5      	beq.n	8006a5a <_vfiprintf_r+0x176>
 8006ace:	9105      	str	r1, [sp, #20]
 8006ad0:	e7c3      	b.n	8006a5a <_vfiprintf_r+0x176>
 8006ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e7f0      	b.n	8006abe <_vfiprintf_r+0x1da>
 8006adc:	ab03      	add	r3, sp, #12
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	4b16      	ldr	r3, [pc, #88]	; (8006b3c <_vfiprintf_r+0x258>)
 8006ae4:	a904      	add	r1, sp, #16
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f3af 8000 	nop.w
 8006aec:	4607      	mov	r7, r0
 8006aee:	1c78      	adds	r0, r7, #1
 8006af0:	d1d6      	bne.n	8006aa0 <_vfiprintf_r+0x1bc>
 8006af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006af4:	07d9      	lsls	r1, r3, #31
 8006af6:	d405      	bmi.n	8006b04 <_vfiprintf_r+0x220>
 8006af8:	89ab      	ldrh	r3, [r5, #12]
 8006afa:	059a      	lsls	r2, r3, #22
 8006afc:	d402      	bmi.n	8006b04 <_vfiprintf_r+0x220>
 8006afe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b00:	f000 fc45 	bl	800738e <__retarget_lock_release_recursive>
 8006b04:	89ab      	ldrh	r3, [r5, #12]
 8006b06:	065b      	lsls	r3, r3, #25
 8006b08:	f53f af12 	bmi.w	8006930 <_vfiprintf_r+0x4c>
 8006b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b0e:	e711      	b.n	8006934 <_vfiprintf_r+0x50>
 8006b10:	ab03      	add	r3, sp, #12
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	462a      	mov	r2, r5
 8006b16:	4b09      	ldr	r3, [pc, #36]	; (8006b3c <_vfiprintf_r+0x258>)
 8006b18:	a904      	add	r1, sp, #16
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f880 	bl	8006c20 <_printf_i>
 8006b20:	e7e4      	b.n	8006aec <_vfiprintf_r+0x208>
 8006b22:	bf00      	nop
 8006b24:	08007a54 	.word	0x08007a54
 8006b28:	08007a74 	.word	0x08007a74
 8006b2c:	08007a34 	.word	0x08007a34
 8006b30:	080079fe 	.word	0x080079fe
 8006b34:	08007a08 	.word	0x08007a08
 8006b38:	00000000 	.word	0x00000000
 8006b3c:	080068bf 	.word	0x080068bf
 8006b40:	08007a04 	.word	0x08007a04

08006b44 <_printf_common>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	4616      	mov	r6, r2
 8006b4a:	4699      	mov	r9, r3
 8006b4c:	688a      	ldr	r2, [r1, #8]
 8006b4e:	690b      	ldr	r3, [r1, #16]
 8006b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b54:	4293      	cmp	r3, r2
 8006b56:	bfb8      	it	lt
 8006b58:	4613      	movlt	r3, r2
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b60:	4607      	mov	r7, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	b10a      	cbz	r2, 8006b6a <_printf_common+0x26>
 8006b66:	3301      	adds	r3, #1
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	0699      	lsls	r1, r3, #26
 8006b6e:	bf42      	ittt	mi
 8006b70:	6833      	ldrmi	r3, [r6, #0]
 8006b72:	3302      	addmi	r3, #2
 8006b74:	6033      	strmi	r3, [r6, #0]
 8006b76:	6825      	ldr	r5, [r4, #0]
 8006b78:	f015 0506 	ands.w	r5, r5, #6
 8006b7c:	d106      	bne.n	8006b8c <_printf_common+0x48>
 8006b7e:	f104 0a19 	add.w	sl, r4, #25
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	6832      	ldr	r2, [r6, #0]
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dc26      	bgt.n	8006bda <_printf_common+0x96>
 8006b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b90:	1e13      	subs	r3, r2, #0
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	bf18      	it	ne
 8006b96:	2301      	movne	r3, #1
 8006b98:	0692      	lsls	r2, r2, #26
 8006b9a:	d42b      	bmi.n	8006bf4 <_printf_common+0xb0>
 8006b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	47c0      	blx	r8
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	d01e      	beq.n	8006be8 <_printf_common+0xa4>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	68e5      	ldr	r5, [r4, #12]
 8006bae:	6832      	ldr	r2, [r6, #0]
 8006bb0:	f003 0306 	and.w	r3, r3, #6
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	bf08      	it	eq
 8006bb8:	1aad      	subeq	r5, r5, r2
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	6922      	ldr	r2, [r4, #16]
 8006bbe:	bf0c      	ite	eq
 8006bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bc4:	2500      	movne	r5, #0
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	bfc4      	itt	gt
 8006bca:	1a9b      	subgt	r3, r3, r2
 8006bcc:	18ed      	addgt	r5, r5, r3
 8006bce:	2600      	movs	r6, #0
 8006bd0:	341a      	adds	r4, #26
 8006bd2:	42b5      	cmp	r5, r6
 8006bd4:	d11a      	bne.n	8006c0c <_printf_common+0xc8>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e008      	b.n	8006bec <_printf_common+0xa8>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4652      	mov	r2, sl
 8006bde:	4649      	mov	r1, r9
 8006be0:	4638      	mov	r0, r7
 8006be2:	47c0      	blx	r8
 8006be4:	3001      	adds	r0, #1
 8006be6:	d103      	bne.n	8006bf0 <_printf_common+0xac>
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	e7c6      	b.n	8006b82 <_printf_common+0x3e>
 8006bf4:	18e1      	adds	r1, r4, r3
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	2030      	movs	r0, #48	; 0x30
 8006bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bfe:	4422      	add	r2, r4
 8006c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c08:	3302      	adds	r3, #2
 8006c0a:	e7c7      	b.n	8006b9c <_printf_common+0x58>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	4622      	mov	r2, r4
 8006c10:	4649      	mov	r1, r9
 8006c12:	4638      	mov	r0, r7
 8006c14:	47c0      	blx	r8
 8006c16:	3001      	adds	r0, #1
 8006c18:	d0e6      	beq.n	8006be8 <_printf_common+0xa4>
 8006c1a:	3601      	adds	r6, #1
 8006c1c:	e7d9      	b.n	8006bd2 <_printf_common+0x8e>
	...

08006c20 <_printf_i>:
 8006c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	7e0f      	ldrb	r7, [r1, #24]
 8006c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c28:	2f78      	cmp	r7, #120	; 0x78
 8006c2a:	4691      	mov	r9, r2
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	469a      	mov	sl, r3
 8006c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c36:	d807      	bhi.n	8006c48 <_printf_i+0x28>
 8006c38:	2f62      	cmp	r7, #98	; 0x62
 8006c3a:	d80a      	bhi.n	8006c52 <_printf_i+0x32>
 8006c3c:	2f00      	cmp	r7, #0
 8006c3e:	f000 80d8 	beq.w	8006df2 <_printf_i+0x1d2>
 8006c42:	2f58      	cmp	r7, #88	; 0x58
 8006c44:	f000 80a3 	beq.w	8006d8e <_printf_i+0x16e>
 8006c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c50:	e03a      	b.n	8006cc8 <_printf_i+0xa8>
 8006c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c56:	2b15      	cmp	r3, #21
 8006c58:	d8f6      	bhi.n	8006c48 <_printf_i+0x28>
 8006c5a:	a101      	add	r1, pc, #4	; (adr r1, 8006c60 <_printf_i+0x40>)
 8006c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c60:	08006cb9 	.word	0x08006cb9
 8006c64:	08006ccd 	.word	0x08006ccd
 8006c68:	08006c49 	.word	0x08006c49
 8006c6c:	08006c49 	.word	0x08006c49
 8006c70:	08006c49 	.word	0x08006c49
 8006c74:	08006c49 	.word	0x08006c49
 8006c78:	08006ccd 	.word	0x08006ccd
 8006c7c:	08006c49 	.word	0x08006c49
 8006c80:	08006c49 	.word	0x08006c49
 8006c84:	08006c49 	.word	0x08006c49
 8006c88:	08006c49 	.word	0x08006c49
 8006c8c:	08006dd9 	.word	0x08006dd9
 8006c90:	08006cfd 	.word	0x08006cfd
 8006c94:	08006dbb 	.word	0x08006dbb
 8006c98:	08006c49 	.word	0x08006c49
 8006c9c:	08006c49 	.word	0x08006c49
 8006ca0:	08006dfb 	.word	0x08006dfb
 8006ca4:	08006c49 	.word	0x08006c49
 8006ca8:	08006cfd 	.word	0x08006cfd
 8006cac:	08006c49 	.word	0x08006c49
 8006cb0:	08006c49 	.word	0x08006c49
 8006cb4:	08006dc3 	.word	0x08006dc3
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	1d1a      	adds	r2, r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	602a      	str	r2, [r5, #0]
 8006cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0a3      	b.n	8006e14 <_printf_i+0x1f4>
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	6829      	ldr	r1, [r5, #0]
 8006cd0:	0606      	lsls	r6, r0, #24
 8006cd2:	f101 0304 	add.w	r3, r1, #4
 8006cd6:	d50a      	bpl.n	8006cee <_printf_i+0xce>
 8006cd8:	680e      	ldr	r6, [r1, #0]
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	da03      	bge.n	8006ce8 <_printf_i+0xc8>
 8006ce0:	232d      	movs	r3, #45	; 0x2d
 8006ce2:	4276      	negs	r6, r6
 8006ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce8:	485e      	ldr	r0, [pc, #376]	; (8006e64 <_printf_i+0x244>)
 8006cea:	230a      	movs	r3, #10
 8006cec:	e019      	b.n	8006d22 <_printf_i+0x102>
 8006cee:	680e      	ldr	r6, [r1, #0]
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cf6:	bf18      	it	ne
 8006cf8:	b236      	sxthne	r6, r6
 8006cfa:	e7ef      	b.n	8006cdc <_printf_i+0xbc>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	1d19      	adds	r1, r3, #4
 8006d02:	6029      	str	r1, [r5, #0]
 8006d04:	0601      	lsls	r1, r0, #24
 8006d06:	d501      	bpl.n	8006d0c <_printf_i+0xec>
 8006d08:	681e      	ldr	r6, [r3, #0]
 8006d0a:	e002      	b.n	8006d12 <_printf_i+0xf2>
 8006d0c:	0646      	lsls	r6, r0, #25
 8006d0e:	d5fb      	bpl.n	8006d08 <_printf_i+0xe8>
 8006d10:	881e      	ldrh	r6, [r3, #0]
 8006d12:	4854      	ldr	r0, [pc, #336]	; (8006e64 <_printf_i+0x244>)
 8006d14:	2f6f      	cmp	r7, #111	; 0x6f
 8006d16:	bf0c      	ite	eq
 8006d18:	2308      	moveq	r3, #8
 8006d1a:	230a      	movne	r3, #10
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d22:	6865      	ldr	r5, [r4, #4]
 8006d24:	60a5      	str	r5, [r4, #8]
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	bfa2      	ittt	ge
 8006d2a:	6821      	ldrge	r1, [r4, #0]
 8006d2c:	f021 0104 	bicge.w	r1, r1, #4
 8006d30:	6021      	strge	r1, [r4, #0]
 8006d32:	b90e      	cbnz	r6, 8006d38 <_printf_i+0x118>
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	d04d      	beq.n	8006dd4 <_printf_i+0x1b4>
 8006d38:	4615      	mov	r5, r2
 8006d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d42:	5dc7      	ldrb	r7, [r0, r7]
 8006d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d48:	4637      	mov	r7, r6
 8006d4a:	42bb      	cmp	r3, r7
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	d9f4      	bls.n	8006d3a <_printf_i+0x11a>
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d10b      	bne.n	8006d6c <_printf_i+0x14c>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	07de      	lsls	r6, r3, #31
 8006d58:	d508      	bpl.n	8006d6c <_printf_i+0x14c>
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	6861      	ldr	r1, [r4, #4]
 8006d5e:	4299      	cmp	r1, r3
 8006d60:	bfde      	ittt	le
 8006d62:	2330      	movle	r3, #48	; 0x30
 8006d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d6c:	1b52      	subs	r2, r2, r5
 8006d6e:	6122      	str	r2, [r4, #16]
 8006d70:	f8cd a000 	str.w	sl, [sp]
 8006d74:	464b      	mov	r3, r9
 8006d76:	aa03      	add	r2, sp, #12
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	f7ff fee2 	bl	8006b44 <_printf_common>
 8006d80:	3001      	adds	r0, #1
 8006d82:	d14c      	bne.n	8006e1e <_printf_i+0x1fe>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	b004      	add	sp, #16
 8006d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d8e:	4835      	ldr	r0, [pc, #212]	; (8006e64 <_printf_i+0x244>)
 8006d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d94:	6829      	ldr	r1, [r5, #0]
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d9c:	6029      	str	r1, [r5, #0]
 8006d9e:	061d      	lsls	r5, r3, #24
 8006da0:	d514      	bpl.n	8006dcc <_printf_i+0x1ac>
 8006da2:	07df      	lsls	r7, r3, #31
 8006da4:	bf44      	itt	mi
 8006da6:	f043 0320 	orrmi.w	r3, r3, #32
 8006daa:	6023      	strmi	r3, [r4, #0]
 8006dac:	b91e      	cbnz	r6, 8006db6 <_printf_i+0x196>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	f023 0320 	bic.w	r3, r3, #32
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	2310      	movs	r3, #16
 8006db8:	e7b0      	b.n	8006d1c <_printf_i+0xfc>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	f043 0320 	orr.w	r3, r3, #32
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	2378      	movs	r3, #120	; 0x78
 8006dc4:	4828      	ldr	r0, [pc, #160]	; (8006e68 <_printf_i+0x248>)
 8006dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dca:	e7e3      	b.n	8006d94 <_printf_i+0x174>
 8006dcc:	0659      	lsls	r1, r3, #25
 8006dce:	bf48      	it	mi
 8006dd0:	b2b6      	uxthmi	r6, r6
 8006dd2:	e7e6      	b.n	8006da2 <_printf_i+0x182>
 8006dd4:	4615      	mov	r5, r2
 8006dd6:	e7bb      	b.n	8006d50 <_printf_i+0x130>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	6826      	ldr	r6, [r4, #0]
 8006ddc:	6961      	ldr	r1, [r4, #20]
 8006dde:	1d18      	adds	r0, r3, #4
 8006de0:	6028      	str	r0, [r5, #0]
 8006de2:	0635      	lsls	r5, r6, #24
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	d501      	bpl.n	8006dec <_printf_i+0x1cc>
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	e002      	b.n	8006df2 <_printf_i+0x1d2>
 8006dec:	0670      	lsls	r0, r6, #25
 8006dee:	d5fb      	bpl.n	8006de8 <_printf_i+0x1c8>
 8006df0:	8019      	strh	r1, [r3, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	4615      	mov	r5, r2
 8006df8:	e7ba      	b.n	8006d70 <_printf_i+0x150>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	602a      	str	r2, [r5, #0]
 8006e00:	681d      	ldr	r5, [r3, #0]
 8006e02:	6862      	ldr	r2, [r4, #4]
 8006e04:	2100      	movs	r1, #0
 8006e06:	4628      	mov	r0, r5
 8006e08:	f7f9 f9ea 	bl	80001e0 <memchr>
 8006e0c:	b108      	cbz	r0, 8006e12 <_printf_i+0x1f2>
 8006e0e:	1b40      	subs	r0, r0, r5
 8006e10:	6060      	str	r0, [r4, #4]
 8006e12:	6863      	ldr	r3, [r4, #4]
 8006e14:	6123      	str	r3, [r4, #16]
 8006e16:	2300      	movs	r3, #0
 8006e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e1c:	e7a8      	b.n	8006d70 <_printf_i+0x150>
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4649      	mov	r1, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	47d0      	blx	sl
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d0ab      	beq.n	8006d84 <_printf_i+0x164>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	079b      	lsls	r3, r3, #30
 8006e30:	d413      	bmi.n	8006e5a <_printf_i+0x23a>
 8006e32:	68e0      	ldr	r0, [r4, #12]
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	4298      	cmp	r0, r3
 8006e38:	bfb8      	it	lt
 8006e3a:	4618      	movlt	r0, r3
 8006e3c:	e7a4      	b.n	8006d88 <_printf_i+0x168>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	4632      	mov	r2, r6
 8006e42:	4649      	mov	r1, r9
 8006e44:	4640      	mov	r0, r8
 8006e46:	47d0      	blx	sl
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d09b      	beq.n	8006d84 <_printf_i+0x164>
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	9903      	ldr	r1, [sp, #12]
 8006e52:	1a5b      	subs	r3, r3, r1
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dcf2      	bgt.n	8006e3e <_printf_i+0x21e>
 8006e58:	e7eb      	b.n	8006e32 <_printf_i+0x212>
 8006e5a:	2500      	movs	r5, #0
 8006e5c:	f104 0619 	add.w	r6, r4, #25
 8006e60:	e7f5      	b.n	8006e4e <_printf_i+0x22e>
 8006e62:	bf00      	nop
 8006e64:	08007a0f 	.word	0x08007a0f
 8006e68:	08007a20 	.word	0x08007a20

08006e6c <_sbrk_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d06      	ldr	r5, [pc, #24]	; (8006e88 <_sbrk_r+0x1c>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	f7fb fb44 	bl	8002504 <_sbrk>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_sbrk_r+0x1a>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_sbrk_r+0x1a>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	200006b0 	.word	0x200006b0

08006e8c <__swbuf_r>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	460e      	mov	r6, r1
 8006e90:	4614      	mov	r4, r2
 8006e92:	4605      	mov	r5, r0
 8006e94:	b118      	cbz	r0, 8006e9e <__swbuf_r+0x12>
 8006e96:	6983      	ldr	r3, [r0, #24]
 8006e98:	b90b      	cbnz	r3, 8006e9e <__swbuf_r+0x12>
 8006e9a:	f000 f9d9 	bl	8007250 <__sinit>
 8006e9e:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <__swbuf_r+0x98>)
 8006ea0:	429c      	cmp	r4, r3
 8006ea2:	d12b      	bne.n	8006efc <__swbuf_r+0x70>
 8006ea4:	686c      	ldr	r4, [r5, #4]
 8006ea6:	69a3      	ldr	r3, [r4, #24]
 8006ea8:	60a3      	str	r3, [r4, #8]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	071a      	lsls	r2, r3, #28
 8006eae:	d52f      	bpl.n	8006f10 <__swbuf_r+0x84>
 8006eb0:	6923      	ldr	r3, [r4, #16]
 8006eb2:	b36b      	cbz	r3, 8006f10 <__swbuf_r+0x84>
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	1ac0      	subs	r0, r0, r3
 8006eba:	6963      	ldr	r3, [r4, #20]
 8006ebc:	b2f6      	uxtb	r6, r6
 8006ebe:	4283      	cmp	r3, r0
 8006ec0:	4637      	mov	r7, r6
 8006ec2:	dc04      	bgt.n	8006ece <__swbuf_r+0x42>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f000 f92e 	bl	8007128 <_fflush_r>
 8006ecc:	bb30      	cbnz	r0, 8006f1c <__swbuf_r+0x90>
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	701e      	strb	r6, [r3, #0]
 8006edc:	6963      	ldr	r3, [r4, #20]
 8006ede:	3001      	adds	r0, #1
 8006ee0:	4283      	cmp	r3, r0
 8006ee2:	d004      	beq.n	8006eee <__swbuf_r+0x62>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	07db      	lsls	r3, r3, #31
 8006ee8:	d506      	bpl.n	8006ef8 <__swbuf_r+0x6c>
 8006eea:	2e0a      	cmp	r6, #10
 8006eec:	d104      	bne.n	8006ef8 <__swbuf_r+0x6c>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f000 f919 	bl	8007128 <_fflush_r>
 8006ef6:	b988      	cbnz	r0, 8006f1c <__swbuf_r+0x90>
 8006ef8:	4638      	mov	r0, r7
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <__swbuf_r+0x9c>)
 8006efe:	429c      	cmp	r4, r3
 8006f00:	d101      	bne.n	8006f06 <__swbuf_r+0x7a>
 8006f02:	68ac      	ldr	r4, [r5, #8]
 8006f04:	e7cf      	b.n	8006ea6 <__swbuf_r+0x1a>
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <__swbuf_r+0xa0>)
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	bf08      	it	eq
 8006f0c:	68ec      	ldreq	r4, [r5, #12]
 8006f0e:	e7ca      	b.n	8006ea6 <__swbuf_r+0x1a>
 8006f10:	4621      	mov	r1, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f80c 	bl	8006f30 <__swsetup_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d0cb      	beq.n	8006eb4 <__swbuf_r+0x28>
 8006f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f20:	e7ea      	b.n	8006ef8 <__swbuf_r+0x6c>
 8006f22:	bf00      	nop
 8006f24:	08007a54 	.word	0x08007a54
 8006f28:	08007a74 	.word	0x08007a74
 8006f2c:	08007a34 	.word	0x08007a34

08006f30 <__swsetup_r>:
 8006f30:	4b32      	ldr	r3, [pc, #200]	; (8006ffc <__swsetup_r+0xcc>)
 8006f32:	b570      	push	{r4, r5, r6, lr}
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	4606      	mov	r6, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	b125      	cbz	r5, 8006f46 <__swsetup_r+0x16>
 8006f3c:	69ab      	ldr	r3, [r5, #24]
 8006f3e:	b913      	cbnz	r3, 8006f46 <__swsetup_r+0x16>
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 f985 	bl	8007250 <__sinit>
 8006f46:	4b2e      	ldr	r3, [pc, #184]	; (8007000 <__swsetup_r+0xd0>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	d10f      	bne.n	8006f6c <__swsetup_r+0x3c>
 8006f4c:	686c      	ldr	r4, [r5, #4]
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f54:	0719      	lsls	r1, r3, #28
 8006f56:	d42c      	bmi.n	8006fb2 <__swsetup_r+0x82>
 8006f58:	06dd      	lsls	r5, r3, #27
 8006f5a:	d411      	bmi.n	8006f80 <__swsetup_r+0x50>
 8006f5c:	2309      	movs	r3, #9
 8006f5e:	6033      	str	r3, [r6, #0]
 8006f60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	e03e      	b.n	8006fea <__swsetup_r+0xba>
 8006f6c:	4b25      	ldr	r3, [pc, #148]	; (8007004 <__swsetup_r+0xd4>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d101      	bne.n	8006f76 <__swsetup_r+0x46>
 8006f72:	68ac      	ldr	r4, [r5, #8]
 8006f74:	e7eb      	b.n	8006f4e <__swsetup_r+0x1e>
 8006f76:	4b24      	ldr	r3, [pc, #144]	; (8007008 <__swsetup_r+0xd8>)
 8006f78:	429c      	cmp	r4, r3
 8006f7a:	bf08      	it	eq
 8006f7c:	68ec      	ldreq	r4, [r5, #12]
 8006f7e:	e7e6      	b.n	8006f4e <__swsetup_r+0x1e>
 8006f80:	0758      	lsls	r0, r3, #29
 8006f82:	d512      	bpl.n	8006faa <__swsetup_r+0x7a>
 8006f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f86:	b141      	cbz	r1, 8006f9a <__swsetup_r+0x6a>
 8006f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	d002      	beq.n	8006f96 <__swsetup_r+0x66>
 8006f90:	4630      	mov	r0, r6
 8006f92:	f7ff fa41 	bl	8006418 <_free_r>
 8006f96:	2300      	movs	r3, #0
 8006f98:	6363      	str	r3, [r4, #52]	; 0x34
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	f043 0308 	orr.w	r3, r3, #8
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	b94b      	cbnz	r3, 8006fca <__swsetup_r+0x9a>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc0:	d003      	beq.n	8006fca <__swsetup_r+0x9a>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f000 fa09 	bl	80073dc <__smakebuf_r>
 8006fca:	89a0      	ldrh	r0, [r4, #12]
 8006fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fd0:	f010 0301 	ands.w	r3, r0, #1
 8006fd4:	d00a      	beq.n	8006fec <__swsetup_r+0xbc>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60a3      	str	r3, [r4, #8]
 8006fda:	6963      	ldr	r3, [r4, #20]
 8006fdc:	425b      	negs	r3, r3
 8006fde:	61a3      	str	r3, [r4, #24]
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	b943      	cbnz	r3, 8006ff6 <__swsetup_r+0xc6>
 8006fe4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fe8:	d1ba      	bne.n	8006f60 <__swsetup_r+0x30>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	0781      	lsls	r1, r0, #30
 8006fee:	bf58      	it	pl
 8006ff0:	6963      	ldrpl	r3, [r4, #20]
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	e7f4      	b.n	8006fe0 <__swsetup_r+0xb0>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e7f7      	b.n	8006fea <__swsetup_r+0xba>
 8006ffa:	bf00      	nop
 8006ffc:	2000006c 	.word	0x2000006c
 8007000:	08007a54 	.word	0x08007a54
 8007004:	08007a74 	.word	0x08007a74
 8007008:	08007a34 	.word	0x08007a34

0800700c <abort>:
 800700c:	b508      	push	{r3, lr}
 800700e:	2006      	movs	r0, #6
 8007010:	f000 fab0 	bl	8007574 <raise>
 8007014:	2001      	movs	r0, #1
 8007016:	f7fb f9fd 	bl	8002414 <_exit>
	...

0800701c <__sflush_r>:
 800701c:	898a      	ldrh	r2, [r1, #12]
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	4605      	mov	r5, r0
 8007024:	0710      	lsls	r0, r2, #28
 8007026:	460c      	mov	r4, r1
 8007028:	d458      	bmi.n	80070dc <__sflush_r+0xc0>
 800702a:	684b      	ldr	r3, [r1, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dc05      	bgt.n	800703c <__sflush_r+0x20>
 8007030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	dc02      	bgt.n	800703c <__sflush_r+0x20>
 8007036:	2000      	movs	r0, #0
 8007038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800703e:	2e00      	cmp	r6, #0
 8007040:	d0f9      	beq.n	8007036 <__sflush_r+0x1a>
 8007042:	2300      	movs	r3, #0
 8007044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007048:	682f      	ldr	r7, [r5, #0]
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	d032      	beq.n	80070b4 <__sflush_r+0x98>
 800704e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	075a      	lsls	r2, r3, #29
 8007054:	d505      	bpl.n	8007062 <__sflush_r+0x46>
 8007056:	6863      	ldr	r3, [r4, #4]
 8007058:	1ac0      	subs	r0, r0, r3
 800705a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800705c:	b10b      	cbz	r3, 8007062 <__sflush_r+0x46>
 800705e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007060:	1ac0      	subs	r0, r0, r3
 8007062:	2300      	movs	r3, #0
 8007064:	4602      	mov	r2, r0
 8007066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007068:	6a21      	ldr	r1, [r4, #32]
 800706a:	4628      	mov	r0, r5
 800706c:	47b0      	blx	r6
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	d106      	bne.n	8007082 <__sflush_r+0x66>
 8007074:	6829      	ldr	r1, [r5, #0]
 8007076:	291d      	cmp	r1, #29
 8007078:	d82c      	bhi.n	80070d4 <__sflush_r+0xb8>
 800707a:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <__sflush_r+0x108>)
 800707c:	40ca      	lsrs	r2, r1
 800707e:	07d6      	lsls	r6, r2, #31
 8007080:	d528      	bpl.n	80070d4 <__sflush_r+0xb8>
 8007082:	2200      	movs	r2, #0
 8007084:	6062      	str	r2, [r4, #4]
 8007086:	04d9      	lsls	r1, r3, #19
 8007088:	6922      	ldr	r2, [r4, #16]
 800708a:	6022      	str	r2, [r4, #0]
 800708c:	d504      	bpl.n	8007098 <__sflush_r+0x7c>
 800708e:	1c42      	adds	r2, r0, #1
 8007090:	d101      	bne.n	8007096 <__sflush_r+0x7a>
 8007092:	682b      	ldr	r3, [r5, #0]
 8007094:	b903      	cbnz	r3, 8007098 <__sflush_r+0x7c>
 8007096:	6560      	str	r0, [r4, #84]	; 0x54
 8007098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800709a:	602f      	str	r7, [r5, #0]
 800709c:	2900      	cmp	r1, #0
 800709e:	d0ca      	beq.n	8007036 <__sflush_r+0x1a>
 80070a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070a4:	4299      	cmp	r1, r3
 80070a6:	d002      	beq.n	80070ae <__sflush_r+0x92>
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff f9b5 	bl	8006418 <_free_r>
 80070ae:	2000      	movs	r0, #0
 80070b0:	6360      	str	r0, [r4, #52]	; 0x34
 80070b2:	e7c1      	b.n	8007038 <__sflush_r+0x1c>
 80070b4:	6a21      	ldr	r1, [r4, #32]
 80070b6:	2301      	movs	r3, #1
 80070b8:	4628      	mov	r0, r5
 80070ba:	47b0      	blx	r6
 80070bc:	1c41      	adds	r1, r0, #1
 80070be:	d1c7      	bne.n	8007050 <__sflush_r+0x34>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0c4      	beq.n	8007050 <__sflush_r+0x34>
 80070c6:	2b1d      	cmp	r3, #29
 80070c8:	d001      	beq.n	80070ce <__sflush_r+0xb2>
 80070ca:	2b16      	cmp	r3, #22
 80070cc:	d101      	bne.n	80070d2 <__sflush_r+0xb6>
 80070ce:	602f      	str	r7, [r5, #0]
 80070d0:	e7b1      	b.n	8007036 <__sflush_r+0x1a>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	e7ad      	b.n	8007038 <__sflush_r+0x1c>
 80070dc:	690f      	ldr	r7, [r1, #16]
 80070de:	2f00      	cmp	r7, #0
 80070e0:	d0a9      	beq.n	8007036 <__sflush_r+0x1a>
 80070e2:	0793      	lsls	r3, r2, #30
 80070e4:	680e      	ldr	r6, [r1, #0]
 80070e6:	bf08      	it	eq
 80070e8:	694b      	ldreq	r3, [r1, #20]
 80070ea:	600f      	str	r7, [r1, #0]
 80070ec:	bf18      	it	ne
 80070ee:	2300      	movne	r3, #0
 80070f0:	eba6 0807 	sub.w	r8, r6, r7
 80070f4:	608b      	str	r3, [r1, #8]
 80070f6:	f1b8 0f00 	cmp.w	r8, #0
 80070fa:	dd9c      	ble.n	8007036 <__sflush_r+0x1a>
 80070fc:	6a21      	ldr	r1, [r4, #32]
 80070fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007100:	4643      	mov	r3, r8
 8007102:	463a      	mov	r2, r7
 8007104:	4628      	mov	r0, r5
 8007106:	47b0      	blx	r6
 8007108:	2800      	cmp	r0, #0
 800710a:	dc06      	bgt.n	800711a <__sflush_r+0xfe>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	e78e      	b.n	8007038 <__sflush_r+0x1c>
 800711a:	4407      	add	r7, r0
 800711c:	eba8 0800 	sub.w	r8, r8, r0
 8007120:	e7e9      	b.n	80070f6 <__sflush_r+0xda>
 8007122:	bf00      	nop
 8007124:	20400001 	.word	0x20400001

08007128 <_fflush_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	690b      	ldr	r3, [r1, #16]
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b913      	cbnz	r3, 8007138 <_fflush_r+0x10>
 8007132:	2500      	movs	r5, #0
 8007134:	4628      	mov	r0, r5
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	b118      	cbz	r0, 8007142 <_fflush_r+0x1a>
 800713a:	6983      	ldr	r3, [r0, #24]
 800713c:	b90b      	cbnz	r3, 8007142 <_fflush_r+0x1a>
 800713e:	f000 f887 	bl	8007250 <__sinit>
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <_fflush_r+0x6c>)
 8007144:	429c      	cmp	r4, r3
 8007146:	d11b      	bne.n	8007180 <_fflush_r+0x58>
 8007148:	686c      	ldr	r4, [r5, #4]
 800714a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0ef      	beq.n	8007132 <_fflush_r+0xa>
 8007152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007154:	07d0      	lsls	r0, r2, #31
 8007156:	d404      	bmi.n	8007162 <_fflush_r+0x3a>
 8007158:	0599      	lsls	r1, r3, #22
 800715a:	d402      	bmi.n	8007162 <_fflush_r+0x3a>
 800715c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800715e:	f000 f915 	bl	800738c <__retarget_lock_acquire_recursive>
 8007162:	4628      	mov	r0, r5
 8007164:	4621      	mov	r1, r4
 8007166:	f7ff ff59 	bl	800701c <__sflush_r>
 800716a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800716c:	07da      	lsls	r2, r3, #31
 800716e:	4605      	mov	r5, r0
 8007170:	d4e0      	bmi.n	8007134 <_fflush_r+0xc>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	059b      	lsls	r3, r3, #22
 8007176:	d4dd      	bmi.n	8007134 <_fflush_r+0xc>
 8007178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800717a:	f000 f908 	bl	800738e <__retarget_lock_release_recursive>
 800717e:	e7d9      	b.n	8007134 <_fflush_r+0xc>
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <_fflush_r+0x70>)
 8007182:	429c      	cmp	r4, r3
 8007184:	d101      	bne.n	800718a <_fflush_r+0x62>
 8007186:	68ac      	ldr	r4, [r5, #8]
 8007188:	e7df      	b.n	800714a <_fflush_r+0x22>
 800718a:	4b04      	ldr	r3, [pc, #16]	; (800719c <_fflush_r+0x74>)
 800718c:	429c      	cmp	r4, r3
 800718e:	bf08      	it	eq
 8007190:	68ec      	ldreq	r4, [r5, #12]
 8007192:	e7da      	b.n	800714a <_fflush_r+0x22>
 8007194:	08007a54 	.word	0x08007a54
 8007198:	08007a74 	.word	0x08007a74
 800719c:	08007a34 	.word	0x08007a34

080071a0 <std>:
 80071a0:	2300      	movs	r3, #0
 80071a2:	b510      	push	{r4, lr}
 80071a4:	4604      	mov	r4, r0
 80071a6:	e9c0 3300 	strd	r3, r3, [r0]
 80071aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ae:	6083      	str	r3, [r0, #8]
 80071b0:	8181      	strh	r1, [r0, #12]
 80071b2:	6643      	str	r3, [r0, #100]	; 0x64
 80071b4:	81c2      	strh	r2, [r0, #14]
 80071b6:	6183      	str	r3, [r0, #24]
 80071b8:	4619      	mov	r1, r3
 80071ba:	2208      	movs	r2, #8
 80071bc:	305c      	adds	r0, #92	; 0x5c
 80071be:	f7ff f833 	bl	8006228 <memset>
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <std+0x38>)
 80071c4:	6263      	str	r3, [r4, #36]	; 0x24
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <std+0x3c>)
 80071c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <std+0x40>)
 80071cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <std+0x44>)
 80071d0:	6224      	str	r4, [r4, #32]
 80071d2:	6323      	str	r3, [r4, #48]	; 0x30
 80071d4:	bd10      	pop	{r4, pc}
 80071d6:	bf00      	nop
 80071d8:	080075ad 	.word	0x080075ad
 80071dc:	080075cf 	.word	0x080075cf
 80071e0:	08007607 	.word	0x08007607
 80071e4:	0800762b 	.word	0x0800762b

080071e8 <_cleanup_r>:
 80071e8:	4901      	ldr	r1, [pc, #4]	; (80071f0 <_cleanup_r+0x8>)
 80071ea:	f000 b8af 	b.w	800734c <_fwalk_reent>
 80071ee:	bf00      	nop
 80071f0:	08007129 	.word	0x08007129

080071f4 <__sfmoreglue>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	2268      	movs	r2, #104	; 0x68
 80071f8:	1e4d      	subs	r5, r1, #1
 80071fa:	4355      	muls	r5, r2
 80071fc:	460e      	mov	r6, r1
 80071fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007202:	f7ff f975 	bl	80064f0 <_malloc_r>
 8007206:	4604      	mov	r4, r0
 8007208:	b140      	cbz	r0, 800721c <__sfmoreglue+0x28>
 800720a:	2100      	movs	r1, #0
 800720c:	e9c0 1600 	strd	r1, r6, [r0]
 8007210:	300c      	adds	r0, #12
 8007212:	60a0      	str	r0, [r4, #8]
 8007214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007218:	f7ff f806 	bl	8006228 <memset>
 800721c:	4620      	mov	r0, r4
 800721e:	bd70      	pop	{r4, r5, r6, pc}

08007220 <__sfp_lock_acquire>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__sfp_lock_acquire+0x8>)
 8007222:	f000 b8b3 	b.w	800738c <__retarget_lock_acquire_recursive>
 8007226:	bf00      	nop
 8007228:	200006b5 	.word	0x200006b5

0800722c <__sfp_lock_release>:
 800722c:	4801      	ldr	r0, [pc, #4]	; (8007234 <__sfp_lock_release+0x8>)
 800722e:	f000 b8ae 	b.w	800738e <__retarget_lock_release_recursive>
 8007232:	bf00      	nop
 8007234:	200006b5 	.word	0x200006b5

08007238 <__sinit_lock_acquire>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__sinit_lock_acquire+0x8>)
 800723a:	f000 b8a7 	b.w	800738c <__retarget_lock_acquire_recursive>
 800723e:	bf00      	nop
 8007240:	200006b6 	.word	0x200006b6

08007244 <__sinit_lock_release>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__sinit_lock_release+0x8>)
 8007246:	f000 b8a2 	b.w	800738e <__retarget_lock_release_recursive>
 800724a:	bf00      	nop
 800724c:	200006b6 	.word	0x200006b6

08007250 <__sinit>:
 8007250:	b510      	push	{r4, lr}
 8007252:	4604      	mov	r4, r0
 8007254:	f7ff fff0 	bl	8007238 <__sinit_lock_acquire>
 8007258:	69a3      	ldr	r3, [r4, #24]
 800725a:	b11b      	cbz	r3, 8007264 <__sinit+0x14>
 800725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007260:	f7ff bff0 	b.w	8007244 <__sinit_lock_release>
 8007264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007268:	6523      	str	r3, [r4, #80]	; 0x50
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <__sinit+0x68>)
 800726c:	4a13      	ldr	r2, [pc, #76]	; (80072bc <__sinit+0x6c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	62a2      	str	r2, [r4, #40]	; 0x28
 8007272:	42a3      	cmp	r3, r4
 8007274:	bf04      	itt	eq
 8007276:	2301      	moveq	r3, #1
 8007278:	61a3      	streq	r3, [r4, #24]
 800727a:	4620      	mov	r0, r4
 800727c:	f000 f820 	bl	80072c0 <__sfp>
 8007280:	6060      	str	r0, [r4, #4]
 8007282:	4620      	mov	r0, r4
 8007284:	f000 f81c 	bl	80072c0 <__sfp>
 8007288:	60a0      	str	r0, [r4, #8]
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f818 	bl	80072c0 <__sfp>
 8007290:	2200      	movs	r2, #0
 8007292:	60e0      	str	r0, [r4, #12]
 8007294:	2104      	movs	r1, #4
 8007296:	6860      	ldr	r0, [r4, #4]
 8007298:	f7ff ff82 	bl	80071a0 <std>
 800729c:	68a0      	ldr	r0, [r4, #8]
 800729e:	2201      	movs	r2, #1
 80072a0:	2109      	movs	r1, #9
 80072a2:	f7ff ff7d 	bl	80071a0 <std>
 80072a6:	68e0      	ldr	r0, [r4, #12]
 80072a8:	2202      	movs	r2, #2
 80072aa:	2112      	movs	r1, #18
 80072ac:	f7ff ff78 	bl	80071a0 <std>
 80072b0:	2301      	movs	r3, #1
 80072b2:	61a3      	str	r3, [r4, #24]
 80072b4:	e7d2      	b.n	800725c <__sinit+0xc>
 80072b6:	bf00      	nop
 80072b8:	0800794c 	.word	0x0800794c
 80072bc:	080071e9 	.word	0x080071e9

080072c0 <__sfp>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	4607      	mov	r7, r0
 80072c4:	f7ff ffac 	bl	8007220 <__sfp_lock_acquire>
 80072c8:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <__sfp+0x84>)
 80072ca:	681e      	ldr	r6, [r3, #0]
 80072cc:	69b3      	ldr	r3, [r6, #24]
 80072ce:	b913      	cbnz	r3, 80072d6 <__sfp+0x16>
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff ffbd 	bl	8007250 <__sinit>
 80072d6:	3648      	adds	r6, #72	; 0x48
 80072d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072dc:	3b01      	subs	r3, #1
 80072de:	d503      	bpl.n	80072e8 <__sfp+0x28>
 80072e0:	6833      	ldr	r3, [r6, #0]
 80072e2:	b30b      	cbz	r3, 8007328 <__sfp+0x68>
 80072e4:	6836      	ldr	r6, [r6, #0]
 80072e6:	e7f7      	b.n	80072d8 <__sfp+0x18>
 80072e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072ec:	b9d5      	cbnz	r5, 8007324 <__sfp+0x64>
 80072ee:	4b16      	ldr	r3, [pc, #88]	; (8007348 <__sfp+0x88>)
 80072f0:	60e3      	str	r3, [r4, #12]
 80072f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072f6:	6665      	str	r5, [r4, #100]	; 0x64
 80072f8:	f000 f847 	bl	800738a <__retarget_lock_init_recursive>
 80072fc:	f7ff ff96 	bl	800722c <__sfp_lock_release>
 8007300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007308:	6025      	str	r5, [r4, #0]
 800730a:	61a5      	str	r5, [r4, #24]
 800730c:	2208      	movs	r2, #8
 800730e:	4629      	mov	r1, r5
 8007310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007314:	f7fe ff88 	bl	8006228 <memset>
 8007318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800731c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007320:	4620      	mov	r0, r4
 8007322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007324:	3468      	adds	r4, #104	; 0x68
 8007326:	e7d9      	b.n	80072dc <__sfp+0x1c>
 8007328:	2104      	movs	r1, #4
 800732a:	4638      	mov	r0, r7
 800732c:	f7ff ff62 	bl	80071f4 <__sfmoreglue>
 8007330:	4604      	mov	r4, r0
 8007332:	6030      	str	r0, [r6, #0]
 8007334:	2800      	cmp	r0, #0
 8007336:	d1d5      	bne.n	80072e4 <__sfp+0x24>
 8007338:	f7ff ff78 	bl	800722c <__sfp_lock_release>
 800733c:	230c      	movs	r3, #12
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	e7ee      	b.n	8007320 <__sfp+0x60>
 8007342:	bf00      	nop
 8007344:	0800794c 	.word	0x0800794c
 8007348:	ffff0001 	.word	0xffff0001

0800734c <_fwalk_reent>:
 800734c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007350:	4606      	mov	r6, r0
 8007352:	4688      	mov	r8, r1
 8007354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007358:	2700      	movs	r7, #0
 800735a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800735e:	f1b9 0901 	subs.w	r9, r9, #1
 8007362:	d505      	bpl.n	8007370 <_fwalk_reent+0x24>
 8007364:	6824      	ldr	r4, [r4, #0]
 8007366:	2c00      	cmp	r4, #0
 8007368:	d1f7      	bne.n	800735a <_fwalk_reent+0xe>
 800736a:	4638      	mov	r0, r7
 800736c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007370:	89ab      	ldrh	r3, [r5, #12]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d907      	bls.n	8007386 <_fwalk_reent+0x3a>
 8007376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800737a:	3301      	adds	r3, #1
 800737c:	d003      	beq.n	8007386 <_fwalk_reent+0x3a>
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	47c0      	blx	r8
 8007384:	4307      	orrs	r7, r0
 8007386:	3568      	adds	r5, #104	; 0x68
 8007388:	e7e9      	b.n	800735e <_fwalk_reent+0x12>

0800738a <__retarget_lock_init_recursive>:
 800738a:	4770      	bx	lr

0800738c <__retarget_lock_acquire_recursive>:
 800738c:	4770      	bx	lr

0800738e <__retarget_lock_release_recursive>:
 800738e:	4770      	bx	lr

08007390 <__swhatbuf_r>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	460e      	mov	r6, r1
 8007394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007398:	2900      	cmp	r1, #0
 800739a:	b096      	sub	sp, #88	; 0x58
 800739c:	4614      	mov	r4, r2
 800739e:	461d      	mov	r5, r3
 80073a0:	da08      	bge.n	80073b4 <__swhatbuf_r+0x24>
 80073a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	602a      	str	r2, [r5, #0]
 80073aa:	061a      	lsls	r2, r3, #24
 80073ac:	d410      	bmi.n	80073d0 <__swhatbuf_r+0x40>
 80073ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b2:	e00e      	b.n	80073d2 <__swhatbuf_r+0x42>
 80073b4:	466a      	mov	r2, sp
 80073b6:	f000 f95f 	bl	8007678 <_fstat_r>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	dbf1      	blt.n	80073a2 <__swhatbuf_r+0x12>
 80073be:	9a01      	ldr	r2, [sp, #4]
 80073c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073c8:	425a      	negs	r2, r3
 80073ca:	415a      	adcs	r2, r3
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	e7ee      	b.n	80073ae <__swhatbuf_r+0x1e>
 80073d0:	2340      	movs	r3, #64	; 0x40
 80073d2:	2000      	movs	r0, #0
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	b016      	add	sp, #88	; 0x58
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080073dc <__smakebuf_r>:
 80073dc:	898b      	ldrh	r3, [r1, #12]
 80073de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073e0:	079d      	lsls	r5, r3, #30
 80073e2:	4606      	mov	r6, r0
 80073e4:	460c      	mov	r4, r1
 80073e6:	d507      	bpl.n	80073f8 <__smakebuf_r+0x1c>
 80073e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	2301      	movs	r3, #1
 80073f2:	6163      	str	r3, [r4, #20]
 80073f4:	b002      	add	sp, #8
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	ab01      	add	r3, sp, #4
 80073fa:	466a      	mov	r2, sp
 80073fc:	f7ff ffc8 	bl	8007390 <__swhatbuf_r>
 8007400:	9900      	ldr	r1, [sp, #0]
 8007402:	4605      	mov	r5, r0
 8007404:	4630      	mov	r0, r6
 8007406:	f7ff f873 	bl	80064f0 <_malloc_r>
 800740a:	b948      	cbnz	r0, 8007420 <__smakebuf_r+0x44>
 800740c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007410:	059a      	lsls	r2, r3, #22
 8007412:	d4ef      	bmi.n	80073f4 <__smakebuf_r+0x18>
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	f043 0302 	orr.w	r3, r3, #2
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	e7e3      	b.n	80073e8 <__smakebuf_r+0xc>
 8007420:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <__smakebuf_r+0x7c>)
 8007422:	62b3      	str	r3, [r6, #40]	; 0x28
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	6020      	str	r0, [r4, #0]
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	6163      	str	r3, [r4, #20]
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	6120      	str	r0, [r4, #16]
 8007436:	b15b      	cbz	r3, 8007450 <__smakebuf_r+0x74>
 8007438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 f92d 	bl	800769c <_isatty_r>
 8007442:	b128      	cbz	r0, 8007450 <__smakebuf_r+0x74>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	89a0      	ldrh	r0, [r4, #12]
 8007452:	4305      	orrs	r5, r0
 8007454:	81a5      	strh	r5, [r4, #12]
 8007456:	e7cd      	b.n	80073f4 <__smakebuf_r+0x18>
 8007458:	080071e9 	.word	0x080071e9

0800745c <memcpy>:
 800745c:	440a      	add	r2, r1
 800745e:	4291      	cmp	r1, r2
 8007460:	f100 33ff 	add.w	r3, r0, #4294967295
 8007464:	d100      	bne.n	8007468 <memcpy+0xc>
 8007466:	4770      	bx	lr
 8007468:	b510      	push	{r4, lr}
 800746a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800746e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007472:	4291      	cmp	r1, r2
 8007474:	d1f9      	bne.n	800746a <memcpy+0xe>
 8007476:	bd10      	pop	{r4, pc}

08007478 <memmove>:
 8007478:	4288      	cmp	r0, r1
 800747a:	b510      	push	{r4, lr}
 800747c:	eb01 0402 	add.w	r4, r1, r2
 8007480:	d902      	bls.n	8007488 <memmove+0x10>
 8007482:	4284      	cmp	r4, r0
 8007484:	4623      	mov	r3, r4
 8007486:	d807      	bhi.n	8007498 <memmove+0x20>
 8007488:	1e43      	subs	r3, r0, #1
 800748a:	42a1      	cmp	r1, r4
 800748c:	d008      	beq.n	80074a0 <memmove+0x28>
 800748e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007496:	e7f8      	b.n	800748a <memmove+0x12>
 8007498:	4402      	add	r2, r0
 800749a:	4601      	mov	r1, r0
 800749c:	428a      	cmp	r2, r1
 800749e:	d100      	bne.n	80074a2 <memmove+0x2a>
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074aa:	e7f7      	b.n	800749c <memmove+0x24>

080074ac <__malloc_lock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	; (80074b4 <__malloc_lock+0x8>)
 80074ae:	f7ff bf6d 	b.w	800738c <__retarget_lock_acquire_recursive>
 80074b2:	bf00      	nop
 80074b4:	200006b4 	.word	0x200006b4

080074b8 <__malloc_unlock>:
 80074b8:	4801      	ldr	r0, [pc, #4]	; (80074c0 <__malloc_unlock+0x8>)
 80074ba:	f7ff bf68 	b.w	800738e <__retarget_lock_release_recursive>
 80074be:	bf00      	nop
 80074c0:	200006b4 	.word	0x200006b4

080074c4 <_realloc_r>:
 80074c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c8:	4680      	mov	r8, r0
 80074ca:	4614      	mov	r4, r2
 80074cc:	460e      	mov	r6, r1
 80074ce:	b921      	cbnz	r1, 80074da <_realloc_r+0x16>
 80074d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074d4:	4611      	mov	r1, r2
 80074d6:	f7ff b80b 	b.w	80064f0 <_malloc_r>
 80074da:	b92a      	cbnz	r2, 80074e8 <_realloc_r+0x24>
 80074dc:	f7fe ff9c 	bl	8006418 <_free_r>
 80074e0:	4625      	mov	r5, r4
 80074e2:	4628      	mov	r0, r5
 80074e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e8:	f000 f8fa 	bl	80076e0 <_malloc_usable_size_r>
 80074ec:	4284      	cmp	r4, r0
 80074ee:	4607      	mov	r7, r0
 80074f0:	d802      	bhi.n	80074f8 <_realloc_r+0x34>
 80074f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074f6:	d812      	bhi.n	800751e <_realloc_r+0x5a>
 80074f8:	4621      	mov	r1, r4
 80074fa:	4640      	mov	r0, r8
 80074fc:	f7fe fff8 	bl	80064f0 <_malloc_r>
 8007500:	4605      	mov	r5, r0
 8007502:	2800      	cmp	r0, #0
 8007504:	d0ed      	beq.n	80074e2 <_realloc_r+0x1e>
 8007506:	42bc      	cmp	r4, r7
 8007508:	4622      	mov	r2, r4
 800750a:	4631      	mov	r1, r6
 800750c:	bf28      	it	cs
 800750e:	463a      	movcs	r2, r7
 8007510:	f7ff ffa4 	bl	800745c <memcpy>
 8007514:	4631      	mov	r1, r6
 8007516:	4640      	mov	r0, r8
 8007518:	f7fe ff7e 	bl	8006418 <_free_r>
 800751c:	e7e1      	b.n	80074e2 <_realloc_r+0x1e>
 800751e:	4635      	mov	r5, r6
 8007520:	e7df      	b.n	80074e2 <_realloc_r+0x1e>

08007522 <_raise_r>:
 8007522:	291f      	cmp	r1, #31
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4604      	mov	r4, r0
 8007528:	460d      	mov	r5, r1
 800752a:	d904      	bls.n	8007536 <_raise_r+0x14>
 800752c:	2316      	movs	r3, #22
 800752e:	6003      	str	r3, [r0, #0]
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	bd38      	pop	{r3, r4, r5, pc}
 8007536:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007538:	b112      	cbz	r2, 8007540 <_raise_r+0x1e>
 800753a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800753e:	b94b      	cbnz	r3, 8007554 <_raise_r+0x32>
 8007540:	4620      	mov	r0, r4
 8007542:	f000 f831 	bl	80075a8 <_getpid_r>
 8007546:	462a      	mov	r2, r5
 8007548:	4601      	mov	r1, r0
 800754a:	4620      	mov	r0, r4
 800754c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007550:	f000 b818 	b.w	8007584 <_kill_r>
 8007554:	2b01      	cmp	r3, #1
 8007556:	d00a      	beq.n	800756e <_raise_r+0x4c>
 8007558:	1c59      	adds	r1, r3, #1
 800755a:	d103      	bne.n	8007564 <_raise_r+0x42>
 800755c:	2316      	movs	r3, #22
 800755e:	6003      	str	r3, [r0, #0]
 8007560:	2001      	movs	r0, #1
 8007562:	e7e7      	b.n	8007534 <_raise_r+0x12>
 8007564:	2400      	movs	r4, #0
 8007566:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800756a:	4628      	mov	r0, r5
 800756c:	4798      	blx	r3
 800756e:	2000      	movs	r0, #0
 8007570:	e7e0      	b.n	8007534 <_raise_r+0x12>
	...

08007574 <raise>:
 8007574:	4b02      	ldr	r3, [pc, #8]	; (8007580 <raise+0xc>)
 8007576:	4601      	mov	r1, r0
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	f7ff bfd2 	b.w	8007522 <_raise_r>
 800757e:	bf00      	nop
 8007580:	2000006c 	.word	0x2000006c

08007584 <_kill_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d07      	ldr	r5, [pc, #28]	; (80075a4 <_kill_r+0x20>)
 8007588:	2300      	movs	r3, #0
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	4611      	mov	r1, r2
 8007590:	602b      	str	r3, [r5, #0]
 8007592:	f7fa ff2f 	bl	80023f4 <_kill>
 8007596:	1c43      	adds	r3, r0, #1
 8007598:	d102      	bne.n	80075a0 <_kill_r+0x1c>
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	b103      	cbz	r3, 80075a0 <_kill_r+0x1c>
 800759e:	6023      	str	r3, [r4, #0]
 80075a0:	bd38      	pop	{r3, r4, r5, pc}
 80075a2:	bf00      	nop
 80075a4:	200006b0 	.word	0x200006b0

080075a8 <_getpid_r>:
 80075a8:	f7fa bf1c 	b.w	80023e4 <_getpid>

080075ac <__sread>:
 80075ac:	b510      	push	{r4, lr}
 80075ae:	460c      	mov	r4, r1
 80075b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b4:	f000 f89c 	bl	80076f0 <_read_r>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	bfab      	itete	ge
 80075bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075be:	89a3      	ldrhlt	r3, [r4, #12]
 80075c0:	181b      	addge	r3, r3, r0
 80075c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075c6:	bfac      	ite	ge
 80075c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80075ca:	81a3      	strhlt	r3, [r4, #12]
 80075cc:	bd10      	pop	{r4, pc}

080075ce <__swrite>:
 80075ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d2:	461f      	mov	r7, r3
 80075d4:	898b      	ldrh	r3, [r1, #12]
 80075d6:	05db      	lsls	r3, r3, #23
 80075d8:	4605      	mov	r5, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	4616      	mov	r6, r2
 80075de:	d505      	bpl.n	80075ec <__swrite+0x1e>
 80075e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e4:	2302      	movs	r3, #2
 80075e6:	2200      	movs	r2, #0
 80075e8:	f000 f868 	bl	80076bc <_lseek_r>
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075f6:	81a3      	strh	r3, [r4, #12]
 80075f8:	4632      	mov	r2, r6
 80075fa:	463b      	mov	r3, r7
 80075fc:	4628      	mov	r0, r5
 80075fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007602:	f000 b817 	b.w	8007634 <_write_r>

08007606 <__sseek>:
 8007606:	b510      	push	{r4, lr}
 8007608:	460c      	mov	r4, r1
 800760a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760e:	f000 f855 	bl	80076bc <_lseek_r>
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	bf15      	itete	ne
 8007618:	6560      	strne	r0, [r4, #84]	; 0x54
 800761a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800761e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007622:	81a3      	strheq	r3, [r4, #12]
 8007624:	bf18      	it	ne
 8007626:	81a3      	strhne	r3, [r4, #12]
 8007628:	bd10      	pop	{r4, pc}

0800762a <__sclose>:
 800762a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800762e:	f000 b813 	b.w	8007658 <_close_r>
	...

08007634 <_write_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	4d07      	ldr	r5, [pc, #28]	; (8007654 <_write_r+0x20>)
 8007638:	4604      	mov	r4, r0
 800763a:	4608      	mov	r0, r1
 800763c:	4611      	mov	r1, r2
 800763e:	2200      	movs	r2, #0
 8007640:	602a      	str	r2, [r5, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	f7fa ff0d 	bl	8002462 <_write>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_write_r+0x1e>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_write_r+0x1e>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	200006b0 	.word	0x200006b0

08007658 <_close_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	; (8007674 <_close_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa ff19 	bl	800249a <_close>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_close_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_close_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	200006b0 	.word	0x200006b0

08007678 <_fstat_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d07      	ldr	r5, [pc, #28]	; (8007698 <_fstat_r+0x20>)
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	f7fa ff14 	bl	80024b2 <_fstat>
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	d102      	bne.n	8007694 <_fstat_r+0x1c>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	b103      	cbz	r3, 8007694 <_fstat_r+0x1c>
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	200006b0 	.word	0x200006b0

0800769c <_isatty_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d06      	ldr	r5, [pc, #24]	; (80076b8 <_isatty_r+0x1c>)
 80076a0:	2300      	movs	r3, #0
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7fa ff13 	bl	80024d2 <_isatty>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_isatty_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_isatty_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	200006b0 	.word	0x200006b0

080076bc <_lseek_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4d07      	ldr	r5, [pc, #28]	; (80076dc <_lseek_r+0x20>)
 80076c0:	4604      	mov	r4, r0
 80076c2:	4608      	mov	r0, r1
 80076c4:	4611      	mov	r1, r2
 80076c6:	2200      	movs	r2, #0
 80076c8:	602a      	str	r2, [r5, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f7fa ff0c 	bl	80024e8 <_lseek>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d102      	bne.n	80076da <_lseek_r+0x1e>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	b103      	cbz	r3, 80076da <_lseek_r+0x1e>
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	200006b0 	.word	0x200006b0

080076e0 <_malloc_usable_size_r>:
 80076e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e4:	1f18      	subs	r0, r3, #4
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bfbc      	itt	lt
 80076ea:	580b      	ldrlt	r3, [r1, r0]
 80076ec:	18c0      	addlt	r0, r0, r3
 80076ee:	4770      	bx	lr

080076f0 <_read_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	; (8007710 <_read_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7fa fe92 	bl	8002428 <_read>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_read_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_read_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	200006b0 	.word	0x200006b0

08007714 <_gettimeofday>:
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <_gettimeofday+0xc>)
 8007716:	2258      	movs	r2, #88	; 0x58
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
 800771e:	4770      	bx	lr
 8007720:	200006b0 	.word	0x200006b0

08007724 <_init>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr

08007730 <_fini>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr
