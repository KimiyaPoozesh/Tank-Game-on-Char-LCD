
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080062f8  080062f8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062f8  080062f8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000004bc  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000053c  2000053c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001606e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c37  00000000  00000000  0003611e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00038d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f66c  00000000  00000000  0003adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d12  00000000  00000000  0005a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba70a  00000000  00000000  00070136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a840  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004964  00000000  00000000  0012a890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060d8 	.word	0x080060d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080060d8 	.word	0x080060d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000009e 	.word	0x2000009e
 800039c:	200000a0 	.word	0x200000a0
 80003a0:	200000a2 	.word	0x200000a2
 80003a4:	200000b4 	.word	0x200000b4
 80003a8:	200000a4 	.word	0x200000a4
 80003ac:	200000b8 	.word	0x200000b8

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 fd8d 	bl	8001fd0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 fbde 	bl	8001c78 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 ff14 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 ff0c 	bl	80022f4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 ff00 	bl	80022f4 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 fbb6 	bl	8001c78 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 fbb0 	bl	8001c78 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fbaa 	bl	8001c78 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 fb9b 	bl	8001c78 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 fb90 	bl	8001c78 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000b8 	.word	0x200000b8
 80005a8:	200000bb 	.word	0x200000bb
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	20000000 	.word	0x20000000
 80005b4:	2000009e 	.word	0x2000009e
 80005b8:	200000a0 	.word	0x200000a0
 80005bc:	200000a2 	.word	0x200000a2
 80005c0:	200000a4 	.word	0x200000a4
 80005c4:	200000b4 	.word	0x200000b4
 80005c8:	200000b9 	.word	0x200000b9
 80005cc:	200000ba 	.word	0x200000ba

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000b4 	.word	0x200000b4
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000bc 	.word	0x200000bc

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 fa98 	bl	8001c78 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000bb 	.word	0x200000bb
 80007ac:	200000bc 	.word	0x200000bc

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000b9 	.word	0x200000b9

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fd0a 	bl	80022f4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fcfe 	bl	80022f4 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000b4 	.word	0x200000b4
 8000930:	2000009e 	.word	0x2000009e
 8000934:	200000a0 	.word	0x200000a0
 8000938:	200000b8 	.word	0x200000b8

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fcd2 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f001 f991 	bl	8001c78 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fcc7 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f001 f986 	bl	8001c78 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fcbc 	bl	80022f4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f001 f97b 	bl	8001c78 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000b4 	.word	0x200000b4
 800098c:	200000a2 	.word	0x200000a2

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f001 fc99 	bl	80022f4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000b4 	.word	0x200000b4
 80009e0:	200000a4 	.word	0x200000a4

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f001 fc6f 	bl	80022f4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }

  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000b4 	.word	0x200000b4
 8000a34:	200000a4 	.word	0x200000a4

08000a38 <HAL_GPIO_EXTI_Callback>:
const uint16_t Column_pins[] =
		{ GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]

	if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000a42:	4bc1      	ldr	r3, [pc, #772]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000a4a:	f001 f909 	bl	8001c60 <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	f200 8266 	bhi.w	8000f22 <HAL_GPIO_EXTI_Callback+0x4ea>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000a56:	f001 f903 	bl	8001c60 <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4aba      	ldr	r2, [pc, #744]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000a5e:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a68:	2300      	movs	r3, #0
 8000a6a:	737b      	strb	r3, [r7, #13]
 8000a6c:	e00b      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	4ab6      	ldr	r2, [pc, #728]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d101      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9f0      	bls.n	8000a6e <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000a8c:	4bb0      	ldr	r3, [pc, #704]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fc2e 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000a98:	4bad      	ldr	r3, [pc, #692]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fc28 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000aa4:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fc22 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000ab0:	4ba7      	ldr	r3, [pc, #668]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fc1c 	bl	80022f4 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000abc:	2300      	movs	r3, #0
 8000abe:	733b      	strb	r3, [r7, #12]
 8000ac0:	e02d      	b.n	8000b1e <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	4aa3      	ldr	r2, [pc, #652]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aca:	7b3b      	ldrb	r3, [r7, #12]
 8000acc:	4aa2      	ldr	r2, [pc, #648]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f001 fc0d 	bl	80022f4 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4a9f      	ldr	r2, [pc, #636]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	4998      	ldr	r1, [pc, #608]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000aea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f001 fbe7 	bl	80022c4 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_GPIO_EXTI_Callback+0xc8>

			column_number = col;
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b00:	7b3b      	ldrb	r3, [r7, #12]
 8000b02:	4a94      	ldr	r2, [pc, #592]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	4a93      	ldr	r2, [pc, #588]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	f001 fbee 	bl	80022f4 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d9ce      	bls.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b24:	4b8a      	ldr	r3, [pc, #552]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fbe2 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000b30:	4b87      	ldr	r3, [pc, #540]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b32:	2102      	movs	r1, #2
 8000b34:	2201      	movs	r2, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fbdc 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000b3c:	4b84      	ldr	r3, [pc, #528]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fbd6 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000b48:	4b81      	ldr	r3, [pc, #516]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fbd0 	bl	80022f4 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	f000 81e3 	beq.w	8000f26 <HAL_GPIO_EXTI_Callback+0x4ee>
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	f000 81dd 	beq.w	8000f26 <HAL_GPIO_EXTI_Callback+0x4ee>
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	//1 - 6 - 9 for the Right Player
	//4 -7 -12 for the left player
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	f200 81d2 	bhi.w	8000f2a <HAL_GPIO_EXTI_Callback+0x4f2>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_EXTI_Callback+0x154>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bcd 	.word	0x08000bcd
 8000b90:	08000c2b 	.word	0x08000c2b
 8000b94:	08000c6b 	.word	0x08000c6b
 8000b98:	08000cab 	.word	0x08000cab
 8000b9c:	08000d17 	.word	0x08000d17
 8000ba0:	08000d27 	.word	0x08000d27
 8000ba4:	08000d37 	.word	0x08000d37
 8000ba8:	08000d95 	.word	0x08000d95
 8000bac:	08000de3 	.word	0x08000de3
 8000bb0:	08000f2b 	.word	0x08000f2b
 8000bb4:	08000f2b 	.word	0x08000f2b
 8000bb8:	08000e3d 	.word	0x08000e3d
 8000bbc:	08000e95 	.word	0x08000e95
 8000bc0:	08000eb5 	.word	0x08000eb5
 8000bc4:	08000ed7 	.word	0x08000ed7
 8000bc8:	08000f2b 	.word	0x08000f2b
	case 1:
		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000bcc:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d112      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x1c2>
		    R_Health = (R_Health + 9 - 1) % 9;
 8000bd4:	4b63      	ldr	r3, [pc, #396]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f103 0108 	add.w	r1, r3, #8
 8000bdc:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000bde:	fb83 2301 	smull	r2, r3, r3, r1
 8000be2:	105a      	asrs	r2, r3, #1
 8000be4:	17cb      	asrs	r3, r1, #31
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	4613      	mov	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	4413      	add	r3, r2
 8000bee:	1aca      	subs	r2, r1, r3
 8000bf0:	4b5c      	ldr	r3, [pc, #368]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000bf2:	601a      	str	r2, [r3, #0]
		    HealthSetting();
 8000bf4:	f000 fa6c 	bl	80010d0 <HealthSetting>
		} else if (screen == 5) {
		    R_bullets = (R_bullets + 9 - 1) % 9;
		    bulletsSetting();
		}
		/* code */
		break;
 8000bf8:	e199      	b.n	8000f2e <HAL_GPIO_EXTI_Callback+0x4f6>
		} else if (screen == 5) {
 8000bfa:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	f040 8195 	bne.w	8000f2e <HAL_GPIO_EXTI_Callback+0x4f6>
		    R_bullets = (R_bullets + 9 - 1) % 9;
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f103 0108 	add.w	r1, r3, #8
 8000c0c:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000c0e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c12:	105a      	asrs	r2, r3, #1
 8000c14:	17cb      	asrs	r3, r1, #31
 8000c16:	1ad2      	subs	r2, r2, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	1aca      	subs	r2, r1, r3
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000c22:	601a      	str	r2, [r3, #0]
		    bulletsSetting();
 8000c24:	f000 fa1c 	bl	8001060 <bulletsSetting>
		break;
 8000c28:	e181      	b.n	8000f2e <HAL_GPIO_EXTI_Callback+0x4f6>
	case 2:
		HAL_UART_Transmit(&huart1, "2", 1,
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	2201      	movs	r2, #1
 8000c30:	494f      	ldr	r1, [pc, #316]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c32:	4850      	ldr	r0, [pc, #320]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c34:	f003 fdaf 	bl	8004796 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000c38:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f040 8178 	bne.w	8000f32 <HAL_GPIO_EXTI_Callback+0x4fa>
			screen = 1;
 8000c42:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2014      	movs	r0, #20
 8000c4c:	f7ff fd7e 	bl	800074c <setCursor>
			print("                    ");
 8000c50:	4849      	ldr	r0, [pc, #292]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000c52:	f7ff fdc3 	bl	80007dc <print>
			setCursor(0, 1);
 8000c56:	2101      	movs	r1, #1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fd77 	bl	800074c <setCursor>
			print("                      ");
 8000c5e:	4847      	ldr	r0, [pc, #284]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000c60:	f7ff fdbc 	bl	80007dc <print>
			showAbout();
 8000c64:	f000 f9ce 	bl	8001004 <showAbout>
		}
		/* code */
		break;
 8000c68:	e163      	b.n	8000f32 <HAL_GPIO_EXTI_Callback+0x4fa>
	case 3:
		HAL_UART_Transmit(&huart1, "3", 1,
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4943      	ldr	r1, [pc, #268]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x348>)
 8000c72:	4840      	ldr	r0, [pc, #256]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c74:	f003 fd8f 	bl	8004796 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000c78:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f040 815a 	bne.w	8000f36 <HAL_GPIO_EXTI_Callback+0x4fe>
			screen = 3;
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c84:	2203      	movs	r2, #3
 8000c86:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2014      	movs	r0, #20
 8000c8c:	f7ff fd5e 	bl	800074c <setCursor>
			print("                    ");
 8000c90:	4839      	ldr	r0, [pc, #228]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000c92:	f7ff fda3 	bl	80007dc <print>
			setCursor(0, 1);
 8000c96:	2101      	movs	r1, #1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f7ff fd57 	bl	800074c <setCursor>
			print("                      ");
 8000c9e:	4837      	ldr	r0, [pc, #220]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000ca0:	f7ff fd9c 	bl	80007dc <print>
			showSetting();
 8000ca4:	f000 f9bc 	bl	8001020 <showSetting>
		}
		/* code */
		break;
 8000ca8:	e145      	b.n	8000f36 <HAL_GPIO_EXTI_Callback+0x4fe>
	case 4:
		HAL_UART_Transmit(&huart1, "4", 1,
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4934      	ldr	r1, [pc, #208]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x34c>)
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000cb4:	f003 fd6f 	bl	8004796 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d112      	bne.n	8000ce6 <HAL_GPIO_EXTI_Callback+0x2ae>
		    R_Health = (R_Health + 9 - 1) % 9;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f103 0108 	add.w	r1, r3, #8
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000cca:	fb83 2301 	smull	r2, r3, r3, r1
 8000cce:	105a      	asrs	r2, r3, #1
 8000cd0:	17cb      	asrs	r3, r1, #31
 8000cd2:	1ad2      	subs	r2, r2, r3
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	1aca      	subs	r2, r1, r3
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000cde:	601a      	str	r2, [r3, #0]
		    HealthSetting();
 8000ce0:	f000 f9f6 	bl	80010d0 <HealthSetting>
		} else if (screen == 5) {
		    R_bullets = (R_bullets + 9 - 1) % 9;
		    bulletsSetting();
		}

		break;
 8000ce4:	e129      	b.n	8000f3a <HAL_GPIO_EXTI_Callback+0x502>
		} else if (screen == 5) {
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	f040 8125 	bne.w	8000f3a <HAL_GPIO_EXTI_Callback+0x502>
		    R_bullets = (R_bullets + 9 - 1) % 9;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f103 0108 	add.w	r1, r3, #8
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000cfa:	fb83 2301 	smull	r2, r3, r3, r1
 8000cfe:	105a      	asrs	r2, r3, #1
 8000d00:	17cb      	asrs	r3, r1, #31
 8000d02:	1ad2      	subs	r2, r2, r3
 8000d04:	4613      	mov	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4413      	add	r3, r2
 8000d0a:	1aca      	subs	r2, r1, r3
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000d0e:	601a      	str	r2, [r3, #0]
		    bulletsSetting();
 8000d10:	f000 f9a6 	bl	8001060 <bulletsSetting>
		break;
 8000d14:	e111      	b.n	8000f3a <HAL_GPIO_EXTI_Callback+0x502>
	case 5:
		HAL_UART_Transmit(&huart1, "5", 1,
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	491a      	ldr	r1, [pc, #104]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x350>)
 8000d1e:	4815      	ldr	r0, [pc, #84]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000d20:	f003 fd39 	bl	8004796 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000d24:	e112      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
	case 6:
		HAL_UART_Transmit(&huart1, "6", 1,
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4917      	ldr	r1, [pc, #92]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x354>)
 8000d2e:	4811      	ldr	r0, [pc, #68]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000d30:	f003 fd31 	bl	8004796 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000d34:	e10a      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
	case 7:
		HAL_UART_Transmit(&huart1, "7", 1,
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4914      	ldr	r1, [pc, #80]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000d40:	f003 fd29 	bl	8004796 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000d44:	e102      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
 8000d46:	bf00      	nop
 8000d48:	20000520 	.word	0x20000520
 8000d4c:	0800626c 	.word	0x0800626c
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	08006274 	.word	0x08006274
 8000d58:	08006284 	.word	0x08006284
 8000d5c:	0800625c 	.word	0x0800625c
 8000d60:	2000050c 	.word	0x2000050c
 8000d64:	20000510 	.word	0x20000510
 8000d68:	38e38e39 	.word	0x38e38e39
 8000d6c:	20000518 	.word	0x20000518
 8000d70:	080060f0 	.word	0x080060f0
 8000d74:	20000198 	.word	0x20000198
 8000d78:	080060f4 	.word	0x080060f4
 8000d7c:	0800610c 	.word	0x0800610c
 8000d80:	08006124 	.word	0x08006124
 8000d84:	08006128 	.word	0x08006128
 8000d88:	0800612c 	.word	0x0800612c
 8000d8c:	08006130 	.word	0x08006130
 8000d90:	08006134 	.word	0x08006134
	case 8:
		//back btn
		refreshAll();
 8000d94:	f000 f8f2 	bl	8000f7c <refreshAll>
		if (screen == 4 | screen == 5) {
 8000d98:	4b6e      	ldr	r3, [pc, #440]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	bf0c      	ite	eq
 8000da0:	2301      	moveq	r3, #1
 8000da2:	2300      	movne	r3, #0
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b05      	cmp	r3, #5
 8000dac:	bf0c      	ite	eq
 8000dae:	2301      	moveq	r3, #1
 8000db0:	2300      	movne	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <HAL_GPIO_EXTI_Callback+0x390>
			screen = 3;
 8000dbc:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	601a      	str	r2, [r3, #0]
			showSetting();
 8000dc2:	f000 f92d 	bl	8001020 <showSetting>
 8000dc6:	e004      	b.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x39a>
		} else {
			screen = 0;
 8000dc8:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
			showMain();
 8000dce:	f000 f8f7 	bl	8000fc0 <showMain>
		}

		HAL_UART_Transmit(&huart1, "B", 1,
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	495f      	ldr	r1, [pc, #380]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x520>)
 8000dda:	4860      	ldr	r0, [pc, #384]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x524>)
 8000ddc:	f003 fcdb 	bl	8004796 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000de0:	e0b4      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
	case 9:

		if (screen == 4) {
 8000de2:	4b5c      	ldr	r3, [pc, #368]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d111      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0x3d6>
			R_Health = (R_Health + 1) % 9;
 8000dea:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x528>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1c59      	adds	r1, r3, #1
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000df2:	fb83 2301 	smull	r2, r3, r3, r1
 8000df6:	105a      	asrs	r2, r3, #1
 8000df8:	17cb      	asrs	r3, r1, #31
 8000dfa:	1ad2      	subs	r2, r2, r3
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4413      	add	r3, r2
 8000e02:	1aca      	subs	r2, r1, r3
 8000e04:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x528>)
 8000e06:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000e08:	f000 f962 	bl	80010d0 <HealthSetting>
		} else if (screen == 5) {
			R_bullets = (R_bullets + 1) % 9;
			bulletsSetting();
		}
		break;
 8000e0c:	e097      	b.n	8000f3e <HAL_GPIO_EXTI_Callback+0x506>
		} else if (screen == 5) {
 8000e0e:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b05      	cmp	r3, #5
 8000e14:	f040 8093 	bne.w	8000f3e <HAL_GPIO_EXTI_Callback+0x506>
			R_bullets = (R_bullets + 1) % 9;
 8000e18:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x530>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1c59      	adds	r1, r3, #1
 8000e1e:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000e20:	fb83 2301 	smull	r2, r3, r3, r1
 8000e24:	105a      	asrs	r2, r3, #1
 8000e26:	17cb      	asrs	r3, r1, #31
 8000e28:	1ad2      	subs	r2, r2, r3
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	1aca      	subs	r2, r1, r3
 8000e32:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x530>)
 8000e34:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e36:	f000 f913 	bl	8001060 <bulletsSetting>
		break;
 8000e3a:	e080      	b.n	8000f3e <HAL_GPIO_EXTI_Callback+0x506>
		break;
	case 11:
		/* code */
		break;
	case 12:
		if (screen == 4) {
 8000e3c:	4b45      	ldr	r3, [pc, #276]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d111      	bne.n	8000e68 <HAL_GPIO_EXTI_Callback+0x430>
			L_Health = (L_Health + 1) % 9;
 8000e44:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x534>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1c59      	adds	r1, r3, #1
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000e4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e50:	105a      	asrs	r2, r3, #1
 8000e52:	17cb      	asrs	r3, r1, #31
 8000e54:	1ad2      	subs	r2, r2, r3
 8000e56:	4613      	mov	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	1aca      	subs	r2, r1, r3
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x534>)
 8000e60:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000e62:	f000 f935 	bl	80010d0 <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 1) % 9;
			bulletsSetting();
		}
		/* code */
		break;
 8000e66:	e06c      	b.n	8000f42 <HAL_GPIO_EXTI_Callback+0x50a>
		} else if (screen == 5) {
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d168      	bne.n	8000f42 <HAL_GPIO_EXTI_Callback+0x50a>
			L_bullets = (L_bullets + 1) % 9;
 8000e70:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x538>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1c59      	adds	r1, r3, #1
 8000e76:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000e78:	fb83 2301 	smull	r2, r3, r3, r1
 8000e7c:	105a      	asrs	r2, r3, #1
 8000e7e:	17cb      	asrs	r3, r1, #31
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	4613      	mov	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	1aca      	subs	r2, r1, r3
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x538>)
 8000e8c:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e8e:	f000 f8e7 	bl	8001060 <bulletsSetting>
		break;
 8000e92:	e056      	b.n	8000f42 <HAL_GPIO_EXTI_Callback+0x50a>
	case 13:
		/* code */
		if (screen = 3) {
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f7ff fc55 	bl	800074c <setCursor>
			print("                 ");
 8000ea2:	4834      	ldr	r0, [pc, #208]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000ea4:	f7ff fc9a 	bl	80007dc <print>
			HealthSetting();
 8000ea8:	f000 f912 	bl	80010d0 <HealthSetting>
			screen = 4;
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	601a      	str	r2, [r3, #0]
		}
		break;
 8000eb2:	e04b      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
	case 14:
		/* code */
		if (screen == 3) {
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d144      	bne.n	8000f46 <HAL_GPIO_EXTI_Callback+0x50e>
			screen = 5;
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2014      	movs	r0, #20
 8000ec6:	f7ff fc41 	bl	800074c <setCursor>
			print("                 ");
 8000eca:	482a      	ldr	r0, [pc, #168]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000ecc:	f7ff fc86 	bl	80007dc <print>
			bulletsSetting();
 8000ed0:	f000 f8c6 	bl	8001060 <bulletsSetting>
		}
		break;
 8000ed4:	e037      	b.n	8000f46 <HAL_GPIO_EXTI_Callback+0x50e>
	case 15:
		if (screen == 3) {
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d109      	bne.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x4ba>
			vfx = (vfx + 1) % 2;
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x540>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	bfb8      	it	lt
 8000eec:	425b      	neglt	r3, r3
 8000eee:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x540>)
 8000ef0:	6013      	str	r3, [r2, #0]
		}
		if (screen == 4 | screen == 5) {
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf0c      	ite	eq
 8000efa:	2301      	moveq	r3, #1
 8000efc:	2300      	movne	r3, #0
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_EXTI_Callback+0x512>
			screen = 3;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	601a      	str	r2, [r3, #0]
			showSetting();
 8000f1c:	f000 f880 	bl	8001020 <showSetting>
		}
		/* code */
		break;
 8000f20:	e013      	b.n	8000f4a <HAL_GPIO_EXTI_Callback+0x512>
		return;
 8000f22:	bf00      	nop
 8000f24:	e012      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		return; // Reject invalid scan
 8000f26:	bf00      	nop
 8000f28:	e010      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
	case 16:
		/* code */
		break;

	default:
		break;
 8000f2a:	bf00      	nop
 8000f2c:	e00e      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f2e:	bf00      	nop
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f32:	bf00      	nop
 8000f34:	e00a      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f36:	bf00      	nop
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f3a:	bf00      	nop
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f3e:	bf00      	nop
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f42:	bf00      	nop
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_EXTI_Callback+0x514>
		break;
 8000f4a:	bf00      	nop
	}
}
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000050c 	.word	0x2000050c
 8000f58:	08006138 	.word	0x08006138
 8000f5c:	20000198 	.word	0x20000198
 8000f60:	20000510 	.word	0x20000510
 8000f64:	38e38e39 	.word	0x38e38e39
 8000f68:	20000518 	.word	0x20000518
 8000f6c:	20000514 	.word	0x20000514
 8000f70:	2000051c 	.word	0x2000051c
 8000f74:	0800613c 	.word	0x0800613c
 8000f78:	20000004 	.word	0x20000004

08000f7c <refreshAll>:

void refreshAll(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fbe2 	bl	800074c <setCursor>
	print("                   ");
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <refreshAll+0x40>)
 8000f8a:	f7ff fc27 	bl	80007dc <print>
	setCursor(0, 1);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff fbdb 	bl	800074c <setCursor>
	print("                   ");
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <refreshAll+0x40>)
 8000f98:	f7ff fc20 	bl	80007dc <print>
	setCursor(20, 0);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f7ff fbd4 	bl	800074c <setCursor>
	print("                   ");
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <refreshAll+0x40>)
 8000fa6:	f7ff fc19 	bl	80007dc <print>
	setCursor(20, 1);
 8000faa:	2101      	movs	r1, #1
 8000fac:	2014      	movs	r0, #20
 8000fae:	f7ff fbcd 	bl	800074c <setCursor>
	print("                   ");
 8000fb2:	4802      	ldr	r0, [pc, #8]	; (8000fbc <refreshAll+0x40>)
 8000fb4:	f7ff fc12 	bl	80007dc <print>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08006150 	.word	0x08006150

08000fc0 <showMain>:

byte topّFox[8] = { 0x00, 0x00, 0x00, 0x0A, 0x0E, 0x15, 0x1F, 0x04 };

byte bottomFox[8] = { 0x00, 0x04, 0x1F, 0x15, 0x0E, 0x0A, 0x00, 0x00 };

void showMain(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fbc0 	bl	800074c <setCursor>
	print("1- Play");
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <showMain+0x38>)
 8000fce:	f7ff fc05 	bl	80007dc <print>
	setCursor(0, 1);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fbb9 	bl	800074c <setCursor>
	print("2- About");
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <showMain+0x3c>)
 8000fdc:	f7ff fbfe 	bl	80007dc <print>
	write(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff fc5d 	bl	80008a0 <write>
	setCursor(20, 0);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f7ff fbaf 	bl	800074c <setCursor>
	print("3- Setting");
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <showMain+0x40>)
 8000ff0:	f7ff fbf4 	bl	80007dc <print>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	08006164 	.word	0x08006164
 8000ffc:	0800616c 	.word	0x0800616c
 8001000:	08006178 	.word	0x08006178

08001004 <showAbout>:

void showAbout(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8001008:	2100      	movs	r1, #0
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fb9e 	bl	800074c <setCursor>
	print("Kimiya & Atiye");
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <showAbout+0x18>)
 8001012:	f7ff fbe3 	bl	80007dc <print>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	08006184 	.word	0x08006184

08001020 <showSetting>:

void showSetting(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fb90 	bl	800074c <setCursor>
	print("Right vs Left");
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <showSetting+0x34>)
 800102e:	f7ff fbd5 	bl	80007dc <print>
	setCursor(0, 1);
 8001032:	2101      	movs	r1, #1
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fb89 	bl	800074c <setCursor>
	print("0-Bullets");
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <showSetting+0x38>)
 800103c:	f7ff fbce 	bl	80007dc <print>
	setCursor(20, 0);
 8001040:	2100      	movs	r1, #0
 8001042:	2014      	movs	r0, #20
 8001044:	f7ff fb82 	bl	800074c <setCursor>
	print("*-Health");
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <showSetting+0x3c>)
 800104a:	f7ff fbc7 	bl	80007dc <print>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	08006194 	.word	0x08006194
 8001058:	080061a4 	.word	0x080061a4
 800105c:	080061b0 	.word	0x080061b0

08001060 <bulletsSetting>:

void bulletsSetting(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 8001066:	2101      	movs	r1, #1
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fb6f 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Bullets:%d", R_bullets);
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <bulletsSetting+0x5c>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4912      	ldr	r1, [pc, #72]	; (80010c0 <bulletsSetting+0x60>)
 8001078:	4618      	mov	r0, r3
 800107a:	f004 fbbf 	bl	80057fc <siprintf>
	print(RBStr);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fbaa 	bl	80007dc <print>
	setCursor(20, 0);
 8001088:	2100      	movs	r1, #0
 800108a:	2014      	movs	r0, #20
 800108c:	f7ff fb5e 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Bullets:%d", L_bullets);
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <bulletsSetting+0x64>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	463b      	mov	r3, r7
 8001096:	490c      	ldr	r1, [pc, #48]	; (80010c8 <bulletsSetting+0x68>)
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fbaf 	bl	80057fc <siprintf>
	print(LBStr);
 800109e:	463b      	mov	r3, r7
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fb9b 	bl	80007dc <print>
	setCursor(20, 1);
 80010a6:	2101      	movs	r1, #1
 80010a8:	2014      	movs	r0, #20
 80010aa:	f7ff fb4f 	bl	800074c <setCursor>

	print("#-Confirm");
 80010ae:	4807      	ldr	r0, [pc, #28]	; (80010cc <bulletsSetting+0x6c>)
 80010b0:	f7ff fb94 	bl	80007dc <print>
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000518 	.word	0x20000518
 80010c0:	080061bc 	.word	0x080061bc
 80010c4:	2000051c 	.word	0x2000051c
 80010c8:	080061d0 	.word	0x080061d0
 80010cc:	080061e0 	.word	0x080061e0

080010d0 <HealthSetting>:

void HealthSetting(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 80010d6:	2101      	movs	r1, #1
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fb37 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Health:%d", R_Health);
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HealthSetting+0x5c>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4912      	ldr	r1, [pc, #72]	; (8001130 <HealthSetting+0x60>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 fb87 	bl	80057fc <siprintf>
	print(RBStr);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fb72 	bl	80007dc <print>
	setCursor(20, 0);
 80010f8:	2100      	movs	r1, #0
 80010fa:	2014      	movs	r0, #20
 80010fc:	f7ff fb26 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Health:%d", L_Health);
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HealthSetting+0x64>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	463b      	mov	r3, r7
 8001106:	490c      	ldr	r1, [pc, #48]	; (8001138 <HealthSetting+0x68>)
 8001108:	4618      	mov	r0, r3
 800110a:	f004 fb77 	bl	80057fc <siprintf>
	print(LBStr);
 800110e:	463b      	mov	r3, r7
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fb63 	bl	80007dc <print>
	setCursor(20, 1);
 8001116:	2101      	movs	r1, #1
 8001118:	2014      	movs	r0, #20
 800111a:	f7ff fb17 	bl	800074c <setCursor>

	print("#-Confirm");
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <HealthSetting+0x6c>)
 8001120:	f7ff fb5c 	bl	80007dc <print>
}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000510 	.word	0x20000510
 8001130:	080061ec 	.word	0x080061ec
 8001134:	20000514 	.word	0x20000514
 8001138:	080061fc 	.word	0x080061fc
 800113c:	080061e0 	.word	0x080061e0

08001140 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001146:	f000 fd31 	bl	8001bac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800114a:	f000 f8c3 	bl	80012d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800114e:	f000 fa53 	bl	80015f8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001152:	f000 f927 	bl	80013a4 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001156:	f000 f9bf 	bl	80014d8 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 800115a:	f000 fa2b 	bl	80015b4 <MX_USB_PCD_Init>
	MX_USART1_UART_Init();
 800115e:	f000 f9f9 	bl	8001554 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8001162:	f000 f95f 	bl	8001424 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116c:	484d      	ldr	r0, [pc, #308]	; (80012a4 <main+0x164>)
 800116e:	f001 f8c1 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001178:	484a      	ldr	r0, [pc, #296]	; (80012a4 <main+0x164>)
 800117a:	f001 f8bb 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001184:	4847      	ldr	r0, [pc, #284]	; (80012a4 <main+0x164>)
 8001186:	f001 f8b5 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001190:	4844      	ldr	r0, [pc, #272]	; (80012a4 <main+0x164>)
 8001192:	f001 f8af 	bl	80022f4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, "yo", 2,
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	2202      	movs	r2, #2
 800119c:	4942      	ldr	r1, [pc, #264]	; (80012a8 <main+0x168>)
 800119e:	4843      	ldr	r0, [pc, #268]	; (80012ac <main+0x16c>)
 80011a0:	f003 faf9 	bl	8004796 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
 80011a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a8:	9303      	str	r3, [sp, #12]
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4839      	ldr	r0, [pc, #228]	; (80012b0 <main+0x170>)
 80011ca:	f7ff f859 	bl	8000280 <LiquidCrystal>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
	RTC_TimeTypeDef mytime;

	RTC_DateTypeDef mydate;
	mydate.Year = 19;
 80011ce:	2313      	movs	r3, #19
 80011d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	mydate.Month = 6;
 80011d4:	2306      	movs	r3, #6
 80011d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mydate.Date = 5;
 80011da:	2305      	movs	r3, #5
 80011dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80011e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4832      	ldr	r0, [pc, #200]	; (80012b4 <main+0x174>)
 80011ea:	f003 f84a 	bl	8004282 <HAL_RTC_SetDate>
	char timeStr[20];
	char dateStr[20];
	createChar(1, bottomFox);
 80011ee:	4932      	ldr	r1, [pc, #200]	; (80012b8 <main+0x178>)
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff fb1e 	bl	8000832 <createChar>
	showMain();
 80011f6:	f7ff fee3 	bl	8000fc0 <showMain>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (screen == 1) {
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <main+0x17c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d13b      	bne.n	800127a <main+0x13a>
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	482a      	ldr	r0, [pc, #168]	; (80012b4 <main+0x174>)
 800120c:	f002 ffdb 	bl	80041c6 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8001210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4826      	ldr	r0, [pc, #152]	; (80012b4 <main+0x174>)
 800121a:	f003 f8b6 	bl	800438a <HAL_RTC_GetDate>
			setCursor(20, 0);
 800121e:	2100      	movs	r1, #0
 8001220:	2014      	movs	r0, #20
 8001222:	f7ff fa93 	bl	800074c <setCursor>
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8001226:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800122a:	461a      	mov	r2, r3
 800122c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001230:	4619      	mov	r1, r3
					mytime.Seconds);
 8001232:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8001236:	f107 0014 	add.w	r0, r7, #20
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	460b      	mov	r3, r1
 800123e:	4920      	ldr	r1, [pc, #128]	; (80012c0 <main+0x180>)
 8001240:	f004 fadc 	bl	80057fc <siprintf>

			print(timeStr);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fac7 	bl	80007dc <print>
			setCursor(20, 1);
 800124e:	2101      	movs	r1, #1
 8001250:	2014      	movs	r0, #20
 8001252:	f7ff fa7b 	bl	800074c <setCursor>
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8001256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800125a:	461a      	mov	r2, r3
 800125c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001260:	4619      	mov	r1, r3
					mydate.Date);
 8001262:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8001266:	4638      	mov	r0, r7
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	460b      	mov	r3, r1
 800126c:	4915      	ldr	r1, [pc, #84]	; (80012c4 <main+0x184>)
 800126e:	f004 fac5 	bl	80057fc <siprintf>

			print(dateStr);
 8001272:	463b      	mov	r3, r7
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fab1 	bl	80007dc <print>

		}

		if (screen == 3) {
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <main+0x17c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d1bb      	bne.n	80011fa <main+0xba>
			setCursor(20, 1);
 8001282:	2101      	movs	r1, #1
 8001284:	2014      	movs	r0, #20
 8001286:	f7ff fa61 	bl	800074c <setCursor>
			if (vfx) {
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <main+0x188>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <main+0x15a>
				print("vfx on-# to turn off");
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <main+0x18c>)
 8001294:	f7ff faa2 	bl	80007dc <print>
 8001298:	e7af      	b.n	80011fa <main+0xba>
			} else {
				print("vfx off-# to turn on");
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <main+0x190>)
 800129c:	f7ff fa9e 	bl	80007dc <print>
		if (screen == 1) {
 80012a0:	e7ab      	b.n	80011fa <main+0xba>
 80012a2:	bf00      	nop
 80012a4:	48000400 	.word	0x48000400
 80012a8:	0800620c 	.word	0x0800620c
 80012ac:	20000198 	.word	0x20000198
 80012b0:	48000c00 	.word	0x48000c00
 80012b4:	20000114 	.word	0x20000114
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000050c 	.word	0x2000050c
 80012c0:	08006210 	.word	0x08006210
 80012c4:	0800621c 	.word	0x0800621c
 80012c8:	20000004 	.word	0x20000004
 80012cc:	0800622c 	.word	0x0800622c
 80012d0:	08006244 	.word	0x08006244

080012d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b09e      	sub	sp, #120	; 0x78
 80012d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012de:	2228      	movs	r2, #40	; 0x28
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fa82 	bl	80057ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80012f8:	463b      	mov	r3, r7
 80012fa:	223c      	movs	r2, #60	; 0x3c
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fa74 	bl	80057ec <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001304:	230b      	movs	r3, #11
 8001306:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001308:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800130c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800131a:	2301      	movs	r3, #1
 800131c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131e:	2302      	movs	r3, #2
 8001320:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001326:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001328:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800132c:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800132e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fa06 	bl	8002744 <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x6e>
		Error_Handler();
 800133e:	f000 fa15 	bl	800176c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2302      	movs	r3, #2
 8001348:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001358:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fa2e 	bl	80037c0 <HAL_RCC_ClockConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x9a>
		Error_Handler();
 800136a:	f000 f9ff 	bl	800176c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <SystemClock_Config+0xcc>)
 8001370:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800137a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137e:	607b      	str	r3, [r7, #4]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001386:	463b      	mov	r3, r7
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fc4f 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xc4>
		Error_Handler();
 8001394:	f000 f9ea 	bl	800176c <Error_Handler>
	}
}
 8001398:	bf00      	nop
 800139a:	3778      	adds	r7, #120	; 0x78
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	00030021 	.word	0x00030021

080013a4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_I2C1_Init+0x74>)
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <MX_I2C1_Init+0x78>)
 80013ac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_I2C1_Init+0x74>)
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <MX_I2C1_Init+0x7c>)
 80013b2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_I2C1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_I2C1_Init+0x74>)
 80013bc:	2201      	movs	r2, #1
 80013be:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_I2C1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_I2C1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <MX_I2C1_Init+0x74>)
 80013e0:	f000 ffb8 	bl	8002354 <HAL_I2C_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_I2C1_Init+0x4a>
		Error_Handler();
 80013ea:	f000 f9bf 	bl	800176c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <MX_I2C1_Init+0x74>)
 80013f2:	f001 f83e 	bl	8002472 <HAL_I2CEx_ConfigAnalogFilter>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80013fc:	f000 f9b6 	bl	800176c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001400:	2100      	movs	r1, #0
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_I2C1_Init+0x74>)
 8001404:	f001 f880 	bl	8002508 <HAL_I2CEx_ConfigDigitalFilter>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800140e:	f000 f9ad 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000c0 	.word	0x200000c0
 800141c:	40005400 	.word	0x40005400
 8001420:	2000090e 	.word	0x2000090e

08001424 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_RTC_Init+0xac>)
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <MX_RTC_Init+0xb0>)
 8001440:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <MX_RTC_Init+0xac>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 39;
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_RTC_Init+0xac>)
 800144a:	2227      	movs	r2, #39	; 0x27
 800144c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 999;
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <MX_RTC_Init+0xac>)
 8001450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001454:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MX_RTC_Init+0xac>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_RTC_Init+0xac>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_RTC_Init+0xac>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001468:	4819      	ldr	r0, [pc, #100]	; (80014d0 <MX_RTC_Init+0xac>)
 800146a:	f002 fd8f 	bl	8003f8c <HAL_RTC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_RTC_Init+0x54>
		Error_Handler();
 8001474:	f000 f97a 	bl	800176c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8001478:	2300      	movs	r3, #0
 800147a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800147c:	2300      	movs	r3, #0
 800147e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001480:	2300      	movs	r3, #0
 8001482:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2201      	movs	r2, #1
 8001490:	4619      	mov	r1, r3
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <MX_RTC_Init+0xac>)
 8001494:	f002 fdfd 	bl	8004092 <HAL_RTC_SetTime>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_RTC_Init+0x7e>
		Error_Handler();
 800149e:	f000 f965 	bl	800176c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014a2:	2301      	movs	r3, #1
 80014a4:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80014a6:	2301      	movs	r3, #1
 80014a8:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80014b2:	463b      	mov	r3, r7
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_RTC_Init+0xac>)
 80014ba:	f002 fee2 	bl	8004282 <HAL_RTC_SetDate>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_RTC_Init+0xa4>
		Error_Handler();
 80014c4:	f000 f952 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000114 	.word	0x20000114
 80014d4:	40002800 	.word	0x40002800

080014d8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_SPI1_Init+0x74>)
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <MX_SPI1_Init+0x78>)
 80014e0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_SPI1_Init+0x74>)
 80014e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_SPI1_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_SPI1_Init+0x74>)
 80014f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014f6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_SPI1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_SPI1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_SPI1_Init+0x74>)
 8001506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_SPI1_Init+0x74>)
 800150e:	2208      	movs	r2, #8
 8001510:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_SPI1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_SPI1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_SPI1_Init+0x74>)
 8001526:	2207      	movs	r2, #7
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_SPI1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_SPI1_Init+0x74>)
 8001532:	2208      	movs	r2, #8
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_SPI1_Init+0x74>)
 8001538:	f003 f834 	bl	80045a4 <HAL_SPI_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001542:	f000 f913 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000134 	.word	0x20000134
 8001550:	40013000 	.word	0x40013000

08001554 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <MX_USART1_UART_Init+0x5c>)
 800155c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001560:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001564:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART1_UART_Init+0x58>)
 8001598:	f003 f8af 	bl	80046fa <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80015a2:	f000 f8e3 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000198 	.word	0x20000198
 80015b0:	40013800 	.word	0x40013800

080015b4 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_USB_PCD_Init+0x3c>)
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <MX_USB_PCD_Init+0x40>)
 80015bc:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USB_PCD_Init+0x3c>)
 80015c0:	2208      	movs	r2, #8
 80015c2:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_USB_PCD_Init+0x3c>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USB_PCD_Init+0x3c>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_USB_PCD_Init+0x3c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USB_PCD_Init+0x3c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_USB_PCD_Init+0x3c>)
 80015de:	f000 ffdf 	bl	80025a0 <HAL_PCD_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_USB_PCD_Init+0x38>
		Error_Handler();
 80015e8:	f000 f8c0 	bl	800176c <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000220 	.word	0x20000220
 80015f4:	40005c00 	.word	0x40005c00

080015f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <MX_GPIO_Init+0x164>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4a52      	ldr	r2, [pc, #328]	; (800175c <MX_GPIO_Init+0x164>)
 8001614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001618:	6153      	str	r3, [r2, #20]
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <MX_GPIO_Init+0x164>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b4d      	ldr	r3, [pc, #308]	; (800175c <MX_GPIO_Init+0x164>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4a4c      	ldr	r2, [pc, #304]	; (800175c <MX_GPIO_Init+0x164>)
 800162c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001630:	6153      	str	r3, [r2, #20]
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <MX_GPIO_Init+0x164>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <MX_GPIO_Init+0x164>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a46      	ldr	r2, [pc, #280]	; (800175c <MX_GPIO_Init+0x164>)
 8001644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001648:	6153      	str	r3, [r2, #20]
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <MX_GPIO_Init+0x164>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <MX_GPIO_Init+0x164>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a40      	ldr	r2, [pc, #256]	; (800175c <MX_GPIO_Init+0x164>)
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	6153      	str	r3, [r2, #20]
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <MX_GPIO_Init+0x164>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <MX_GPIO_Init+0x164>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <MX_GPIO_Init+0x164>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <MX_GPIO_Init+0x164>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	4b35      	ldr	r3, [pc, #212]	; (800175c <MX_GPIO_Init+0x164>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a34      	ldr	r2, [pc, #208]	; (800175c <MX_GPIO_Init+0x164>)
 800168c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <MX_GPIO_Init+0x164>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800169e:	2200      	movs	r2, #0
 80016a0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80016a4:	482e      	ldr	r0, [pc, #184]	; (8001760 <MX_GPIO_Init+0x168>)
 80016a6:	f000 fe25 	bl	80022f4 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80016aa:	2200      	movs	r2, #0
 80016ac:	f647 710f 	movw	r1, #32527	; 0x7f0f
 80016b0:	482c      	ldr	r0, [pc, #176]	; (8001764 <MX_GPIO_Init+0x16c>)
 80016b2:	f000 fe1f 	bl	80022f4 <HAL_GPIO_WritePin>
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 80016b6:	2337      	movs	r3, #55	; 0x37
 80016b8:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80016be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4825      	ldr	r0, [pc, #148]	; (8001760 <MX_GPIO_Init+0x168>)
 80016cc:	f000 fc80 	bl	8001fd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 80016d0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80016d4:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	481d      	ldr	r0, [pc, #116]	; (8001760 <MX_GPIO_Init+0x168>)
 80016ea:	f000 fc71 	bl	8001fd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80016ee:	2301      	movs	r3, #1
 80016f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f000 fc64 	bl	8001fd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001708:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800170c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001712:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001714:	2302      	movs	r3, #2
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <MX_GPIO_Init+0x170>)
 8001720:	f000 fc56 	bl	8001fd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001724:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8001728:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <MX_GPIO_Init+0x16c>)
 800173e:	f000 fc47 	bl	8001fd0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2101      	movs	r1, #1
 8001746:	2028      	movs	r0, #40	; 0x28
 8001748:	f000 fb95 	bl	8001e76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800174c:	2028      	movs	r0, #40	; 0x28
 800174e:	f000 fbae 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 8001752:	bf00      	nop
 8001754:	3730      	adds	r7, #48	; 0x30
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	48001000 	.word	0x48001000
 8001764:	48000c00 	.word	0x48000c00
 8001768:	48000400 	.word	0x48000400

0800176c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001774:	e7fe      	b.n	8001774 <Error_Handler+0x8>
	...

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_MspInit+0x44>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_MspInit+0x44>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6193      	str	r3, [r2, #24]
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_MspInit+0x44>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_MspInit+0x44>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MspInit+0x44>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80017ae:	2006      	movs	r0, #6
 80017b0:	f000 fb56 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_I2C_MspInit+0x7c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d127      	bne.n	8001832 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_I2C_MspInit+0x80>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <HAL_I2C_MspInit+0x80>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ec:	6153      	str	r3, [r2, #20]
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_I2C_MspInit+0x80>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80017fa:	23c0      	movs	r3, #192	; 0xc0
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fe:	2312      	movs	r3, #18
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001802:	2301      	movs	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180a:	2304      	movs	r3, #4
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_I2C_MspInit+0x84>)
 8001816:	f000 fbdb 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_I2C_MspInit+0x80>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_I2C_MspInit+0x80>)
 8001820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_I2C_MspInit+0x80>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40005400 	.word	0x40005400
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400

08001848 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_RTC_MspInit+0x44>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d111      	bne.n	800187e <HAL_RTC_MspInit+0x36>
 800185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001868:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_RTC_MspInit+0x48>)
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	461a      	mov	r2, r3
 800187a:	2301      	movs	r3, #1
 800187c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40002800 	.word	0x40002800
 8001890:	10908100 	.word	0x10908100

08001894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_SPI_MspInit+0x7c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d128      	bne.n	8001908 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c0:	6193      	str	r3, [r2, #24]
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	6153      	str	r3, [r2, #20]
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80018e6:	23e0      	movs	r3, #224	; 0xe0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f6:	2305      	movs	r3, #5
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f000 fb64 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40013000 	.word	0x40013000
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12f      	bne.n	800199a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_UART_MspInit+0x90>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6193      	str	r3, [r2, #24]
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800195c:	6153      	str	r3, [r2, #20]
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800196a:	2330      	movs	r3, #48	; 0x30
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_UART_MspInit+0x94>)
 8001986:	f000 fb23 	bl	8001fd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2025      	movs	r0, #37	; 0x25
 8001990:	f000 fa71 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001994:	2025      	movs	r0, #37	; 0x25
 8001996:	f000 fa8a 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40021000 	.word	0x40021000
 80019ac:	48000800 	.word	0x48000800

080019b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_PCD_MspInit+0x80>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d129      	bne.n	8001a26 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_PCD_MspInit+0x84>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_PCD_MspInit+0x84>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	6153      	str	r3, [r2, #20]
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_PCD_MspInit+0x84>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80019ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80019fc:	230e      	movs	r3, #14
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f000 fae1 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_PCD_MspInit+0x84>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_PCD_MspInit+0x84>)
 8001a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_PCD_MspInit+0x84>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005c00 	.word	0x40005c00
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 f8d8 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <USART1_IRQHandler+0x10>)
 8001a92:	f002 ff0b 	bl	80048ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000198 	.word	0x20000198

08001aa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001aa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001aa8:	f000 fc3c 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001aac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ab0:	f000 fc38 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ab4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ab8:	f000 fc34 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001abc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ac0:	f000 fc30 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f003 fe4e 	bl	8005798 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000a000 	.word	0x2000a000
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	20000524 	.word	0x20000524
 8001b30:	20000540 	.word	0x20000540

08001b34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff ffea 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	; (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	; (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f003 fe0d 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff fad9 	bl	8001140 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b90:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b9c:	08006300 	.word	0x08006300
  ldr r2, =_sbss
 8001ba0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ba4:	2000053c 	.word	0x2000053c

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_Init+0x28>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_Init+0x28>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f94f 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fdd6 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f967 	bl	8001eca <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f92f 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000010 	.word	0x20000010
 8001c30:	20000018 	.word	0x20000018
 8001c34:	20000014 	.word	0x20000014

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000018 	.word	0x20000018
 8001c5c:	20000528 	.word	0x20000528

08001c60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000528 	.word	0x20000528

08001c78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000018 	.word	0x20000018

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff29 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff3e 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff8e 	bl	8001db4 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff31 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e020      	b.n	8001f48 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 020e 	bic.w	r2, r2, #14
 8001f14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d005      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e027      	b.n	8001fc6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020e 	bic.w	r2, r2, #14
 8001f84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
    } 
  }
  return status;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e154      	b.n	800228a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8146 	beq.w	8002284 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d005      	beq.n	8002010 <HAL_GPIO_Init+0x40>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d130      	bne.n	8002072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002046:	2201      	movs	r2, #1
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 0201 	and.w	r2, r3, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b03      	cmp	r3, #3
 800207c:	d017      	beq.n	80020ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d123      	bne.n	8002102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	6939      	ldr	r1, [r7, #16]
 80020fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0203 	and.w	r2, r3, #3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80a0 	beq.w	8002284 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	4b58      	ldr	r3, [pc, #352]	; (80022a8 <HAL_GPIO_Init+0x2d8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a57      	ldr	r2, [pc, #348]	; (80022a8 <HAL_GPIO_Init+0x2d8>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b55      	ldr	r3, [pc, #340]	; (80022a8 <HAL_GPIO_Init+0x2d8>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800215c:	4a53      	ldr	r2, [pc, #332]	; (80022ac <HAL_GPIO_Init+0x2dc>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002186:	d019      	beq.n	80021bc <HAL_GPIO_Init+0x1ec>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x2e0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <HAL_GPIO_Init+0x1e8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2e4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00d      	beq.n	80021b4 <HAL_GPIO_Init+0x1e4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_GPIO_Init+0x2e8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x1e0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a46      	ldr	r2, [pc, #280]	; (80022bc <HAL_GPIO_Init+0x2ec>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_GPIO_Init+0x1dc>
 80021a8:	2304      	movs	r3, #4
 80021aa:	e008      	b.n	80021be <HAL_GPIO_Init+0x1ee>
 80021ac:	2305      	movs	r3, #5
 80021ae:	e006      	b.n	80021be <HAL_GPIO_Init+0x1ee>
 80021b0:	2303      	movs	r3, #3
 80021b2:	e004      	b.n	80021be <HAL_GPIO_Init+0x1ee>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e002      	b.n	80021be <HAL_GPIO_Init+0x1ee>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_GPIO_Init+0x1ee>
 80021bc:	2300      	movs	r3, #0
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	f002 0203 	and.w	r2, r2, #3
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	4093      	lsls	r3, r2
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ce:	4937      	ldr	r1, [pc, #220]	; (80022ac <HAL_GPIO_Init+0x2dc>)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002200:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002254:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f aea3 	bne.w	8001fe0 <HAL_GPIO_Init+0x10>
  }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	48000400 	.word	0x48000400
 80022b4:	48000800 	.word	0x48000800
 80022b8:	48000c00 	.word	0x48000c00
 80022bc:	48001000 	.word	0x48001000
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002310:	e002      	b.n	8002318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fb78 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e081      	b.n	800246a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fa20 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e006      	b.n	80023dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d104      	bne.n	80023ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002400:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002410:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69d9      	ldr	r1, [r3, #28]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1a      	ldr	r2, [r3, #32]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	d138      	bne.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002492:	2302      	movs	r3, #2
 8002494:	e032      	b.n	80024fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2224      	movs	r2, #36	; 0x24
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0201 	bic.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d139      	bne.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002528:	2302      	movs	r3, #2
 800252a:	e033      	b.n	8002594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800255a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a2:	b08b      	sub	sp, #44	; 0x2c
 80025a4:	af06      	add	r7, sp, #24
 80025a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0c4      	b.n	800273c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff f9f2 	bl	80019b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 f8a0 	bl	800571e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	e040      	b.n	8002666 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	3301      	adds	r3, #1
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	3303      	adds	r3, #3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	3338      	adds	r3, #56	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	333c      	adds	r3, #60	; 0x3c
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	3340      	adds	r3, #64	; 0x40
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	3301      	adds	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d3b9      	bcc.n	80025e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e044      	b.n	8002700 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	3301      	adds	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d3b5      	bcc.n	8002676 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	687e      	ldr	r6, [r7, #4]
 8002712:	466d      	mov	r5, sp
 8002714:	f106 0410 	add.w	r4, r6, #16
 8002718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	1d33      	adds	r3, r6, #4
 8002722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002724:	6838      	ldr	r0, [r7, #0]
 8002726:	f003 f815 	bl	8005754 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800274a:	af00      	add	r7, sp, #0
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002754:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f001 b823 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 817d 	beq.w	8002a7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002780:	4bbc      	ldr	r3, [pc, #752]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b04      	cmp	r3, #4
 800278a:	d00c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800278c:	4bb9      	ldr	r3, [pc, #740]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d15c      	bne.n	8002852 <HAL_RCC_OscConfig+0x10e>
 8002798:	4bb6      	ldr	r3, [pc, #728]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d155      	bne.n	8002852 <HAL_RCC_OscConfig+0x10e>
 80027a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80027ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_OscConfig+0x94>
 80027d2:	4ba8      	ldr	r3, [pc, #672]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e015      	b.n	8002804 <HAL_RCC_OscConfig+0xc0>
 80027d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80027f4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002800:	4b9c      	ldr	r3, [pc, #624]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002808:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800280c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002818:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f042 0220 	orr.w	r2, r2, #32
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f002 021f 	and.w	r2, r2, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 811f 	beq.w	8002a78 <HAL_RCC_OscConfig+0x334>
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 8116 	bne.w	8002a78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	f000 bfaf 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x12e>
 8002864:	4b83      	ldr	r3, [pc, #524]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a82      	ldr	r2, [pc, #520]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e036      	b.n	80028e0 <HAL_RCC_OscConfig+0x19c>
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x158>
 8002882:	4b7c      	ldr	r3, [pc, #496]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7b      	ldr	r2, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a78      	ldr	r2, [pc, #480]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e021      	b.n	80028e0 <HAL_RCC_OscConfig+0x19c>
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x184>
 80028ae:	4b71      	ldr	r3, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a70      	ldr	r2, [pc, #448]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b6e      	ldr	r3, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6d      	ldr	r2, [pc, #436]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0x19c>
 80028c8:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a69      	ldr	r2, [pc, #420]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b67      	ldr	r3, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a66      	ldr	r2, [pc, #408]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028de:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028e0:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	f023 020f 	bic.w	r2, r3, #15
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	495f      	ldr	r1, [pc, #380]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d059      	beq.n	80029be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7ff f9a9 	bl	8001c60 <HAL_GetTick>
 800290e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff f9a4 	bl	8001c60 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b64      	cmp	r3, #100	; 0x64
 8002922:	d902      	bls.n	800292a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	f000 bf43 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
 800292a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800293e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_OscConfig+0x218>
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e015      	b.n	8002988 <HAL_RCC_OscConfig+0x244>
 800295c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002960:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002974:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002978:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002984:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800298c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002990:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002994:	fa92 f2a2 	rbit	r2, r2
 8002998:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800299c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	f002 021f 	and.w	r2, r2, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ab      	beq.n	8002914 <HAL_RCC_OscConfig+0x1d0>
 80029bc:	e05d      	b.n	8002a7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7ff f94f 	bl	8001c60 <HAL_GetTick>
 80029c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff f94a 	bl	8001c60 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b64      	cmp	r3, #100	; 0x64
 80029d6:	d902      	bls.n	80029de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	f000 bee9 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
 80029de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2cc>
 8002a0a:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	e015      	b.n	8002a3c <HAL_RCC_OscConfig+0x2f8>
 8002a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a14:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x330>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a40:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a44:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a48:	fa92 f2a2 	rbit	r2, r2
 8002a4c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a50:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a54:	fab2 f282 	clz	r2, r2
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	f042 0220 	orr.w	r2, r2, #32
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	f002 021f 	and.w	r2, r2, #31
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ab      	bne.n	80029c8 <HAL_RCC_OscConfig+0x284>
 8002a70:	e003      	b.n	8002a7a <HAL_RCC_OscConfig+0x336>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 817d 	beq.w	8002d8a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a90:	4ba6      	ldr	r3, [pc, #664]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a9c:	4ba3      	ldr	r3, [pc, #652]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d172      	bne.n	8002b8e <HAL_RCC_OscConfig+0x44a>
 8002aa8:	4ba0      	ldr	r3, [pc, #640]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d16c      	bne.n	8002b8e <HAL_RCC_OscConfig+0x44a>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ac6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x3a0>
 8002ade:	4b93      	ldr	r3, [pc, #588]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e013      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c8>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002af6:	2302      	movs	r3, #2
 8002af8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002afc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b08:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b16:	fa92 f2a2 	rbit	r2, r2
 8002b1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b22:	fab2 f282 	clz	r2, r2
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f042 0220 	orr.w	r2, r2, #32
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f002 021f 	and.w	r2, r2, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCC_OscConfig+0x410>
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	f000 be2e 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	21f8      	movs	r1, #248	; 0xf8
 8002b6a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b72:	fa91 f1a1 	rbit	r1, r1
 8002b76:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b7e:	fab1 f181 	clz	r1, r1
 8002b82:	b2c9      	uxtb	r1, r1
 8002b84:	408b      	lsls	r3, r1
 8002b86:	4969      	ldr	r1, [pc, #420]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8c:	e0fd      	b.n	8002d8a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8088 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x56c>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2301      	movs	r3, #1
 8002bca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7ff f848 	bl	8001c60 <HAL_GetTick>
 8002bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7ff f843 	bl	8001c60 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d902      	bls.n	8002bec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	f000 bde2 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
 8002bec:	2302      	movs	r3, #2
 8002bee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002bfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_OscConfig+0x4d8>
 8002c16:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	e013      	b.n	8002c44 <HAL_RCC_OscConfig+0x500>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c2e:	2302      	movs	r3, #2
 8002c30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2202      	movs	r2, #2
 8002c46:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c56:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c5a:	fab2 f282 	clz	r2, r2
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	f042 0220 	orr.w	r2, r2, #32
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f002 021f 	and.w	r2, r2, #31
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0af      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	21f8      	movs	r1, #248	; 0xf8
 8002c8c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c94:	fa91 f1a1 	rbit	r1, r1
 8002c98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ca0:	fab1 f181 	clz	r1, r1
 8002ca4:	b2c9      	uxtb	r1, r1
 8002ca6:	408b      	lsls	r3, r1
 8002ca8:	4920      	ldr	r1, [pc, #128]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
 8002cae:	e06c      	b.n	8002d8a <HAL_RCC_OscConfig+0x646>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe ffc0 	bl	8001c60 <HAL_GetTick>
 8002ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe ffbb 	bl	8001c60 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f000 bd5a 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d104      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5ec>
 8002d26:	4b01      	ldr	r3, [pc, #4]	; (8002d2c <HAL_RCC_OscConfig+0x5e8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	e015      	b.n	8002d58 <HAL_RCC_OscConfig+0x614>
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	2302      	movs	r3, #2
 8002d32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d42:	2302      	movs	r3, #2
 8002d44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d54:	4bc8      	ldr	r3, [pc, #800]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d62:	fa92 f2a2 	rbit	r2, r2
 8002d66:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f042 0220 	orr.w	r2, r2, #32
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f002 021f 	and.w	r2, r2, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ad      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8110 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d079      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x760>
 8002db0:	2301      	movs	r3, #1
 8002db2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4bab      	ldr	r3, [pc, #684]	; (800307c <HAL_RCC_OscConfig+0x938>)
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe ff41 	bl	8001c60 <HAL_GetTick>
 8002dde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe ff3c 	bl	8001c60 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d902      	bls.n	8002dfa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f000 bcdb 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e14:	2202      	movs	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e54:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 8002e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e60:	2102      	movs	r1, #2
 8002e62:	6019      	str	r1, [r3, #0]
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f1a3 	rbit	r1, r3
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e7a:	6019      	str	r1, [r3, #0]
  return result;
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0a0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x6a0>
 8002ea2:	e08d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x87c>
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f2a3 	rbit	r2, r3
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ec6:	601a      	str	r2, [r3, #0]
  return result;
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ed0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b68      	ldr	r3, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x938>)
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe febb 	bl	8001c60 <HAL_GetTick>
 8002eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7fe feb6 	bl	8001c60 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	f000 bc55 	b.w	80037b0 <HAL_RCC_OscConfig+0x106c>
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f0e:	2202      	movs	r2, #2
 8002f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f32:	2202      	movs	r2, #2
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f56:	2202      	movs	r2, #2
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 8002f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f7e:	2102      	movs	r1, #2
 8002f80:	6019      	str	r1, [r3, #0]
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f1a3 	rbit	r1, r3
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f98:	6019      	str	r1, [r3, #0]
  return result;
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d197      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 81a1 	beq.w	8003318 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d116      	bne.n	8003016 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	4a22      	ldr	r2, [pc, #136]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	61d3      	str	r3, [r2, #28]
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800300e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCC_OscConfig+0x93c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11a      	bne.n	8003058 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_RCC_OscConfig+0x93c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_RCC_OscConfig+0x93c>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302e:	f7fe fe17 	bl	8001c60 <HAL_GetTick>
 8003032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	e009      	b.n	800304c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003038:	f7fe fe12 	bl	8001c60 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	; 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e3b1      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_RCC_OscConfig+0x93c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ef      	beq.n	8003038 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10d      	bne.n	8003084 <HAL_RCC_OscConfig+0x940>
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a02      	ldr	r2, [pc, #8]	; (8003078 <HAL_RCC_OscConfig+0x934>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	e03c      	b.n	80030f0 <HAL_RCC_OscConfig+0x9ac>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	10908120 	.word	0x10908120
 8003080:	40007000 	.word	0x40007000
 8003084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003088:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10c      	bne.n	80030ae <HAL_RCC_OscConfig+0x96a>
 8003094:	4bc1      	ldr	r3, [pc, #772]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4ac0      	ldr	r2, [pc, #768]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6213      	str	r3, [r2, #32]
 80030a0:	4bbe      	ldr	r3, [pc, #760]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4abd      	ldr	r2, [pc, #756]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6213      	str	r3, [r2, #32]
 80030ac:	e020      	b.n	80030f0 <HAL_RCC_OscConfig+0x9ac>
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x994>
 80030be:	4bb7      	ldr	r3, [pc, #732]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4ab6      	ldr	r2, [pc, #728]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	6213      	str	r3, [r2, #32]
 80030ca:	4bb4      	ldr	r3, [pc, #720]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4ab3      	ldr	r2, [pc, #716]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6213      	str	r3, [r2, #32]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0x9ac>
 80030d8:	4bb0      	ldr	r3, [pc, #704]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	4aaf      	ldr	r2, [pc, #700]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6213      	str	r3, [r2, #32]
 80030e4:	4bad      	ldr	r3, [pc, #692]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4aac      	ldr	r2, [pc, #688]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80030ea:	f023 0304 	bic.w	r3, r3, #4
 80030ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8081 	beq.w	8003204 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe fdad 	bl	8001c60 <HAL_GetTick>
 8003106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310a:	e00b      	b.n	8003124 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe fda8 	bl	8001c60 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	; 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e345      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800312c:	2202      	movs	r2, #2
 800312e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	fa93 f2a3 	rbit	r2, r3
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003150:	2202      	movs	r2, #2
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	fa93 f2a3 	rbit	r2, r3
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800316a:	601a      	str	r2, [r3, #0]
  return result;
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003174:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d102      	bne.n	8003190 <HAL_RCC_OscConfig+0xa4c>
 800318a:	4b84      	ldr	r3, [pc, #528]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	e013      	b.n	80031b8 <HAL_RCC_OscConfig+0xa74>
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003198:	2202      	movs	r2, #2
 800319a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	4b79      	ldr	r3, [pc, #484]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031c0:	2102      	movs	r1, #2
 80031c2:	6011      	str	r1, [r2, #0]
 80031c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	fa92 f1a2 	rbit	r1, r2
 80031d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031da:	6011      	str	r1, [r2, #0]
  return result;
 80031dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	fab2 f282 	clz	r2, r2
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	f002 021f 	and.w	r2, r2, #31
 80031f6:	2101      	movs	r1, #1
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d084      	beq.n	800310c <HAL_RCC_OscConfig+0x9c8>
 8003202:	e07f      	b.n	8003304 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7fe fd2c 	bl	8001c60 <HAL_GetTick>
 8003208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	e00b      	b.n	8003226 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fd27 	bl	8001c60 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e2c4      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
 8003226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800322e:	2202      	movs	r2, #2
 8003230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800326c:	601a      	str	r2, [r3, #0]
  return result;
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003276:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d102      	bne.n	8003292 <HAL_RCC_OscConfig+0xb4e>
 800328c:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	e013      	b.n	80032ba <HAL_RCC_OscConfig+0xb76>
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800329a:	2202      	movs	r2, #2
 800329c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032c2:	2102      	movs	r1, #2
 80032c4:	6011      	str	r1, [r2, #0]
 80032c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	fa92 f1a2 	rbit	r1, r2
 80032d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032dc:	6011      	str	r1, [r2, #0]
  return result;
 80032de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	fab2 f282 	clz	r2, r2
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f002 021f 	and.w	r2, r2, #31
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f202 	lsl.w	r2, r1, r2
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d184      	bne.n	800320e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003304:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003316:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8242 	beq.w	80037ae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332a:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_RCC_OscConfig+0xc58>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	f000 8213 	beq.w	800375e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b02      	cmp	r3, #2
 8003346:	f040 8162 	bne.w	800360e <HAL_RCC_OscConfig+0xeca>
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003352:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800336e:	601a      	str	r2, [r3, #0]
  return result;
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003378:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003384:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	461a      	mov	r2, r3
 800338c:	2300      	movs	r3, #0
 800338e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fc66 	bl	8001c60 <HAL_GetTick>
 8003394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003398:	e00c      	b.n	80033b4 <HAL_RCC_OscConfig+0xc70>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fc5e 	bl	8001c60 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1fd      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
 80033b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033d8:	601a      	str	r2, [r3, #0]
  return result;
 80033da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_OscConfig+0xcba>
 80033f8:	4bb0      	ldr	r3, [pc, #704]	; (80036bc <HAL_RCC_OscConfig+0xf78>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	e027      	b.n	800344e <HAL_RCC_OscConfig+0xd0a>
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800340a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800342c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	4b9c      	ldr	r3, [pc, #624]	; (80036bc <HAL_RCC_OscConfig+0xf78>)
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003452:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003456:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800345a:	6011      	str	r1, [r2, #0]
 800345c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003460:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	fa92 f1a2 	rbit	r1, r2
 800346a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800346e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003472:	6011      	str	r1, [r2, #0]
  return result;
 8003474:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003478:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f002 021f 	and.w	r2, r2, #31
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d182      	bne.n	80033a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349a:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0xf78>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	430b      	orrs	r3, r1
 80034bc:	497f      	ldr	r1, [pc, #508]	; (80036bc <HAL_RCC_OscConfig+0xf78>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034e6:	601a      	str	r2, [r3, #0]
  return result;
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	461a      	mov	r2, r3
 8003504:	2301      	movs	r3, #1
 8003506:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe fbaa 	bl	8001c60 <HAL_GetTick>
 800350c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003510:	e009      	b.n	8003526 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003512:	f7fe fba5 	bl	8001c60 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e144      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800352e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003550:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003554:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_RCC_OscConfig+0xe2c>
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_RCC_OscConfig+0xf78>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	e027      	b.n	80035c0 <HAL_RCC_OscConfig+0xe7c>
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800359e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	4b3f      	ldr	r3, [pc, #252]	; (80036bc <HAL_RCC_OscConfig+0xf78>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035c4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035cc:	6011      	str	r1, [r2, #0]
 80035ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	fa92 f1a2 	rbit	r1, r2
 80035dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035e0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035e4:	6011      	str	r1, [r2, #0]
  return result;
 80035e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	fab2 f282 	clz	r2, r2
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f042 0220 	orr.w	r2, r2, #32
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f002 021f 	and.w	r2, r2, #31
 8003600:	2101      	movs	r1, #1
 8003602:	fa01 f202 	lsl.w	r2, r1, r2
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d082      	beq.n	8003512 <HAL_RCC_OscConfig+0xdce>
 800360c:	e0cf      	b.n	80037ae <HAL_RCC_OscConfig+0x106a>
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003632:	601a      	str	r2, [r3, #0]
  return result;
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800363c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003648:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	461a      	mov	r2, r3
 8003650:	2300      	movs	r3, #0
 8003652:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fb04 	bl	8001c60 <HAL_GetTick>
 8003658:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365c:	e009      	b.n	8003672 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe faff 	bl	8001c60 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e09e      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800367a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800367e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	fa93 f2a3 	rbit	r2, r3
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003696:	601a      	str	r2, [r3, #0]
  return result;
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d104      	bne.n	80036c0 <HAL_RCC_OscConfig+0xf7c>
 80036b6:	4b01      	ldr	r3, [pc, #4]	; (80036bc <HAL_RCC_OscConfig+0xf78>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	e029      	b.n	8003710 <HAL_RCC_OscConfig+0xfcc>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	fa93 f2a3 	rbit	r2, r3
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	fa93 f2a3 	rbit	r2, r3
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x1078>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003714:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800371c:	6011      	str	r1, [r2, #0]
 800371e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003722:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	fa92 f1a2 	rbit	r1, r2
 800372c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003730:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003734:	6011      	str	r1, [r2, #0]
  return result;
 8003736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800373a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	fab2 f282 	clz	r2, r2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	f042 0220 	orr.w	r2, r2, #32
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f002 021f 	and.w	r2, r2, #31
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d180      	bne.n	800365e <HAL_RCC_OscConfig+0xf1a>
 800375c:	e027      	b.n	80037ae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e01e      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_RCC_OscConfig+0x1078>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800377a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800377e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	429a      	cmp	r2, r3
 8003790:	d10b      	bne.n	80037aa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003792:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b09e      	sub	sp, #120	; 0x78
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e162      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b90      	ldr	r3, [pc, #576]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d910      	bls.n	8003808 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b8d      	ldr	r3, [pc, #564]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0207 	bic.w	r2, r3, #7
 80037ee:	498b      	ldr	r1, [pc, #556]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b89      	ldr	r3, [pc, #548]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e14a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b82      	ldr	r3, [pc, #520]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	497f      	ldr	r1, [pc, #508]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80dc 	beq.w	80039ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d13c      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xf6>
 800383c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003840:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d102      	bne.n	8003866 <HAL_RCC_ClockConfig+0xa6>
 8003860:	4b6f      	ldr	r3, [pc, #444]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	e00f      	b.n	8003886 <HAL_RCC_ClockConfig+0xc6>
 8003866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	667b      	str	r3, [r7, #100]	; 0x64
 8003874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003878:	663b      	str	r3, [r7, #96]	; 0x60
 800387a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800388a:	65ba      	str	r2, [r7, #88]	; 0x58
 800388c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388e:	fa92 f2a2 	rbit	r2, r2
 8003892:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003896:	fab2 f282 	clz	r2, r2
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d17b      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0f3      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d13c      	bne.n	8003938 <HAL_RCC_ClockConfig+0x178>
 80038be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x128>
 80038e2:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_ClockConfig+0x148>
 80038e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	647b      	str	r3, [r7, #68]	; 0x44
 80038f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003904:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800390c:	63ba      	str	r2, [r7, #56]	; 0x38
 800390e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003910:	fa92 f2a2 	rbit	r2, r2
 8003914:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d13a      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0b2      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
 8003938:	2302      	movs	r3, #2
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d102      	bne.n	8003960 <HAL_RCC_ClockConfig+0x1a0>
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e00d      	b.n	800397c <HAL_RCC_ClockConfig+0x1bc>
 8003960:	2302      	movs	r3, #2
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	2302      	movs	r3, #2
 800396e:	623b      	str	r3, [r7, #32]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2202      	movs	r2, #2
 800397e:	61ba      	str	r2, [r7, #24]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	fa92 f2a2 	rbit	r2, r2
 8003986:	617a      	str	r2, [r7, #20]
  return result;
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	fab2 f282 	clz	r2, r2
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f042 0220 	orr.w	r2, r2, #32
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f002 021f 	and.w	r2, r2, #31
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e079      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	491a      	ldr	r1, [pc, #104]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039bc:	f7fe f950 	bl	8001c60 <HAL_GetTick>
 80039c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fe f94c 	bl	8001c60 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e061      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d214      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 0207 	bic.w	r2, r3, #7
 8003a02:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <HAL_RCC_ClockConfig+0x25c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e040      	b.n	8003a9e <HAL_RCC_ClockConfig+0x2de>
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	491a      	ldr	r1, [pc, #104]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4e:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4912      	ldr	r1, [pc, #72]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a62:	f000 f829 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4601      	mov	r1, r0
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a70:	22f0      	movs	r2, #240	; 0xf0
 8003a72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	fa92 f2a2 	rbit	r2, r2
 8003a7a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	fab2 f282 	clz	r2, r2
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	40d3      	lsrs	r3, r2
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x2ec>)
 8003a88:	5cd3      	ldrb	r3, [r2, r3]
 8003a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_RCC_ClockConfig+0x2f0>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_RCC_ClockConfig+0x2f4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe f89e 	bl	8001bd8 <HAL_InitTick>
  
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3778      	adds	r7, #120	; 0x78
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	0800628c 	.word	0x0800628c
 8003ab0:	20000010 	.word	0x20000010
 8003ab4:	20000014 	.word	0x20000014

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b08b      	sub	sp, #44	; 0x2c
 8003abc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x36>
 8003ae6:	e03c      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae8:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aea:	623b      	str	r3, [r7, #32]
      break;
 8003aec:	e03c      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003af4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003af8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	fa92 f2a2 	rbit	r2, r2
 8003b00:	607a      	str	r2, [r7, #4]
  return result;
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	fab2 f282 	clz	r2, r2
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	40d3      	lsrs	r3, r2
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	fa92 f2a2 	rbit	r2, r2
 8003b24:	60fa      	str	r2, [r7, #12]
  return result;
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	fab2 f282 	clz	r2, r2
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	40d3      	lsrs	r3, r2
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b40:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b50:	e004      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4a0c      	ldr	r2, [pc, #48]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	623b      	str	r3, [r7, #32]
      break;
 8003b60:	e002      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b64:	623b      	str	r3, [r7, #32]
      break;
 8003b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b68:	6a3b      	ldr	r3, [r7, #32]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	372c      	adds	r7, #44	; 0x2c
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	007a1200 	.word	0x007a1200
 8003b80:	080062a4 	.word	0x080062a4
 8003b84:	080062b4 	.word	0x080062b4
 8003b88:	003d0900 	.word	0x003d0900

08003b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000010 	.word	0x20000010

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003baa:	f7ff ffef 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bae:	4601      	mov	r1, r0
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bb8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	fa92 f2a2 	rbit	r2, r2
 8003bc4:	603a      	str	r2, [r7, #0]
  return result;
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	fab2 f282 	clz	r2, r2
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	40d3      	lsrs	r3, r2
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	0800629c 	.word	0x0800629c

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bee:	f7ff ffcd 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003bfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	fa92 f2a2 	rbit	r2, r2
 8003c08:	603a      	str	r2, [r7, #0]
  return result;
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	fab2 f282 	clz	r2, r2
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	40d3      	lsrs	r3, r2
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	0800629c 	.word	0x0800629c

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b092      	sub	sp, #72	; 0x48
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80d4 	beq.w	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c50:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10e      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	4a4a      	ldr	r2, [pc, #296]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c66:	61d3      	str	r3, [r2, #28]
 8003c68:	4b48      	ldr	r3, [pc, #288]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fd ffe5 	bl	8001c60 <HAL_GetTick>
 8003c96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fd ffe1 	bl	8001c60 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	; 0x64
 8003ca6:	d901      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e169      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cb8:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8084 	beq.w	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d07c      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cd8:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	461a      	mov	r2, r3
 8003d02:	2301      	movs	r3, #1
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	461a      	mov	r2, r3
 8003d26:	2300      	movs	r3, #0
 8003d28:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d04b      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd ff91 	bl	8001c60 <HAL_GetTick>
 8003d3e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd ff8d 	bl	8001c60 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e113      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
 8003d64:	2302      	movs	r3, #2
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	61fb      	str	r3, [r7, #28]
  return result;
 8003d70:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d108      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d86:	4b01      	ldr	r3, [pc, #4]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	e00d      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
 8003d94:	10908100 	.word	0x10908100
 8003d98:	2302      	movs	r3, #2
 8003d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	4b78      	ldr	r3, [pc, #480]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2202      	movs	r2, #2
 8003daa:	613a      	str	r2, [r7, #16]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	fa92 f2a2 	rbit	r2, r2
 8003db2:	60fa      	str	r2, [r7, #12]
  return result;
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	fab2 f282 	clz	r2, r2
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f002 021f 	and.w	r2, r2, #31
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0b7      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dd2:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	496a      	ldr	r1, [pc, #424]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003de4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e04:	4b60      	ldr	r3, [pc, #384]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	f023 0203 	bic.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	495d      	ldr	r1, [pc, #372]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e22:	4b59      	ldr	r3, [pc, #356]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4956      	ldr	r1, [pc, #344]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e40:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	494e      	ldr	r1, [pc, #312]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f023 0210 	bic.w	r2, r3, #16
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4947      	ldr	r1, [pc, #284]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003e7c:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	493f      	ldr	r1, [pc, #252]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f023 0220 	bic.w	r2, r3, #32
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4938      	ldr	r1, [pc, #224]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	4930      	ldr	r1, [pc, #192]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4929      	ldr	r1, [pc, #164]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4921      	ldr	r1, [pc, #132]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	491a      	ldr	r1, [pc, #104]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f30:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	4912      	ldr	r1, [pc, #72]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	490b      	ldr	r1, [pc, #44]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3748      	adds	r7, #72	; 0x48
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e073      	b.n	800408a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7f5b      	ldrb	r3, [r3, #29]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fc48 	bl	8001848 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d055      	beq.n	8004078 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	22ca      	movs	r2, #202	; 0xca
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2253      	movs	r2, #83	; 0x53
 8003fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fa49 	bl	8004474 <RTC_EnterInitMode>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d12c      	bne.n	8004046 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6899      	ldr	r1, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68d2      	ldr	r2, [r2, #12]
 8004026:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6919      	ldr	r1, [r3, #16]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	041a      	lsls	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa50 	bl	80044e2 <RTC_ExitInitMode>
 8004042:	4603      	mov	r3, r0
 8004044:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d110      	bne.n	800406e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
 8004076:	e001      	b.n	800407c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004092:	b590      	push	{r4, r7, lr}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	7f1b      	ldrb	r3, [r3, #28]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_RTC_SetTime+0x1c>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e087      	b.n	80041be <HAL_RTC_SetTime+0x12c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2202      	movs	r2, #2
 80040b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d126      	bne.n	800410e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fa27 	bl	800452c <RTC_ByteToBcd2>
 80040de:	4603      	mov	r3, r0
 80040e0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	785b      	ldrb	r3, [r3, #1]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa20 	bl	800452c <RTC_ByteToBcd2>
 80040ec:	4603      	mov	r3, r0
 80040ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040f0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	789b      	ldrb	r3, [r3, #2]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fa18 	bl	800452c <RTC_ByteToBcd2>
 80040fc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	78db      	ldrb	r3, [r3, #3]
 8004106:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	e018      	b.n	8004140 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2200      	movs	r2, #0
 8004120:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800412e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004134:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	78db      	ldrb	r3, [r3, #3]
 800413a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	22ca      	movs	r2, #202	; 0xca
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2253      	movs	r2, #83	; 0x53
 800414e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f98f 	bl	8004474 <RTC_EnterInitMode>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d120      	bne.n	80041a2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800416a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800416e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800417e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6899      	ldr	r1, [r3, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	431a      	orrs	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f9a2 	bl	80044e2 <RTC_ExitInitMode>
 800419e:	4603      	mov	r3, r0
 80041a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	22ff      	movs	r2, #255	; 0xff
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]

  return status;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}

080041c6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	0d9b      	lsrs	r3, r3, #22
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11a      	bne.n	8004278 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f98e 	bl	8004568 <RTC_Bcd2ToByte>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	785b      	ldrb	r3, [r3, #1]
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f985 	bl	8004568 <RTC_Bcd2ToByte>
 800425e:	4603      	mov	r3, r0
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	789b      	ldrb	r3, [r3, #2]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f97c 	bl	8004568 <RTC_Bcd2ToByte>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004282:	b590      	push	{r4, r7, lr}
 8004284:	b087      	sub	sp, #28
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	7f1b      	ldrb	r3, [r3, #28]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_RTC_SetDate+0x1c>
 800429a:	2302      	movs	r3, #2
 800429c:	e071      	b.n	8004382 <HAL_RTC_SetDate+0x100>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2202      	movs	r2, #2
 80042a8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10e      	bne.n	80042ce <HAL_RTC_SetDate+0x4c>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	785b      	ldrb	r3, [r3, #1]
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	330a      	adds	r3, #10
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11c      	bne.n	800430e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	78db      	ldrb	r3, [r3, #3]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f927 	bl	800452c <RTC_ByteToBcd2>
 80042de:	4603      	mov	r3, r0
 80042e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f920 	bl	800452c <RTC_ByteToBcd2>
 80042ec:	4603      	mov	r3, r0
 80042ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80042f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	789b      	ldrb	r3, [r3, #2]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f918 	bl	800452c <RTC_ByteToBcd2>
 80042fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e00e      	b.n	800432c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	78db      	ldrb	r3, [r3, #3]
 8004312:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800431a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004320:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	22ca      	movs	r2, #202	; 0xca
 8004332:	625a      	str	r2, [r3, #36]	; 0x24
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2253      	movs	r2, #83	; 0x53
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f899 	bl	8004474 <RTC_EnterInitMode>
 8004342:	4603      	mov	r3, r0
 8004344:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10c      	bne.n	8004366 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004356:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800435a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f8c0 	bl	80044e2 <RTC_ExitInitMode>
 8004362:	4603      	mov	r3, r0
 8004364:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004366:	7cfb      	ldrb	r3, [r7, #19]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	22ff      	movs	r2, #255	; 0xff
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]

  return status;
 8004380:	7cfb      	ldrb	r3, [r7, #19]
}
 8004382:	4618      	mov	r0, r3
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}

0800438a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	0b5b      	lsrs	r3, r3, #13
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11a      	bne.n	800441e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	78db      	ldrb	r3, [r3, #3]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f8bb 	bl	8004568 <RTC_Bcd2ToByte>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f8b2 	bl	8004568 <RTC_Bcd2ToByte>
 8004404:	4603      	mov	r3, r0
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	789b      	ldrb	r3, [r3, #2]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f8a9 	bl	8004568 <RTC_Bcd2ToByte>
 8004416:	4603      	mov	r3, r0
 8004418:	461a      	mov	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <HAL_RTC_WaitForSynchro+0x48>)
 800443a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800443c:	f7fd fc10 	bl	8001c60 <HAL_GetTick>
 8004440:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004442:	e009      	b.n	8004458 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004444:	f7fd fc0c 	bl	8001c60 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004452:	d901      	bls.n	8004458 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e007      	b.n	8004468 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0ee      	beq.n	8004444 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	0001ff5f 	.word	0x0001ff5f

08004474 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d122      	bne.n	80044d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044a2:	f7fd fbdd 	bl	8001c60 <HAL_GetTick>
 80044a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044a8:	e00c      	b.n	80044c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044aa:	f7fd fbd9 	bl	8001c60 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044b8:	d904      	bls.n	80044c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2204      	movs	r2, #4
 80044be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <RTC_EnterInitMode+0x64>
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d1e8      	bne.n	80044aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff8b 	bl	8004428 <HAL_RTC_WaitForSynchro>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d004      	beq.n	8004522 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2204      	movs	r2, #4
 800451c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800453a:	e005      	b.n	8004548 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3301      	adds	r3, #1
 8004540:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	3b0a      	subs	r3, #10
 8004546:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	2b09      	cmp	r3, #9
 800454c:	d8f6      	bhi.n	800453c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	b2da      	uxtb	r2, r3
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	4313      	orrs	r3, r2
 800455a:	b2db      	uxtb	r3, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	b2db      	uxtb	r3, r3
 8004594:	4413      	add	r3, r2
 8004596:	b2db      	uxtb	r3, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e09d      	b.n	80046f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c6:	d009      	beq.n	80045dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	61da      	str	r2, [r3, #28]
 80045ce:	e005      	b.n	80045dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd f94c 	bl	8001894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004612:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800461c:	d902      	bls.n	8004624 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e002      	b.n	800462a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004628:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004632:	d007      	beq.n	8004644 <HAL_SPI_Init+0xa0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800463c:	d002      	beq.n	8004644 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	ea42 0103 	orr.w	r1, r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	0c1b      	lsrs	r3, r3, #16
 80046a0:	f003 0204 	and.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046c0:	ea42 0103 	orr.w	r1, r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e040      	b.n	800478e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fd f8fb 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2224      	movs	r2, #36	; 0x24
 8004726:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fbbd 	bl	8004eb8 <UART_SetConfig>
 800473e:	4603      	mov	r3, r0
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e022      	b.n	800478e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fd85 	bl	8005260 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004764:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004774:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0201 	orr.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fe0c 	bl	80053a4 <UART_CheckIdleState>
 800478c:	4603      	mov	r3, r0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b08a      	sub	sp, #40	; 0x28
 800479a:	af02      	add	r7, sp, #8
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d178      	bne.n	80048a0 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_UART_Transmit+0x24>
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e071      	b.n	80048a2 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047cc:	f7fd fa48 	bl	8001c60 <HAL_GetTick>
 80047d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ea:	d108      	bne.n	80047fe <HAL_UART_Transmit+0x68>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d104      	bne.n	80047fe <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	e003      	b.n	8004806 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004806:	e030      	b.n	800486a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fe6e 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e03c      	b.n	80048a2 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483a:	b292      	uxth	r2, r2
 800483c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	3302      	adds	r3, #2
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e008      	b.n	8004858 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b292      	uxth	r2, r2
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1c8      	bne.n	8004808 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fe37 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d004      	beq.n	8004896 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e005      	b.n	80048a2 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b0ba      	sub	sp, #232	; 0xe8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80048da:	4013      	ands	r3, r2
 80048dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d115      	bne.n	8004914 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00f      	beq.n	8004914 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 82ab 	beq.w	8004e60 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
      }
      return;
 8004912:	e2a5      	b.n	8004e60 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8117 	beq.w	8004b4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800491e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800492a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800492e:	4b85      	ldr	r3, [pc, #532]	; (8004b44 <HAL_UART_IRQHandler+0x298>)
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 810a 	beq.w	8004b4c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d011      	beq.n	8004968 <HAL_UART_IRQHandler+0xbc>
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d011      	beq.n	8004998 <HAL_UART_IRQHandler+0xec>
 8004974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2202      	movs	r2, #2
 8004986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d011      	beq.n	80049c8 <HAL_UART_IRQHandler+0x11c>
 80049a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2204      	movs	r2, #4
 80049b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	f043 0202 	orr.w	r2, r3, #2
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d017      	beq.n	8004a04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2208      	movs	r2, #8
 80049f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fa:	f043 0208 	orr.w	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d012      	beq.n	8004a36 <HAL_UART_IRQHandler+0x18a>
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8211 	beq.w	8004e64 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d005      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04f      	beq.n	8004b2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fd97 	bl	80055c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d141      	bne.n	8004b26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1d9      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <HAL_UART_IRQHandler+0x29c>)
 8004afc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fd fa26 	bl	8001f54 <HAL_DMA_Abort_IT>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d017      	beq.n	8004b3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	e00f      	b.n	8004b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9b4 	bl	8004e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	e00b      	b.n	8004b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9b0 	bl	8004e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	e007      	b.n	8004b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9ac 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004b3c:	e192      	b.n	8004e64 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3e:	bf00      	nop
    return;
 8004b40:	e190      	b.n	8004e64 <HAL_UART_IRQHandler+0x5b8>
 8004b42:	bf00      	nop
 8004b44:	04000120 	.word	0x04000120
 8004b48:	0800568b 	.word	0x0800568b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 814b 	bne.w	8004dec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8144 	beq.w	8004dec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 813d 	beq.w	8004dec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2210      	movs	r2, #16
 8004b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	f040 80b5 	bne.w	8004cf4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8164 	beq.w	8004e68 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f080 815c 	bcs.w	8004e68 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	f000 8086 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bf4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1da      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3308      	adds	r3, #8
 8004c16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e1      	bne.n	8004c10 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c70:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e3      	bne.n	8004c4c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca2:	f023 0310 	bic.w	r3, r3, #16
 8004ca6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e4      	bne.n	8004c92 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fd f908 	bl	8001ee2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8d7 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cf2:	e0b9      	b.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 80ab 	beq.w	8004e6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80a6 	beq.w	8004e6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
 8004d44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e4      	bne.n	8004d20 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	623b      	str	r3, [r7, #32]
   return(result);
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e3      	bne.n	8004d56 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0310 	bic.w	r3, r3, #16
 8004db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e4      	bne.n	8004da2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f85b 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dea:	e03f      	b.n	8004e6c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00e      	beq.n	8004e16 <HAL_UART_IRQHandler+0x56a>
 8004df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fc7b 	bl	800570a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e14:	e02d      	b.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00e      	beq.n	8004e40 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01c      	beq.n	8004e70 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
    }
    return;
 8004e3e:	e017      	b.n	8004e70 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d012      	beq.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
 8004e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00c      	beq.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fc2c 	bl	80056b6 <UART_EndTransmit_IT>
    return;
 8004e5e:	e008      	b.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e60:	bf00      	nop
 8004e62:	e006      	b.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004e64:	bf00      	nop
 8004e66:	e004      	b.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e68:	bf00      	nop
 8004e6a:	e002      	b.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004e6c:	bf00      	nop
 8004e6e:	e000      	b.n	8004e72 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004e70:	bf00      	nop
  }

}
 8004e72:	37e8      	adds	r7, #232	; 0xe8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ee6:	f023 030c 	bic.w	r3, r3, #12
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4aa7      	ldr	r2, [pc, #668]	; (80051d0 <UART_SetConfig+0x318>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d120      	bne.n	8004f7a <UART_SetConfig+0xc2>
 8004f38:	4ba6      	ldr	r3, [pc, #664]	; (80051d4 <UART_SetConfig+0x31c>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d817      	bhi.n	8004f74 <UART_SetConfig+0xbc>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0x94>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f69 	.word	0x08004f69
 8004f54:	08004f6f 	.word	0x08004f6f
 8004f58:	08004f63 	.word	0x08004f63
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e0b5      	b.n	80050ce <UART_SetConfig+0x216>
 8004f62:	2302      	movs	r3, #2
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e0b2      	b.n	80050ce <UART_SetConfig+0x216>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e0af      	b.n	80050ce <UART_SetConfig+0x216>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	77fb      	strb	r3, [r7, #31]
 8004f72:	e0ac      	b.n	80050ce <UART_SetConfig+0x216>
 8004f74:	2310      	movs	r3, #16
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e0a9      	b.n	80050ce <UART_SetConfig+0x216>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a96      	ldr	r2, [pc, #600]	; (80051d8 <UART_SetConfig+0x320>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d124      	bne.n	8004fce <UART_SetConfig+0x116>
 8004f84:	4b93      	ldr	r3, [pc, #588]	; (80051d4 <UART_SetConfig+0x31c>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f90:	d011      	beq.n	8004fb6 <UART_SetConfig+0xfe>
 8004f92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f96:	d817      	bhi.n	8004fc8 <UART_SetConfig+0x110>
 8004f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f9c:	d011      	beq.n	8004fc2 <UART_SetConfig+0x10a>
 8004f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fa2:	d811      	bhi.n	8004fc8 <UART_SetConfig+0x110>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <UART_SetConfig+0xf8>
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fac:	d006      	beq.n	8004fbc <UART_SetConfig+0x104>
 8004fae:	e00b      	b.n	8004fc8 <UART_SetConfig+0x110>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e08b      	b.n	80050ce <UART_SetConfig+0x216>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e088      	b.n	80050ce <UART_SetConfig+0x216>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e085      	b.n	80050ce <UART_SetConfig+0x216>
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e082      	b.n	80050ce <UART_SetConfig+0x216>
 8004fc8:	2310      	movs	r3, #16
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e07f      	b.n	80050ce <UART_SetConfig+0x216>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a82      	ldr	r2, [pc, #520]	; (80051dc <UART_SetConfig+0x324>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d124      	bne.n	8005022 <UART_SetConfig+0x16a>
 8004fd8:	4b7e      	ldr	r3, [pc, #504]	; (80051d4 <UART_SetConfig+0x31c>)
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004fe0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fe4:	d011      	beq.n	800500a <UART_SetConfig+0x152>
 8004fe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fea:	d817      	bhi.n	800501c <UART_SetConfig+0x164>
 8004fec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ff0:	d011      	beq.n	8005016 <UART_SetConfig+0x15e>
 8004ff2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ff6:	d811      	bhi.n	800501c <UART_SetConfig+0x164>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <UART_SetConfig+0x14c>
 8004ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005000:	d006      	beq.n	8005010 <UART_SetConfig+0x158>
 8005002:	e00b      	b.n	800501c <UART_SetConfig+0x164>
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e061      	b.n	80050ce <UART_SetConfig+0x216>
 800500a:	2302      	movs	r3, #2
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e05e      	b.n	80050ce <UART_SetConfig+0x216>
 8005010:	2304      	movs	r3, #4
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e05b      	b.n	80050ce <UART_SetConfig+0x216>
 8005016:	2308      	movs	r3, #8
 8005018:	77fb      	strb	r3, [r7, #31]
 800501a:	e058      	b.n	80050ce <UART_SetConfig+0x216>
 800501c:	2310      	movs	r3, #16
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e055      	b.n	80050ce <UART_SetConfig+0x216>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6e      	ldr	r2, [pc, #440]	; (80051e0 <UART_SetConfig+0x328>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d124      	bne.n	8005076 <UART_SetConfig+0x1be>
 800502c:	4b69      	ldr	r3, [pc, #420]	; (80051d4 <UART_SetConfig+0x31c>)
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005038:	d011      	beq.n	800505e <UART_SetConfig+0x1a6>
 800503a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800503e:	d817      	bhi.n	8005070 <UART_SetConfig+0x1b8>
 8005040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005044:	d011      	beq.n	800506a <UART_SetConfig+0x1b2>
 8005046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800504a:	d811      	bhi.n	8005070 <UART_SetConfig+0x1b8>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <UART_SetConfig+0x1a0>
 8005050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005054:	d006      	beq.n	8005064 <UART_SetConfig+0x1ac>
 8005056:	e00b      	b.n	8005070 <UART_SetConfig+0x1b8>
 8005058:	2300      	movs	r3, #0
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e037      	b.n	80050ce <UART_SetConfig+0x216>
 800505e:	2302      	movs	r3, #2
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e034      	b.n	80050ce <UART_SetConfig+0x216>
 8005064:	2304      	movs	r3, #4
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e031      	b.n	80050ce <UART_SetConfig+0x216>
 800506a:	2308      	movs	r3, #8
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e02e      	b.n	80050ce <UART_SetConfig+0x216>
 8005070:	2310      	movs	r3, #16
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e02b      	b.n	80050ce <UART_SetConfig+0x216>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a5a      	ldr	r2, [pc, #360]	; (80051e4 <UART_SetConfig+0x32c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d124      	bne.n	80050ca <UART_SetConfig+0x212>
 8005080:	4b54      	ldr	r3, [pc, #336]	; (80051d4 <UART_SetConfig+0x31c>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800508c:	d011      	beq.n	80050b2 <UART_SetConfig+0x1fa>
 800508e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005092:	d817      	bhi.n	80050c4 <UART_SetConfig+0x20c>
 8005094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005098:	d011      	beq.n	80050be <UART_SetConfig+0x206>
 800509a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800509e:	d811      	bhi.n	80050c4 <UART_SetConfig+0x20c>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <UART_SetConfig+0x1f4>
 80050a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a8:	d006      	beq.n	80050b8 <UART_SetConfig+0x200>
 80050aa:	e00b      	b.n	80050c4 <UART_SetConfig+0x20c>
 80050ac:	2300      	movs	r3, #0
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e00d      	b.n	80050ce <UART_SetConfig+0x216>
 80050b2:	2302      	movs	r3, #2
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e00a      	b.n	80050ce <UART_SetConfig+0x216>
 80050b8:	2304      	movs	r3, #4
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e007      	b.n	80050ce <UART_SetConfig+0x216>
 80050be:	2308      	movs	r3, #8
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e004      	b.n	80050ce <UART_SetConfig+0x216>
 80050c4:	2310      	movs	r3, #16
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e001      	b.n	80050ce <UART_SetConfig+0x216>
 80050ca:	2310      	movs	r3, #16
 80050cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d6:	d15b      	bne.n	8005190 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80050d8:	7ffb      	ldrb	r3, [r7, #31]
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d827      	bhi.n	800512e <UART_SetConfig+0x276>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x22c>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	0800511f 	.word	0x0800511f
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe fd4c 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 800510c:	61b8      	str	r0, [r7, #24]
        break;
 800510e:	e013      	b.n	8005138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005110:	f7fe fd6a 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b33      	ldr	r3, [pc, #204]	; (80051e8 <UART_SetConfig+0x330>)
 800511a:	61bb      	str	r3, [r7, #24]
        break;
 800511c:	e00c      	b.n	8005138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fe fccb 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8005122:	61b8      	str	r0, [r7, #24]
        break;
 8005124:	e008      	b.n	8005138 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512a:	61bb      	str	r3, [r7, #24]
        break;
 800512c:	e004      	b.n	8005138 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	77bb      	strb	r3, [r7, #30]
        break;
 8005136:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8082 	beq.w	8005244 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	005a      	lsls	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	441a      	add	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b0f      	cmp	r3, #15
 800515a:	d916      	bls.n	800518a <UART_SetConfig+0x2d2>
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005162:	d212      	bcs.n	800518a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f023 030f 	bic.w	r3, r3, #15
 800516c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	b29b      	uxth	r3, r3
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	b29a      	uxth	r2, r3
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	4313      	orrs	r3, r2
 800517e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	89fa      	ldrh	r2, [r7, #14]
 8005186:	60da      	str	r2, [r3, #12]
 8005188:	e05c      	b.n	8005244 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	77bb      	strb	r3, [r7, #30]
 800518e:	e059      	b.n	8005244 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005190:	7ffb      	ldrb	r3, [r7, #31]
 8005192:	2b08      	cmp	r3, #8
 8005194:	d835      	bhi.n	8005202 <UART_SetConfig+0x34a>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x2e4>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	08005203 	.word	0x08005203
 80051ac:	080051f3 	.word	0x080051f3
 80051b0:	08005203 	.word	0x08005203
 80051b4:	08005203 	.word	0x08005203
 80051b8:	08005203 	.word	0x08005203
 80051bc:	080051fb 	.word	0x080051fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe fcf0 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 80051c4:	61b8      	str	r0, [r7, #24]
        break;
 80051c6:	e021      	b.n	800520c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c8:	f7fe fd0e 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 80051cc:	61b8      	str	r0, [r7, #24]
        break;
 80051ce:	e01d      	b.n	800520c <UART_SetConfig+0x354>
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40004400 	.word	0x40004400
 80051dc:	40004800 	.word	0x40004800
 80051e0:	40004c00 	.word	0x40004c00
 80051e4:	40005000 	.word	0x40005000
 80051e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <UART_SetConfig+0x3a4>)
 80051ee:	61bb      	str	r3, [r7, #24]
        break;
 80051f0:	e00c      	b.n	800520c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f2:	f7fe fc61 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 80051f6:	61b8      	str	r0, [r7, #24]
        break;
 80051f8:	e008      	b.n	800520c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fe:	61bb      	str	r3, [r7, #24]
        break;
 8005200:	e004      	b.n	800520c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	77bb      	strb	r3, [r7, #30]
        break;
 800520a:	bf00      	nop
    }

    if (pclk != 0U)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d018      	beq.n	8005244 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	085a      	lsrs	r2, r3, #1
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	441a      	add	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b0f      	cmp	r3, #15
 800522a:	d909      	bls.n	8005240 <UART_SetConfig+0x388>
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005232:	d205      	bcs.n	8005240 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	e001      	b.n	8005244 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005250:	7fbb      	ldrb	r3, [r7, #30]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	007a1200 	.word	0x007a1200

08005260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01a      	beq.n	8005376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535e:	d10a      	bne.n	8005376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b098      	sub	sp, #96	; 0x60
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053b4:	f7fc fc54 	bl	8001c60 <HAL_GetTick>
 80053b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d12e      	bne.n	8005426 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f88c 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d021      	beq.n	8005426 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f6:	653b      	str	r3, [r7, #80]	; 0x50
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005400:	647b      	str	r3, [r7, #68]	; 0x44
 8005402:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005406:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e062      	b.n	80054ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b04      	cmp	r3, #4
 8005432:	d149      	bne.n	80054c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800543c:	2200      	movs	r2, #0
 800543e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f856 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d03c      	beq.n	80054c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	623b      	str	r3, [r7, #32]
   return(result);
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546c:	633b      	str	r3, [r7, #48]	; 0x30
 800546e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e6      	bne.n	800544e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	64bb      	str	r3, [r7, #72]	; 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054a0:	61fa      	str	r2, [r7, #28]
 80054a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	617b      	str	r3, [r7, #20]
   return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e011      	b.n	80054ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3758      	adds	r7, #88	; 0x58
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	e049      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d045      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fc fba7 	bl	8001c60 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <UART_WaitOnFlagUntilTimeout+0x30>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e048      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d031      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d110      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2208      	movs	r2, #8
 800554a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f838 	bl	80055c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2208      	movs	r2, #8
 8005556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e029      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005574:	d111      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800557e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f81e 	bl	80055c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e00f      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4013      	ands	r3, r2
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d0a6      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b095      	sub	sp, #84	; 0x54
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e8:	643b      	str	r3, [r7, #64]	; 0x40
 80055ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	61fb      	str	r3, [r7, #28]
   return(result);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	64bb      	str	r3, [r7, #72]	; 0x48
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800561c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e5      	bne.n	80055fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	2b01      	cmp	r3, #1
 8005636:	d118      	bne.n	800566a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	60bb      	str	r3, [r7, #8]
   return(result);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	647b      	str	r3, [r7, #68]	; 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6979      	ldr	r1, [r7, #20]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	613b      	str	r3, [r7, #16]
   return(result);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e6      	bne.n	8005638 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800567e:	bf00      	nop
 8005680:	3754      	adds	r7, #84	; 0x54
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fbef 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b088      	sub	sp, #32
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6979      	ldr	r1, [r7, #20]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e6      	bne.n	80056be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fbbb 	bl	8004e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005726:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800572a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	b29b      	uxth	r3, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	b29b      	uxth	r3, r3
 800573c:	4013      	ands	r3, r2
 800573e:	b29a      	uxth	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005754:	b084      	sub	sp, #16
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	f107 0014 	add.w	r0, r7, #20
 8005762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	b004      	add	sp, #16
 8005794:	4770      	bx	lr
	...

08005798 <__errno>:
 8005798:	4b01      	ldr	r3, [pc, #4]	; (80057a0 <__errno+0x8>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	2000001c 	.word	0x2000001c

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f000 fc8e 	bl	80060d8 <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	080062f8 	.word	0x080062f8
 80057e0:	080062f8 	.word	0x080062f8
 80057e4:	080062f8 	.word	0x080062f8
 80057e8:	080062fc 	.word	0x080062fc

080057ec <memset>:
 80057ec:	4402      	add	r2, r0
 80057ee:	4603      	mov	r3, r0
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <memset+0xa>
 80057f4:	4770      	bx	lr
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
 80057fa:	e7f9      	b.n	80057f0 <memset+0x4>

080057fc <siprintf>:
 80057fc:	b40e      	push	{r1, r2, r3}
 80057fe:	b500      	push	{lr}
 8005800:	b09c      	sub	sp, #112	; 0x70
 8005802:	ab1d      	add	r3, sp, #116	; 0x74
 8005804:	9002      	str	r0, [sp, #8]
 8005806:	9006      	str	r0, [sp, #24]
 8005808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800580c:	4809      	ldr	r0, [pc, #36]	; (8005834 <siprintf+0x38>)
 800580e:	9107      	str	r1, [sp, #28]
 8005810:	9104      	str	r1, [sp, #16]
 8005812:	4909      	ldr	r1, [pc, #36]	; (8005838 <siprintf+0x3c>)
 8005814:	f853 2b04 	ldr.w	r2, [r3], #4
 8005818:	9105      	str	r1, [sp, #20]
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	a902      	add	r1, sp, #8
 8005820:	f000 f868 	bl	80058f4 <_svfiprintf_r>
 8005824:	9b02      	ldr	r3, [sp, #8]
 8005826:	2200      	movs	r2, #0
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	b01c      	add	sp, #112	; 0x70
 800582c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005830:	b003      	add	sp, #12
 8005832:	4770      	bx	lr
 8005834:	2000001c 	.word	0x2000001c
 8005838:	ffff0208 	.word	0xffff0208

0800583c <__ssputs_r>:
 800583c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	688e      	ldr	r6, [r1, #8]
 8005842:	429e      	cmp	r6, r3
 8005844:	4682      	mov	sl, r0
 8005846:	460c      	mov	r4, r1
 8005848:	4690      	mov	r8, r2
 800584a:	461f      	mov	r7, r3
 800584c:	d838      	bhi.n	80058c0 <__ssputs_r+0x84>
 800584e:	898a      	ldrh	r2, [r1, #12]
 8005850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005854:	d032      	beq.n	80058bc <__ssputs_r+0x80>
 8005856:	6825      	ldr	r5, [r4, #0]
 8005858:	6909      	ldr	r1, [r1, #16]
 800585a:	eba5 0901 	sub.w	r9, r5, r1
 800585e:	6965      	ldr	r5, [r4, #20]
 8005860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005868:	3301      	adds	r3, #1
 800586a:	444b      	add	r3, r9
 800586c:	106d      	asrs	r5, r5, #1
 800586e:	429d      	cmp	r5, r3
 8005870:	bf38      	it	cc
 8005872:	461d      	movcc	r5, r3
 8005874:	0553      	lsls	r3, r2, #21
 8005876:	d531      	bpl.n	80058dc <__ssputs_r+0xa0>
 8005878:	4629      	mov	r1, r5
 800587a:	f000 fb63 	bl	8005f44 <_malloc_r>
 800587e:	4606      	mov	r6, r0
 8005880:	b950      	cbnz	r0, 8005898 <__ssputs_r+0x5c>
 8005882:	230c      	movs	r3, #12
 8005884:	f8ca 3000 	str.w	r3, [sl]
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	6921      	ldr	r1, [r4, #16]
 800589a:	464a      	mov	r2, r9
 800589c:	f000 fabe 	bl	8005e1c <memcpy>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	6126      	str	r6, [r4, #16]
 80058ae:	6165      	str	r5, [r4, #20]
 80058b0:	444e      	add	r6, r9
 80058b2:	eba5 0509 	sub.w	r5, r5, r9
 80058b6:	6026      	str	r6, [r4, #0]
 80058b8:	60a5      	str	r5, [r4, #8]
 80058ba:	463e      	mov	r6, r7
 80058bc:	42be      	cmp	r6, r7
 80058be:	d900      	bls.n	80058c2 <__ssputs_r+0x86>
 80058c0:	463e      	mov	r6, r7
 80058c2:	6820      	ldr	r0, [r4, #0]
 80058c4:	4632      	mov	r2, r6
 80058c6:	4641      	mov	r1, r8
 80058c8:	f000 fab6 	bl	8005e38 <memmove>
 80058cc:	68a3      	ldr	r3, [r4, #8]
 80058ce:	1b9b      	subs	r3, r3, r6
 80058d0:	60a3      	str	r3, [r4, #8]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4433      	add	r3, r6
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	2000      	movs	r0, #0
 80058da:	e7db      	b.n	8005894 <__ssputs_r+0x58>
 80058dc:	462a      	mov	r2, r5
 80058de:	f000 fba5 	bl	800602c <_realloc_r>
 80058e2:	4606      	mov	r6, r0
 80058e4:	2800      	cmp	r0, #0
 80058e6:	d1e1      	bne.n	80058ac <__ssputs_r+0x70>
 80058e8:	6921      	ldr	r1, [r4, #16]
 80058ea:	4650      	mov	r0, sl
 80058ec:	f000 fabe 	bl	8005e6c <_free_r>
 80058f0:	e7c7      	b.n	8005882 <__ssputs_r+0x46>
	...

080058f4 <_svfiprintf_r>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	4698      	mov	r8, r3
 80058fa:	898b      	ldrh	r3, [r1, #12]
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	b09d      	sub	sp, #116	; 0x74
 8005900:	4607      	mov	r7, r0
 8005902:	460d      	mov	r5, r1
 8005904:	4614      	mov	r4, r2
 8005906:	d50e      	bpl.n	8005926 <_svfiprintf_r+0x32>
 8005908:	690b      	ldr	r3, [r1, #16]
 800590a:	b963      	cbnz	r3, 8005926 <_svfiprintf_r+0x32>
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	f000 fb19 	bl	8005f44 <_malloc_r>
 8005912:	6028      	str	r0, [r5, #0]
 8005914:	6128      	str	r0, [r5, #16]
 8005916:	b920      	cbnz	r0, 8005922 <_svfiprintf_r+0x2e>
 8005918:	230c      	movs	r3, #12
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e0d1      	b.n	8005ac6 <_svfiprintf_r+0x1d2>
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	616b      	str	r3, [r5, #20]
 8005926:	2300      	movs	r3, #0
 8005928:	9309      	str	r3, [sp, #36]	; 0x24
 800592a:	2320      	movs	r3, #32
 800592c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005930:	f8cd 800c 	str.w	r8, [sp, #12]
 8005934:	2330      	movs	r3, #48	; 0x30
 8005936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ae0 <_svfiprintf_r+0x1ec>
 800593a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800593e:	f04f 0901 	mov.w	r9, #1
 8005942:	4623      	mov	r3, r4
 8005944:	469a      	mov	sl, r3
 8005946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800594a:	b10a      	cbz	r2, 8005950 <_svfiprintf_r+0x5c>
 800594c:	2a25      	cmp	r2, #37	; 0x25
 800594e:	d1f9      	bne.n	8005944 <_svfiprintf_r+0x50>
 8005950:	ebba 0b04 	subs.w	fp, sl, r4
 8005954:	d00b      	beq.n	800596e <_svfiprintf_r+0x7a>
 8005956:	465b      	mov	r3, fp
 8005958:	4622      	mov	r2, r4
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ff6d 	bl	800583c <__ssputs_r>
 8005962:	3001      	adds	r0, #1
 8005964:	f000 80aa 	beq.w	8005abc <_svfiprintf_r+0x1c8>
 8005968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800596a:	445a      	add	r2, fp
 800596c:	9209      	str	r2, [sp, #36]	; 0x24
 800596e:	f89a 3000 	ldrb.w	r3, [sl]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80a2 	beq.w	8005abc <_svfiprintf_r+0x1c8>
 8005978:	2300      	movs	r3, #0
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005982:	f10a 0a01 	add.w	sl, sl, #1
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	9307      	str	r3, [sp, #28]
 800598a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800598e:	931a      	str	r3, [sp, #104]	; 0x68
 8005990:	4654      	mov	r4, sl
 8005992:	2205      	movs	r2, #5
 8005994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005998:	4851      	ldr	r0, [pc, #324]	; (8005ae0 <_svfiprintf_r+0x1ec>)
 800599a:	f7fa fc21 	bl	80001e0 <memchr>
 800599e:	9a04      	ldr	r2, [sp, #16]
 80059a0:	b9d8      	cbnz	r0, 80059da <_svfiprintf_r+0xe6>
 80059a2:	06d0      	lsls	r0, r2, #27
 80059a4:	bf44      	itt	mi
 80059a6:	2320      	movmi	r3, #32
 80059a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ac:	0711      	lsls	r1, r2, #28
 80059ae:	bf44      	itt	mi
 80059b0:	232b      	movmi	r3, #43	; 0x2b
 80059b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059b6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ba:	2b2a      	cmp	r3, #42	; 0x2a
 80059bc:	d015      	beq.n	80059ea <_svfiprintf_r+0xf6>
 80059be:	9a07      	ldr	r2, [sp, #28]
 80059c0:	4654      	mov	r4, sl
 80059c2:	2000      	movs	r0, #0
 80059c4:	f04f 0c0a 	mov.w	ip, #10
 80059c8:	4621      	mov	r1, r4
 80059ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ce:	3b30      	subs	r3, #48	; 0x30
 80059d0:	2b09      	cmp	r3, #9
 80059d2:	d94e      	bls.n	8005a72 <_svfiprintf_r+0x17e>
 80059d4:	b1b0      	cbz	r0, 8005a04 <_svfiprintf_r+0x110>
 80059d6:	9207      	str	r2, [sp, #28]
 80059d8:	e014      	b.n	8005a04 <_svfiprintf_r+0x110>
 80059da:	eba0 0308 	sub.w	r3, r0, r8
 80059de:	fa09 f303 	lsl.w	r3, r9, r3
 80059e2:	4313      	orrs	r3, r2
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	46a2      	mov	sl, r4
 80059e8:	e7d2      	b.n	8005990 <_svfiprintf_r+0x9c>
 80059ea:	9b03      	ldr	r3, [sp, #12]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	9103      	str	r1, [sp, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfbb      	ittet	lt
 80059f6:	425b      	neglt	r3, r3
 80059f8:	f042 0202 	orrlt.w	r2, r2, #2
 80059fc:	9307      	strge	r3, [sp, #28]
 80059fe:	9307      	strlt	r3, [sp, #28]
 8005a00:	bfb8      	it	lt
 8005a02:	9204      	strlt	r2, [sp, #16]
 8005a04:	7823      	ldrb	r3, [r4, #0]
 8005a06:	2b2e      	cmp	r3, #46	; 0x2e
 8005a08:	d10c      	bne.n	8005a24 <_svfiprintf_r+0x130>
 8005a0a:	7863      	ldrb	r3, [r4, #1]
 8005a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a0e:	d135      	bne.n	8005a7c <_svfiprintf_r+0x188>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	9203      	str	r2, [sp, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfb8      	it	lt
 8005a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a20:	3402      	adds	r4, #2
 8005a22:	9305      	str	r3, [sp, #20]
 8005a24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005af0 <_svfiprintf_r+0x1fc>
 8005a28:	7821      	ldrb	r1, [r4, #0]
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	f7fa fbd7 	bl	80001e0 <memchr>
 8005a32:	b140      	cbz	r0, 8005a46 <_svfiprintf_r+0x152>
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	eba0 000a 	sub.w	r0, r0, sl
 8005a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a3e:	9b04      	ldr	r3, [sp, #16]
 8005a40:	4303      	orrs	r3, r0
 8005a42:	3401      	adds	r4, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a4a:	4826      	ldr	r0, [pc, #152]	; (8005ae4 <_svfiprintf_r+0x1f0>)
 8005a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a50:	2206      	movs	r2, #6
 8005a52:	f7fa fbc5 	bl	80001e0 <memchr>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d038      	beq.n	8005acc <_svfiprintf_r+0x1d8>
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <_svfiprintf_r+0x1f4>)
 8005a5c:	bb1b      	cbnz	r3, 8005aa6 <_svfiprintf_r+0x1b2>
 8005a5e:	9b03      	ldr	r3, [sp, #12]
 8005a60:	3307      	adds	r3, #7
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	3308      	adds	r3, #8
 8005a68:	9303      	str	r3, [sp, #12]
 8005a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6c:	4433      	add	r3, r6
 8005a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a70:	e767      	b.n	8005942 <_svfiprintf_r+0x4e>
 8005a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a76:	460c      	mov	r4, r1
 8005a78:	2001      	movs	r0, #1
 8005a7a:	e7a5      	b.n	80059c8 <_svfiprintf_r+0xd4>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	3401      	adds	r4, #1
 8005a80:	9305      	str	r3, [sp, #20]
 8005a82:	4619      	mov	r1, r3
 8005a84:	f04f 0c0a 	mov.w	ip, #10
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a8e:	3a30      	subs	r2, #48	; 0x30
 8005a90:	2a09      	cmp	r2, #9
 8005a92:	d903      	bls.n	8005a9c <_svfiprintf_r+0x1a8>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0c5      	beq.n	8005a24 <_svfiprintf_r+0x130>
 8005a98:	9105      	str	r1, [sp, #20]
 8005a9a:	e7c3      	b.n	8005a24 <_svfiprintf_r+0x130>
 8005a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7f0      	b.n	8005a88 <_svfiprintf_r+0x194>
 8005aa6:	ab03      	add	r3, sp, #12
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	462a      	mov	r2, r5
 8005aac:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <_svfiprintf_r+0x1f8>)
 8005aae:	a904      	add	r1, sp, #16
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f3af 8000 	nop.w
 8005ab6:	1c42      	adds	r2, r0, #1
 8005ab8:	4606      	mov	r6, r0
 8005aba:	d1d6      	bne.n	8005a6a <_svfiprintf_r+0x176>
 8005abc:	89ab      	ldrh	r3, [r5, #12]
 8005abe:	065b      	lsls	r3, r3, #25
 8005ac0:	f53f af2c 	bmi.w	800591c <_svfiprintf_r+0x28>
 8005ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ac6:	b01d      	add	sp, #116	; 0x74
 8005ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005acc:	ab03      	add	r3, sp, #12
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4b06      	ldr	r3, [pc, #24]	; (8005aec <_svfiprintf_r+0x1f8>)
 8005ad4:	a904      	add	r1, sp, #16
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f000 f87a 	bl	8005bd0 <_printf_i>
 8005adc:	e7eb      	b.n	8005ab6 <_svfiprintf_r+0x1c2>
 8005ade:	bf00      	nop
 8005ae0:	080062c4 	.word	0x080062c4
 8005ae4:	080062ce 	.word	0x080062ce
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	0800583d 	.word	0x0800583d
 8005af0:	080062ca 	.word	0x080062ca

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4699      	mov	r9, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfb8      	it	lt
 8005b08:	4613      	movlt	r3, r2
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b10:	4607      	mov	r7, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc26      	bgt.n	8005b8a <_printf_common+0x96>
 8005b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b40:	1e13      	subs	r3, r2, #0
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d42b      	bmi.n	8005ba4 <_printf_common+0xb0>
 8005b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d01e      	beq.n	8005b98 <_printf_common+0xa4>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	68e5      	ldr	r5, [r4, #12]
 8005b5e:	6832      	ldr	r2, [r6, #0]
 8005b60:	f003 0306 	and.w	r3, r3, #6
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	bf08      	it	eq
 8005b68:	1aad      	subeq	r5, r5, r2
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	bf0c      	ite	eq
 8005b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b74:	2500      	movne	r5, #0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bfc4      	itt	gt
 8005b7a:	1a9b      	subgt	r3, r3, r2
 8005b7c:	18ed      	addgt	r5, r5, r3
 8005b7e:	2600      	movs	r6, #0
 8005b80:	341a      	adds	r4, #26
 8005b82:	42b5      	cmp	r5, r6
 8005b84:	d11a      	bne.n	8005bbc <_printf_common+0xc8>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e008      	b.n	8005b9c <_printf_common+0xa8>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4638      	mov	r0, r7
 8005b92:	47c0      	blx	r8
 8005b94:	3001      	adds	r0, #1
 8005b96:	d103      	bne.n	8005ba0 <_printf_common+0xac>
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7c6      	b.n	8005b32 <_printf_common+0x3e>
 8005ba4:	18e1      	adds	r1, r4, r3
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	2030      	movs	r0, #48	; 0x30
 8005baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bae:	4422      	add	r2, r4
 8005bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb8:	3302      	adds	r3, #2
 8005bba:	e7c7      	b.n	8005b4c <_printf_common+0x58>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c0      	blx	r8
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d0e6      	beq.n	8005b98 <_printf_common+0xa4>
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7d9      	b.n	8005b82 <_printf_common+0x8e>
	...

08005bd0 <_printf_i>:
 8005bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	7e0f      	ldrb	r7, [r1, #24]
 8005bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bd8:	2f78      	cmp	r7, #120	; 0x78
 8005bda:	4691      	mov	r9, r2
 8005bdc:	4680      	mov	r8, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	469a      	mov	sl, r3
 8005be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005be6:	d807      	bhi.n	8005bf8 <_printf_i+0x28>
 8005be8:	2f62      	cmp	r7, #98	; 0x62
 8005bea:	d80a      	bhi.n	8005c02 <_printf_i+0x32>
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	f000 80d8 	beq.w	8005da2 <_printf_i+0x1d2>
 8005bf2:	2f58      	cmp	r7, #88	; 0x58
 8005bf4:	f000 80a3 	beq.w	8005d3e <_printf_i+0x16e>
 8005bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c00:	e03a      	b.n	8005c78 <_printf_i+0xa8>
 8005c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c06:	2b15      	cmp	r3, #21
 8005c08:	d8f6      	bhi.n	8005bf8 <_printf_i+0x28>
 8005c0a:	a101      	add	r1, pc, #4	; (adr r1, 8005c10 <_printf_i+0x40>)
 8005c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005bf9 	.word	0x08005bf9
 8005c1c:	08005bf9 	.word	0x08005bf9
 8005c20:	08005bf9 	.word	0x08005bf9
 8005c24:	08005bf9 	.word	0x08005bf9
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005bf9 	.word	0x08005bf9
 8005c30:	08005bf9 	.word	0x08005bf9
 8005c34:	08005bf9 	.word	0x08005bf9
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08005d89 	.word	0x08005d89
 8005c40:	08005cad 	.word	0x08005cad
 8005c44:	08005d6b 	.word	0x08005d6b
 8005c48:	08005bf9 	.word	0x08005bf9
 8005c4c:	08005bf9 	.word	0x08005bf9
 8005c50:	08005dab 	.word	0x08005dab
 8005c54:	08005bf9 	.word	0x08005bf9
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005bf9 	.word	0x08005bf9
 8005c60:	08005bf9 	.word	0x08005bf9
 8005c64:	08005d73 	.word	0x08005d73
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	602a      	str	r2, [r5, #0]
 8005c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0a3      	b.n	8005dc4 <_printf_i+0x1f4>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	6829      	ldr	r1, [r5, #0]
 8005c80:	0606      	lsls	r6, r0, #24
 8005c82:	f101 0304 	add.w	r3, r1, #4
 8005c86:	d50a      	bpl.n	8005c9e <_printf_i+0xce>
 8005c88:	680e      	ldr	r6, [r1, #0]
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	2e00      	cmp	r6, #0
 8005c8e:	da03      	bge.n	8005c98 <_printf_i+0xc8>
 8005c90:	232d      	movs	r3, #45	; 0x2d
 8005c92:	4276      	negs	r6, r6
 8005c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c98:	485e      	ldr	r0, [pc, #376]	; (8005e14 <_printf_i+0x244>)
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	e019      	b.n	8005cd2 <_printf_i+0x102>
 8005c9e:	680e      	ldr	r6, [r1, #0]
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ca6:	bf18      	it	ne
 8005ca8:	b236      	sxthne	r6, r6
 8005caa:	e7ef      	b.n	8005c8c <_printf_i+0xbc>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	1d19      	adds	r1, r3, #4
 8005cb2:	6029      	str	r1, [r5, #0]
 8005cb4:	0601      	lsls	r1, r0, #24
 8005cb6:	d501      	bpl.n	8005cbc <_printf_i+0xec>
 8005cb8:	681e      	ldr	r6, [r3, #0]
 8005cba:	e002      	b.n	8005cc2 <_printf_i+0xf2>
 8005cbc:	0646      	lsls	r6, r0, #25
 8005cbe:	d5fb      	bpl.n	8005cb8 <_printf_i+0xe8>
 8005cc0:	881e      	ldrh	r6, [r3, #0]
 8005cc2:	4854      	ldr	r0, [pc, #336]	; (8005e14 <_printf_i+0x244>)
 8005cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2308      	moveq	r3, #8
 8005cca:	230a      	movne	r3, #10
 8005ccc:	2100      	movs	r1, #0
 8005cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cd2:	6865      	ldr	r5, [r4, #4]
 8005cd4:	60a5      	str	r5, [r4, #8]
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	bfa2      	ittt	ge
 8005cda:	6821      	ldrge	r1, [r4, #0]
 8005cdc:	f021 0104 	bicge.w	r1, r1, #4
 8005ce0:	6021      	strge	r1, [r4, #0]
 8005ce2:	b90e      	cbnz	r6, 8005ce8 <_printf_i+0x118>
 8005ce4:	2d00      	cmp	r5, #0
 8005ce6:	d04d      	beq.n	8005d84 <_printf_i+0x1b4>
 8005ce8:	4615      	mov	r5, r2
 8005cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cee:	fb03 6711 	mls	r7, r3, r1, r6
 8005cf2:	5dc7      	ldrb	r7, [r0, r7]
 8005cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cf8:	4637      	mov	r7, r6
 8005cfa:	42bb      	cmp	r3, r7
 8005cfc:	460e      	mov	r6, r1
 8005cfe:	d9f4      	bls.n	8005cea <_printf_i+0x11a>
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10b      	bne.n	8005d1c <_printf_i+0x14c>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	07de      	lsls	r6, r3, #31
 8005d08:	d508      	bpl.n	8005d1c <_printf_i+0x14c>
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	6861      	ldr	r1, [r4, #4]
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	bfde      	ittt	le
 8005d12:	2330      	movle	r3, #48	; 0x30
 8005d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d1c:	1b52      	subs	r2, r2, r5
 8005d1e:	6122      	str	r2, [r4, #16]
 8005d20:	f8cd a000 	str.w	sl, [sp]
 8005d24:	464b      	mov	r3, r9
 8005d26:	aa03      	add	r2, sp, #12
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	f7ff fee2 	bl	8005af4 <_printf_common>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d14c      	bne.n	8005dce <_printf_i+0x1fe>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	b004      	add	sp, #16
 8005d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3e:	4835      	ldr	r0, [pc, #212]	; (8005e14 <_printf_i+0x244>)
 8005d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d44:	6829      	ldr	r1, [r5, #0]
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d4c:	6029      	str	r1, [r5, #0]
 8005d4e:	061d      	lsls	r5, r3, #24
 8005d50:	d514      	bpl.n	8005d7c <_printf_i+0x1ac>
 8005d52:	07df      	lsls	r7, r3, #31
 8005d54:	bf44      	itt	mi
 8005d56:	f043 0320 	orrmi.w	r3, r3, #32
 8005d5a:	6023      	strmi	r3, [r4, #0]
 8005d5c:	b91e      	cbnz	r6, 8005d66 <_printf_i+0x196>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	f023 0320 	bic.w	r3, r3, #32
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	2310      	movs	r3, #16
 8005d68:	e7b0      	b.n	8005ccc <_printf_i+0xfc>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	f043 0320 	orr.w	r3, r3, #32
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	2378      	movs	r3, #120	; 0x78
 8005d74:	4828      	ldr	r0, [pc, #160]	; (8005e18 <_printf_i+0x248>)
 8005d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d7a:	e7e3      	b.n	8005d44 <_printf_i+0x174>
 8005d7c:	0659      	lsls	r1, r3, #25
 8005d7e:	bf48      	it	mi
 8005d80:	b2b6      	uxthmi	r6, r6
 8005d82:	e7e6      	b.n	8005d52 <_printf_i+0x182>
 8005d84:	4615      	mov	r5, r2
 8005d86:	e7bb      	b.n	8005d00 <_printf_i+0x130>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6826      	ldr	r6, [r4, #0]
 8005d8c:	6961      	ldr	r1, [r4, #20]
 8005d8e:	1d18      	adds	r0, r3, #4
 8005d90:	6028      	str	r0, [r5, #0]
 8005d92:	0635      	lsls	r5, r6, #24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0x1cc>
 8005d98:	6019      	str	r1, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0x1d2>
 8005d9c:	0670      	lsls	r0, r6, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0x1c8>
 8005da0:	8019      	strh	r1, [r3, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	4615      	mov	r5, r2
 8005da8:	e7ba      	b.n	8005d20 <_printf_i+0x150>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	602a      	str	r2, [r5, #0]
 8005db0:	681d      	ldr	r5, [r3, #0]
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	2100      	movs	r1, #0
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7fa fa12 	bl	80001e0 <memchr>
 8005dbc:	b108      	cbz	r0, 8005dc2 <_printf_i+0x1f2>
 8005dbe:	1b40      	subs	r0, r0, r5
 8005dc0:	6060      	str	r0, [r4, #4]
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dcc:	e7a8      	b.n	8005d20 <_printf_i+0x150>
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	47d0      	blx	sl
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d0ab      	beq.n	8005d34 <_printf_i+0x164>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	079b      	lsls	r3, r3, #30
 8005de0:	d413      	bmi.n	8005e0a <_printf_i+0x23a>
 8005de2:	68e0      	ldr	r0, [r4, #12]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	4298      	cmp	r0, r3
 8005de8:	bfb8      	it	lt
 8005dea:	4618      	movlt	r0, r3
 8005dec:	e7a4      	b.n	8005d38 <_printf_i+0x168>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4632      	mov	r2, r6
 8005df2:	4649      	mov	r1, r9
 8005df4:	4640      	mov	r0, r8
 8005df6:	47d0      	blx	sl
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d09b      	beq.n	8005d34 <_printf_i+0x164>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	9903      	ldr	r1, [sp, #12]
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dcf2      	bgt.n	8005dee <_printf_i+0x21e>
 8005e08:	e7eb      	b.n	8005de2 <_printf_i+0x212>
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	f104 0619 	add.w	r6, r4, #25
 8005e10:	e7f5      	b.n	8005dfe <_printf_i+0x22e>
 8005e12:	bf00      	nop
 8005e14:	080062d5 	.word	0x080062d5
 8005e18:	080062e6 	.word	0x080062e6

08005e1c <memcpy>:
 8005e1c:	440a      	add	r2, r1
 8005e1e:	4291      	cmp	r1, r2
 8005e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e24:	d100      	bne.n	8005e28 <memcpy+0xc>
 8005e26:	4770      	bx	lr
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e32:	4291      	cmp	r1, r2
 8005e34:	d1f9      	bne.n	8005e2a <memcpy+0xe>
 8005e36:	bd10      	pop	{r4, pc}

08005e38 <memmove>:
 8005e38:	4288      	cmp	r0, r1
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	eb01 0402 	add.w	r4, r1, r2
 8005e40:	d902      	bls.n	8005e48 <memmove+0x10>
 8005e42:	4284      	cmp	r4, r0
 8005e44:	4623      	mov	r3, r4
 8005e46:	d807      	bhi.n	8005e58 <memmove+0x20>
 8005e48:	1e43      	subs	r3, r0, #1
 8005e4a:	42a1      	cmp	r1, r4
 8005e4c:	d008      	beq.n	8005e60 <memmove+0x28>
 8005e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e56:	e7f8      	b.n	8005e4a <memmove+0x12>
 8005e58:	4402      	add	r2, r0
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	428a      	cmp	r2, r1
 8005e5e:	d100      	bne.n	8005e62 <memmove+0x2a>
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e6a:	e7f7      	b.n	8005e5c <memmove+0x24>

08005e6c <_free_r>:
 8005e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	d044      	beq.n	8005efc <_free_r+0x90>
 8005e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e76:	9001      	str	r0, [sp, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e7e:	bfb8      	it	lt
 8005e80:	18e4      	addlt	r4, r4, r3
 8005e82:	f000 f913 	bl	80060ac <__malloc_lock>
 8005e86:	4a1e      	ldr	r2, [pc, #120]	; (8005f00 <_free_r+0x94>)
 8005e88:	9801      	ldr	r0, [sp, #4]
 8005e8a:	6813      	ldr	r3, [r2, #0]
 8005e8c:	b933      	cbnz	r3, 8005e9c <_free_r+0x30>
 8005e8e:	6063      	str	r3, [r4, #4]
 8005e90:	6014      	str	r4, [r2, #0]
 8005e92:	b003      	add	sp, #12
 8005e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e98:	f000 b90e 	b.w	80060b8 <__malloc_unlock>
 8005e9c:	42a3      	cmp	r3, r4
 8005e9e:	d908      	bls.n	8005eb2 <_free_r+0x46>
 8005ea0:	6825      	ldr	r5, [r4, #0]
 8005ea2:	1961      	adds	r1, r4, r5
 8005ea4:	428b      	cmp	r3, r1
 8005ea6:	bf01      	itttt	eq
 8005ea8:	6819      	ldreq	r1, [r3, #0]
 8005eaa:	685b      	ldreq	r3, [r3, #4]
 8005eac:	1949      	addeq	r1, r1, r5
 8005eae:	6021      	streq	r1, [r4, #0]
 8005eb0:	e7ed      	b.n	8005e8e <_free_r+0x22>
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	b10b      	cbz	r3, 8005ebc <_free_r+0x50>
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	d9fa      	bls.n	8005eb2 <_free_r+0x46>
 8005ebc:	6811      	ldr	r1, [r2, #0]
 8005ebe:	1855      	adds	r5, r2, r1
 8005ec0:	42a5      	cmp	r5, r4
 8005ec2:	d10b      	bne.n	8005edc <_free_r+0x70>
 8005ec4:	6824      	ldr	r4, [r4, #0]
 8005ec6:	4421      	add	r1, r4
 8005ec8:	1854      	adds	r4, r2, r1
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	6011      	str	r1, [r2, #0]
 8005ece:	d1e0      	bne.n	8005e92 <_free_r+0x26>
 8005ed0:	681c      	ldr	r4, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	6053      	str	r3, [r2, #4]
 8005ed6:	4421      	add	r1, r4
 8005ed8:	6011      	str	r1, [r2, #0]
 8005eda:	e7da      	b.n	8005e92 <_free_r+0x26>
 8005edc:	d902      	bls.n	8005ee4 <_free_r+0x78>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	6003      	str	r3, [r0, #0]
 8005ee2:	e7d6      	b.n	8005e92 <_free_r+0x26>
 8005ee4:	6825      	ldr	r5, [r4, #0]
 8005ee6:	1961      	adds	r1, r4, r5
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	bf04      	itt	eq
 8005eec:	6819      	ldreq	r1, [r3, #0]
 8005eee:	685b      	ldreq	r3, [r3, #4]
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	bf04      	itt	eq
 8005ef4:	1949      	addeq	r1, r1, r5
 8005ef6:	6021      	streq	r1, [r4, #0]
 8005ef8:	6054      	str	r4, [r2, #4]
 8005efa:	e7ca      	b.n	8005e92 <_free_r+0x26>
 8005efc:	b003      	add	sp, #12
 8005efe:	bd30      	pop	{r4, r5, pc}
 8005f00:	2000052c 	.word	0x2000052c

08005f04 <sbrk_aligned>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	4e0e      	ldr	r6, [pc, #56]	; (8005f40 <sbrk_aligned+0x3c>)
 8005f08:	460c      	mov	r4, r1
 8005f0a:	6831      	ldr	r1, [r6, #0]
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	b911      	cbnz	r1, 8005f16 <sbrk_aligned+0x12>
 8005f10:	f000 f8bc 	bl	800608c <_sbrk_r>
 8005f14:	6030      	str	r0, [r6, #0]
 8005f16:	4621      	mov	r1, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 f8b7 	bl	800608c <_sbrk_r>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	d00a      	beq.n	8005f38 <sbrk_aligned+0x34>
 8005f22:	1cc4      	adds	r4, r0, #3
 8005f24:	f024 0403 	bic.w	r4, r4, #3
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d007      	beq.n	8005f3c <sbrk_aligned+0x38>
 8005f2c:	1a21      	subs	r1, r4, r0
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 f8ac 	bl	800608c <_sbrk_r>
 8005f34:	3001      	adds	r0, #1
 8005f36:	d101      	bne.n	8005f3c <sbrk_aligned+0x38>
 8005f38:	f04f 34ff 	mov.w	r4, #4294967295
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	20000530 	.word	0x20000530

08005f44 <_malloc_r>:
 8005f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f48:	1ccd      	adds	r5, r1, #3
 8005f4a:	f025 0503 	bic.w	r5, r5, #3
 8005f4e:	3508      	adds	r5, #8
 8005f50:	2d0c      	cmp	r5, #12
 8005f52:	bf38      	it	cc
 8005f54:	250c      	movcc	r5, #12
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	4607      	mov	r7, r0
 8005f5a:	db01      	blt.n	8005f60 <_malloc_r+0x1c>
 8005f5c:	42a9      	cmp	r1, r5
 8005f5e:	d905      	bls.n	8005f6c <_malloc_r+0x28>
 8005f60:	230c      	movs	r3, #12
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	2600      	movs	r6, #0
 8005f66:	4630      	mov	r0, r6
 8005f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6c:	4e2e      	ldr	r6, [pc, #184]	; (8006028 <_malloc_r+0xe4>)
 8005f6e:	f000 f89d 	bl	80060ac <__malloc_lock>
 8005f72:	6833      	ldr	r3, [r6, #0]
 8005f74:	461c      	mov	r4, r3
 8005f76:	bb34      	cbnz	r4, 8005fc6 <_malloc_r+0x82>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	f7ff ffc2 	bl	8005f04 <sbrk_aligned>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	4604      	mov	r4, r0
 8005f84:	d14d      	bne.n	8006022 <_malloc_r+0xde>
 8005f86:	6834      	ldr	r4, [r6, #0]
 8005f88:	4626      	mov	r6, r4
 8005f8a:	2e00      	cmp	r6, #0
 8005f8c:	d140      	bne.n	8006010 <_malloc_r+0xcc>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	4631      	mov	r1, r6
 8005f92:	4638      	mov	r0, r7
 8005f94:	eb04 0803 	add.w	r8, r4, r3
 8005f98:	f000 f878 	bl	800608c <_sbrk_r>
 8005f9c:	4580      	cmp	r8, r0
 8005f9e:	d13a      	bne.n	8006016 <_malloc_r+0xd2>
 8005fa0:	6821      	ldr	r1, [r4, #0]
 8005fa2:	3503      	adds	r5, #3
 8005fa4:	1a6d      	subs	r5, r5, r1
 8005fa6:	f025 0503 	bic.w	r5, r5, #3
 8005faa:	3508      	adds	r5, #8
 8005fac:	2d0c      	cmp	r5, #12
 8005fae:	bf38      	it	cc
 8005fb0:	250c      	movcc	r5, #12
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f7ff ffa5 	bl	8005f04 <sbrk_aligned>
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d02b      	beq.n	8006016 <_malloc_r+0xd2>
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	442b      	add	r3, r5
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	e00e      	b.n	8005fe4 <_malloc_r+0xa0>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	1b52      	subs	r2, r2, r5
 8005fca:	d41e      	bmi.n	800600a <_malloc_r+0xc6>
 8005fcc:	2a0b      	cmp	r2, #11
 8005fce:	d916      	bls.n	8005ffe <_malloc_r+0xba>
 8005fd0:	1961      	adds	r1, r4, r5
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	6025      	str	r5, [r4, #0]
 8005fd6:	bf18      	it	ne
 8005fd8:	6059      	strne	r1, [r3, #4]
 8005fda:	6863      	ldr	r3, [r4, #4]
 8005fdc:	bf08      	it	eq
 8005fde:	6031      	streq	r1, [r6, #0]
 8005fe0:	5162      	str	r2, [r4, r5]
 8005fe2:	604b      	str	r3, [r1, #4]
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f104 060b 	add.w	r6, r4, #11
 8005fea:	f000 f865 	bl	80060b8 <__malloc_unlock>
 8005fee:	f026 0607 	bic.w	r6, r6, #7
 8005ff2:	1d23      	adds	r3, r4, #4
 8005ff4:	1af2      	subs	r2, r6, r3
 8005ff6:	d0b6      	beq.n	8005f66 <_malloc_r+0x22>
 8005ff8:	1b9b      	subs	r3, r3, r6
 8005ffa:	50a3      	str	r3, [r4, r2]
 8005ffc:	e7b3      	b.n	8005f66 <_malloc_r+0x22>
 8005ffe:	6862      	ldr	r2, [r4, #4]
 8006000:	42a3      	cmp	r3, r4
 8006002:	bf0c      	ite	eq
 8006004:	6032      	streq	r2, [r6, #0]
 8006006:	605a      	strne	r2, [r3, #4]
 8006008:	e7ec      	b.n	8005fe4 <_malloc_r+0xa0>
 800600a:	4623      	mov	r3, r4
 800600c:	6864      	ldr	r4, [r4, #4]
 800600e:	e7b2      	b.n	8005f76 <_malloc_r+0x32>
 8006010:	4634      	mov	r4, r6
 8006012:	6876      	ldr	r6, [r6, #4]
 8006014:	e7b9      	b.n	8005f8a <_malloc_r+0x46>
 8006016:	230c      	movs	r3, #12
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4638      	mov	r0, r7
 800601c:	f000 f84c 	bl	80060b8 <__malloc_unlock>
 8006020:	e7a1      	b.n	8005f66 <_malloc_r+0x22>
 8006022:	6025      	str	r5, [r4, #0]
 8006024:	e7de      	b.n	8005fe4 <_malloc_r+0xa0>
 8006026:	bf00      	nop
 8006028:	2000052c 	.word	0x2000052c

0800602c <_realloc_r>:
 800602c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	4680      	mov	r8, r0
 8006032:	4614      	mov	r4, r2
 8006034:	460e      	mov	r6, r1
 8006036:	b921      	cbnz	r1, 8006042 <_realloc_r+0x16>
 8006038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800603c:	4611      	mov	r1, r2
 800603e:	f7ff bf81 	b.w	8005f44 <_malloc_r>
 8006042:	b92a      	cbnz	r2, 8006050 <_realloc_r+0x24>
 8006044:	f7ff ff12 	bl	8005e6c <_free_r>
 8006048:	4625      	mov	r5, r4
 800604a:	4628      	mov	r0, r5
 800604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006050:	f000 f838 	bl	80060c4 <_malloc_usable_size_r>
 8006054:	4284      	cmp	r4, r0
 8006056:	4607      	mov	r7, r0
 8006058:	d802      	bhi.n	8006060 <_realloc_r+0x34>
 800605a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800605e:	d812      	bhi.n	8006086 <_realloc_r+0x5a>
 8006060:	4621      	mov	r1, r4
 8006062:	4640      	mov	r0, r8
 8006064:	f7ff ff6e 	bl	8005f44 <_malloc_r>
 8006068:	4605      	mov	r5, r0
 800606a:	2800      	cmp	r0, #0
 800606c:	d0ed      	beq.n	800604a <_realloc_r+0x1e>
 800606e:	42bc      	cmp	r4, r7
 8006070:	4622      	mov	r2, r4
 8006072:	4631      	mov	r1, r6
 8006074:	bf28      	it	cs
 8006076:	463a      	movcs	r2, r7
 8006078:	f7ff fed0 	bl	8005e1c <memcpy>
 800607c:	4631      	mov	r1, r6
 800607e:	4640      	mov	r0, r8
 8006080:	f7ff fef4 	bl	8005e6c <_free_r>
 8006084:	e7e1      	b.n	800604a <_realloc_r+0x1e>
 8006086:	4635      	mov	r5, r6
 8006088:	e7df      	b.n	800604a <_realloc_r+0x1e>
	...

0800608c <_sbrk_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d06      	ldr	r5, [pc, #24]	; (80060a8 <_sbrk_r+0x1c>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	f7fb fd16 	bl	8001ac8 <_sbrk>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_sbrk_r+0x1a>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_sbrk_r+0x1a>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20000534 	.word	0x20000534

080060ac <__malloc_lock>:
 80060ac:	4801      	ldr	r0, [pc, #4]	; (80060b4 <__malloc_lock+0x8>)
 80060ae:	f000 b811 	b.w	80060d4 <__retarget_lock_acquire_recursive>
 80060b2:	bf00      	nop
 80060b4:	20000538 	.word	0x20000538

080060b8 <__malloc_unlock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_unlock+0x8>)
 80060ba:	f000 b80c 	b.w	80060d6 <__retarget_lock_release_recursive>
 80060be:	bf00      	nop
 80060c0:	20000538 	.word	0x20000538

080060c4 <_malloc_usable_size_r>:
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f18      	subs	r0, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbc      	itt	lt
 80060ce:	580b      	ldrlt	r3, [r1, r0]
 80060d0:	18c0      	addlt	r0, r0, r3
 80060d2:	4770      	bx	lr

080060d4 <__retarget_lock_acquire_recursive>:
 80060d4:	4770      	bx	lr

080060d6 <__retarget_lock_release_recursive>:
 80060d6:	4770      	bx	lr

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr
