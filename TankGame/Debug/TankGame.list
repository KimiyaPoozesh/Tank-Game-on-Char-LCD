
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08009d0c  08009d0c  00019d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a178  0800a178  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a178  0800a178  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a178  0800a178  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a17c  0800a17c  0001a17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800a180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
 10 .bss          00000cd0  200000f4  200000f4  000200f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dc4  20000dc4  000200f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7b8  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003488  00000000  00000000  0003c8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0003fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001690  00000000  00000000  000414f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020728  00000000  00000000  00042b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf5d  00000000  00000000  000632a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5bdd  00000000  00000000  00080205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145de2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007024  00000000  00000000  00145e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014ce58  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0014ce7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f4 	.word	0x200000f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cf4 	.word	0x08009cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	08009cf4 	.word	0x08009cf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000112 	.word	0x20000112
 800039c:	20000114 	.word	0x20000114
 80003a0:	20000116 	.word	0x20000116
 80003a4:	20000128 	.word	0x20000128
 80003a8:	20000118 	.word	0x20000118
 80003ac:	2000012c 	.word	0x2000012c

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 fafb 	bl	8003aac <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f003 f94c 	bl	8003754 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 fc82 	bl	8003dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 fc7a 	bl	8003dd0 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fc6e 	bl	8003dd0 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f003 f924 	bl	8003754 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f003 f91e 	bl	8003754 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f003 f918 	bl	8003754 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f003 f909 	bl	8003754 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f003 f8fe 	bl	8003754 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000012c 	.word	0x2000012c
 80005a8:	2000012f 	.word	0x2000012f
 80005ac:	20000110 	.word	0x20000110
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000112 	.word	0x20000112
 80005b8:	20000114 	.word	0x20000114
 80005bc:	20000116 	.word	0x20000116
 80005c0:	20000118 	.word	0x20000118
 80005c4:	20000128 	.word	0x20000128
 80005c8:	2000012d 	.word	0x2000012d
 80005cc:	2000012e 	.word	0x2000012e

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000128 	.word	0x20000128
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000130 	.word	0x20000130

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f003 f806 	bl	8003754 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000012f 	.word	0x2000012f
 80007ac:	20000130 	.word	0x20000130

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000012d 	.word	0x2000012d

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fa78 	bl	8003dd0 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fa6c 	bl	8003dd0 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000128 	.word	0x20000128
 8000930:	20000112 	.word	0x20000112
 8000934:	20000114 	.word	0x20000114
 8000938:	2000012c 	.word	0x2000012c

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fa40 	bl	8003dd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f002 feff 	bl	8003754 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f003 fa35 	bl	8003dd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f002 fef4 	bl	8003754 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fa2a 	bl	8003dd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f002 fee9 	bl	8003754 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000128 	.word	0x20000128
 800098c:	20000116 	.word	0x20000116

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f003 fa07 	bl	8003dd0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000128 	.word	0x20000128
 80009e0:	20000118 	.word	0x20000118

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f003 f9dd 	bl	8003dd0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }

  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000128 	.word	0x20000128
 8000a34:	20000118 	.word	0x20000118

08000a38 <HAL_GPIO_EXTI_Callback>:
const uint16_t Column_pins[] =
		{ GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]

	if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000a42:	4bb6      	ldr	r3, [pc, #728]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000a4a:	f002 fe77 	bl	800373c <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	f200 82a1 	bhi.w	8000f98 <HAL_GPIO_EXTI_Callback+0x560>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000a56:	f002 fe71 	bl	800373c <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4aaf      	ldr	r2, [pc, #700]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000a5e:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a68:	2300      	movs	r3, #0
 8000a6a:	737b      	strb	r3, [r7, #13]
 8000a6c:	e00b      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	4aab      	ldr	r2, [pc, #684]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d101      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9f0      	bls.n	8000a6e <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000a8c:	4ba5      	ldr	r3, [pc, #660]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 f99c 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000a98:	4ba2      	ldr	r3, [pc, #648]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 f996 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000aa4:	4b9f      	ldr	r3, [pc, #636]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f990 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000ab0:	4b9c      	ldr	r3, [pc, #624]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 f98a 	bl	8003dd0 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000abc:	2300      	movs	r3, #0
 8000abe:	733b      	strb	r3, [r7, #12]
 8000ac0:	e02d      	b.n	8000b1e <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	4a98      	ldr	r2, [pc, #608]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aca:	7b3b      	ldrb	r3, [r7, #12]
 8000acc:	4a97      	ldr	r2, [pc, #604]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f003 f97b 	bl	8003dd0 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4a94      	ldr	r2, [pc, #592]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	498d      	ldr	r1, [pc, #564]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000aea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f003 f955 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_GPIO_EXTI_Callback+0xc8>

			column_number = col;
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b00:	7b3b      	ldrb	r3, [r7, #12]
 8000b02:	4a89      	ldr	r2, [pc, #548]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	4a88      	ldr	r2, [pc, #544]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	f003 f95c 	bl	8003dd0 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d9ce      	bls.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b24:	4b7f      	ldr	r3, [pc, #508]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f950 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000b30:	4b7c      	ldr	r3, [pc, #496]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b32:	2102      	movs	r1, #2
 8000b34:	2201      	movs	r2, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 f94a 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000b3c:	4b79      	ldr	r3, [pc, #484]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 f944 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000b48:	4b76      	ldr	r3, [pc, #472]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f93e 	bl	8003dd0 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	f000 821e 	beq.w	8000f9c <HAL_GPIO_EXTI_Callback+0x564>
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	f000 8218 	beq.w	8000f9c <HAL_GPIO_EXTI_Callback+0x564>
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	//1 - 6 - 9 for the Right Player
	//4 -7 -12 for the left player
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	f200 820d 	bhi.w	8000fa0 <HAL_GPIO_EXTI_Callback+0x568>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_EXTI_Callback+0x154>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bcd 	.word	0x08000bcd
 8000b90:	08000c7d 	.word	0x08000c7d
 8000b94:	08000c97 	.word	0x08000c97
 8000b98:	08000cbf 	.word	0x08000cbf
 8000b9c:	08000d9f 	.word	0x08000d9f
 8000ba0:	08000daf 	.word	0x08000daf
 8000ba4:	08000dc5 	.word	0x08000dc5
 8000ba8:	08000ddb 	.word	0x08000ddb
 8000bac:	08000e29 	.word	0x08000e29
 8000bb0:	08000fa1 	.word	0x08000fa1
 8000bb4:	08000fa1 	.word	0x08000fa1
 8000bb8:	08000e9b 	.word	0x08000e9b
 8000bbc:	08000f0b 	.word	0x08000f0b
 8000bc0:	08000f2b 	.word	0x08000f2b
 8000bc4:	08000f4d 	.word	0x08000f4d
 8000bc8:	08000fa1 	.word	0x08000fa1
	case 1:
		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000bcc:	4b59      	ldr	r3, [pc, #356]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d113      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x1c4>
			R_Health = (R_Health + 10 - 1) % 10;
 8000bd4:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x300>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f103 0109 	add.w	r1, r3, #9
 8000bdc:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x304>)
 8000bde:	fb83 2301 	smull	r2, r3, r3, r1
 8000be2:	109a      	asrs	r2, r3, #2
 8000be4:	17cb      	asrs	r3, r1, #31
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	1aca      	subs	r2, r1, r3
 8000bf2:	4b51      	ldr	r3, [pc, #324]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x300>)
 8000bf4:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000bf6:	f001 fb29 	bl	800224c <HealthSetting>
 8000bfa:	e016      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
		} else if (screen == 5) {
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d112      	bne.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
			R_bullets = (R_bullets + 10 - 1) % 10;
 8000c04:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f103 0109 	add.w	r1, r3, #9
 8000c0c:	4b4b      	ldr	r3, [pc, #300]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x304>)
 8000c0e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c12:	109a      	asrs	r2, r3, #2
 8000c14:	17cb      	asrs	r3, r1, #31
 8000c16:	1ad2      	subs	r2, r2, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1aca      	subs	r2, r1, r3
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c24:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000c26:	f001 fad9 	bl	80021dc <bulletsSetting>
		}
		if (screen == 0) {
 8000c2a:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10b      	bne.n	8000c4a <HAL_GPIO_EXTI_Callback+0x212>
			screen = 1;
 8000c32:	4b40      	ldr	r3, [pc, #256]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8000c38:	4842      	ldr	r0, [pc, #264]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000c3a:	f005 fb23 	bl	8006284 <HAL_TIM_Base_Start_IT>
			refreshAll();
 8000c3e:	f000 f9e5 	bl	800100c <refreshAll>
			initializeObjects();
 8000c42:	f001 f831 	bl	8001ca8 <initializeObjects>
			displayObjects();
 8000c46:	f001 fa4d 	bl	80020e4 <displayObjects>
		}
		if (screen == 1) {
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	f040 81a8 	bne.w	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
			if (R_bullets > 0) {
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f340 81a3 	ble.w	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
				R_bullets--;
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	4a36      	ldr	r2, [pc, #216]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c66:	6013      	str	r3, [r2, #0]
				shoot(&playerR);
 8000c68:	4837      	ldr	r0, [pc, #220]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000c6a:	f000 fac7 	bl	80011fc <shoot>
				HAL_UART_Transmit(&huart1, "-Bullet for right", 16, 100000);
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000c70:	2210      	movs	r2, #16
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c74:	4837      	ldr	r0, [pc, #220]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000c76:	f006 fd95 	bl	80077a4 <HAL_UART_Transmit>
			}
		}

		/* code */
		break;
 8000c7a:	e193      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
	case 2:

		if (screen == 0) {
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f040 8191 	bne.w	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
			screen = 2;
 8000c86:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000c8c:	f000 f9be 	bl	800100c <refreshAll>
			showAbout();
 8000c90:	f001 fa76 	bl	8002180 <showAbout>
		}
		/* code */
		break;
 8000c94:	e188      	b.n	8000fa8 <HAL_GPIO_EXTI_Callback+0x570>
	case 3:
		HAL_UART_Transmit(&huart1, "3", 1,
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	492e      	ldr	r1, [pc, #184]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000c9e:	482d      	ldr	r0, [pc, #180]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000ca0:	f006 fd80 	bl	80077a4 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 817f 	bne.w	8000fac <HAL_GPIO_EXTI_Callback+0x574>
			screen = 3;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000cb4:	f000 f9aa 	bl	800100c <refreshAll>
			showSetting();
 8000cb8:	f001 fa70 	bl	800219c <showSetting>
		}
		/* code */
		break;
 8000cbc:	e176      	b.n	8000fac <HAL_GPIO_EXTI_Callback+0x574>
	case 4:
		if (screen == 1) {
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d111      	bne.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
			if (L_bullets > 0) {
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	dd0d      	ble.n	8000cea <HAL_GPIO_EXTI_Callback+0x2b2>
				L_bullets--;
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4a21      	ldr	r2, [pc, #132]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000cd6:	6013      	str	r3, [r2, #0]
				shoot(&playerL);
 8000cd8:	4821      	ldr	r0, [pc, #132]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cda:	f000 fa8f 	bl	80011fc <shoot>
				HAL_UART_Transmit(&huart1, "-Bullet for left", 15, 100000);
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	4920      	ldr	r1, [pc, #128]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000ce4:	481b      	ldr	r0, [pc, #108]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000ce6:	f006 fd5d 	bl	80077a4 <HAL_UART_Transmit>
			}
			//shot(playerR.x, playerR.y + 1, currentStateR % 2);
		}

		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d13c      	bne.n	8000d6c <HAL_GPIO_EXTI_Callback+0x334>
			L_Health = (L_Health + 10 - 1) % 10;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f103 0109 	add.w	r1, r3, #9
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x304>)
 8000cfc:	fb83 2301 	smull	r2, r3, r3, r1
 8000d00:	109a      	asrs	r2, r3, #2
 8000d02:	17cb      	asrs	r3, r1, #31
 8000d04:	1ad2      	subs	r2, r2, r3
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1aca      	subs	r2, r1, r3
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d12:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000d14:	f001 fa9a 	bl	800224c <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 10 - 1) % 10;
			bulletsSetting();
		}

		break;
 8000d18:	e14a      	b.n	8000fb0 <HAL_GPIO_EXTI_Callback+0x578>
 8000d1a:	bf00      	nop
 8000d1c:	20000d9c 	.word	0x20000d9c
 8000d20:	08009ed4 	.word	0x08009ed4
 8000d24:	48000c00 	.word	0x48000c00
 8000d28:	08009edc 	.word	0x08009edc
 8000d2c:	08009eec 	.word	0x08009eec
 8000d30:	08009ec4 	.word	0x08009ec4
 8000d34:	20000618 	.word	0x20000618
 8000d38:	20000004 	.word	0x20000004
 8000d3c:	66666667 	.word	0x66666667
 8000d40:	2000000c 	.word	0x2000000c
 8000d44:	2000020c 	.word	0x2000020c
 8000d48:	20000c68 	.word	0x20000c68
 8000d4c:	000186a0 	.word	0x000186a0
 8000d50:	08009d0c 	.word	0x08009d0c
 8000d54:	200002a4 	.word	0x200002a4
 8000d58:	08009d20 	.word	0x08009d20
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	20000c78 	.word	0x20000c78
 8000d64:	08009d24 	.word	0x08009d24
 8000d68:	20000008 	.word	0x20000008
		} else if (screen == 5) {
 8000d6c:	4b96      	ldr	r3, [pc, #600]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	f040 811d 	bne.w	8000fb0 <HAL_GPIO_EXTI_Callback+0x578>
			L_bullets = (L_bullets + 10 - 1) % 10;
 8000d76:	4b95      	ldr	r3, [pc, #596]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f103 0109 	add.w	r1, r3, #9
 8000d7e:	4b94      	ldr	r3, [pc, #592]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x598>)
 8000d80:	fb83 2301 	smull	r2, r3, r3, r1
 8000d84:	109a      	asrs	r2, r3, #2
 8000d86:	17cb      	asrs	r3, r1, #31
 8000d88:	1ad2      	subs	r2, r2, r3
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	1aca      	subs	r2, r1, r3
 8000d94:	4b8d      	ldr	r3, [pc, #564]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000d96:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000d98:	f001 fa20 	bl	80021dc <bulletsSetting>
		break;
 8000d9c:	e108      	b.n	8000fb0 <HAL_GPIO_EXTI_Callback+0x578>
	case 5:
		HAL_UART_Transmit(&huart1, "5", 1,
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2201      	movs	r2, #1
 8000da4:	498b      	ldr	r1, [pc, #556]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x59c>)
 8000da6:	488c      	ldr	r0, [pc, #560]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000da8:	f006 fcfc 	bl	80077a4 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000dac:	e109      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
	case 6:
		HAL_UART_Transmit(&huart1, "6", 1,
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	2201      	movs	r2, #1
 8000db4:	4989      	ldr	r1, [pc, #548]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000db6:	4888      	ldr	r0, [pc, #544]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000db8:	f006 fcf4 	bl	80077a4 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f947 	bl	8001050 <changeFoxStateR>
		break;
 8000dc2:	e0fe      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
	case 7:
		HAL_UART_Transmit(&huart1, "7", 1,
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4985      	ldr	r1, [pc, #532]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x5a8>)
 8000dcc:	4882      	ldr	r0, [pc, #520]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000dce:	f006 fce9 	bl	80077a4 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 f93c 	bl	8001050 <changeFoxStateR>
		/* code */
		break;
 8000dd8:	e0f3      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
	case 8:
		//back btn
		refreshAll();
 8000dda:	f000 f917 	bl	800100c <refreshAll>
		if (screen == 4 | screen == 5) {
 8000dde:	4b7a      	ldr	r3, [pc, #488]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf0c      	ite	eq
 8000de6:	2301      	moveq	r3, #1
 8000de8:	2300      	movne	r3, #0
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b76      	ldr	r3, [pc, #472]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	bf0c      	ite	eq
 8000df4:	2301      	moveq	r3, #1
 8000df6:	2300      	movne	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_GPIO_EXTI_Callback+0x3d6>
			screen = 3;
 8000e02:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	601a      	str	r2, [r3, #0]
			showSetting();
 8000e08:	f001 f9c8 	bl	800219c <showSetting>
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_EXTI_Callback+0x3e0>
		} else {
			screen = 0;
 8000e0e:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
			showMain();
 8000e14:	f001 f992 	bl	800213c <showMain>
		}

		HAL_UART_Transmit(&huart1, "B", 1,
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4971      	ldr	r1, [pc, #452]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x5ac>)
 8000e20:	486d      	ldr	r0, [pc, #436]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e22:	f006 fcbf 	bl	80077a4 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000e26:	e0cc      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
	case 9:

		if (screen == 4) {
 8000e28:	4b67      	ldr	r3, [pc, #412]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d112      	bne.n	8000e56 <HAL_GPIO_EXTI_Callback+0x41e>
			R_Health = (R_Health + 1) % 10;
 8000e30:	4b6d      	ldr	r3, [pc, #436]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1c59      	adds	r1, r3, #1
 8000e36:	4b66      	ldr	r3, [pc, #408]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x598>)
 8000e38:	fb83 2301 	smull	r2, r3, r3, r1
 8000e3c:	109a      	asrs	r2, r3, #2
 8000e3e:	17cb      	asrs	r3, r1, #31
 8000e40:	1ad2      	subs	r2, r2, r3
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	1aca      	subs	r2, r1, r3
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000e4e:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000e50:	f001 f9fc 	bl	800224c <HealthSetting>
 8000e54:	e015      	b.n	8000e82 <HAL_GPIO_EXTI_Callback+0x44a>
		} else if (screen == 5) {
 8000e56:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d111      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x44a>
			R_bullets = (R_bullets + 1) % 10;
 8000e5e:	4b63      	ldr	r3, [pc, #396]	; (8000fec <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1c59      	adds	r1, r3, #1
 8000e64:	4b5a      	ldr	r3, [pc, #360]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x598>)
 8000e66:	fb83 2301 	smull	r2, r3, r3, r1
 8000e6a:	109a      	asrs	r2, r3, #2
 8000e6c:	17cb      	asrs	r3, r1, #31
 8000e6e:	1ad2      	subs	r2, r2, r3
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	1aca      	subs	r2, r1, r3
 8000e7a:	4b5c      	ldr	r3, [pc, #368]	; (8000fec <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000e7c:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e7e:	f001 f9ad 	bl	80021dc <bulletsSetting>
		}
		//right player
		if (screen == 1) {
 8000e82:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	f040 8094 	bne.w	8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>
			movement(&playerR, currentStateR);
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4858      	ldr	r0, [pc, #352]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x5bc>)
 8000e94:	f000 fc84 	bl	80017a0 <movement>
		}
		break;
 8000e98:	e08c      	b.n	8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>
		break;
	case 11:
		/* code */
		break;
	case 12:
		if (screen == 4) {
 8000e9a:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d112      	bne.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x490>
			L_Health = (L_Health + 1) % 10;
 8000ea2:	4b55      	ldr	r3, [pc, #340]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1c59      	adds	r1, r3, #1
 8000ea8:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x598>)
 8000eaa:	fb83 2301 	smull	r2, r3, r3, r1
 8000eae:	109a      	asrs	r2, r3, #2
 8000eb0:	17cb      	asrs	r3, r1, #31
 8000eb2:	1ad2      	subs	r2, r2, r3
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	1aca      	subs	r2, r1, r3
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8000ec0:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000ec2:	f001 f9c3 	bl	800224c <HealthSetting>
 8000ec6:	e015      	b.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x4bc>
		} else if (screen == 5) {
 8000ec8:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d111      	bne.n	8000ef4 <HAL_GPIO_EXTI_Callback+0x4bc>
			L_bullets = (L_bullets + 1) % 10;
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1c59      	adds	r1, r3, #1
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x598>)
 8000ed8:	fb83 2301 	smull	r2, r3, r3, r1
 8000edc:	109a      	asrs	r2, r3, #2
 8000ede:	17cb      	asrs	r3, r1, #31
 8000ee0:	1ad2      	subs	r2, r2, r3
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	1aca      	subs	r2, r1, r3
 8000eec:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000eee:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000ef0:	f001 f974 	bl	80021dc <bulletsSetting>
		}
		if (screen == 1) {
 8000ef4:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d15d      	bne.n	8000fb8 <HAL_GPIO_EXTI_Callback+0x580>
			movement(&playerL, currentStateL);
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x5c4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	483f      	ldr	r0, [pc, #252]	; (8001000 <HAL_GPIO_EXTI_Callback+0x5c8>)
 8000f04:	f000 fc4c 	bl	80017a0 <movement>
		}
		/* code */
		break;
 8000f08:	e056      	b.n	8000fb8 <HAL_GPIO_EXTI_Callback+0x580>
	case 13:
		/* code */
		if (screen = 3) {
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000f10:	2101      	movs	r1, #1
 8000f12:	2014      	movs	r0, #20
 8000f14:	f7ff fc1a 	bl	800074c <setCursor>
			print("                   ");
 8000f18:	483a      	ldr	r0, [pc, #232]	; (8001004 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8000f1a:	f7ff fc5f 	bl	80007dc <print>
			HealthSetting();
 8000f1e:	f001 f995 	bl	800224c <HealthSetting>
			screen = 4;
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f28:	e04b      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
	case 14:
		/* code */
		if (screen == 3) {
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d144      	bne.n	8000fbc <HAL_GPIO_EXTI_Callback+0x584>
			screen = 5;
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f34:	2205      	movs	r2, #5
 8000f36:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f7ff fc06 	bl	800074c <setCursor>
			print("                   ");
 8000f40:	4830      	ldr	r0, [pc, #192]	; (8001004 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8000f42:	f7ff fc4b 	bl	80007dc <print>
			bulletsSetting();
 8000f46:	f001 f949 	bl	80021dc <bulletsSetting>
		}
		break;
 8000f4a:	e037      	b.n	8000fbc <HAL_GPIO_EXTI_Callback+0x584>
	case 15:
		if (screen == 3) {
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d109      	bne.n	8000f68 <HAL_GPIO_EXTI_Callback+0x530>
			vfx = (vfx + 1) % 2;
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	bfb8      	it	lt
 8000f62:	425b      	neglt	r3, r3
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8000f66:	6013      	str	r3, [r2, #0]
		}
		if (screen == 4 | screen == 5) {
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2301      	moveq	r3, #1
 8000f80:	2300      	movne	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d019      	beq.n	8000fc0 <HAL_GPIO_EXTI_Callback+0x588>
			screen = 3;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f8e:	2203      	movs	r2, #3
 8000f90:	601a      	str	r2, [r3, #0]
			showSetting();
 8000f92:	f001 f903 	bl	800219c <showSetting>
		}
		/* code */
		break;
 8000f96:	e013      	b.n	8000fc0 <HAL_GPIO_EXTI_Callback+0x588>
		return;
 8000f98:	bf00      	nop
 8000f9a:	e012      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		return; // Reject invalid scan
 8000f9c:	bf00      	nop
 8000f9e:	e010      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
	case 16:
		/* code */
		break;

	default:
		break;
 8000fa0:	bf00      	nop
 8000fa2:	e00e      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fa4:	bf00      	nop
 8000fa6:	e00c      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fa8:	bf00      	nop
 8000faa:	e00a      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fac:	bf00      	nop
 8000fae:	e008      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fb0:	bf00      	nop
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fb4:	bf00      	nop
 8000fb6:	e004      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fb8:	bf00      	nop
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fbc:	bf00      	nop
 8000fbe:	e000      	b.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8000fc0:	bf00      	nop
	}
}
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	20000618 	.word	0x20000618
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	66666667 	.word	0x66666667
 8000fd4:	08009d38 	.word	0x08009d38
 8000fd8:	200002a4 	.word	0x200002a4
 8000fdc:	08009d3c 	.word	0x08009d3c
 8000fe0:	08009d40 	.word	0x08009d40
 8000fe4:	08009d44 	.word	0x08009d44
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000c88 	.word	0x20000c88
 8000ff4:	20000c68 	.word	0x20000c68
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000c8c 	.word	0x20000c8c
 8001000:	20000c78 	.word	0x20000c78
 8001004:	08009d48 	.word	0x08009d48
 8001008:	20000014 	.word	0x20000014

0800100c <refreshAll>:

void refreshAll(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fb9a 	bl	800074c <setCursor>
	print("                   ");
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <refreshAll+0x40>)
 800101a:	f7ff fbdf 	bl	80007dc <print>
	setCursor(0, 1);
 800101e:	2101      	movs	r1, #1
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fb93 	bl	800074c <setCursor>
	print("                   ");
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <refreshAll+0x40>)
 8001028:	f7ff fbd8 	bl	80007dc <print>
	setCursor(20, 0);
 800102c:	2100      	movs	r1, #0
 800102e:	2014      	movs	r0, #20
 8001030:	f7ff fb8c 	bl	800074c <setCursor>
	print("                   ");
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <refreshAll+0x40>)
 8001036:	f7ff fbd1 	bl	80007dc <print>
	setCursor(20, 1);
 800103a:	2101      	movs	r1, #1
 800103c:	2014      	movs	r0, #20
 800103e:	f7ff fb85 	bl	800074c <setCursor>
	print("                   ");
 8001042:	4802      	ldr	r0, [pc, #8]	; (800104c <refreshAll+0x40>)
 8001044:	f7ff fbca 	bl	80007dc <print>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08009d48 	.word	0x08009d48

08001050 <changeFoxStateR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void changeFoxStateR(int Player) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	byte *currentFoxR = foxStates[currentStateR];
 8001058:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <changeFoxStateR+0xf4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a3a      	ldr	r2, [pc, #232]	; (8001148 <changeFoxStateR+0xf8>)
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	60fb      	str	r3, [r7, #12]
	byte *currentFoxL = foxStates[currentStateL];
 8001064:	4b39      	ldr	r3, [pc, #228]	; (800114c <changeFoxStateR+0xfc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a37      	ldr	r2, [pc, #220]	; (8001148 <changeFoxStateR+0xf8>)
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	60bb      	str	r3, [r7, #8]

	if (!Player) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d110      	bne.n	8001098 <changeFoxStateR+0x48>
		createChar(7, currentFoxR);
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	2007      	movs	r0, #7
 800107a:	f7ff fbda 	bl	8000832 <createChar>
		currentStateR = (currentStateR + 1) % 4;
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <changeFoxStateR+0xf4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	425a      	negs	r2, r3
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	bf58      	it	pl
 8001090:	4253      	negpl	r3, r2
 8001092:	4a2c      	ldr	r2, [pc, #176]	; (8001144 <changeFoxStateR+0xf4>)
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e00f      	b.n	80010b8 <changeFoxStateR+0x68>
	} else {
		createChar(8, currentFoxL);
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	2008      	movs	r0, #8
 800109c:	f7ff fbc9 	bl	8000832 <createChar>
		currentStateL = (currentStateL + 1) % 4;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <changeFoxStateR+0xfc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	425a      	negs	r2, r3
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	f002 0203 	and.w	r2, r2, #3
 80010b0:	bf58      	it	pl
 80010b2:	4253      	negpl	r3, r2
 80010b4:	4a25      	ldr	r2, [pc, #148]	; (800114c <changeFoxStateR+0xfc>)
 80010b6:	6013      	str	r3, [r2, #0]
	}
	switch (currentStateR) {
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <changeFoxStateR+0xf4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d81b      	bhi.n	80010f8 <changeFoxStateR+0xa8>
 80010c0:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <changeFoxStateR+0x78>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	080010d9 	.word	0x080010d9
 80010cc:	080010e1 	.word	0x080010e1
 80010d0:	080010e9 	.word	0x080010e9
 80010d4:	080010f1 	.word	0x080010f1
	case 0:
		playerR.direction = UP;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <changeFoxStateR+0x100>)
 80010da:	2200      	movs	r2, #0
 80010dc:	721a      	strb	r2, [r3, #8]
		break;
 80010de:	e00c      	b.n	80010fa <changeFoxStateR+0xaa>
	case 1:
		playerR.direction = RIGHT;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <changeFoxStateR+0x100>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	721a      	strb	r2, [r3, #8]
		break;
 80010e6:	e008      	b.n	80010fa <changeFoxStateR+0xaa>
	case 2:
		playerR.direction = LEFT;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <changeFoxStateR+0x100>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	721a      	strb	r2, [r3, #8]
		break;
 80010ee:	e004      	b.n	80010fa <changeFoxStateR+0xaa>
	case 3:
		playerR.direction = DOWN;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <changeFoxStateR+0x100>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	721a      	strb	r2, [r3, #8]
		break;
 80010f6:	e000      	b.n	80010fa <changeFoxStateR+0xaa>
	default:
		break;
 80010f8:	bf00      	nop
	}
	switch (currentStateL) {
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <changeFoxStateR+0xfc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d81a      	bhi.n	8001138 <changeFoxStateR+0xe8>
 8001102:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <changeFoxStateR+0xb8>)
 8001104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001108:	08001119 	.word	0x08001119
 800110c:	08001121 	.word	0x08001121
 8001110:	08001129 	.word	0x08001129
 8001114:	08001131 	.word	0x08001131
	case 0:
		playerL.direction = UP;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <changeFoxStateR+0x104>)
 800111a:	2200      	movs	r2, #0
 800111c:	721a      	strb	r2, [r3, #8]
		break;
 800111e:	e00c      	b.n	800113a <changeFoxStateR+0xea>
	case 1:
		playerL.direction = RIGHT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <changeFoxStateR+0x104>)
 8001122:	2203      	movs	r2, #3
 8001124:	721a      	strb	r2, [r3, #8]
		break;
 8001126:	e008      	b.n	800113a <changeFoxStateR+0xea>
	case 2:
		playerL.direction = LEFT;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <changeFoxStateR+0x104>)
 800112a:	2202      	movs	r2, #2
 800112c:	721a      	strb	r2, [r3, #8]
		break;
 800112e:	e004      	b.n	800113a <changeFoxStateR+0xea>
	case 3:
		playerL.direction = DOWN;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <changeFoxStateR+0x104>)
 8001132:	2201      	movs	r2, #1
 8001134:	721a      	strb	r2, [r3, #8]
		break;
 8001136:	e000      	b.n	800113a <changeFoxStateR+0xea>
	default:
		break;
 8001138:	bf00      	nop
	}

}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000c88 	.word	0x20000c88
 8001148:	20000068 	.word	0x20000068
 800114c:	20000c8c 	.word	0x20000c8c
 8001150:	20000c68 	.word	0x20000c68
 8001154:	20000c78 	.word	0x20000c78

08001158 <increase>:
void increase(int isHealth, Player *player) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	if (isHealth) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01d      	beq.n	80011a4 <increase+0x4c>
		if (player->c == 7) {
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	7a5b      	ldrb	r3, [r3, #9]
 800116c:	2b07      	cmp	r3, #7
 800116e:	d10c      	bne.n	800118a <increase+0x32>
			R_Health++;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <increase+0x94>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <increase+0x94>)
 8001178:	6013      	str	r3, [r2, #0]
			if (R_Health > 9) {
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <increase+0x94>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dd2d      	ble.n	80011de <increase+0x86>
				R_Health = 9;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <increase+0x94>)
 8001184:	2209      	movs	r2, #9
 8001186:	601a      	str	r2, [r3, #0]
			if (L_bullets > 9) {
				L_bullets = 9;
			}
		}
	}
}
 8001188:	e029      	b.n	80011de <increase+0x86>
			L_Health++;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <increase+0x98>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <increase+0x98>)
 8001192:	6013      	str	r3, [r2, #0]
			if (L_Health > 9) {
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <increase+0x98>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b09      	cmp	r3, #9
 800119a:	dd20      	ble.n	80011de <increase+0x86>
				L_Health = 9;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <increase+0x98>)
 800119e:	2209      	movs	r2, #9
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	e01c      	b.n	80011de <increase+0x86>
		if (player->c == 7) {
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	7a5b      	ldrb	r3, [r3, #9]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d10c      	bne.n	80011c6 <increase+0x6e>
			R_bullets++;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <increase+0x9c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <increase+0x9c>)
 80011b4:	6013      	str	r3, [r2, #0]
			if (R_bullets > 9) {
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <increase+0x9c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b09      	cmp	r3, #9
 80011bc:	dd0f      	ble.n	80011de <increase+0x86>
				R_bullets = 9;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <increase+0x9c>)
 80011c0:	2209      	movs	r2, #9
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	e00b      	b.n	80011de <increase+0x86>
			L_bullets++;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <increase+0xa0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <increase+0xa0>)
 80011ce:	6013      	str	r3, [r2, #0]
			if (L_bullets > 9) {
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <increase+0xa0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	dd02      	ble.n	80011de <increase+0x86>
				L_bullets = 9;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <increase+0xa0>)
 80011da:	2209      	movs	r2, #9
 80011dc:	601a      	str	r2, [r3, #0]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000004 	.word	0x20000004
 80011f0:	20000008 	.word	0x20000008
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	20000010 	.word	0x20000010

080011fc <shoot>:

void shoot(Player *player) {
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

//	if (vfx) {
//		playExplosionSound();
//	}

	num_shooted_bullet++;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <shoot+0x8c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <shoot+0x8c>)
 800120c:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < num_shooted_bullet; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e02d      	b.n	8001270 <shoot+0x74>
		if (!fires[i].isAlive) {
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <shoot+0x90>)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4413      	add	r3, r2
 800121c:	330c      	adds	r3, #12
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d122      	bne.n	800126a <shoot+0x6e>
			fires[i].col = player->y;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4918      	ldr	r1, [pc, #96]	; (800128c <shoot+0x90>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	440b      	add	r3, r1
 8001230:	601a      	str	r2, [r3, #0]
			fires[i].row = player->x;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4915      	ldr	r1, [pc, #84]	; (800128c <shoot+0x90>)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	440b      	add	r3, r1
 800123e:	3304      	adds	r3, #4
 8001240:	601a      	str	r2, [r3, #0]
			fires[i].direction = player->direction;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7a19      	ldrb	r1, [r3, #8]
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <shoot+0x90>)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4413      	add	r3, r2
 800124e:	3308      	adds	r3, #8
 8001250:	460a      	mov	r2, r1
 8001252:	701a      	strb	r2, [r3, #0]
			fires[i].isAlive = 1;
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <shoot+0x90>)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	330c      	adds	r3, #12
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]
			shootFlag = 1;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <shoot+0x94>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
			break;
 8001268:	e008      	b.n	800127c <shoot+0x80>
	for (int i = 0; i < num_shooted_bullet; i++) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <shoot+0x8c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbcc      	blt.n	8001214 <shoot+0x18>
		}
	}
}
 800127a:	bf00      	nop
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20000624 	.word	0x20000624
 800128c:	20000628 	.word	0x20000628
 8001290:	2000061c 	.word	0x2000061c

08001294 <shotPosition>:

void shotPosition() {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
	for (int k = 0; k < num_shooted_bullet; k++) {
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e262      	b.n	8001766 <shotPosition+0x4d2>
		if (fires[k].isAlive) {
 80012a0:	4a93      	ldr	r2, [pc, #588]	; (80014f0 <shotPosition+0x25c>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	330c      	adds	r3, #12
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8257 	beq.w	8001760 <shotPosition+0x4cc>

			int col = fires[k].col;
 80012b2:	4a8f      	ldr	r2, [pc, #572]	; (80014f0 <shotPosition+0x25c>)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60bb      	str	r3, [r7, #8]
			int row = fires[k].row;
 80012be:	4a8c      	ldr	r2, [pc, #560]	; (80014f0 <shotPosition+0x25c>)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	3304      	adds	r3, #4
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	607b      	str	r3, [r7, #4]

			switch (fires[k].direction) {
 80012cc:	4a88      	ldr	r2, [pc, #544]	; (80014f0 <shotPosition+0x25c>)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	3308      	adds	r3, #8
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	f200 8081 	bhi.w	80013e0 <shotPosition+0x14c>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <shotPosition+0x50>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	08001383 	.word	0x08001383
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	0800136b 	.word	0x0800136b
 80012f0:	080012f5 	.word	0x080012f5
			case RIGHT:
				fires[k].col++;
 80012f4:	4a7e      	ldr	r2, [pc, #504]	; (80014f0 <shotPosition+0x25c>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	4413      	add	r3, r2
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	497b      	ldr	r1, [pc, #492]	; (80014f0 <shotPosition+0x25c>)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	440b      	add	r3, r1
 8001308:	601a      	str	r2, [r3, #0]
				break;
 800130a:	e06e      	b.n	80013ea <shotPosition+0x156>
			case DOWN:
				if (row == 0) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d107      	bne.n	8001322 <shotPosition+0x8e>
					fires[k].row = 1;
 8001312:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <shotPosition+0x25c>)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	3304      	adds	r3, #4
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
				} else if (row == 1 & col < 20) {
					fires[k].row = 0;
					fires[k].col += 20;
				}
				break;
 8001320:	e060      	b.n	80013e4 <shotPosition+0x150>
				} else if (row == 1 & col < 20) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b01      	cmp	r3, #1
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2da      	uxtb	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b13      	cmp	r3, #19
 8001332:	bfd4      	ite	le
 8001334:	2301      	movle	r3, #1
 8001336:	2300      	movgt	r3, #0
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4013      	ands	r3, r2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d050      	beq.n	80013e4 <shotPosition+0x150>
					fires[k].row = 0;
 8001342:	4a6b      	ldr	r2, [pc, #428]	; (80014f0 <shotPosition+0x25c>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
					fires[k].col += 20;
 8001350:	4a67      	ldr	r2, [pc, #412]	; (80014f0 <shotPosition+0x25c>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f103 0214 	add.w	r2, r3, #20
 800135e:	4964      	ldr	r1, [pc, #400]	; (80014f0 <shotPosition+0x25c>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	440b      	add	r3, r1
 8001366:	601a      	str	r2, [r3, #0]
				break;
 8001368:	e03c      	b.n	80013e4 <shotPosition+0x150>
			case LEFT:
				fires[k].col--;
 800136a:	4a61      	ldr	r2, [pc, #388]	; (80014f0 <shotPosition+0x25c>)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	495e      	ldr	r1, [pc, #376]	; (80014f0 <shotPosition+0x25c>)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	440b      	add	r3, r1
 800137e:	601a      	str	r2, [r3, #0]
				break;
 8001380:	e033      	b.n	80013ea <shotPosition+0x156>
			case UP:
				if (row == 1) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <shotPosition+0x104>
					fires[k].row = 0;
 8001388:	4a59      	ldr	r2, [pc, #356]	; (80014f0 <shotPosition+0x25c>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	3304      	adds	r3, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
				} else if (row == 0 & col >= 20) {
					fires[k].row = 1;
					fires[k].col -= 20;
				}
				break;
 8001396:	e027      	b.n	80013e8 <shotPosition+0x154>
				} else if (row == 0 & col >= 20) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	bf0c      	ite	eq
 800139e:	2301      	moveq	r3, #1
 80013a0:	2300      	movne	r3, #0
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b13      	cmp	r3, #19
 80013a8:	bfcc      	ite	gt
 80013aa:	2301      	movgt	r3, #1
 80013ac:	2300      	movle	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4013      	ands	r3, r2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d017      	beq.n	80013e8 <shotPosition+0x154>
					fires[k].row = 1;
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <shotPosition+0x25c>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
					fires[k].col -= 20;
 80013c6:	4a4a      	ldr	r2, [pc, #296]	; (80014f0 <shotPosition+0x25c>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1a3 0214 	sub.w	r2, r3, #20
 80013d4:	4946      	ldr	r1, [pc, #280]	; (80014f0 <shotPosition+0x25c>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	440b      	add	r3, r1
 80013dc:	601a      	str	r2, [r3, #0]
				break;
 80013de:	e003      	b.n	80013e8 <shotPosition+0x154>
			default:
				break;
 80013e0:	bf00      	nop
 80013e2:	e002      	b.n	80013ea <shotPosition+0x156>
				break;
 80013e4:	bf00      	nop
 80013e6:	e000      	b.n	80013ea <shotPosition+0x156>
				break;
 80013e8:	bf00      	nop
			}

			int f = lcd[fires[k].col][fires[k].row];
 80013ea:	4a41      	ldr	r2, [pc, #260]	; (80014f0 <shotPosition+0x25c>)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	4413      	add	r3, r2
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	493e      	ldr	r1, [pc, #248]	; (80014f0 <shotPosition+0x25c>)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	3304      	adds	r3, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	493c      	ldr	r1, [pc, #240]	; (80014f4 <shotPosition+0x260>)
 8001402:	2026      	movs	r0, #38	; 0x26
 8001404:	fb00 f202 	mul.w	r2, r0, r2
 8001408:	440a      	add	r2, r1
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	603b      	str	r3, [r7, #0]

			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d006      	beq.n	8001424 <shotPosition+0x190>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d003      	beq.n	8001424 <shotPosition+0x190>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2b05      	cmp	r3, #5
 8001420:	f040 80b3 	bne.w	800158a <shotPosition+0x2f6>
				do {
					switch (fires[k].direction) {
 8001424:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <shotPosition+0x25c>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	3308      	adds	r3, #8
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b03      	cmp	r3, #3
 8001432:	f200 8085 	bhi.w	8001540 <shotPosition+0x2ac>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <shotPosition+0x1a8>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	080014db 	.word	0x080014db
 8001440:	08001465 	.word	0x08001465
 8001444:	080014c3 	.word	0x080014c3
 8001448:	0800144d 	.word	0x0800144d
					case RIGHT:
						fires[k].col++;
 800144c:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <shotPosition+0x25c>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	4413      	add	r3, r2
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	4925      	ldr	r1, [pc, #148]	; (80014f0 <shotPosition+0x25c>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	440b      	add	r3, r1
 8001460:	601a      	str	r2, [r3, #0]
						break;
 8001462:	e072      	b.n	800154a <shotPosition+0x2b6>
					case DOWN:
						if (row == 0) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <shotPosition+0x1e6>
							fires[k].row = 1;
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <shotPosition+0x25c>)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4413      	add	r3, r2
 8001472:	3304      	adds	r3, #4
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
						} else if (row == 1 & col < 20) {
							fires[k].row = 0;
							fires[k].col += 20;
						}
						break;
 8001478:	e064      	b.n	8001544 <shotPosition+0x2b0>
						} else if (row == 1 & col < 20) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b01      	cmp	r3, #1
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2da      	uxtb	r2, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b13      	cmp	r3, #19
 800148a:	bfd4      	ite	le
 800148c:	2301      	movle	r3, #1
 800148e:	2300      	movgt	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4013      	ands	r3, r2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d054      	beq.n	8001544 <shotPosition+0x2b0>
							fires[k].row = 0;
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <shotPosition+0x25c>)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	3304      	adds	r3, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
							fires[k].col += 20;
 80014a8:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <shotPosition+0x25c>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f103 0214 	add.w	r2, r3, #20
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <shotPosition+0x25c>)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	440b      	add	r3, r1
 80014be:	601a      	str	r2, [r3, #0]
						break;
 80014c0:	e040      	b.n	8001544 <shotPosition+0x2b0>
					case LEFT:
						fires[k].col--;
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <shotPosition+0x25c>)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <shotPosition+0x25c>)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	440b      	add	r3, r1
 80014d6:	601a      	str	r2, [r3, #0]
						break;
 80014d8:	e037      	b.n	800154a <shotPosition+0x2b6>
					case UP:
						if (row == 1) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d10b      	bne.n	80014f8 <shotPosition+0x264>
							fires[k].row = 0;
 80014e0:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <shotPosition+0x25c>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	3304      	adds	r3, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
						} else if (row == 0 & col >= 20) {
							fires[k].row = 1;
							fires[k].col -= 20;
						}
						break;
 80014ee:	e02b      	b.n	8001548 <shotPosition+0x2b4>
 80014f0:	20000628 	.word	0x20000628
 80014f4:	20000d50 	.word	0x20000d50
						} else if (row == 0 & col >= 20) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf0c      	ite	eq
 80014fe:	2301      	moveq	r3, #1
 8001500:	2300      	movne	r3, #0
 8001502:	b2da      	uxtb	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b13      	cmp	r3, #19
 8001508:	bfcc      	ite	gt
 800150a:	2301      	movgt	r3, #1
 800150c:	2300      	movle	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4013      	ands	r3, r2
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d017      	beq.n	8001548 <shotPosition+0x2b4>
							fires[k].row = 1;
 8001518:	4a98      	ldr	r2, [pc, #608]	; (800177c <shotPosition+0x4e8>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	3304      	adds	r3, #4
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]
							fires[k].col -= 20;
 8001526:	4a95      	ldr	r2, [pc, #596]	; (800177c <shotPosition+0x4e8>)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1a3 0214 	sub.w	r2, r3, #20
 8001534:	4991      	ldr	r1, [pc, #580]	; (800177c <shotPosition+0x4e8>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	440b      	add	r3, r1
 800153c:	601a      	str	r2, [r3, #0]
						break;
 800153e:	e003      	b.n	8001548 <shotPosition+0x2b4>
					default:
						break;
 8001540:	bf00      	nop
 8001542:	e002      	b.n	800154a <shotPosition+0x2b6>
						break;
 8001544:	bf00      	nop
 8001546:	e000      	b.n	800154a <shotPosition+0x2b6>
						break;
 8001548:	bf00      	nop
					}

					f = lcd[fires[k].col][fires[k].row];
 800154a:	4a8c      	ldr	r2, [pc, #560]	; (800177c <shotPosition+0x4e8>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4989      	ldr	r1, [pc, #548]	; (800177c <shotPosition+0x4e8>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	440b      	add	r3, r1
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4987      	ldr	r1, [pc, #540]	; (8001780 <shotPosition+0x4ec>)
 8001562:	2026      	movs	r0, #38	; 0x26
 8001564:	fb00 f202 	mul.w	r2, r0, r2
 8001568:	440a      	add	r2, r1
 800156a:	4413      	add	r3, r2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	603b      	str	r3, [r7, #0]
				} while (f == 5 || f == 1 || f == 2);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b05      	cmp	r3, #5
 8001574:	f43f af56 	beq.w	8001424 <shotPosition+0x190>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	f43f af52 	beq.w	8001424 <shotPosition+0x190>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	f43f af4e 	beq.w	8001424 <shotPosition+0x190>
			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 8001588:	e097      	b.n	80016ba <shotPosition+0x426>
			} else if (f == 4) { //if wall
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d107      	bne.n	80015a0 <shotPosition+0x30c>
				fires[k].isAlive = 0;
 8001590:	4a7a      	ldr	r2, [pc, #488]	; (800177c <shotPosition+0x4e8>)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	330c      	adds	r3, #12
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e08c      	b.n	80016ba <shotPosition+0x426>
			} else if (f == 3) { //if barrier
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d11a      	bne.n	80015dc <shotPosition+0x348>
				lcd[fires[k].row][fires[k].col] = ' ';
 80015a6:	4a75      	ldr	r2, [pc, #468]	; (800177c <shotPosition+0x4e8>)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4413      	add	r3, r2
 80015ae:	3304      	adds	r3, #4
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4972      	ldr	r1, [pc, #456]	; (800177c <shotPosition+0x4e8>)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	440b      	add	r3, r1
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4970      	ldr	r1, [pc, #448]	; (8001780 <shotPosition+0x4ec>)
 80015be:	2026      	movs	r0, #38	; 0x26
 80015c0:	fb00 f202 	mul.w	r2, r0, r2
 80015c4:	440a      	add	r2, r1
 80015c6:	4413      	add	r3, r2
 80015c8:	2220      	movs	r2, #32
 80015ca:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Transmit(&huart1, lcd[fires[k].row][fires[k].col], 1,
//						100000);
				fires[k].isAlive = 0;
 80015cc:	4a6b      	ldr	r2, [pc, #428]	; (800177c <shotPosition+0x4e8>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4413      	add	r3, r2
 80015d4:	330c      	adds	r3, #12
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e06e      	b.n	80016ba <shotPosition+0x426>
			} else if (fires[k].col == playerR.y && fires[k].row == playerR.x) {
 80015dc:	4a67      	ldr	r2, [pc, #412]	; (800177c <shotPosition+0x4e8>)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b67      	ldr	r3, [pc, #412]	; (8001784 <shotPosition+0x4f0>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d11b      	bne.n	8001626 <shotPosition+0x392>
 80015ee:	4a63      	ldr	r2, [pc, #396]	; (800177c <shotPosition+0x4e8>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	4413      	add	r3, r2
 80015f6:	3304      	adds	r3, #4
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b62      	ldr	r3, [pc, #392]	; (8001784 <shotPosition+0x4f0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d111      	bne.n	8001626 <shotPosition+0x392>
				//decreaseHealth playerR ;
				R_Health--;
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <shotPosition+0x4f4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	4a5f      	ldr	r2, [pc, #380]	; (8001788 <shotPosition+0x4f4>)
 800160a:	6013      	str	r3, [r2, #0]
				playerL.score++;
 800160c:	4b5f      	ldr	r3, [pc, #380]	; (800178c <shotPosition+0x4f8>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	4a5e      	ldr	r2, [pc, #376]	; (800178c <shotPosition+0x4f8>)
 8001614:	60d3      	str	r3, [r2, #12]
//				if (vfx) {
//					playTankHitSound();
//				}
				fires[k].isAlive = 0;
 8001616:	4a59      	ldr	r2, [pc, #356]	; (800177c <shotPosition+0x4e8>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	4413      	add	r3, r2
 800161e:	330c      	adds	r3, #12
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e049      	b.n	80016ba <shotPosition+0x426>
			} else if (fires[k].col == playerL.y && fires[k].row == playerL.x) {
 8001626:	4a55      	ldr	r2, [pc, #340]	; (800177c <shotPosition+0x4e8>)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	4413      	add	r3, r2
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b56      	ldr	r3, [pc, #344]	; (800178c <shotPosition+0x4f8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	d11b      	bne.n	8001670 <shotPosition+0x3dc>
 8001638:	4a50      	ldr	r2, [pc, #320]	; (800177c <shotPosition+0x4e8>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	3304      	adds	r3, #4
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <shotPosition+0x4f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d111      	bne.n	8001670 <shotPosition+0x3dc>
				//decreaseHealth(playerL);
				L_Health--;
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <shotPosition+0x4fc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a4f      	ldr	r2, [pc, #316]	; (8001790 <shotPosition+0x4fc>)
 8001654:	6013      	str	r3, [r2, #0]
				playerR.score++;
 8001656:	4b4b      	ldr	r3, [pc, #300]	; (8001784 <shotPosition+0x4f0>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	4a49      	ldr	r2, [pc, #292]	; (8001784 <shotPosition+0x4f0>)
 800165e:	60d3      	str	r3, [r2, #12]
				if (vfx) {
//					playTankHitSound();
				}
				fires[k].isAlive = 0;
 8001660:	4a46      	ldr	r2, [pc, #280]	; (800177c <shotPosition+0x4e8>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	330c      	adds	r3, #12
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e024      	b.n	80016ba <shotPosition+0x426>
			} else if (fires[k].col < 0 || fires[k].col >= 40
 8001670:	4a42      	ldr	r2, [pc, #264]	; (800177c <shotPosition+0x4e8>)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db16      	blt.n	80016ac <shotPosition+0x418>
 800167e:	4a3f      	ldr	r2, [pc, #252]	; (800177c <shotPosition+0x4e8>)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b27      	cmp	r3, #39	; 0x27
 800168a:	dc0f      	bgt.n	80016ac <shotPosition+0x418>
					|| fires[k].row < 0 || fires[k].row >= 2) {
 800168c:	4a3b      	ldr	r2, [pc, #236]	; (800177c <shotPosition+0x4e8>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4413      	add	r3, r2
 8001694:	3304      	adds	r3, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db07      	blt.n	80016ac <shotPosition+0x418>
 800169c:	4a37      	ldr	r2, [pc, #220]	; (800177c <shotPosition+0x4e8>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	3304      	adds	r3, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	dd06      	ble.n	80016ba <shotPosition+0x426>
				fires[k].isAlive = 0;
 80016ac:	4a33      	ldr	r2, [pc, #204]	; (800177c <shotPosition+0x4e8>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	4413      	add	r3, r2
 80016b4:	330c      	adds	r3, #12
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
			}

			if (!(col == playerR.x && row == playerR.y)
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <shotPosition+0x4f0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d104      	bne.n	80016ce <shotPosition+0x43a>
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <shotPosition+0x4f0>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d014      	beq.n	80016f8 <shotPosition+0x464>
					&& !(col == playerL.x && row == playerR.y)) {
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <shotPosition+0x4f8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d104      	bne.n	80016e2 <shotPosition+0x44e>
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <shotPosition+0x4f0>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d00a      	beq.n	80016f8 <shotPosition+0x464>
				setCursor(col, row);
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f7ff f831 	bl	800074c <setCursor>
				print(" ");
 80016ea:	482a      	ldr	r0, [pc, #168]	; (8001794 <shotPosition+0x500>)
 80016ec:	f7ff f876 	bl	80007dc <print>
				HAL_Delay(500);
 80016f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f4:	f002 f82e 	bl	8003754 <HAL_Delay>
			}

			if (fires[k].isAlive) {
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <shotPosition+0x4e8>)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4413      	add	r3, r2
 8001700:	330c      	adds	r3, #12
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d012      	beq.n	800172e <shotPosition+0x49a>
				setCursor(fires[k].col, fires[k].row);
 8001708:	4a1c      	ldr	r2, [pc, #112]	; (800177c <shotPosition+0x4e8>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	491a      	ldr	r1, [pc, #104]	; (800177c <shotPosition+0x4e8>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	440b      	add	r3, r1
 800171a:	3304      	adds	r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f7ff f813 	bl	800074c <setCursor>
				write(6);
 8001726:	2006      	movs	r0, #6
 8001728:	f7ff f8ba 	bl	80008a0 <write>
 800172c:	e018      	b.n	8001760 <shotPosition+0x4cc>
			} else {
				//num_shooted_bullet--;
				shootFlag = 0;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <shotPosition+0x504>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
				setCursor(col, row);
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	68b8      	ldr	r0, [r7, #8]
 8001738:	f7ff f808 	bl	800074c <setCursor>
				print(" ");
 800173c:	4815      	ldr	r0, [pc, #84]	; (8001794 <shotPosition+0x500>)
 800173e:	f7ff f84d 	bl	80007dc <print>
				fires[k].col = -1;
 8001742:	4a0e      	ldr	r2, [pc, #56]	; (800177c <shotPosition+0x4e8>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4413      	add	r3, r2
 800174a:	f04f 32ff 	mov.w	r2, #4294967295
 800174e:	601a      	str	r2, [r3, #0]
				fires[k].row = -1;
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <shotPosition+0x4e8>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	3304      	adds	r3, #4
 800175a:	f04f 32ff 	mov.w	r2, #4294967295
 800175e:	601a      	str	r2, [r3, #0]
	for (int k = 0; k < num_shooted_bullet; k++) {
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3301      	adds	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <shotPosition+0x508>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	f6ff ad97 	blt.w	80012a0 <shotPosition+0xc>
			}
		}

	}
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000628 	.word	0x20000628
 8001780:	20000d50 	.word	0x20000d50
 8001784:	20000c68 	.word	0x20000c68
 8001788:	20000004 	.word	0x20000004
 800178c:	20000c78 	.word	0x20000c78
 8001790:	20000008 	.word	0x20000008
 8001794:	08009d5c 	.word	0x08009d5c
 8001798:	2000061c 	.word	0x2000061c
 800179c:	20000624 	.word	0x20000624

080017a0 <movement>:
void movement(Player *player, int currentState) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
//
//	sprintf(buffer, "Player X: %d, Player Y: %d", player->x, player->y); // Convert integers to string
//
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//	HAL_MAX_DELAY); // Transmit string over UART
	int oldX = player->x;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
	int oldY = player->y;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	60bb      	str	r3, [r7, #8]
	switch (currentState) {
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	f200 8247 	bhi.w	8001c4c <movement+0x4ac>
 80017be:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <movement+0x24>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	080018b9 	.word	0x080018b9
 80017cc:	08001a21 	.word	0x08001a21
 80017d0:	08001b79 	.word	0x08001b79
	case 0:	//top

		if (player->x == 1 && lcd[0][player->y] != 4
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d124      	bne.n	8001826 <movement+0x86>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a8b      	ldr	r2, [pc, #556]	; (8001a10 <movement+0x270>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d01e      	beq.n	8001826 <movement+0x86>
				&& lcd[0][player->y] != 3) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4a88      	ldr	r2, [pc, #544]	; (8001a10 <movement+0x270>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d018      	beq.n	8001826 <movement+0x86>
			//catching heart and bullet
			if (lcd[0][player->y] == 1) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a85      	ldr	r2, [pc, #532]	; (8001a10 <movement+0x270>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d104      	bne.n	800180a <movement+0x6a>
				increase(1, player);
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	2001      	movs	r0, #1
 8001804:	f7ff fca8 	bl	8001158 <increase>
 8001808:	e009      	b.n	800181e <movement+0x7e>
			} else if (lcd[0][player->y] == 5) {
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a80      	ldr	r2, [pc, #512]	; (8001a10 <movement+0x270>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d103      	bne.n	800181e <movement+0x7e>
				increase(0, player);
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff fc9d 	bl	8001158 <increase>
			}
			player->x = 0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	e047      	b.n	80018b6 <movement+0x116>
		} else if (player->x == 0 && player->y >= 20) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d13a      	bne.n	80018a4 <movement+0x104>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b13      	cmp	r3, #19
 8001834:	dd36      	ble.n	80018a4 <movement+0x104>
			if (lcd[1][(player->y) - 20] != 4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	3b14      	subs	r3, #20
 800183c:	4a74      	ldr	r2, [pc, #464]	; (8001a10 <movement+0x270>)
 800183e:	4413      	add	r3, r2
 8001840:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001844:	2b04      	cmp	r3, #4
 8001846:	d035      	beq.n	80018b4 <movement+0x114>
					&& lcd[1][(player->y) - 20] != 3) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	3b14      	subs	r3, #20
 800184e:	4a70      	ldr	r2, [pc, #448]	; (8001a10 <movement+0x270>)
 8001850:	4413      	add	r3, r2
 8001852:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001856:	2b03      	cmp	r3, #3
 8001858:	d02c      	beq.n	80018b4 <movement+0x114>
				//catching heart and bullet
				if (lcd[1][(player->y) - 20] == 1) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	3b14      	subs	r3, #20
 8001860:	4a6b      	ldr	r2, [pc, #428]	; (8001a10 <movement+0x270>)
 8001862:	4413      	add	r3, r2
 8001864:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001868:	2b01      	cmp	r3, #1
 800186a:	d104      	bne.n	8001876 <movement+0xd6>
					increase(1, player);
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff fc72 	bl	8001158 <increase>
 8001874:	e00c      	b.n	8001890 <movement+0xf0>
				} else if (lcd[1][(player->y) - 20] == 5) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	3b14      	subs	r3, #20
 800187c:	4a64      	ldr	r2, [pc, #400]	; (8001a10 <movement+0x270>)
 800187e:	4413      	add	r3, r2
 8001880:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001884:	2b05      	cmp	r3, #5
 8001886:	d103      	bne.n	8001890 <movement+0xf0>
					increase(0, player);
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fc64 	bl	8001158 <increase>
				}
				player->x = 1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]
				player->y = (player->y) - 20;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f1a3 0214 	sub.w	r2, r3, #20
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	605a      	str	r2, [r3, #4]
			if (lcd[1][(player->y) - 20] != 4
 80018a2:	e007      	b.n	80018b4 <movement+0x114>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT TOP", 8,
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	2208      	movs	r2, #8
 80018aa:	495a      	ldr	r1, [pc, #360]	; (8001a14 <movement+0x274>)
 80018ac:	485a      	ldr	r0, [pc, #360]	; (8001a18 <movement+0x278>)
 80018ae:	f005 ff79 	bl	80077a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 80018b2:	e1cb      	b.n	8001c4c <movement+0x4ac>
			if (lcd[1][(player->y) - 20] != 4
 80018b4:	bf00      	nop
		break;
 80018b6:	e1c9      	b.n	8001c4c <movement+0x4ac>
	case 1:	//right

		if (player->y >= 0 && player->y < 19) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db4c      	blt.n	800195a <movement+0x1ba>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	dc48      	bgt.n	800195a <movement+0x1ba>
			if (lcd[player->x][(player->y) + 1] != 3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	3301      	adds	r3, #1
 80018d2:	494f      	ldr	r1, [pc, #316]	; (8001a10 <movement+0x270>)
 80018d4:	2026      	movs	r0, #38	; 0x26
 80018d6:	fb00 f202 	mul.w	r2, r0, r2
 80018da:	440a      	add	r2, r1
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	f000 8091 	beq.w	8001a08 <movement+0x268>
					&& lcd[player->x][(player->y) + 1] != 4) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	3301      	adds	r3, #1
 80018f0:	4947      	ldr	r1, [pc, #284]	; (8001a10 <movement+0x270>)
 80018f2:	2026      	movs	r0, #38	; 0x26
 80018f4:	fb00 f202 	mul.w	r2, r0, r2
 80018f8:	440a      	add	r2, r1
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b04      	cmp	r3, #4
 8001900:	f000 8082 	beq.w	8001a08 <movement+0x268>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	3301      	adds	r3, #1
 800190e:	4940      	ldr	r1, [pc, #256]	; (8001a10 <movement+0x270>)
 8001910:	2026      	movs	r0, #38	; 0x26
 8001912:	fb00 f202 	mul.w	r2, r0, r2
 8001916:	440a      	add	r2, r1
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d104      	bne.n	800192a <movement+0x18a>
					increase(1, player);
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	2001      	movs	r0, #1
 8001924:	f7ff fc18 	bl	8001158 <increase>
 8001928:	e011      	b.n	800194e <movement+0x1ae>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	3301      	adds	r3, #1
 8001934:	4936      	ldr	r1, [pc, #216]	; (8001a10 <movement+0x270>)
 8001936:	2026      	movs	r0, #38	; 0x26
 8001938:	fb00 f202 	mul.w	r2, r0, r2
 800193c:	440a      	add	r2, r1
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d103      	bne.n	800194e <movement+0x1ae>
					increase(0, player);
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fc05 	bl	8001158 <increase>
				}
				player->y = (player->y) + 1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 8001958:	e056      	b.n	8001a08 <movement+0x268>
			}
		} else if (player->y < 39 && player->y >= 20) {
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b26      	cmp	r3, #38	; 0x26
 8001960:	dc4a      	bgt.n	80019f8 <movement+0x258>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b13      	cmp	r3, #19
 8001968:	dd46      	ble.n	80019f8 <movement+0x258>
			if (lcd[player->x][(player->y) + 1] != 3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	3301      	adds	r3, #1
 8001974:	4926      	ldr	r1, [pc, #152]	; (8001a10 <movement+0x270>)
 8001976:	2026      	movs	r0, #38	; 0x26
 8001978:	fb00 f202 	mul.w	r2, r0, r2
 800197c:	440a      	add	r2, r1
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d042      	beq.n	8001a0c <movement+0x26c>
					&& lcd[player->x][(player->y) + 1] != 4) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	3301      	adds	r3, #1
 8001990:	491f      	ldr	r1, [pc, #124]	; (8001a10 <movement+0x270>)
 8001992:	2026      	movs	r0, #38	; 0x26
 8001994:	fb00 f202 	mul.w	r2, r0, r2
 8001998:	440a      	add	r2, r1
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d034      	beq.n	8001a0c <movement+0x26c>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4918      	ldr	r1, [pc, #96]	; (8001a10 <movement+0x270>)
 80019ae:	2026      	movs	r0, #38	; 0x26
 80019b0:	fb00 f202 	mul.w	r2, r0, r2
 80019b4:	440a      	add	r2, r1
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d104      	bne.n	80019c8 <movement+0x228>
					increase(1, player);
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff fbc9 	bl	8001158 <increase>
 80019c6:	e011      	b.n	80019ec <movement+0x24c>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	3301      	adds	r3, #1
 80019d2:	490f      	ldr	r1, [pc, #60]	; (8001a10 <movement+0x270>)
 80019d4:	2026      	movs	r0, #38	; 0x26
 80019d6:	fb00 f202 	mul.w	r2, r0, r2
 80019da:	440a      	add	r2, r1
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d103      	bne.n	80019ec <movement+0x24c>
					increase(0, player);
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fbb6 	bl	8001158 <increase>
				}
				player->y = (player->y) + 1;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 80019f6:	e009      	b.n	8001a0c <movement+0x26c>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT RIGHt", 10,
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	220a      	movs	r2, #10
 80019fe:	4907      	ldr	r1, [pc, #28]	; (8001a1c <movement+0x27c>)
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <movement+0x278>)
 8001a02:	f005 fecf 	bl	80077a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001a06:	e121      	b.n	8001c4c <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001a08:	bf00      	nop
 8001a0a:	e11f      	b.n	8001c4c <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001a0c:	bf00      	nop
		break;
 8001a0e:	e11d      	b.n	8001c4c <movement+0x4ac>
 8001a10:	20000d50 	.word	0x20000d50
 8001a14:	08009d60 	.word	0x08009d60
 8001a18:	200002a4 	.word	0x200002a4
 8001a1c:	08009d6c 	.word	0x08009d6c

	case 2:	//left

		if (player->y > 0 && player->y <= 19) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dd4c      	ble.n	8001ac2 <movement+0x322>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b13      	cmp	r3, #19
 8001a2e:	dc48      	bgt.n	8001ac2 <movement+0x322>
			if (lcd[player->x][(player->y) - 1] != 3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4997      	ldr	r1, [pc, #604]	; (8001c98 <movement+0x4f8>)
 8001a3c:	2026      	movs	r0, #38	; 0x26
 8001a3e:	fb00 f202 	mul.w	r2, r0, r2
 8001a42:	440a      	add	r2, r1
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	f000 8091 	beq.w	8001b70 <movement+0x3d0>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	498f      	ldr	r1, [pc, #572]	; (8001c98 <movement+0x4f8>)
 8001a5a:	2026      	movs	r0, #38	; 0x26
 8001a5c:	fb00 f202 	mul.w	r2, r0, r2
 8001a60:	440a      	add	r2, r1
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	f000 8082 	beq.w	8001b70 <movement+0x3d0>
				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	4988      	ldr	r1, [pc, #544]	; (8001c98 <movement+0x4f8>)
 8001a78:	2026      	movs	r0, #38	; 0x26
 8001a7a:	fb00 f202 	mul.w	r2, r0, r2
 8001a7e:	440a      	add	r2, r1
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d104      	bne.n	8001a92 <movement+0x2f2>
					increase(1, player);
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fb64 	bl	8001158 <increase>
 8001a90:	e011      	b.n	8001ab6 <movement+0x316>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	497e      	ldr	r1, [pc, #504]	; (8001c98 <movement+0x4f8>)
 8001a9e:	2026      	movs	r0, #38	; 0x26
 8001aa0:	fb00 f202 	mul.w	r2, r0, r2
 8001aa4:	440a      	add	r2, r1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d103      	bne.n	8001ab6 <movement+0x316>
					increase(0, player);
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fb51 	bl	8001158 <increase>
				}

				player->y = (player->y) - 1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	1e5a      	subs	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001ac0:	e056      	b.n	8001b70 <movement+0x3d0>
			}
		} else if (player->y <= 39 && player->y > 20) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b27      	cmp	r3, #39	; 0x27
 8001ac8:	dc4a      	bgt.n	8001b60 <movement+0x3c0>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b14      	cmp	r3, #20
 8001ad0:	dd46      	ble.n	8001b60 <movement+0x3c0>
			if (lcd[player->x][(player->y) - 1] != 3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	496e      	ldr	r1, [pc, #440]	; (8001c98 <movement+0x4f8>)
 8001ade:	2026      	movs	r0, #38	; 0x26
 8001ae0:	fb00 f202 	mul.w	r2, r0, r2
 8001ae4:	440a      	add	r2, r1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d042      	beq.n	8001b74 <movement+0x3d4>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	4967      	ldr	r1, [pc, #412]	; (8001c98 <movement+0x4f8>)
 8001afa:	2026      	movs	r0, #38	; 0x26
 8001afc:	fb00 f202 	mul.w	r2, r0, r2
 8001b00:	440a      	add	r2, r1
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d034      	beq.n	8001b74 <movement+0x3d4>

				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	4960      	ldr	r1, [pc, #384]	; (8001c98 <movement+0x4f8>)
 8001b16:	2026      	movs	r0, #38	; 0x26
 8001b18:	fb00 f202 	mul.w	r2, r0, r2
 8001b1c:	440a      	add	r2, r1
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <movement+0x390>
					increase(1, player);
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff fb15 	bl	8001158 <increase>
 8001b2e:	e011      	b.n	8001b54 <movement+0x3b4>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	4957      	ldr	r1, [pc, #348]	; (8001c98 <movement+0x4f8>)
 8001b3c:	2026      	movs	r0, #38	; 0x26
 8001b3e:	fb00 f202 	mul.w	r2, r0, r2
 8001b42:	440a      	add	r2, r1
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d103      	bne.n	8001b54 <movement+0x3b4>
					increase(0, player);
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fb02 	bl	8001158 <increase>
				}

				player->y = (player->y) - 1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001b5e:	e009      	b.n	8001b74 <movement+0x3d4>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT LEFT", 9,
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	2209      	movs	r2, #9
 8001b66:	494d      	ldr	r1, [pc, #308]	; (8001c9c <movement+0x4fc>)
 8001b68:	484d      	ldr	r0, [pc, #308]	; (8001ca0 <movement+0x500>)
 8001b6a:	f005 fe1b 	bl	80077a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001b6e:	e06d      	b.n	8001c4c <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001b70:	bf00      	nop
 8001b72:	e06b      	b.n	8001c4c <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001b74:	bf00      	nop
		break;
 8001b76:	e069      	b.n	8001c4c <movement+0x4ac>
		break;
	case 3:	//bot
		if (player->x == 0 && lcd[1][player->y] != 4
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12c      	bne.n	8001bda <movement+0x43a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a44      	ldr	r2, [pc, #272]	; (8001c98 <movement+0x4f8>)
 8001b86:	4413      	add	r3, r2
 8001b88:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d024      	beq.n	8001bda <movement+0x43a>
				&& lcd[1][player->y] != 3) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <movement+0x4f8>)
 8001b96:	4413      	add	r3, r2
 8001b98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d01c      	beq.n	8001bda <movement+0x43a>
			//catching heart and bullet
			if (lcd[1][player->y] == 1) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a3c      	ldr	r2, [pc, #240]	; (8001c98 <movement+0x4f8>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d104      	bne.n	8001bba <movement+0x41a>
				increase(1, player);
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff fad0 	bl	8001158 <increase>
 8001bb8:	e00b      	b.n	8001bd2 <movement+0x432>
			} else if (lcd[1][player->y] == 5) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <movement+0x4f8>)
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d103      	bne.n	8001bd2 <movement+0x432>
				increase(0, player);
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fac3 	bl	8001158 <increase>
			}

			player->x = 1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e037      	b.n	8001c4a <movement+0x4aa>
		} else if (player->x == 1 && player->y < 20) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d12b      	bne.n	8001c3a <movement+0x49a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b13      	cmp	r3, #19
 8001be8:	dc27      	bgt.n	8001c3a <movement+0x49a>
			if (lcd[0][(player->y) + 20] != 4) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	3314      	adds	r3, #20
 8001bf0:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <movement+0x4f8>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d028      	beq.n	8001c4a <movement+0x4aa>
				//catching heart and bullet
				if (lcd[0][(player->y) + 20] == 1) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	3314      	adds	r3, #20
 8001bfe:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <movement+0x4f8>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d104      	bne.n	8001c10 <movement+0x470>
					increase(1, player);
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff faa5 	bl	8001158 <increase>
 8001c0e:	e00a      	b.n	8001c26 <movement+0x486>
				} else if (lcd[0][(player->y) + 20] == 5) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	3314      	adds	r3, #20
 8001c16:	4a20      	ldr	r2, [pc, #128]	; (8001c98 <movement+0x4f8>)
 8001c18:	5cd3      	ldrb	r3, [r2, r3]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d103      	bne.n	8001c26 <movement+0x486>
					increase(0, player);
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fa99 	bl	8001158 <increase>
				}
				player->x = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
				player->y = (player->y) + 20;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f103 0214 	add.w	r2, r3, #20
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	605a      	str	r2, [r3, #4]
			if (lcd[0][(player->y) + 20] != 4) {
 8001c38:	e007      	b.n	8001c4a <movement+0x4aa>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT BOT", 8,
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	2208      	movs	r2, #8
 8001c40:	4918      	ldr	r1, [pc, #96]	; (8001ca4 <movement+0x504>)
 8001c42:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <movement+0x500>)
 8001c44:	f005 fdae 	bl	80077a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001c48:	e7ff      	b.n	8001c4a <movement+0x4aa>
 8001c4a:	bf00      	nop
	}

	lcd[player->x][player->y] = player->c;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	7a4c      	ldrb	r4, [r1, #9]
 8001c58:	490f      	ldr	r1, [pc, #60]	; (8001c98 <movement+0x4f8>)
 8001c5a:	2026      	movs	r0, #38	; 0x26
 8001c5c:	fb00 f202 	mul.w	r2, r0, r2
 8001c60:	440a      	add	r2, r1
 8001c62:	4413      	add	r3, r2
 8001c64:	4622      	mov	r2, r4
 8001c66:	701a      	strb	r2, [r3, #0]

	// Clear the old position on the LCD
	setCursor(oldY, oldX);
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	68b8      	ldr	r0, [r7, #8]
 8001c6c:	f7fe fd6e 	bl	800074c <setCursor>
	write(' ');
 8001c70:	2020      	movs	r0, #32
 8001c72:	f7fe fe15 	bl	80008a0 <write>

	// Write the player's character at the new position on the LCD
	setCursor(player->y, player->x);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f7fe fd63 	bl	800074c <setCursor>
	write(player->c);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7a5b      	ldrb	r3, [r3, #9]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fe08 	bl	80008a0 <write>

}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	20000d50 	.word	0x20000d50
 8001c9c:	08009d78 	.word	0x08009d78
 8001ca0:	200002a4 	.word	0x200002a4
 8001ca4:	08009d84 	.word	0x08009d84

08001ca8 <initializeObjects>:

void initializeObjects() {
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b08b      	sub	sp, #44	; 0x2c
 8001cac:	af00      	add	r7, sp, #0
	playerR.x = 1;
 8001cae:	4ba8      	ldr	r3, [pc, #672]	; (8001f50 <initializeObjects+0x2a8>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
	playerR.y = 19;
 8001cb4:	4ba6      	ldr	r3, [pc, #664]	; (8001f50 <initializeObjects+0x2a8>)
 8001cb6:	2213      	movs	r2, #19
 8001cb8:	605a      	str	r2, [r3, #4]
	playerR.c = 7;
 8001cba:	4ba5      	ldr	r3, [pc, #660]	; (8001f50 <initializeObjects+0x2a8>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	725a      	strb	r2, [r3, #9]
	playerL.c = 8;
 8001cc0:	4ba4      	ldr	r3, [pc, #656]	; (8001f54 <initializeObjects+0x2ac>)
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	725a      	strb	r2, [r3, #9]
	playerL.x = 1;
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <initializeObjects+0x2ac>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
	playerL.y = 0;
 8001ccc:	4ba1      	ldr	r3, [pc, #644]	; (8001f54 <initializeObjects+0x2ac>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	e015      	b.n	8001d04 <initializeObjects+0x5c>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	e00c      	b.n	8001cf8 <initializeObjects+0x50>
			lcd[i][j] = ' ';  // Empty cell
 8001cde:	4a9e      	ldr	r2, [pc, #632]	; (8001f58 <initializeObjects+0x2b0>)
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	2126      	movs	r1, #38	; 0x26
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	441a      	add	r2, r3
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	4413      	add	r3, r2
 8001cee:	2220      	movs	r2, #32
 8001cf0:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	2b25      	cmp	r3, #37	; 0x25
 8001cfc:	ddef      	ble.n	8001cde <initializeObjects+0x36>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	dde6      	ble.n	8001cd8 <initializeObjects+0x30>
		}
	}

	//hearts
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e036      	b.n	8001d7e <initializeObjects+0xd6>
		hearts[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001d10:	f006 fda8 	bl	8008864 <rand>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b91      	ldr	r3, [pc, #580]	; (8001f5c <initializeObjects+0x2b4>)
 8001d18:	fb83 1302 	smull	r1, r3, r3, r2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	1119      	asrs	r1, r3, #4
 8001d20:	17d3      	asrs	r3, r2, #31
 8001d22:	1ac9      	subs	r1, r1, r3
 8001d24:	460b      	mov	r3, r1
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	1a5b      	subs	r3, r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	1ad1      	subs	r1, r2, r3
 8001d2e:	3103      	adds	r1, #3
 8001d30:	488b      	ldr	r0, [pc, #556]	; (8001f60 <initializeObjects+0x2b8>)
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4403      	add	r3, r0
 8001d3e:	6019      	str	r1, [r3, #0]
		hearts[i].y = rand() % 2;       // Random number between 0 and 1
 8001d40:	f006 fd90 	bl	8008864 <rand>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	bfb8      	it	lt
 8001d4e:	425b      	neglt	r3, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	4883      	ldr	r0, [pc, #524]	; (8001f60 <initializeObjects+0x2b8>)
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4403      	add	r3, r0
 8001d60:	3304      	adds	r3, #4
 8001d62:	6019      	str	r1, [r3, #0]
		hearts[i].c = 1;
 8001d64:	497e      	ldr	r1, [pc, #504]	; (8001f60 <initializeObjects+0x2b8>)
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3308      	adds	r3, #8
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	ddc5      	ble.n	8001d10 <initializeObjects+0x68>
	}

	//  mistery boxes
	for (int i = 0; i < NUM_BOXES; i++) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e036      	b.n	8001df8 <initializeObjects+0x150>
		boxes[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001d8a:	f006 fd6b 	bl	8008864 <rand>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <initializeObjects+0x2b4>)
 8001d92:	fb83 1302 	smull	r1, r3, r3, r2
 8001d96:	4413      	add	r3, r2
 8001d98:	1119      	asrs	r1, r3, #4
 8001d9a:	17d3      	asrs	r3, r2, #31
 8001d9c:	1ac9      	subs	r1, r1, r3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	1a5b      	subs	r3, r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	1ad1      	subs	r1, r2, r3
 8001da8:	3103      	adds	r1, #3
 8001daa:	486e      	ldr	r0, [pc, #440]	; (8001f64 <initializeObjects+0x2bc>)
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4403      	add	r3, r0
 8001db8:	6019      	str	r1, [r3, #0]
		boxes[i].y = rand() % 2;       // Random number between 0 and 1
 8001dba:	f006 fd53 	bl	8008864 <rand>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	bfb8      	it	lt
 8001dc8:	425b      	neglt	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4865      	ldr	r0, [pc, #404]	; (8001f64 <initializeObjects+0x2bc>)
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4403      	add	r3, r0
 8001dda:	3304      	adds	r3, #4
 8001ddc:	6019      	str	r1, [r3, #0]
		boxes[i].c = 2;
 8001dde:	4961      	ldr	r1, [pc, #388]	; (8001f64 <initializeObjects+0x2bc>)
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3308      	adds	r3, #8
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	ddc5      	ble.n	8001d8a <initializeObjects+0xe2>
	}

	//bullets
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e036      	b.n	8001e72 <initializeObjects+0x1ca>
		bullets[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001e04:	f006 fd2e 	bl	8008864 <rand>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <initializeObjects+0x2b4>)
 8001e0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e10:	4413      	add	r3, r2
 8001e12:	1119      	asrs	r1, r3, #4
 8001e14:	17d3      	asrs	r3, r2, #31
 8001e16:	1ac9      	subs	r1, r1, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1a5b      	subs	r3, r3, r1
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	1ad1      	subs	r1, r2, r3
 8001e22:	3103      	adds	r1, #3
 8001e24:	4850      	ldr	r0, [pc, #320]	; (8001f68 <initializeObjects+0x2c0>)
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4403      	add	r3, r0
 8001e32:	6019      	str	r1, [r3, #0]
		bullets[i].y = rand() % 2;       // Random number between 0 and 1
 8001e34:	f006 fd16 	bl	8008864 <rand>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	bfb8      	it	lt
 8001e42:	425b      	neglt	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	4848      	ldr	r0, [pc, #288]	; (8001f68 <initializeObjects+0x2c0>)
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4403      	add	r3, r0
 8001e54:	3304      	adds	r3, #4
 8001e56:	6019      	str	r1, [r3, #0]
		bullets[i].c = 5;
 8001e58:	4943      	ldr	r1, [pc, #268]	; (8001f68 <initializeObjects+0x2c0>)
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3308      	adds	r3, #8
 8001e68:	2205      	movs	r2, #5
 8001e6a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	ddc5      	ble.n	8001e04 <initializeObjects+0x15c>
	}
	//obstacles
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e036      	b.n	8001eec <initializeObjects+0x244>
		obstacles[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001e7e:	f006 fcf1 	bl	8008864 <rand>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <initializeObjects+0x2b4>)
 8001e86:	fb83 1302 	smull	r1, r3, r3, r2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	1119      	asrs	r1, r3, #4
 8001e8e:	17d3      	asrs	r3, r2, #31
 8001e90:	1ac9      	subs	r1, r1, r3
 8001e92:	460b      	mov	r3, r1
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	1ad1      	subs	r1, r2, r3
 8001e9c:	3103      	adds	r1, #3
 8001e9e:	4833      	ldr	r0, [pc, #204]	; (8001f6c <initializeObjects+0x2c4>)
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4403      	add	r3, r0
 8001eac:	6019      	str	r1, [r3, #0]
		obstacles[i].y = rand() % 2;       // Random number between 0 and 1
 8001eae:	f006 fcd9 	bl	8008864 <rand>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	bfb8      	it	lt
 8001ebc:	425b      	neglt	r3, r3
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	482a      	ldr	r0, [pc, #168]	; (8001f6c <initializeObjects+0x2c4>)
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4403      	add	r3, r0
 8001ece:	3304      	adds	r3, #4
 8001ed0:	6019      	str	r1, [r3, #0]
		obstacles[i].c = 4;
 8001ed2:	4926      	ldr	r1, [pc, #152]	; (8001f6c <initializeObjects+0x2c4>)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	ddc5      	ble.n	8001e7e <initializeObjects+0x1d6>
	}
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e024      	b.n	8001f42 <initializeObjects+0x29a>
		lcd[hearts[i].y][hearts[i].x] = hearts[i].c;
 8001ef8:	4919      	ldr	r1, [pc, #100]	; (8001f60 <initializeObjects+0x2b8>)
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3304      	adds	r3, #4
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	4915      	ldr	r1, [pc, #84]	; (8001f60 <initializeObjects+0x2b8>)
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	4c11      	ldr	r4, [pc, #68]	; (8001f60 <initializeObjects+0x2b8>)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4423      	add	r3, r4
 8001f28:	3308      	adds	r3, #8
 8001f2a:	781c      	ldrb	r4, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <initializeObjects+0x2b0>)
 8001f2e:	2326      	movs	r3, #38	; 0x26
 8001f30:	fb00 f303 	mul.w	r3, r0, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	4622      	mov	r2, r4
 8001f3a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	ddd7      	ble.n	8001ef8 <initializeObjects+0x250>
	}
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	e035      	b.n	8001fba <initializeObjects+0x312>
 8001f4e:	bf00      	nop
 8001f50:	20000c68 	.word	0x20000c68
 8001f54:	20000c78 	.word	0x20000c78
 8001f58:	20000d50 	.word	0x20000d50
 8001f5c:	92492493 	.word	0x92492493
 8001f60:	20000c90 	.word	0x20000c90
 8001f64:	20000cb4 	.word	0x20000cb4
 8001f68:	20000ccc 	.word	0x20000ccc
 8001f6c:	20000d08 	.word	0x20000d08
		lcd[bullets[i].y][bullets[i].x] = bullets[i].c;
 8001f70:	4956      	ldr	r1, [pc, #344]	; (80020cc <initializeObjects+0x424>)
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3304      	adds	r3, #4
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	4952      	ldr	r1, [pc, #328]	; (80020cc <initializeObjects+0x424>)
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	4c4e      	ldr	r4, [pc, #312]	; (80020cc <initializeObjects+0x424>)
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4423      	add	r3, r4
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	781c      	ldrb	r4, [r3, #0]
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <initializeObjects+0x428>)
 8001fa6:	2326      	movs	r3, #38	; 0x26
 8001fa8:	fb00 f303 	mul.w	r3, r0, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	ddd7      	ble.n	8001f70 <initializeObjects+0x2c8>
	}
	for (int i = 0; i < NUM_BOXES; i++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	e024      	b.n	8002010 <initializeObjects+0x368>
		lcd[boxes[i].y][boxes[i].x] = boxes[i].c;
 8001fc6:	4943      	ldr	r1, [pc, #268]	; (80020d4 <initializeObjects+0x42c>)
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	493e      	ldr	r1, [pc, #248]	; (80020d4 <initializeObjects+0x42c>)
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	4c3a      	ldr	r4, [pc, #232]	; (80020d4 <initializeObjects+0x42c>)
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4423      	add	r3, r4
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	781c      	ldrb	r4, [r3, #0]
 8001ffa:	4a35      	ldr	r2, [pc, #212]	; (80020d0 <initializeObjects+0x428>)
 8001ffc:	2326      	movs	r3, #38	; 0x26
 8001ffe:	fb00 f303 	mul.w	r3, r0, r3
 8002002:	4413      	add	r3, r2
 8002004:	440b      	add	r3, r1
 8002006:	4622      	mov	r2, r4
 8002008:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3301      	adds	r3, #1
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	ddd7      	ble.n	8001fc6 <initializeObjects+0x31e>
	}
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	e024      	b.n	8002066 <initializeObjects+0x3be>
		lcd[obstacles[i].y][obstacles[i].x] = obstacles[i].c;
 800201c:	492e      	ldr	r1, [pc, #184]	; (80020d8 <initializeObjects+0x430>)
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3304      	adds	r3, #4
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	492a      	ldr	r1, [pc, #168]	; (80020d8 <initializeObjects+0x430>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	4c26      	ldr	r4, [pc, #152]	; (80020d8 <initializeObjects+0x430>)
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4423      	add	r3, r4
 800204c:	3308      	adds	r3, #8
 800204e:	781c      	ldrb	r4, [r3, #0]
 8002050:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <initializeObjects+0x428>)
 8002052:	2326      	movs	r3, #38	; 0x26
 8002054:	fb00 f303 	mul.w	r3, r0, r3
 8002058:	4413      	add	r3, r2
 800205a:	440b      	add	r3, r1
 800205c:	4622      	mov	r2, r4
 800205e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b05      	cmp	r3, #5
 800206a:	ddd7      	ble.n	800201c <initializeObjects+0x374>
	}
	//WALLS
	lcd[1][1] = 3;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <initializeObjects+0x428>)
 800206e:	2203      	movs	r2, #3
 8002070:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	lcd[0][22] = 3;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <initializeObjects+0x428>)
 8002076:	2203      	movs	r2, #3
 8002078:	759a      	strb	r2, [r3, #22]
	lcd[1][18] = 3;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <initializeObjects+0x428>)
 800207c:	2203      	movs	r2, #3
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd[0][37] = 3;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <initializeObjects+0x428>)
 8002084:	2203      	movs	r2, #3
 8002086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//[0][38] [0][39] [1][38] [1][39]  are dead
	//Wolves
	lcd[playerR.x][playerR.y] = playerR.c;
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <initializeObjects+0x434>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <initializeObjects+0x434>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4912      	ldr	r1, [pc, #72]	; (80020dc <initializeObjects+0x434>)
 8002094:	7a4c      	ldrb	r4, [r1, #9]
 8002096:	490e      	ldr	r1, [pc, #56]	; (80020d0 <initializeObjects+0x428>)
 8002098:	2026      	movs	r0, #38	; 0x26
 800209a:	fb00 f202 	mul.w	r2, r0, r2
 800209e:	440a      	add	r2, r1
 80020a0:	4413      	add	r3, r2
 80020a2:	4622      	mov	r2, r4
 80020a4:	701a      	strb	r2, [r3, #0]
	lcd[playerL.x][playerL.y] = playerL.c;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <initializeObjects+0x438>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <initializeObjects+0x438>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	490c      	ldr	r1, [pc, #48]	; (80020e0 <initializeObjects+0x438>)
 80020b0:	7a4c      	ldrb	r4, [r1, #9]
 80020b2:	4907      	ldr	r1, [pc, #28]	; (80020d0 <initializeObjects+0x428>)
 80020b4:	2026      	movs	r0, #38	; 0x26
 80020b6:	fb00 f202 	mul.w	r2, r0, r2
 80020ba:	440a      	add	r2, r1
 80020bc:	4413      	add	r3, r2
 80020be:	4622      	mov	r2, r4
 80020c0:	701a      	strb	r2, [r3, #0]
	//lcd[1][0]=8;
	//lcd[1][19]=7;
}
 80020c2:	bf00      	nop
 80020c4:	372c      	adds	r7, #44	; 0x2c
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000ccc 	.word	0x20000ccc
 80020d0:	20000d50 	.word	0x20000d50
 80020d4:	20000cb4 	.word	0x20000cb4
 80020d8:	20000d08 	.word	0x20000d08
 80020dc:	20000c68 	.word	0x20000c68
 80020e0:	20000c78 	.word	0x20000c78

080020e4 <displayObjects>:

void displayObjects() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
	// Display the objects based on the screen array
	for (int i = 0; i < LCD_HEIGHT; i++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e01b      	b.n	8002128 <displayObjects+0x44>
		for (int j = 0; j < LCD_WIDTH; j++) {
 80020f0:	2300      	movs	r3, #0
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	e012      	b.n	800211c <displayObjects+0x38>
			setCursor(j, i);
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f7fe fb27 	bl	800074c <setCursor>
			write(lcd[i][j]);
 80020fe:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <displayObjects+0x54>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2126      	movs	r1, #38	; 0x26
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	441a      	add	r2, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fbc5 	bl	80008a0 <write>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b25      	cmp	r3, #37	; 0x25
 8002120:	dde9      	ble.n	80020f6 <displayObjects+0x12>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3301      	adds	r3, #1
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	dde0      	ble.n	80020f0 <displayObjects+0xc>
		}
	}
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000d50 	.word	0x20000d50

0800213c <showMain>:

//MENU PART
void showMain(void) {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8002140:	2100      	movs	r1, #0
 8002142:	2000      	movs	r0, #0
 8002144:	f7fe fb02 	bl	800074c <setCursor>
	print("1- Play");
 8002148:	480a      	ldr	r0, [pc, #40]	; (8002174 <showMain+0x38>)
 800214a:	f7fe fb47 	bl	80007dc <print>
	setCursor(0, 1);
 800214e:	2101      	movs	r1, #1
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe fafb 	bl	800074c <setCursor>
	print("2- About");
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <showMain+0x3c>)
 8002158:	f7fe fb40 	bl	80007dc <print>
	write(1);
 800215c:	2001      	movs	r0, #1
 800215e:	f7fe fb9f 	bl	80008a0 <write>
	setCursor(20, 0);
 8002162:	2100      	movs	r1, #0
 8002164:	2014      	movs	r0, #20
 8002166:	f7fe faf1 	bl	800074c <setCursor>
	print("3- Setting");
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <showMain+0x40>)
 800216c:	f7fe fb36 	bl	80007dc <print>
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	08009d90 	.word	0x08009d90
 8002178:	08009d98 	.word	0x08009d98
 800217c:	08009da4 	.word	0x08009da4

08002180 <showAbout>:

void showAbout(void) {
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8002184:	2100      	movs	r1, #0
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe fae0 	bl	800074c <setCursor>
	print("Kimiya & Atiye");
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <showAbout+0x18>)
 800218e:	f7fe fb25 	bl	80007dc <print>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	08009db0 	.word	0x08009db0

0800219c <showSetting>:

void showSetting(void) {
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80021a0:	2100      	movs	r1, #0
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7fe fad2 	bl	800074c <setCursor>
	print("Right vs Left");
 80021a8:	4809      	ldr	r0, [pc, #36]	; (80021d0 <showSetting+0x34>)
 80021aa:	f7fe fb17 	bl	80007dc <print>
	setCursor(0, 1);
 80021ae:	2101      	movs	r1, #1
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe facb 	bl	800074c <setCursor>
	print("0-Bullets");
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <showSetting+0x38>)
 80021b8:	f7fe fb10 	bl	80007dc <print>
	setCursor(20, 0);
 80021bc:	2100      	movs	r1, #0
 80021be:	2014      	movs	r0, #20
 80021c0:	f7fe fac4 	bl	800074c <setCursor>
	print("*-Health");
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <showSetting+0x3c>)
 80021c6:	f7fe fb09 	bl	80007dc <print>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	08009dc0 	.word	0x08009dc0
 80021d4:	08009dd0 	.word	0x08009dd0
 80021d8:	08009ddc 	.word	0x08009ddc

080021dc <bulletsSetting>:

void bulletsSetting(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 80021e2:	2101      	movs	r1, #1
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7fe fab1 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Bullets:%d", R_bullets);
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <bulletsSetting+0x5c>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4912      	ldr	r1, [pc, #72]	; (800223c <bulletsSetting+0x60>)
 80021f4:	4618      	mov	r0, r3
 80021f6:	f006 fb73 	bl	80088e0 <siprintf>
	print(RBStr);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe faec 	bl	80007dc <print>
	setCursor(20, 0);
 8002204:	2100      	movs	r1, #0
 8002206:	2014      	movs	r0, #20
 8002208:	f7fe faa0 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Bullets:%d", L_bullets);
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <bulletsSetting+0x64>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	463b      	mov	r3, r7
 8002212:	490c      	ldr	r1, [pc, #48]	; (8002244 <bulletsSetting+0x68>)
 8002214:	4618      	mov	r0, r3
 8002216:	f006 fb63 	bl	80088e0 <siprintf>
	print(LBStr);
 800221a:	463b      	mov	r3, r7
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fadd 	bl	80007dc <print>
	setCursor(20, 1);
 8002222:	2101      	movs	r1, #1
 8002224:	2014      	movs	r0, #20
 8002226:	f7fe fa91 	bl	800074c <setCursor>

	print("#-Confirm");
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <bulletsSetting+0x6c>)
 800222c:	f7fe fad6 	bl	80007dc <print>
}
 8002230:	bf00      	nop
 8002232:	3728      	adds	r7, #40	; 0x28
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000000c 	.word	0x2000000c
 800223c:	08009de8 	.word	0x08009de8
 8002240:	20000010 	.word	0x20000010
 8002244:	08009dfc 	.word	0x08009dfc
 8002248:	08009e0c 	.word	0x08009e0c

0800224c <HealthSetting>:

void HealthSetting(void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 8002252:	2101      	movs	r1, #1
 8002254:	2000      	movs	r0, #0
 8002256:	f7fe fa79 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Health:%d", R_Health);
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HealthSetting+0x5c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4912      	ldr	r1, [pc, #72]	; (80022ac <HealthSetting+0x60>)
 8002264:	4618      	mov	r0, r3
 8002266:	f006 fb3b 	bl	80088e0 <siprintf>
	print(RBStr);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fab4 	bl	80007dc <print>
	setCursor(20, 0);
 8002274:	2100      	movs	r1, #0
 8002276:	2014      	movs	r0, #20
 8002278:	f7fe fa68 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Health:%d", L_Health);
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HealthSetting+0x64>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	463b      	mov	r3, r7
 8002282:	490c      	ldr	r1, [pc, #48]	; (80022b4 <HealthSetting+0x68>)
 8002284:	4618      	mov	r0, r3
 8002286:	f006 fb2b 	bl	80088e0 <siprintf>
	print(LBStr);
 800228a:	463b      	mov	r3, r7
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe faa5 	bl	80007dc <print>
	setCursor(20, 1);
 8002292:	2101      	movs	r1, #1
 8002294:	2014      	movs	r0, #20
 8002296:	f7fe fa59 	bl	800074c <setCursor>

	print("#-Confirm");
 800229a:	4807      	ldr	r0, [pc, #28]	; (80022b8 <HealthSetting+0x6c>)
 800229c:	f7fe fa9e 	bl	80007dc <print>
}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000004 	.word	0x20000004
 80022ac:	08009e18 	.word	0x08009e18
 80022b0:	20000008 	.word	0x20000008
 80022b4:	08009e28 	.word	0x08009e28
 80022b8:	08009e0c 	.word	0x08009e0c

080022bc <spawnRandomObject>:
//		pwm_timer->Instance->EGR = TIM_EGR_UG;
//		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
//	}
//}

void spawnRandomObject() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0

	int x, y;
	do {
		x = rand() % LCD_WIDTH;
 80022c2:	f006 facf 	bl	8008864 <rand>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <spawnRandomObject+0xcc>)
 80022ca:	fb82 1203 	smull	r1, r2, r2, r3
 80022ce:	1111      	asrs	r1, r2, #4
 80022d0:	17da      	asrs	r2, r3, #31
 80022d2:	1a8a      	subs	r2, r1, r2
 80022d4:	2126      	movs	r1, #38	; 0x26
 80022d6:	fb01 f202 	mul.w	r2, r1, r2
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	607b      	str	r3, [r7, #4]
		y = rand() % LCD_HEIGHT;
 80022de:	f006 fac1 	bl	8008864 <rand>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	bfb8      	it	lt
 80022ec:	425b      	neglt	r3, r3
 80022ee:	603b      	str	r3, [r7, #0]
	} while (lcd[y][x] != ' ');
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <spawnRandomObject+0xd0>)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2126      	movs	r1, #38	; 0x26
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	441a      	add	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b20      	cmp	r3, #32
 8002304:	d1dd      	bne.n	80022c2 <spawnRandomObject+0x6>

	if (rand() % 2 == 0) {
 8002306:	f006 faad 	bl	8008864 <rand>
 800230a:	4603      	mov	r3, r0
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <spawnRandomObject+0x6e>

		lcd[y][x] = 1; //heart
 8002314:	4a1d      	ldr	r2, [pc, #116]	; (800238c <spawnRandomObject+0xd0>)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2126      	movs	r1, #38	; 0x26
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	441a      	add	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e009      	b.n	800233e <spawnRandomObject+0x82>
	} else {

		lcd[y][x] = 5; //bullets
 800232a:	4a18      	ldr	r2, [pc, #96]	; (800238c <spawnRandomObject+0xd0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2126      	movs	r1, #38	; 0x26
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	2205      	movs	r2, #5
 800233c:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1, lcd[y][x], 1,
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <spawnRandomObject+0xd0>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2126      	movs	r1, #38	; 0x26
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	441a      	add	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	2201      	movs	r2, #1
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <spawnRandomObject+0xd4>)
 800235a:	f005 fa23 	bl	80077a4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	setCursor(x, y);
 800235e:	6839      	ldr	r1, [r7, #0]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7fe f9f3 	bl	800074c <setCursor>
	write(lcd[y][x]);
 8002366:	4a09      	ldr	r2, [pc, #36]	; (800238c <spawnRandomObject+0xd0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2126      	movs	r1, #38	; 0x26
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fa91 	bl	80008a0 <write>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	6bca1af3 	.word	0x6bca1af3
 800238c:	20000d50 	.word	0x20000d50
 8002390:	200002a4 	.word	0x200002a4

08002394 <HAL_TIM_PeriodElapsedCallback>:

//CALL BACKS-----------------------------------------------------------------

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d111      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x36>
		if (screen == 1) {
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10d      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x36>
			spawner++;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023b6:	6013      	str	r3, [r2, #0]
			if (spawner >= 30) {
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b1d      	cmp	r3, #29
 80023be:	dd04      	ble.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x36>
				spawnRandomObject();
 80023c0:	f7ff ff7c 	bl	80022bc <spawnRandomObject>
				spawner = 0;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	20000618 	.word	0x20000618
 80023dc:	20000620 	.word	0x20000620

080023e0 <setScore>:
//  }
//}

//SETTERS -----------------------------------------------------------------

void setScore(int score) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b090      	sub	sp, #64	; 0x40
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "\nScore: %d", score);
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	490b      	ldr	r1, [pc, #44]	; (800241c <setScore+0x3c>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f006 fa75 	bl	80088e0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fd fee8 	bl	80001d0 <strlen>
 8002400:	4603      	mov	r3, r0
 8002402:	b29a      	uxth	r2, r3
 8002404:	f107 010c 	add.w	r1, r7, #12
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	4804      	ldr	r0, [pc, #16]	; (8002420 <setScore+0x40>)
 800240e:	f005 f9c9 	bl	80077a4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8002412:	bf00      	nop
 8002414:	3740      	adds	r7, #64	; 0x40
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	08009e38 	.word	0x08009e38
 8002420:	200002a4 	.word	0x200002a4

08002424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b09b      	sub	sp, #108	; 0x6c
 8002428:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800242a:	f001 f92d 	bl	8003688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242e:	f000 f973 	bl	8002718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002432:	f000 fbb3 	bl	8002b9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002436:	f000 f9d9 	bl	80027ec <MX_I2C1_Init>
  MX_SPI1_Init();
 800243a:	f000 fa71 	bl	8002920 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800243e:	f000 fb8b 	bl	8002b58 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8002442:	f000 fb59 	bl	8002af8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002446:	f000 fa11 	bl	800286c <MX_RTC_Init>
  MX_TIM1_Init();
 800244a:	f000 faa7 	bl	800299c <MX_TIM1_Init>
  MX_TIM2_Init();
 800244e:	f000 faf9 	bl	8002a44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002458:	4895      	ldr	r0, [pc, #596]	; (80026b0 <main+0x28c>)
 800245a:	f001 fcb9 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800245e:	2201      	movs	r2, #1
 8002460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002464:	4892      	ldr	r0, [pc, #584]	; (80026b0 <main+0x28c>)
 8002466:	f001 fcb3 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002470:	488f      	ldr	r0, [pc, #572]	; (80026b0 <main+0x28c>)
 8002472:	f001 fcad 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002476:	2201      	movs	r2, #1
 8002478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800247c:	488c      	ldr	r0, [pc, #560]	; (80026b0 <main+0x28c>)
 800247e:	f001 fca7 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, "yo", 2,
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	2202      	movs	r2, #2
 8002488:	498a      	ldr	r1, [pc, #552]	; (80026b4 <main+0x290>)
 800248a:	488b      	ldr	r0, [pc, #556]	; (80026b8 <main+0x294>)
 800248c:	f005 f98a 	bl	80077a4 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	srand(time(NULL));  // Initialize the random number generator
 8002490:	2000      	movs	r0, #0
 8002492:	f006 fa45 	bl	8008920 <time>
 8002496:	4603      	mov	r3, r0
 8002498:	4618      	mov	r0, r3
 800249a:	f006 f9b5 	bl	8008808 <srand>

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
 800249e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024a2:	9303      	str	r3, [sp, #12]
 80024a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c2:	487e      	ldr	r0, [pc, #504]	; (80026bc <main+0x298>)
 80024c4:	f7fd fedc 	bl	8000280 <LiquidCrystal>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	byte *foxStates[4] = { leftFox, rightFox, topFox, bottomFox };
 80024c8:	4b7d      	ldr	r3, [pc, #500]	; (80026c0 <main+0x29c>)
 80024ca:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80024ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	createChar(2, MisteryBox);
 80024d4:	497b      	ldr	r1, [pc, #492]	; (80026c4 <main+0x2a0>)
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7fe f9ab 	bl	8000832 <createChar>
	createChar(3, wall);
 80024dc:	497a      	ldr	r1, [pc, #488]	; (80026c8 <main+0x2a4>)
 80024de:	2003      	movs	r0, #3
 80024e0:	f7fe f9a7 	bl	8000832 <createChar>
	createChar(4, obstacle);
 80024e4:	4979      	ldr	r1, [pc, #484]	; (80026cc <main+0x2a8>)
 80024e6:	2004      	movs	r0, #4
 80024e8:	f7fe f9a3 	bl	8000832 <createChar>
	createChar(1, heart);
 80024ec:	4978      	ldr	r1, [pc, #480]	; (80026d0 <main+0x2ac>)
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7fe f99f 	bl	8000832 <createChar>
	createChar(5, bullet);
 80024f4:	4977      	ldr	r1, [pc, #476]	; (80026d4 <main+0x2b0>)
 80024f6:	2005      	movs	r0, #5
 80024f8:	f7fe f99b 	bl	8000832 <createChar>
	createChar(6, Shot);
 80024fc:	4976      	ldr	r1, [pc, #472]	; (80026d8 <main+0x2b4>)
 80024fe:	2006      	movs	r0, #6
 8002500:	f7fe f997 	bl	8000832 <createChar>
	RTC_TimeTypeDef mytime;
	RTC_DateTypeDef mydate;
	mydate.Year = 02;
 8002504:	2302      	movs	r3, #2
 8002506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	mydate.Month = 11;
 800250a:	230b      	movs	r3, #11
 800250c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mydate.Date = 17;
 8002510:	2311      	movs	r3, #17
 8002512:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8002516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251a:	2200      	movs	r2, #0
 800251c:	4619      	mov	r1, r3
 800251e:	486f      	ldr	r0, [pc, #444]	; (80026dc <main+0x2b8>)
 8002520:	f003 fc1d 	bl	8005d5e <HAL_RTC_SetDate>
	//HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
	char timeStr[20];
	char dateStr[20];
	showMain();
 8002524:	f7ff fe0a 	bl	800213c <showMain>
	call_change_melody();
 8002528:	f000 fec6 	bl	80032b8 <call_change_melody>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (screen ==1) {
 800252c:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <main+0x2bc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <main+0x114>
			PWM_Stop();
 8002534:	f000 fdf2 	bl	800311c <PWM_Stop>
		}

		if (shootFlag == 1) {
 8002538:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <main+0x2c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <main+0x120>
			shotPosition();
 8002540:	f7fe fea8 	bl	8001294 <shotPosition>
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (R_Health == 0) {
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <main+0x2c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d125      	bne.n	8002598 <main+0x174>
			refreshAll();
 800254c:	f7fe fd5e 	bl	800100c <refreshAll>
			HAL_UART_Transmit(&huart1, "Right WON!", 10,
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	220a      	movs	r2, #10
 8002556:	4965      	ldr	r1, [pc, #404]	; (80026ec <main+0x2c8>)
 8002558:	4857      	ldr	r0, [pc, #348]	; (80026b8 <main+0x294>)
 800255a:	f005 f923 	bl	80077a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			setScore(playerL.score);
 800255e:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <main+0x2cc>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff3c 	bl	80023e0 <setScore>
			screen = -1;
 8002568:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <main+0x2bc>)
 800256a:	f04f 32ff 	mov.w	r2, #4294967295
 800256e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 19; i++) {
 8002570:	2300      	movs	r3, #0
 8002572:	657b      	str	r3, [r7, #84]	; 0x54
 8002574:	e00d      	b.n	8002592 <main+0x16e>
				setCursor(i, 1);
 8002576:	2101      	movs	r1, #1
 8002578:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800257a:	f7fe f8e7 	bl	800074c <setCursor>
				write(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f7fe f98e 	bl	80008a0 <write>
				HAL_Delay(400);
 8002584:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002588:	f001 f8e4 	bl	8003754 <HAL_Delay>
			for (int i = 0; i < 19; i++) {
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	3301      	adds	r3, #1
 8002590:	657b      	str	r3, [r7, #84]	; 0x54
 8002592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002594:	2b12      	cmp	r3, #18
 8002596:	ddee      	ble.n	8002576 <main+0x152>
			}
		}

		if (L_Health == 0) {
 8002598:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <main+0x2d0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d125      	bne.n	80025ec <main+0x1c8>
			refreshAll();
 80025a0:	f7fe fd34 	bl	800100c <refreshAll>
			HAL_UART_Transmit(&huart1, "LEFT WON!", 9,
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
 80025a8:	2209      	movs	r2, #9
 80025aa:	4953      	ldr	r1, [pc, #332]	; (80026f8 <main+0x2d4>)
 80025ac:	4842      	ldr	r0, [pc, #264]	; (80026b8 <main+0x294>)
 80025ae:	f005 f8f9 	bl	80077a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			setScore(playerR.score);
 80025b2:	4b52      	ldr	r3, [pc, #328]	; (80026fc <main+0x2d8>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff12 	bl	80023e0 <setScore>
			screen = -1;
 80025bc:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <main+0x2bc>)
 80025be:	f04f 32ff 	mov.w	r2, #4294967295
 80025c2:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 19; i++) {
 80025c4:	2300      	movs	r3, #0
 80025c6:	653b      	str	r3, [r7, #80]	; 0x50
 80025c8:	e00d      	b.n	80025e6 <main+0x1c2>
				setCursor(i, 1);
 80025ca:	2101      	movs	r1, #1
 80025cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025ce:	f7fe f8bd 	bl	800074c <setCursor>
				write(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7fe f964 	bl	80008a0 <write>
				HAL_Delay(400);
 80025d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80025dc:	f001 f8ba 	bl	8003754 <HAL_Delay>
			for (int i = 0; i < 19; i++) {
 80025e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e2:	3301      	adds	r3, #1
 80025e4:	653b      	str	r3, [r7, #80]	; 0x50
 80025e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	ddee      	ble.n	80025ca <main+0x1a6>
			}
		}
		if (screen == -1) {
 80025ec:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <main+0x2bc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d106      	bne.n	8002604 <main+0x1e0>
			setCursor(7, 1);
 80025f6:	2101      	movs	r1, #1
 80025f8:	2007      	movs	r0, #7
 80025fa:	f7fe f8a7 	bl	800074c <setCursor>
			print("THE END");
 80025fe:	4840      	ldr	r0, [pc, #256]	; (8002700 <main+0x2dc>)
 8002600:	f7fe f8ec 	bl	80007dc <print>
		}
		if (screen == 2) {
 8002604:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <main+0x2bc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d13b      	bne.n	8002684 <main+0x260>
//			if (timeFlag) {
//				setRtcTime();
//				timeFlag = 0;
//			}
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	2200      	movs	r2, #0
 8002612:	4619      	mov	r1, r3
 8002614:	4831      	ldr	r0, [pc, #196]	; (80026dc <main+0x2b8>)
 8002616:	f003 fb44 	bl	8005ca2 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 800261a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261e:	2200      	movs	r2, #0
 8002620:	4619      	mov	r1, r3
 8002622:	482e      	ldr	r0, [pc, #184]	; (80026dc <main+0x2b8>)
 8002624:	f003 fc1f 	bl	8005e66 <HAL_RTC_GetDate>
			setCursor(20, 0);
 8002628:	2100      	movs	r1, #0
 800262a:	2014      	movs	r0, #20
 800262c:	f7fe f88e 	bl	800074c <setCursor>
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8002630:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002634:	461a      	mov	r2, r3
 8002636:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800263a:	4619      	mov	r1, r3
					mytime.Seconds);
 800263c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8002640:	f107 0014 	add.w	r0, r7, #20
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	460b      	mov	r3, r1
 8002648:	492e      	ldr	r1, [pc, #184]	; (8002704 <main+0x2e0>)
 800264a:	f006 f949 	bl	80088e0 <siprintf>

			print(timeStr);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe f8c2 	bl	80007dc <print>
			setCursor(20, 1);
 8002658:	2101      	movs	r1, #1
 800265a:	2014      	movs	r0, #20
 800265c:	f7fe f876 	bl	800074c <setCursor>
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8002660:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002664:	461a      	mov	r2, r3
 8002666:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800266a:	4619      	mov	r1, r3
					mydate.Date);
 800266c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8002670:	4638      	mov	r0, r7
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	460b      	mov	r3, r1
 8002676:	4924      	ldr	r1, [pc, #144]	; (8002708 <main+0x2e4>)
 8002678:	f006 f932 	bl	80088e0 <siprintf>

			print(dateStr);
 800267c:	463b      	mov	r3, r7
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe f8ac 	bl	80007dc <print>

		}

		if (screen == 3) {
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <main+0x2bc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b03      	cmp	r3, #3
 800268a:	f47f af4f 	bne.w	800252c <main+0x108>
			setCursor(20, 1);
 800268e:	2101      	movs	r1, #1
 8002690:	2014      	movs	r0, #20
 8002692:	f7fe f85b 	bl	800074c <setCursor>
			if (vfx) {
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <main+0x2e8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <main+0x282>
				print("vfx on-# to turn off");
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <main+0x2ec>)
 80026a0:	f7fe f89c 	bl	80007dc <print>
 80026a4:	e742      	b.n	800252c <main+0x108>
			} else {
				print("vfx off-# to turn on ");
 80026a6:	481b      	ldr	r0, [pc, #108]	; (8002714 <main+0x2f0>)
 80026a8:	f7fe f898 	bl	80007dc <print>
		if (screen ==1) {
 80026ac:	e73e      	b.n	800252c <main+0x108>
 80026ae:	bf00      	nop
 80026b0:	48000400 	.word	0x48000400
 80026b4:	08009e44 	.word	0x08009e44
 80026b8:	200002a4 	.word	0x200002a4
 80026bc:	48000c00 	.word	0x48000c00
 80026c0:	08009eb4 	.word	0x08009eb4
 80026c4:	20000028 	.word	0x20000028
 80026c8:	20000030 	.word	0x20000030
 80026cc:	20000038 	.word	0x20000038
 80026d0:	20000020 	.word	0x20000020
 80026d4:	20000018 	.word	0x20000018
 80026d8:	20000060 	.word	0x20000060
 80026dc:	20000188 	.word	0x20000188
 80026e0:	20000618 	.word	0x20000618
 80026e4:	2000061c 	.word	0x2000061c
 80026e8:	20000004 	.word	0x20000004
 80026ec:	08009e48 	.word	0x08009e48
 80026f0:	20000c78 	.word	0x20000c78
 80026f4:	20000008 	.word	0x20000008
 80026f8:	08009e54 	.word	0x08009e54
 80026fc:	20000c68 	.word	0x20000c68
 8002700:	08009e60 	.word	0x08009e60
 8002704:	08009e68 	.word	0x08009e68
 8002708:	08009e74 	.word	0x08009e74
 800270c:	20000014 	.word	0x20000014
 8002710:	08009e84 	.word	0x08009e84
 8002714:	08009e9c 	.word	0x08009e9c

08002718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b09e      	sub	sp, #120	; 0x78
 800271c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800271e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002722:	2228      	movs	r2, #40	; 0x28
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f006 f866 	bl	80087f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800272c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800273c:	463b      	mov	r3, r7
 800273e:	223c      	movs	r2, #60	; 0x3c
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f006 f858 	bl	80087f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002748:	230b      	movs	r3, #11
 800274a:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800274c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002750:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002752:	2300      	movs	r3, #0
 8002754:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002756:	2301      	movs	r3, #1
 8002758:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800275a:	2310      	movs	r3, #16
 800275c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800275e:	2301      	movs	r3, #1
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002762:	2302      	movs	r3, #2
 8002764:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800276c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002770:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002772:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fd52 	bl	8004220 <HAL_RCC_OscConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002782:	f000 fac5 	bl	8002d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002786:	230f      	movs	r3, #15
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278a:	2302      	movs	r3, #2
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002798:	2300      	movs	r3, #0
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800279c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fd7a 	bl	800529c <HAL_RCC_ClockConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80027ae:	f000 faaf 	bl	8002d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <SystemClock_Config+0xd0>)
 80027b4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80027c4:	2300      	movs	r3, #0
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 ff9a 	bl	8005708 <HAL_RCCEx_PeriphCLKConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027da:	f000 fa99 	bl	8002d10 <Error_Handler>
  }
}
 80027de:	bf00      	nop
 80027e0:	3778      	adds	r7, #120	; 0x78
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	00031021 	.word	0x00031021

080027ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_I2C1_Init+0x74>)
 80027f2:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <MX_I2C1_Init+0x78>)
 80027f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_I2C1_Init+0x74>)
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <MX_I2C1_Init+0x7c>)
 80027fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_I2C1_Init+0x74>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <MX_I2C1_Init+0x74>)
 8002804:	2201      	movs	r2, #1
 8002806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_I2C1_Init+0x74>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_I2C1_Init+0x74>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_I2C1_Init+0x74>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_I2C1_Init+0x74>)
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_I2C1_Init+0x74>)
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002826:	480e      	ldr	r0, [pc, #56]	; (8002860 <MX_I2C1_Init+0x74>)
 8002828:	f001 fb02 	bl	8003e30 <HAL_I2C_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002832:	f000 fa6d 	bl	8002d10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002836:	2100      	movs	r1, #0
 8002838:	4809      	ldr	r0, [pc, #36]	; (8002860 <MX_I2C1_Init+0x74>)
 800283a:	f001 fb88 	bl	8003f4e <HAL_I2CEx_ConfigAnalogFilter>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002844:	f000 fa64 	bl	8002d10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002848:	2100      	movs	r1, #0
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_I2C1_Init+0x74>)
 800284c:	f001 fbca 	bl	8003fe4 <HAL_I2CEx_ConfigDigitalFilter>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002856:	f000 fa5b 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000134 	.word	0x20000134
 8002864:	40005400 	.word	0x40005400
 8002868:	2000090e 	.word	0x2000090e

0800286c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002880:	2300      	movs	r3, #0
 8002882:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <MX_RTC_Init+0xac>)
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <MX_RTC_Init+0xb0>)
 8002888:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <MX_RTC_Init+0xac>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <MX_RTC_Init+0xac>)
 8002892:	2227      	movs	r2, #39	; 0x27
 8002894:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <MX_RTC_Init+0xac>)
 8002898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800289c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <MX_RTC_Init+0xac>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028a4:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <MX_RTC_Init+0xac>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <MX_RTC_Init+0xac>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028b0:	4819      	ldr	r0, [pc, #100]	; (8002918 <MX_RTC_Init+0xac>)
 80028b2:	f003 f8d9 	bl	8005a68 <HAL_RTC_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80028bc:	f000 fa28 	bl	8002d10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2201      	movs	r2, #1
 80028d8:	4619      	mov	r1, r3
 80028da:	480f      	ldr	r0, [pc, #60]	; (8002918 <MX_RTC_Init+0xac>)
 80028dc:	f003 f947 	bl	8005b6e <HAL_RTC_SetTime>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80028e6:	f000 fa13 	bl	8002d10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80028ea:	2301      	movs	r3, #1
 80028ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80028ee:	2301      	movs	r3, #1
 80028f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80028fa:	463b      	mov	r3, r7
 80028fc:	2201      	movs	r2, #1
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_RTC_Init+0xac>)
 8002902:	f003 fa2c 	bl	8005d5e <HAL_RTC_SetDate>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 800290c:	f000 fa00 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000188 	.word	0x20000188
 800291c:	40002800 	.word	0x40002800

08002920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <MX_SPI1_Init+0x74>)
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <MX_SPI1_Init+0x78>)
 8002928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <MX_SPI1_Init+0x74>)
 800292c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <MX_SPI1_Init+0x74>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <MX_SPI1_Init+0x74>)
 800293a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800293e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MX_SPI1_Init+0x74>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <MX_SPI1_Init+0x74>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_SPI1_Init+0x74>)
 800294e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002952:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <MX_SPI1_Init+0x74>)
 8002956:	2208      	movs	r2, #8
 8002958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_SPI1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_SPI1_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_SPI1_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_SPI1_Init+0x74>)
 800296e:	2207      	movs	r2, #7
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_SPI1_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_SPI1_Init+0x74>)
 800297a:	2208      	movs	r2, #8
 800297c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_SPI1_Init+0x74>)
 8002980:	f003 fb7e 	bl	8006080 <HAL_SPI_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800298a:	f000 f9c1 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200001a8 	.word	0x200001a8
 8002998:	40013000 	.word	0x40013000

0800299c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029bc:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <MX_TIM1_Init+0xa4>)
 80029be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 80029c0:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029c2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80029c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80029d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029e8:	4814      	ldr	r0, [pc, #80]	; (8002a3c <MX_TIM1_Init+0xa0>)
 80029ea:	f003 fbf4 	bl	80061d6 <HAL_TIM_Base_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80029f4:	f000 f98c 	bl	8002d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	4619      	mov	r1, r3
 8002a04:	480d      	ldr	r0, [pc, #52]	; (8002a3c <MX_TIM1_Init+0xa0>)
 8002a06:	f004 f8c9 	bl	8006b9c <HAL_TIM_ConfigClockSource>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002a10:	f000 f97e 	bl	8002d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_TIM1_Init+0xa0>)
 8002a26:	f004 fdd1 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a30:	f000 f96e 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000020c 	.word	0x2000020c
 8002a40:	40012c00 	.word	0x40012c00

08002a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a56:	463b      	mov	r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
 8002a64:	615a      	str	r2, [r3, #20]
 8002a66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a90:	4818      	ldr	r0, [pc, #96]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002a92:	f003 fc61 	bl	8006358 <HAL_TIM_PWM_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002a9c:	f000 f938 	bl	8002d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	4811      	ldr	r0, [pc, #68]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002ab0:	f004 fd8c 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002aba:	f000 f929 	bl	8002d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abe:	2360      	movs	r3, #96	; 0x60
 8002ac0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ace:	463b      	mov	r3, r7
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4807      	ldr	r0, [pc, #28]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002ad6:	f003 ff4d 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002ae0:	f000 f916 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <MX_TIM2_Init+0xb0>)
 8002ae6:	f000 fa45 	bl	8002f74 <HAL_TIM_MspPostInit>

}
 8002aea:	bf00      	nop
 8002aec:	3728      	adds	r7, #40	; 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000258 	.word	0x20000258

08002af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <MX_USART1_UART_Init+0x5c>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_USART1_UART_Init+0x58>)
 8002b3c:	f004 fde4 	bl	8007708 <HAL_UART_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b46:	f000 f8e3 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200002a4 	.word	0x200002a4
 8002b54:	40013800 	.word	0x40013800

08002b58 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <MX_USB_PCD_Init+0x3c>)
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <MX_USB_PCD_Init+0x40>)
 8002b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_USB_PCD_Init+0x3c>)
 8002b64:	2208      	movs	r2, #8
 8002b66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <MX_USB_PCD_Init+0x3c>)
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <MX_USB_PCD_Init+0x3c>)
 8002b70:	2202      	movs	r2, #2
 8002b72:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <MX_USB_PCD_Init+0x3c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_USB_PCD_Init+0x3c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002b80:	4804      	ldr	r0, [pc, #16]	; (8002b94 <MX_USB_PCD_Init+0x3c>)
 8002b82:	f001 fa7b 	bl	800407c <HAL_PCD_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002b8c:	f000 f8c0 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000032c 	.word	0x2000032c
 8002b98:	40005c00 	.word	0x40005c00

08002b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	60da      	str	r2, [r3, #12]
 8002bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bb2:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bbc:	6153      	str	r3, [r2, #20]
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bd4:	6153      	str	r3, [r2, #20]
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4a46      	ldr	r2, [pc, #280]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bec:	6153      	str	r3, [r2, #20]
 8002bee:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c04:	6153      	str	r3, [r2, #20]
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6153      	str	r3, [r2, #20]
 8002c1e:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2a:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	4a34      	ldr	r2, [pc, #208]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c34:	6153      	str	r3, [r2, #20]
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <MX_GPIO_Init+0x164>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002c42:	2200      	movs	r2, #0
 8002c44:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002c48:	482e      	ldr	r0, [pc, #184]	; (8002d04 <MX_GPIO_Init+0x168>)
 8002c4a:	f001 f8c1 	bl	8003dd0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8002c54:	482c      	ldr	r0, [pc, #176]	; (8002d08 <MX_GPIO_Init+0x16c>)
 8002c56:	f001 f8bb 	bl	8003dd0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8002c5a:	2337      	movs	r3, #55	; 0x37
 8002c5c:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4825      	ldr	r0, [pc, #148]	; (8002d04 <MX_GPIO_Init+0x168>)
 8002c70:	f000 ff1c 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002c74:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002c78:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c86:	f107 031c 	add.w	r3, r7, #28
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	481d      	ldr	r0, [pc, #116]	; (8002d04 <MX_GPIO_Init+0x168>)
 8002c8e:	f000 ff0d 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca8:	f000 ff00 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4812      	ldr	r0, [pc, #72]	; (8002d0c <MX_GPIO_Init+0x170>)
 8002cc4:	f000 fef2 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD0
                           PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002cc8:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8002ccc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4809      	ldr	r0, [pc, #36]	; (8002d08 <MX_GPIO_Init+0x16c>)
 8002ce2:	f000 fee3 	bl	8003aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2028      	movs	r0, #40	; 0x28
 8002cec:	f000 fe31 	bl	8003952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cf0:	2028      	movs	r0, #40	; 0x28
 8002cf2:	f000 fe4a 	bl	800398a <HAL_NVIC_EnableIRQ>

}
 8002cf6:	bf00      	nop
 8002cf8:	3730      	adds	r7, #48	; 0x30
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	48001000 	.word	0x48001000
 8002d08:	48000c00 	.word	0x48000c00
 8002d0c:	48000400 	.word	0x48000400

08002d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d14:	b672      	cpsid	i
}
 8002d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d18:	e7fe      	b.n	8002d18 <Error_Handler+0x8>
	...

08002d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_MspInit+0x44>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <HAL_MspInit+0x44>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6193      	str	r3, [r2, #24]
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_MspInit+0x44>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_MspInit+0x44>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <HAL_MspInit+0x44>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_MspInit+0x44>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002d52:	2006      	movs	r0, #6
 8002d54:	f000 fdf2 	bl	800393c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_I2C_MspInit+0x7c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d127      	bne.n	8002dd6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_I2C_MspInit+0x80>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <HAL_I2C_MspInit+0x80>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6153      	str	r3, [r2, #20]
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <HAL_I2C_MspInit+0x80>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002d9e:	23c0      	movs	r3, #192	; 0xc0
 8002da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da2:	2312      	movs	r3, #18
 8002da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dae:	2304      	movs	r3, #4
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <HAL_I2C_MspInit+0x84>)
 8002dba:	f000 fe77 	bl	8003aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_I2C_MspInit+0x80>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_I2C_MspInit+0x80>)
 8002dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_I2C_MspInit+0x80>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dd6:	bf00      	nop
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40005400 	.word	0x40005400
 8002de4:	40021000 	.word	0x40021000
 8002de8:	48000400 	.word	0x48000400

08002dec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <HAL_RTC_MspInit+0x44>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d111      	bne.n	8002e22 <HAL_RTC_MspInit+0x36>
 8002dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e02:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_RTC_MspInit+0x48>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2301      	movs	r3, #1
 8002e20:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40002800 	.word	0x40002800
 8002e34:	10908100 	.word	0x10908100

08002e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_SPI_MspInit+0x7c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d128      	bne.n	8002eac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_SPI_MspInit+0x80>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4a16      	ldr	r2, [pc, #88]	; (8002eb8 <HAL_SPI_MspInit+0x80>)
 8002e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e64:	6193      	str	r3, [r2, #24]
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_SPI_MspInit+0x80>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_SPI_MspInit+0x80>)
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <HAL_SPI_MspInit+0x80>)
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7c:	6153      	str	r3, [r2, #20]
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_SPI_MspInit+0x80>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002e8a:	23e0      	movs	r3, #224	; 0xe0
 8002e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea8:	f000 fe00 	bl	8003aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002eac:	bf00      	nop
 8002eae:	3728      	adds	r7, #40	; 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013000 	.word	0x40013000
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_TIM_Base_MspInit+0x74>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d12b      	bne.n	8002f26 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_TIM_Base_MspInit+0x78>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <HAL_TIM_Base_MspInit+0x78>)
 8002ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ed8:	6193      	str	r3, [r2, #24]
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_TIM_Base_MspInit+0x78>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2018      	movs	r0, #24
 8002eec:	f000 fd31 	bl	8003952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ef0:	2018      	movs	r0, #24
 8002ef2:	f000 fd4a 	bl	800398a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2019      	movs	r0, #25
 8002efc:	f000 fd29 	bl	8003952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002f00:	2019      	movs	r0, #25
 8002f02:	f000 fd42 	bl	800398a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	201a      	movs	r0, #26
 8002f0c:	f000 fd21 	bl	8003952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002f10:	201a      	movs	r0, #26
 8002f12:	f000 fd3a 	bl	800398a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	201b      	movs	r0, #27
 8002f1c:	f000 fd19 	bl	8003952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002f20:	201b      	movs	r0, #27
 8002f22:	f000 fd32 	bl	800398a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f48:	d10b      	bne.n	8002f62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_TIM_PWM_MspInit+0x38>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_TIM_PWM_MspInit+0x38>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	61d3      	str	r3, [r2, #28]
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_TIM_PWM_MspInit+0x38>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d11c      	bne.n	8002fd0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_TIM_MspPostInit+0x64>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_TIM_MspPostInit+0x64>)
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa0:	6153      	str	r3, [r2, #20]
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_TIM_MspPostInit+0x64>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fcc:	f000 fd6e 	bl	8003aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fd0:	bf00      	nop
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000

08002fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	; 0x28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_UART_MspInit+0x8c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d12f      	bne.n	800305e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_UART_MspInit+0x90>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_UART_MspInit+0x90>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	6193      	str	r3, [r2, #24]
 800300a:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_UART_MspInit+0x90>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_UART_MspInit+0x90>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_UART_MspInit+0x90>)
 800301c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003020:	6153      	str	r3, [r2, #20]
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_UART_MspInit+0x90>)
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800302e:	2330      	movs	r3, #48	; 0x30
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800303e:	2307      	movs	r3, #7
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	4619      	mov	r1, r3
 8003048:	4809      	ldr	r0, [pc, #36]	; (8003070 <HAL_UART_MspInit+0x94>)
 800304a:	f000 fd2f 	bl	8003aac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	2025      	movs	r0, #37	; 0x25
 8003054:	f000 fc7d 	bl	8003952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003058:	2025      	movs	r0, #37	; 0x25
 800305a:	f000 fc96 	bl	800398a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800305e:	bf00      	nop
 8003060:	3728      	adds	r7, #40	; 0x28
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40013800 	.word	0x40013800
 800306c:	40021000 	.word	0x40021000
 8003070:	48000800 	.word	0x48000800

08003074 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <HAL_PCD_MspInit+0x80>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d129      	bne.n	80030ea <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_PCD_MspInit+0x84>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <HAL_PCD_MspInit+0x84>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	6153      	str	r3, [r2, #20]
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_PCD_MspInit+0x84>)
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80030ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80030b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030bc:	2303      	movs	r3, #3
 80030be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80030c0:	230e      	movs	r3, #14
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4619      	mov	r1, r3
 80030ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ce:	f000 fced 	bl	8003aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_PCD_MspInit+0x84>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_PCD_MspInit+0x84>)
 80030d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030dc:	61d3      	str	r3, [r2, #28]
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_PCD_MspInit+0x84>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40005c00 	.word	0x40005c00
 80030f8:	40021000 	.word	0x40021000

080030fc <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <PWM_Start+0x18>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <PWM_Start+0x1c>)
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f003 f97c 	bl	8006408 <HAL_TIM_PWM_Start>
}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000078 	.word	0x20000078
 8003118:	2000007c 	.word	0x2000007c

0800311c <PWM_Stop>:

void PWM_Stop() {
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <PWM_Stop+0x18>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <PWM_Stop+0x1c>)
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f003 fa6c 	bl	8006608 <HAL_TIM_PWM_Stop>
}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000078 	.word	0x20000078
 8003138:	2000007c 	.word	0x2000007c

0800313c <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	80fb      	strh	r3, [r7, #6]
 8003148:	4613      	mov	r3, r2
 800314a:	80bb      	strh	r3, [r7, #4]
  if (pwm_freq == 0 || pwm_freq > 20000) {
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <PWM_Change_Tone+0x20>
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003158:	4293      	cmp	r3, r2
 800315a:	d937      	bls.n	80031cc <PWM_Change_Tone+0x90>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 800315c:	4b52      	ldr	r3, [pc, #328]	; (80032a8 <PWM_Change_Tone+0x16c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <PWM_Change_Tone+0x34>
 8003164:	4b51      	ldr	r3, [pc, #324]	; (80032ac <PWM_Change_Tone+0x170>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	635a      	str	r2, [r3, #52]	; 0x34
 800316e:	e097      	b.n	80032a0 <PWM_Change_Tone+0x164>
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <PWM_Change_Tone+0x16c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d105      	bne.n	8003184 <PWM_Change_Tone+0x48>
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <PWM_Change_Tone+0x170>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	6393      	str	r3, [r2, #56]	; 0x38
 8003182:	e08d      	b.n	80032a0 <PWM_Change_Tone+0x164>
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <PWM_Change_Tone+0x16c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d105      	bne.n	8003198 <PWM_Change_Tone+0x5c>
 800318c:	4b47      	ldr	r3, [pc, #284]	; (80032ac <PWM_Change_Tone+0x170>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2300      	movs	r3, #0
 8003194:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003196:	e083      	b.n	80032a0 <PWM_Change_Tone+0x164>
 8003198:	4b43      	ldr	r3, [pc, #268]	; (80032a8 <PWM_Change_Tone+0x16c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d105      	bne.n	80031ac <PWM_Change_Tone+0x70>
 80031a0:	4b42      	ldr	r3, [pc, #264]	; (80032ac <PWM_Change_Tone+0x170>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	2300      	movs	r3, #0
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	e079      	b.n	80032a0 <PWM_Change_Tone+0x164>
 80031ac:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <PWM_Change_Tone+0x16c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d105      	bne.n	80031c0 <PWM_Change_Tone+0x84>
 80031b4:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <PWM_Change_Tone+0x170>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	6593      	str	r3, [r2, #88]	; 0x58
 80031be:	e06f      	b.n	80032a0 <PWM_Change_Tone+0x164>
 80031c0:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <PWM_Change_Tone+0x170>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80031ca:	e069      	b.n	80032a0 <PWM_Change_Tone+0x164>
  } else {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80031cc:	f002 f9e2 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 80031d0:	61f8      	str	r0, [r7, #28]
    const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	4a35      	ldr	r2, [pc, #212]	; (80032b0 <PWM_Change_Tone+0x174>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	0b9b      	lsrs	r3, r3, #14
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 80031e8:	8b7b      	ldrh	r3, [r7, #26]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80031fc:	88bb      	ldrh	r3, [r7, #4]
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	4a2b      	ldr	r2, [pc, #172]	; (80032b4 <PWM_Change_Tone+0x178>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	09db      	lsrs	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]

    pwm_timer->Instance->PSC = prescaler - 1;
 800320e:	8b7b      	ldrh	r3, [r7, #26]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <PWM_Change_Tone+0x170>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer->Instance->ARR = period_cycles - 1;
 800321a:	4b24      	ldr	r3, [pc, #144]	; (80032ac <PWM_Change_Tone+0x170>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	3a01      	subs	r2, #1
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer->Instance->EGR = TIM_EGR_UG;
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <PWM_Change_Tone+0x170>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <PWM_Change_Tone+0x16c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <PWM_Change_Tone+0x108>
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <PWM_Change_Tone+0x170>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8003242:	e02d      	b.n	80032a0 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <PWM_Change_Tone+0x16c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d105      	bne.n	8003258 <PWM_Change_Tone+0x11c>
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <PWM_Change_Tone+0x170>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003256:	e023      	b.n	80032a0 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <PWM_Change_Tone+0x16c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d105      	bne.n	800326c <PWM_Change_Tone+0x130>
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <PWM_Change_Tone+0x170>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800326a:	e019      	b.n	80032a0 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <PWM_Change_Tone+0x16c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d105      	bne.n	8003280 <PWM_Change_Tone+0x144>
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <PWM_Change_Tone+0x170>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800327e:	e00f      	b.n	80032a0 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <PWM_Change_Tone+0x16c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b10      	cmp	r3, #16
 8003286:	d105      	bne.n	8003294 <PWM_Change_Tone+0x158>
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <PWM_Change_Tone+0x170>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003292:	e005      	b.n	80032a0 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <PWM_Change_Tone+0x170>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800329e:	e7ff      	b.n	80032a0 <PWM_Change_Tone+0x164>
 80032a0:	bf00      	nop
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	2000007c 	.word	0x2000007c
 80032ac:	20000078 	.word	0x20000078
 80032b0:	45e7b273 	.word	0x45e7b273
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <call_change_melody>:

void call_change_melody() {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  PWM_Start();
 80032bc:	f7ff ff1e 	bl	80030fc <PWM_Start>
  Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
 80032c0:	2141      	movs	r1, #65	; 0x41
 80032c2:	4802      	ldr	r0, [pc, #8]	; (80032cc <call_change_melody+0x14>)
 80032c4:	f000 f804 	bl	80032d0 <Change_Melody>
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	08009ef4 	.word	0x08009ef4

080032d0 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count) {
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
  melody_ptr = melody;
 80032dc:	4a07      	ldr	r2, [pc, #28]	; (80032fc <Change_Melody+0x2c>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6013      	str	r3, [r2, #0]
  melody_tone_count = tone_count;
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <Change_Melody+0x30>)
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	8013      	strh	r3, [r2, #0]
  current_tone_number = 0;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <Change_Melody+0x34>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	801a      	strh	r2, [r3, #0]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000da0 	.word	0x20000da0
 8003300:	20000da4 	.word	0x20000da4
 8003304:	20000da6 	.word	0x20000da6

08003308 <Update_Melody>:

void Update_Melody() {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() > current_tone_end)
 800330e:	f000 fa15 	bl	800373c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <Update_Melody+0x84>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d932      	bls.n	8003382 <Update_Melody+0x7a>
      && (current_tone_number < melody_tone_count)) {
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <Update_Melody+0x88>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29a      	uxth	r2, r3
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <Update_Melody+0x8c>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	429a      	cmp	r2, r3
 800332a:	d22a      	bcs.n	8003382 <Update_Melody+0x7a>
    const Tone active_tone = *(melody_ptr + current_tone_number);
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <Update_Melody+0x90>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <Update_Melody+0x88>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	6810      	ldr	r0, [r2, #0]
 800333e:	6018      	str	r0, [r3, #0]
    PWM_Change_Tone(active_tone.frequency, volume);
 8003340:	88bb      	ldrh	r3, [r7, #4]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <Update_Melody+0x94>)
 8003344:	8812      	ldrh	r2, [r2, #0]
 8003346:	b292      	uxth	r2, r2
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fef6 	bl	800313c <PWM_Change_Tone>
    current_tone_end = HAL_GetTick() + active_tone.duration;
 8003350:	f000 f9f4 	bl	800373c <HAL_GetTick>
 8003354:	4603      	mov	r3, r0
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	4413      	add	r3, r2
 800335a:	4a0c      	ldr	r2, [pc, #48]	; (800338c <Update_Melody+0x84>)
 800335c:	6013      	str	r3, [r2, #0]
    current_tone_number++;
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <Update_Melody+0x88>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <Update_Melody+0x88>)
 800336a:	801a      	strh	r2, [r3, #0]

    if (current_tone_number >= melody_tone_count) {
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <Update_Melody+0x88>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29a      	uxth	r2, r3
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <Update_Melody+0x8c>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <Update_Melody+0x7a>
      current_tone_number = 0;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <Update_Melody+0x88>)
 800337e:	2200      	movs	r2, #0
 8003380:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000da8 	.word	0x20000da8
 8003390:	20000da6 	.word	0x20000da6
 8003394:	20000da4 	.word	0x20000da4
 8003398:	20000da0 	.word	0x20000da0
 800339c:	20000080 	.word	0x20000080

080033a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <NMI_Handler+0x4>

080033a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <HardFault_Handler+0x4>

080033ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <MemManage_Handler+0x4>

080033b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033b6:	e7fe      	b.n	80033b6 <BusFault_Handler+0x4>

080033b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033bc:	e7fe      	b.n	80033bc <UsageFault_Handler+0x4>

080033be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ec:	f000 f992 	bl	8003714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 80033f0:	f7ff ff8a 	bl	8003308 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80033fe:	f003 f999 	bl	8006734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000020c 	.word	0x2000020c

0800340c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003412:	f003 f98f 	bl	8006734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	2000020c 	.word	0x2000020c

08003420 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003426:	f003 f985 	bl	8006734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	2000020c 	.word	0x2000020c

08003434 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <TIM1_CC_IRQHandler+0x10>)
 800343a:	f003 f97b 	bl	8006734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000020c 	.word	0x2000020c

08003448 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <USART1_IRQHandler+0x10>)
 800344e:	f004 fa33 	bl	80078b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200002a4 	.word	0x200002a4

0800345c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003460:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003464:	f000 fccc 	bl	8003e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003468:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800346c:	f000 fcc8 	bl	8003e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003470:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003474:	f000 fcc4 	bl	8003e00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003478:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800347c:	f000 fcc0 	bl	8003e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}

08003484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return 1;
 8003488:	2301      	movs	r3, #1
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <_kill>:

int _kill(int pid, int sig)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800349e:	f005 f981 	bl	80087a4 <__errno>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2216      	movs	r2, #22
 80034a6:	601a      	str	r2, [r3, #0]
  return -1;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_exit>:

void _exit (int status)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ffe7 	bl	8003494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034c6:	e7fe      	b.n	80034c6 <_exit+0x12>

080034c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e00a      	b.n	80034f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034da:	f3af 8000 	nop.w
 80034de:	4601      	mov	r1, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	60ba      	str	r2, [r7, #8]
 80034e6:	b2ca      	uxtb	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf0      	blt.n	80034da <_read+0x12>
  }

  return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e009      	b.n	8003528 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	60ba      	str	r2, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	3301      	adds	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	dbf1      	blt.n	8003514 <_write+0x12>
  }
  return len;
 8003530:	687b      	ldr	r3, [r7, #4]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_close>:

int _close(int file)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003562:	605a      	str	r2, [r3, #4]
  return 0;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <_isatty>:

int _isatty(int file)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <_sbrk+0x5c>)
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <_sbrk+0x60>)
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <_sbrk+0x64>)
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <_sbrk+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d4:	f005 f8e6 	bl	80087a4 <__errno>
 80035d8:	4603      	mov	r3, r0
 80035da:	220c      	movs	r2, #12
 80035dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
 80035e2:	e009      	b.n	80035f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <_sbrk+0x64>)
 80035f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	2000a000 	.word	0x2000a000
 8003604:	00000400 	.word	0x00000400
 8003608:	20000dac 	.word	0x20000dac
 800360c:	20000dc8 	.word	0x20000dc8

08003610 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <SystemInit+0x20>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <SystemInit+0x20>)
 800361c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800366c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003638:	f7ff ffea 	bl	8003610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800363c:	480c      	ldr	r0, [pc, #48]	; (8003670 <LoopForever+0x6>)
  ldr r1, =_edata
 800363e:	490d      	ldr	r1, [pc, #52]	; (8003674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <LoopForever+0xe>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003644:	e002      	b.n	800364c <LoopCopyDataInit>

08003646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364a:	3304      	adds	r3, #4

0800364c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800364c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003650:	d3f9      	bcc.n	8003646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003654:	4c0a      	ldr	r4, [pc, #40]	; (8003680 <LoopForever+0x16>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003658:	e001      	b.n	800365e <LoopFillZerobss>

0800365a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800365c:	3204      	adds	r2, #4

0800365e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003660:	d3fb      	bcc.n	800365a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003662:	f005 f8a5 	bl	80087b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003666:	f7fe fedd 	bl	8002424 <main>

0800366a <LoopForever>:

LoopForever:
    b LoopForever
 800366a:	e7fe      	b.n	800366a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800366c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8003678:	0800a180 	.word	0x0800a180
  ldr r2, =_sbss
 800367c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8003680:	20000dc4 	.word	0x20000dc4

08003684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC1_2_IRQHandler>
	...

08003688 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_Init+0x28>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_Init+0x28>)
 8003692:	f043 0310 	orr.w	r3, r3, #16
 8003696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003698:	2003      	movs	r0, #3
 800369a:	f000 f94f 	bl	800393c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369e:	2000      	movs	r0, #0
 80036a0:	f000 f808 	bl	80036b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a4:	f7ff fb3a 	bl	8002d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40022000 	.word	0x40022000

080036b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_InitTick+0x54>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_InitTick+0x58>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f967 	bl	80039a6 <HAL_SYSTICK_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e00e      	b.n	8003700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d80a      	bhi.n	80036fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e8:	2200      	movs	r2, #0
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f000 f92f 	bl	8003952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_InitTick+0x5c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000084 	.word	0x20000084
 800370c:	2000008c 	.word	0x2000008c
 8003710:	20000088 	.word	0x20000088

08003714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_IncTick+0x20>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x24>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_IncTick+0x24>)
 8003726:	6013      	str	r3, [r2, #0]
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	2000008c 	.word	0x2000008c
 8003738:	20000db0 	.word	0x20000db0

0800373c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_GetTick+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000db0 	.word	0x20000db0

08003754 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800375c:	f7ff ffee 	bl	800373c <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d005      	beq.n	800377a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_Delay+0x44>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800377a:	bf00      	nop
 800377c:	f7ff ffde 	bl	800373c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d8f7      	bhi.n	800377c <HAL_Delay+0x28>
  {
  }
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000008c 	.word	0x2000008c

0800379c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4907      	ldr	r1, [pc, #28]	; (8003838 <__NVIC_EnableIRQ+0x38>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	2b00      	cmp	r3, #0
 800384e:	db0a      	blt.n	8003866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	490c      	ldr	r1, [pc, #48]	; (8003888 <__NVIC_SetPriority+0x4c>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	440b      	add	r3, r1
 8003860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003864:	e00a      	b.n	800387c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4908      	ldr	r1, [pc, #32]	; (800388c <__NVIC_SetPriority+0x50>)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	3b04      	subs	r3, #4
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	440b      	add	r3, r1
 800387a:	761a      	strb	r2, [r3, #24]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000e100 	.word	0xe000e100
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f1c3 0307 	rsb	r3, r3, #7
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf28      	it	cs
 80038ae:	2304      	movcs	r3, #4
 80038b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d902      	bls.n	80038c0 <NVIC_EncodePriority+0x30>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3b03      	subs	r3, #3
 80038be:	e000      	b.n	80038c2 <NVIC_EncodePriority+0x32>
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	43d9      	mvns	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	4313      	orrs	r3, r2
         );
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003908:	d301      	bcc.n	800390e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800390a:	2301      	movs	r3, #1
 800390c:	e00f      	b.n	800392e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <SysTick_Config+0x40>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003916:	210f      	movs	r1, #15
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	f7ff ff8e 	bl	800383c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <SysTick_Config+0x40>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <SysTick_Config+0x40>)
 8003928:	2207      	movs	r2, #7
 800392a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	e000e010 	.word	0xe000e010

0800393c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff29 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b086      	sub	sp, #24
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003964:	f7ff ff3e 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 8003968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	6978      	ldr	r0, [r7, #20]
 8003970:	f7ff ff8e 	bl	8003890 <NVIC_EncodePriority>
 8003974:	4602      	mov	r2, r0
 8003976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff5d 	bl	800383c <__NVIC_SetPriority>
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff31 	bl	8003800 <__NVIC_EnableIRQ>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ffa2 	bl	80038f8 <SysTick_Config>
 80039b4:	4603      	mov	r3, r0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d008      	beq.n	80039e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2204      	movs	r2, #4
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e020      	b.n	8003a24 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 020e 	bic.w	r2, r2, #14
 80039f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d005      	beq.n	8003a52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e027      	b.n	8003aa2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 020e 	bic.w	r2, r2, #14
 8003a60:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a80:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
    } 
  }
  return status;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aba:	e154      	b.n	8003d66 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8146 	beq.w	8003d60 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d005      	beq.n	8003aec <HAL_GPIO_Init+0x40>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d130      	bne.n	8003b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b22:	2201      	movs	r2, #1
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 0201 	and.w	r2, r3, #1
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d017      	beq.n	8003b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	2203      	movs	r2, #3
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d123      	bne.n	8003bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	08da      	lsrs	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3208      	adds	r2, #8
 8003b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	220f      	movs	r2, #15
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	08da      	lsrs	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3208      	adds	r2, #8
 8003bd8:	6939      	ldr	r1, [r7, #16]
 8003bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	2203      	movs	r2, #3
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0203 	and.w	r2, r3, #3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a0 	beq.w	8003d60 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c20:	4b58      	ldr	r3, [pc, #352]	; (8003d84 <HAL_GPIO_Init+0x2d8>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	4a57      	ldr	r2, [pc, #348]	; (8003d84 <HAL_GPIO_Init+0x2d8>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6193      	str	r3, [r2, #24]
 8003c2c:	4b55      	ldr	r3, [pc, #340]	; (8003d84 <HAL_GPIO_Init+0x2d8>)
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c38:	4a53      	ldr	r2, [pc, #332]	; (8003d88 <HAL_GPIO_Init+0x2dc>)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	220f      	movs	r2, #15
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c62:	d019      	beq.n	8003c98 <HAL_GPIO_Init+0x1ec>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a49      	ldr	r2, [pc, #292]	; (8003d8c <HAL_GPIO_Init+0x2e0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_GPIO_Init+0x1e8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a48      	ldr	r2, [pc, #288]	; (8003d90 <HAL_GPIO_Init+0x2e4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00d      	beq.n	8003c90 <HAL_GPIO_Init+0x1e4>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a47      	ldr	r2, [pc, #284]	; (8003d94 <HAL_GPIO_Init+0x2e8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <HAL_GPIO_Init+0x1e0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a46      	ldr	r2, [pc, #280]	; (8003d98 <HAL_GPIO_Init+0x2ec>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_GPIO_Init+0x1dc>
 8003c84:	2304      	movs	r3, #4
 8003c86:	e008      	b.n	8003c9a <HAL_GPIO_Init+0x1ee>
 8003c88:	2305      	movs	r3, #5
 8003c8a:	e006      	b.n	8003c9a <HAL_GPIO_Init+0x1ee>
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e004      	b.n	8003c9a <HAL_GPIO_Init+0x1ee>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e002      	b.n	8003c9a <HAL_GPIO_Init+0x1ee>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_GPIO_Init+0x1ee>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	f002 0203 	and.w	r2, r2, #3
 8003ca0:	0092      	lsls	r2, r2, #2
 8003ca2:	4093      	lsls	r3, r2
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003caa:	4937      	ldr	r1, [pc, #220]	; (8003d88 <HAL_GPIO_Init+0x2dc>)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb8:	4b38      	ldr	r3, [pc, #224]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003cdc:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d06:	4a25      	ldr	r2, [pc, #148]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d0c:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d30:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d5a:	4a10      	ldr	r2, [pc, #64]	; (8003d9c <HAL_GPIO_Init+0x2f0>)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3301      	adds	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f47f aea3 	bne.w	8003abc <HAL_GPIO_Init+0x10>
  }
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	48000400 	.word	0x48000400
 8003d90:	48000800 	.word	0x48000800
 8003d94:	48000c00 	.word	0x48000c00
 8003d98:	48001000 	.word	0x48001000
 8003d9c:	40010400 	.word	0x40010400

08003da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e001      	b.n	8003dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dec:	e002      	b.n	8003df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e16:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc fe0a 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e081      	b.n	8003f46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fe ff84 	bl	8002d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	e006      	b.n	8003eb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d104      	bne.n	8003eca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003edc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69d9      	ldr	r1, [r3, #28]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d138      	bne.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e032      	b.n	8003fd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2224      	movs	r2, #36	; 0x24
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fa0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d139      	bne.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004004:	2302      	movs	r3, #2
 8004006:	e033      	b.n	8004070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004036:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e000      	b.n	8004070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800406e:	2302      	movs	r3, #2
  }
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800407c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800407e:	b08b      	sub	sp, #44	; 0x2c
 8004080:	af06      	add	r7, sp, #24
 8004082:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0c4      	b.n	8004218 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe ffe6 	bl	8003074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f004 fb38 	bl	800872a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
 80040be:	e040      	b.n	8004142 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	3301      	adds	r3, #1
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	7bfa      	ldrb	r2, [r7, #15]
 80040e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	3303      	adds	r3, #3
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3338      	adds	r3, #56	; 0x38
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	440b      	add	r3, r1
 8004122:	333c      	adds	r3, #60	; 0x3c
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	3340      	adds	r3, #64	; 0x40
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	3301      	adds	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
 8004142:	7bfa      	ldrb	r2, [r7, #15]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d3b9      	bcc.n	80040c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e044      	b.n	80041dc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3301      	adds	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	7bfa      	ldrb	r2, [r7, #15]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3b5      	bcc.n	8004152 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	687e      	ldr	r6, [r7, #4]
 80041ee:	466d      	mov	r5, sp
 80041f0:	f106 0410 	add.w	r4, r6, #16
 80041f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	1d33      	adds	r3, r6, #4
 80041fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004200:	6838      	ldr	r0, [r7, #0]
 8004202:	f004 faad 	bl	8008760 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004226:	af00      	add	r7, sp, #0
 8004228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004230:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f001 b823 	b.w	800528c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 817d 	beq.w	8004556 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800425c:	4bbc      	ldr	r3, [pc, #752]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b04      	cmp	r3, #4
 8004266:	d00c      	beq.n	8004282 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004268:	4bb9      	ldr	r3, [pc, #740]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d15c      	bne.n	800432e <HAL_RCC_OscConfig+0x10e>
 8004274:	4bb6      	ldr	r3, [pc, #728]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d155      	bne.n	800432e <HAL_RCC_OscConfig+0x10e>
 8004282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004286:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004296:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d102      	bne.n	80042b4 <HAL_RCC_OscConfig+0x94>
 80042ae:	4ba8      	ldr	r3, [pc, #672]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	e015      	b.n	80042e0 <HAL_RCC_OscConfig+0xc0>
 80042b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80042c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80042d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80042dc:	4b9c      	ldr	r3, [pc, #624]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80042e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80042ec:	fa92 f2a2 	rbit	r2, r2
 80042f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80042f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80042f8:	fab2 f282 	clz	r2, r2
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	f042 0220 	orr.w	r2, r2, #32
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	f002 021f 	and.w	r2, r2, #31
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f202 	lsl.w	r2, r1, r2
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 811f 	beq.w	8004554 <HAL_RCC_OscConfig+0x334>
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 8116 	bne.w	8004554 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f000 bfaf 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d106      	bne.n	800434e <HAL_RCC_OscConfig+0x12e>
 8004340:	4b83      	ldr	r3, [pc, #524]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a82      	ldr	r2, [pc, #520]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	e036      	b.n	80043bc <HAL_RCC_OscConfig+0x19c>
 800434e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x158>
 800435e:	4b7c      	ldr	r3, [pc, #496]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7b      	ldr	r2, [pc, #492]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b79      	ldr	r3, [pc, #484]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a78      	ldr	r2, [pc, #480]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e021      	b.n	80043bc <HAL_RCC_OscConfig+0x19c>
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x184>
 800438a:	4b71      	ldr	r3, [pc, #452]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a70      	ldr	r2, [pc, #448]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b6e      	ldr	r3, [pc, #440]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6d      	ldr	r2, [pc, #436]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e00b      	b.n	80043bc <HAL_RCC_OscConfig+0x19c>
 80043a4:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a69      	ldr	r2, [pc, #420]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a66      	ldr	r2, [pc, #408]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80043b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043bc:	4b64      	ldr	r3, [pc, #400]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	f023 020f 	bic.w	r2, r3, #15
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	495f      	ldr	r1, [pc, #380]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d059      	beq.n	800449a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7ff f9a9 	bl	800373c <HAL_GetTick>
 80043ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7ff f9a4 	bl	800373c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b64      	cmp	r3, #100	; 0x64
 80043fe:	d902      	bls.n	8004406 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	f000 bf43 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
 8004406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800440a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800441a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <HAL_RCC_OscConfig+0x218>
 8004432:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	e015      	b.n	8004464 <HAL_RCC_OscConfig+0x244>
 8004438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800443c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800444c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004450:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004454:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004460:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004468:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800446c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004470:	fa92 f2a2 	rbit	r2, r2
 8004474:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004478:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800447c:	fab2 f282 	clz	r2, r2
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f042 0220 	orr.w	r2, r2, #32
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	f002 021f 	and.w	r2, r2, #31
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f202 	lsl.w	r2, r1, r2
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ab      	beq.n	80043f0 <HAL_RCC_OscConfig+0x1d0>
 8004498:	e05d      	b.n	8004556 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7ff f94f 	bl	800373c <HAL_GetTick>
 800449e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a4:	f7ff f94a 	bl	800373c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	; 0x64
 80044b2:	d902      	bls.n	80044ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	f000 bee9 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
 80044ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80044ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <HAL_RCC_OscConfig+0x2cc>
 80044e6:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	e015      	b.n	8004518 <HAL_RCC_OscConfig+0x2f8>
 80044ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80044f8:	fa93 f3a3 	rbit	r3, r3
 80044fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004504:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004508:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800450c:	fa93 f3a3 	rbit	r3, r3
 8004510:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_RCC_OscConfig+0x330>)
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800451c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004520:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004524:	fa92 f2a2 	rbit	r2, r2
 8004528:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800452c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004530:	fab2 f282 	clz	r2, r2
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	f042 0220 	orr.w	r2, r2, #32
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	f002 021f 	and.w	r2, r2, #31
 8004540:	2101      	movs	r1, #1
 8004542:	fa01 f202 	lsl.w	r2, r1, r2
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ab      	bne.n	80044a4 <HAL_RCC_OscConfig+0x284>
 800454c:	e003      	b.n	8004556 <HAL_RCC_OscConfig+0x336>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 817d 	beq.w	8004866 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800456c:	4ba6      	ldr	r3, [pc, #664]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004578:	4ba3      	ldr	r3, [pc, #652]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d172      	bne.n	800466a <HAL_RCC_OscConfig+0x44a>
 8004584:	4ba0      	ldr	r3, [pc, #640]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d16c      	bne.n	800466a <HAL_RCC_OscConfig+0x44a>
 8004590:	2302      	movs	r3, #2
 8004592:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80045a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_OscConfig+0x3a0>
 80045ba:	4b93      	ldr	r3, [pc, #588]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e013      	b.n	80045e8 <HAL_RCC_OscConfig+0x3c8>
 80045c0:	2302      	movs	r3, #2
 80045c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045d2:	2302      	movs	r3, #2
 80045d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80045d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80045e4:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2202      	movs	r2, #2
 80045ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80045ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80045f2:	fa92 f2a2 	rbit	r2, r2
 80045f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80045fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80045fe:	fab2 f282 	clz	r2, r2
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	f042 0220 	orr.w	r2, r2, #32
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	f002 021f 	and.w	r2, r2, #31
 800460e:	2101      	movs	r1, #1
 8004610:	fa01 f202 	lsl.w	r2, r1, r2
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCC_OscConfig+0x410>
 800461a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d002      	beq.n	8004630 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f000 be2e 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004630:	4b75      	ldr	r3, [pc, #468]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	21f8      	movs	r1, #248	; 0xf8
 8004646:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800464e:	fa91 f1a1 	rbit	r1, r1
 8004652:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004656:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800465a:	fab1 f181 	clz	r1, r1
 800465e:	b2c9      	uxtb	r1, r1
 8004660:	408b      	lsls	r3, r1
 8004662:	4969      	ldr	r1, [pc, #420]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004668:	e0fd      	b.n	8004866 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800466a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8088 	beq.w	800478c <HAL_RCC_OscConfig+0x56c>
 800467c:	2301      	movs	r3, #1
 800467e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800468e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800469c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	461a      	mov	r2, r3
 80046a4:	2301      	movs	r3, #1
 80046a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7ff f848 	bl	800373c <HAL_GetTick>
 80046ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b2:	f7ff f843 	bl	800373c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d902      	bls.n	80046c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	f000 bde2 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80046da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d102      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4d8>
 80046f2:	4b45      	ldr	r3, [pc, #276]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	e013      	b.n	8004720 <HAL_RCC_OscConfig+0x500>
 80046f8:	2302      	movs	r3, #2
 80046fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800470a:	2302      	movs	r3, #2
 800470c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004710:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800471c:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2202      	movs	r2, #2
 8004722:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004726:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800472a:	fa92 f2a2 	rbit	r2, r2
 800472e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004732:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004736:	fab2 f282 	clz	r2, r2
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	f042 0220 	orr.w	r2, r2, #32
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	f002 021f 	and.w	r2, r2, #31
 8004746:	2101      	movs	r1, #1
 8004748:	fa01 f202 	lsl.w	r2, r1, r2
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0af      	beq.n	80046b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004752:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	21f8      	movs	r1, #248	; 0xf8
 8004768:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004770:	fa91 f1a1 	rbit	r1, r1
 8004774:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004778:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800477c:	fab1 f181 	clz	r1, r1
 8004780:	b2c9      	uxtb	r1, r1
 8004782:	408b      	lsls	r3, r1
 8004784:	4920      	ldr	r1, [pc, #128]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]
 800478a:	e06c      	b.n	8004866 <HAL_RCC_OscConfig+0x646>
 800478c:	2301      	movs	r3, #1
 800478e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004796:	fa93 f3a3 	rbit	r3, r3
 800479a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800479e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	461a      	mov	r2, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fe ffc0 	bl	800373c <HAL_GetTick>
 80047bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c2:	f7fe ffbb 	bl	800373c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d902      	bls.n	80047d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	f000 bd5a 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
 80047d8:	2302      	movs	r3, #2
 80047da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80047ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d104      	bne.n	800480c <HAL_RCC_OscConfig+0x5ec>
 8004802:	4b01      	ldr	r3, [pc, #4]	; (8004808 <HAL_RCC_OscConfig+0x5e8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	e015      	b.n	8004834 <HAL_RCC_OscConfig+0x614>
 8004808:	40021000 	.word	0x40021000
 800480c:	2302      	movs	r3, #2
 800480e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004816:	fa93 f3a3 	rbit	r3, r3
 800481a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800481e:	2302      	movs	r3, #2
 8004820:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004824:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004830:	4bc8      	ldr	r3, [pc, #800]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2202      	movs	r2, #2
 8004836:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800483a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800483e:	fa92 f2a2 	rbit	r2, r2
 8004842:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004846:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800484a:	fab2 f282 	clz	r2, r2
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	f042 0220 	orr.w	r2, r2, #32
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f002 021f 	and.w	r2, r2, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f202 	lsl.w	r2, r1, r2
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1ad      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8110 	beq.w	8004a9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d079      	beq.n	8004980 <HAL_RCC_OscConfig+0x760>
 800488c:	2301      	movs	r3, #1
 800488e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a2:	fab3 f383 	clz	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	4bab      	ldr	r3, [pc, #684]	; (8004b58 <HAL_RCC_OscConfig+0x938>)
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	461a      	mov	r2, r3
 80048b2:	2301      	movs	r3, #1
 80048b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fe ff41 	bl	800373c <HAL_GetTick>
 80048ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fe ff3c 	bl	800373c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d902      	bls.n	80048d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	f000 bcdb 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
 80048d6:	2302      	movs	r3, #2
 80048d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048e0:	fa93 f3a3 	rbit	r3, r3
 80048e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048f0:	2202      	movs	r2, #2
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	fa93 f2a3 	rbit	r2, r3
 8004902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	2202      	movs	r2, #2
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	fa93 f2a3 	rbit	r2, r3
 8004926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800492e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004930:	4b88      	ldr	r3, [pc, #544]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800493c:	2102      	movs	r1, #2
 800493e:	6019      	str	r1, [r3, #0]
 8004940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	fa93 f1a3 	rbit	r1, r3
 800494e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004952:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004956:	6019      	str	r1, [r3, #0]
  return result;
 8004958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2101      	movs	r1, #1
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0a0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x6a0>
 800497e:	e08d      	b.n	8004a9c <HAL_RCC_OscConfig+0x87c>
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004990:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	fa93 f2a3 	rbit	r2, r3
 800499a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049a2:	601a      	str	r2, [r3, #0]
  return result;
 80049a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ae:	fab3 f383 	clz	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b68      	ldr	r3, [pc, #416]	; (8004b58 <HAL_RCC_OscConfig+0x938>)
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	461a      	mov	r2, r3
 80049be:	2300      	movs	r3, #0
 80049c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fe febb 	bl	800373c <HAL_GetTick>
 80049c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ca:	e00a      	b.n	80049e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049cc:	f7fe feb6 	bl	800373c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d902      	bls.n	80049e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	f000 bc55 	b.w	800528c <HAL_RCC_OscConfig+0x106c>
 80049e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049ea:	2202      	movs	r2, #2
 80049ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	fa93 f2a3 	rbit	r2, r3
 80049fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a0e:	2202      	movs	r2, #2
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	fa93 f2a3 	rbit	r2, r3
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a32:	2202      	movs	r2, #2
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	fa93 f2a3 	rbit	r2, r3
 8004a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4e:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	6019      	str	r1, [r3, #0]
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	fa93 f1a3 	rbit	r1, r3
 8004a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a74:	6019      	str	r1, [r3, #0]
  return result;
 8004a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d197      	bne.n	80049cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 81a1 	beq.w	8004df4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d116      	bne.n	8004af2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac4:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	4a22      	ldr	r2, [pc, #136]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	61d3      	str	r3, [r2, #28]
 8004ad0:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004adc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004aea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af2:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_RCC_OscConfig+0x93c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11a      	bne.n	8004b34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004afe:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <HAL_RCC_OscConfig+0x93c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_RCC_OscConfig+0x93c>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fe fe17 	bl	800373c <HAL_GetTick>
 8004b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	e009      	b.n	8004b28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fe fe12 	bl	800373c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b64      	cmp	r3, #100	; 0x64
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e3b1      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <HAL_RCC_OscConfig+0x93c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCC_OscConfig+0x940>
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	4a02      	ldr	r2, [pc, #8]	; (8004b54 <HAL_RCC_OscConfig+0x934>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6213      	str	r3, [r2, #32]
 8004b50:	e03c      	b.n	8004bcc <HAL_RCC_OscConfig+0x9ac>
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000
 8004b58:	10908120 	.word	0x10908120
 8004b5c:	40007000 	.word	0x40007000
 8004b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10c      	bne.n	8004b8a <HAL_RCC_OscConfig+0x96a>
 8004b70:	4bc1      	ldr	r3, [pc, #772]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4ac0      	ldr	r2, [pc, #768]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	6213      	str	r3, [r2, #32]
 8004b7c:	4bbe      	ldr	r3, [pc, #760]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4abd      	ldr	r2, [pc, #756]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004b82:	f023 0304 	bic.w	r3, r3, #4
 8004b86:	6213      	str	r3, [r2, #32]
 8004b88:	e020      	b.n	8004bcc <HAL_RCC_OscConfig+0x9ac>
 8004b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x994>
 8004b9a:	4bb7      	ldr	r3, [pc, #732]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4ab6      	ldr	r2, [pc, #728]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6213      	str	r3, [r2, #32]
 8004ba6:	4bb4      	ldr	r3, [pc, #720]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	4ab3      	ldr	r2, [pc, #716]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6213      	str	r3, [r2, #32]
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0x9ac>
 8004bb4:	4bb0      	ldr	r3, [pc, #704]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	4aaf      	ldr	r2, [pc, #700]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6213      	str	r3, [r2, #32]
 8004bc0:	4bad      	ldr	r3, [pc, #692]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	4aac      	ldr	r2, [pc, #688]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8081 	beq.w	8004ce0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bde:	f7fe fdad 	bl	800373c <HAL_GetTick>
 8004be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fe fda8 	bl	800373c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e345      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c08:	2202      	movs	r2, #2
 8004c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	fa93 f2a3 	rbit	r2, r3
 8004c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	fa93 f2a3 	rbit	r2, r3
 8004c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c46:	601a      	str	r2, [r3, #0]
  return result;
 8004c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f043 0302 	orr.w	r3, r3, #2
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d102      	bne.n	8004c6c <HAL_RCC_OscConfig+0xa4c>
 8004c66:	4b84      	ldr	r3, [pc, #528]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	e013      	b.n	8004c94 <HAL_RCC_OscConfig+0xa74>
 8004c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c74:	2202      	movs	r2, #2
 8004c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	fa93 f2a3 	rbit	r2, r3
 8004c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	4b79      	ldr	r3, [pc, #484]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	6011      	str	r1, [r2, #0]
 8004ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ca4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	fa92 f1a2 	rbit	r1, r2
 8004cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cb6:	6011      	str	r1, [r2, #0]
  return result;
 8004cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	fab2 f282 	clz	r2, r2
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	f002 021f 	and.w	r2, r2, #31
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d084      	beq.n	8004be8 <HAL_RCC_OscConfig+0x9c8>
 8004cde:	e07f      	b.n	8004de0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce0:	f7fe fd2c 	bl	800373c <HAL_GetTick>
 8004ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce8:	e00b      	b.n	8004d02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fe fd27 	bl	800373c <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e2c4      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
 8004d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	fa93 f2a3 	rbit	r2, r3
 8004d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d2e:	2202      	movs	r2, #2
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	fa93 f2a3 	rbit	r2, r3
 8004d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d48:	601a      	str	r2, [r3, #0]
  return result;
 8004d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f043 0302 	orr.w	r3, r3, #2
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d102      	bne.n	8004d6e <HAL_RCC_OscConfig+0xb4e>
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	e013      	b.n	8004d96 <HAL_RCC_OscConfig+0xb76>
 8004d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d76:	2202      	movs	r2, #2
 8004d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fa93 f2a3 	rbit	r2, r3
 8004d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004d9e:	2102      	movs	r1, #2
 8004da0:	6011      	str	r1, [r2, #0]
 8004da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004da6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	fa92 f1a2 	rbit	r1, r2
 8004db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004db8:	6011      	str	r1, [r2, #0]
  return result;
 8004dba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dbe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	fab2 f282 	clz	r2, r2
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	f002 021f 	and.w	r2, r2, #31
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d184      	bne.n	8004cea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004de0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d105      	bne.n	8004df4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de8:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8242 	beq.w	800528a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e06:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <HAL_RCC_OscConfig+0xc58>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	f000 8213 	beq.w	800523a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f040 8162 	bne.w	80050ea <HAL_RCC_OscConfig+0xeca>
 8004e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	fa93 f2a3 	rbit	r2, r3
 8004e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e4a:	601a      	str	r2, [r3, #0]
  return result;
 8004e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	fab3 f383 	clz	r3, r3
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	461a      	mov	r2, r3
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fe fc66 	bl	800373c <HAL_GetTick>
 8004e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e74:	e00c      	b.n	8004e90 <HAL_RCC_OscConfig+0xc70>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7c:	f7fe fc5e 	bl	800373c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1fd      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
 8004e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	fa93 f2a3 	rbit	r2, r3
 8004eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004eb4:	601a      	str	r2, [r3, #0]
  return result;
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_OscConfig+0xcba>
 8004ed4:	4bb0      	ldr	r3, [pc, #704]	; (8005198 <HAL_RCC_OscConfig+0xf78>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	e027      	b.n	8004f2a <HAL_RCC_OscConfig+0xd0a>
 8004eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ede:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	fa93 f2a3 	rbit	r2, r3
 8004ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	4b9c      	ldr	r3, [pc, #624]	; (8005198 <HAL_RCC_OscConfig+0xf78>)
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f36:	6011      	str	r1, [r2, #0]
 8004f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	fa92 f1a2 	rbit	r1, r2
 8004f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f4e:	6011      	str	r1, [r2, #0]
  return result;
 8004f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	fab2 f282 	clz	r2, r2
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	f042 0220 	orr.w	r2, r2, #32
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	f002 021f 	and.w	r2, r2, #31
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d182      	bne.n	8004e7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f76:	4b88      	ldr	r3, [pc, #544]	; (8005198 <HAL_RCC_OscConfig+0xf78>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	430b      	orrs	r3, r1
 8004f98:	497f      	ldr	r1, [pc, #508]	; (8005198 <HAL_RCC_OscConfig+0xf78>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]
 8004f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	fa93 f2a3 	rbit	r2, r3
 8004fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fc2:	601a      	str	r2, [r3, #0]
  return result;
 8004fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fcc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fe fbaa 	bl	800373c <HAL_GetTick>
 8004fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fec:	e009      	b.n	8005002 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fe fba5 	bl	800373c <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e144      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
 8005002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005006:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800500a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800500e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005014:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fa93 f2a3 	rbit	r2, r3
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005026:	601a      	str	r2, [r3, #0]
  return result;
 8005028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005030:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d102      	bne.n	800504c <HAL_RCC_OscConfig+0xe2c>
 8005046:	4b54      	ldr	r3, [pc, #336]	; (8005198 <HAL_RCC_OscConfig+0xf78>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	e027      	b.n	800509c <HAL_RCC_OscConfig+0xe7c>
 800504c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005050:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	fa93 f2a3 	rbit	r2, r3
 8005068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005076:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800507a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005084:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	fa93 f2a3 	rbit	r2, r3
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_RCC_OscConfig+0xf78>)
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050a8:	6011      	str	r1, [r2, #0]
 80050aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	fa92 f1a2 	rbit	r1, r2
 80050b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050c0:	6011      	str	r1, [r2, #0]
  return result;
 80050c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	fab2 f282 	clz	r2, r2
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	f042 0220 	orr.w	r2, r2, #32
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	f002 021f 	and.w	r2, r2, #31
 80050dc:	2101      	movs	r1, #1
 80050de:	fa01 f202 	lsl.w	r2, r1, r2
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d082      	beq.n	8004fee <HAL_RCC_OscConfig+0xdce>
 80050e8:	e0cf      	b.n	800528a <HAL_RCC_OscConfig+0x106a>
 80050ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80050f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	fa93 f2a3 	rbit	r2, r3
 8005106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800510e:	601a      	str	r2, [r3, #0]
  return result;
 8005110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005114:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005118:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511a:	fab3 f383 	clz	r3, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005124:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe fb04 	bl	800373c <HAL_GetTick>
 8005134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005138:	e009      	b.n	800514e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800513a:	f7fe faff 	bl	800373c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e09e      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
 800514e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005152:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800515a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005160:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	fa93 f2a3 	rbit	r2, r3
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005172:	601a      	str	r2, [r3, #0]
  return result;
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800517c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800517e:	fab3 f383 	clz	r3, r3
 8005182:	b2db      	uxtb	r3, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	d104      	bne.n	800519c <HAL_RCC_OscConfig+0xf7c>
 8005192:	4b01      	ldr	r3, [pc, #4]	; (8005198 <HAL_RCC_OscConfig+0xf78>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	e029      	b.n	80051ec <HAL_RCC_OscConfig+0xfcc>
 8005198:	40021000 	.word	0x40021000
 800519c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	fa93 f2a3 	rbit	r2, r3
 80051b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	fa93 f2a3 	rbit	r2, r3
 80051de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <HAL_RCC_OscConfig+0x1078>)
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80051f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051f8:	6011      	str	r1, [r2, #0]
 80051fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	fa92 f1a2 	rbit	r1, r2
 8005208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800520c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005210:	6011      	str	r1, [r2, #0]
  return result;
 8005212:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005216:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	fab2 f282 	clz	r2, r2
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	f042 0220 	orr.w	r2, r2, #32
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	f002 021f 	and.w	r2, r2, #31
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f202 	lsl.w	r2, r1, r2
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d180      	bne.n	800513a <HAL_RCC_OscConfig+0xf1a>
 8005238:	e027      	b.n	800528a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e01e      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <HAL_RCC_OscConfig+0x1078>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800525a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	429a      	cmp	r2, r3
 800526c:	d10b      	bne.n	8005286 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800526e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005282:	429a      	cmp	r2, r3
 8005284:	d001      	beq.n	800528a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000

0800529c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b09e      	sub	sp, #120	; 0x78
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e162      	b.n	800557a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b4:	4b90      	ldr	r3, [pc, #576]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d910      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c2:	4b8d      	ldr	r3, [pc, #564]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 0207 	bic.w	r2, r3, #7
 80052ca:	498b      	ldr	r1, [pc, #556]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b89      	ldr	r3, [pc, #548]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e14a      	b.n	800557a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f0:	4b82      	ldr	r3, [pc, #520]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	497f      	ldr	r1, [pc, #508]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80dc 	beq.w	80054c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d13c      	bne.n	8005392 <HAL_RCC_ClockConfig+0xf6>
 8005318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800531c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	b2db      	uxtb	r3, r3
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d102      	bne.n	8005342 <HAL_RCC_ClockConfig+0xa6>
 800533c:	4b6f      	ldr	r3, [pc, #444]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	e00f      	b.n	8005362 <HAL_RCC_ClockConfig+0xc6>
 8005342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005346:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800534a:	fa93 f3a3 	rbit	r3, r3
 800534e:	667b      	str	r3, [r7, #100]	; 0x64
 8005350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005354:	663b      	str	r3, [r7, #96]	; 0x60
 8005356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005358:	fa93 f3a3 	rbit	r3, r3
 800535c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800535e:	4b67      	ldr	r3, [pc, #412]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005366:	65ba      	str	r2, [r7, #88]	; 0x58
 8005368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800536a:	fa92 f2a2 	rbit	r2, r2
 800536e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005372:	fab2 f282 	clz	r2, r2
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	f042 0220 	orr.w	r2, r2, #32
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	f002 021f 	and.w	r2, r2, #31
 8005382:	2101      	movs	r1, #1
 8005384:	fa01 f202 	lsl.w	r2, r1, r2
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d17b      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e0f3      	b.n	800557a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d13c      	bne.n	8005414 <HAL_RCC_ClockConfig+0x178>
 800539a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800539e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80053a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x128>
 80053be:	4b4f      	ldr	r3, [pc, #316]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	e00f      	b.n	80053e4 <HAL_RCC_ClockConfig+0x148>
 80053c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	fa93 f3a3 	rbit	r3, r3
 80053d0:	647b      	str	r3, [r7, #68]	; 0x44
 80053d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053d6:	643b      	str	r3, [r7, #64]	; 0x40
 80053d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053da:	fa93 f3a3 	rbit	r3, r3
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e0:	4b46      	ldr	r3, [pc, #280]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80053ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ec:	fa92 f2a2 	rbit	r2, r2
 80053f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80053f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f4:	fab2 f282 	clz	r2, r2
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	f042 0220 	orr.w	r2, r2, #32
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	f002 021f 	and.w	r2, r2, #31
 8005404:	2101      	movs	r1, #1
 8005406:	fa01 f202 	lsl.w	r2, r1, r2
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d13a      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0b2      	b.n	800557a <HAL_RCC_ClockConfig+0x2de>
 8005414:	2302      	movs	r3, #2
 8005416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d102      	bne.n	800543c <HAL_RCC_ClockConfig+0x1a0>
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	e00d      	b.n	8005458 <HAL_RCC_ClockConfig+0x1bc>
 800543c:	2302      	movs	r3, #2
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	fa93 f3a3 	rbit	r3, r3
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
 8005448:	2302      	movs	r3, #2
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	4b29      	ldr	r3, [pc, #164]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2202      	movs	r2, #2
 800545a:	61ba      	str	r2, [r7, #24]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	fa92 f2a2 	rbit	r2, r2
 8005462:	617a      	str	r2, [r7, #20]
  return result;
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	fab2 f282 	clz	r2, r2
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	f042 0220 	orr.w	r2, r2, #32
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	f002 021f 	and.w	r2, r2, #31
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f202 	lsl.w	r2, r1, r2
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e079      	b.n	800557a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005486:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f023 0203 	bic.w	r2, r3, #3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	491a      	ldr	r1, [pc, #104]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 8005494:	4313      	orrs	r3, r2
 8005496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005498:	f7fe f950 	bl	800373c <HAL_GetTick>
 800549c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a0:	f7fe f94c 	bl	800373c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e061      	b.n	800557a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <HAL_RCC_ClockConfig+0x260>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 020c 	and.w	r2, r3, #12
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d1eb      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d214      	bcs.n	8005500 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d6:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f023 0207 	bic.w	r2, r3, #7
 80054de:	4906      	ldr	r1, [pc, #24]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e6:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <HAL_RCC_ClockConfig+0x25c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e040      	b.n	800557a <HAL_RCC_ClockConfig+0x2de>
 80054f8:	40022000 	.word	0x40022000
 80054fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <HAL_RCC_ClockConfig+0x2e8>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	491a      	ldr	r1, [pc, #104]	; (8005584 <HAL_RCC_ClockConfig+0x2e8>)
 800551a:	4313      	orrs	r3, r2
 800551c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <HAL_RCC_ClockConfig+0x2e8>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4912      	ldr	r1, [pc, #72]	; (8005584 <HAL_RCC_ClockConfig+0x2e8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800553e:	f000 f829 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005542:	4601      	mov	r1, r0
 8005544:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <HAL_RCC_ClockConfig+0x2e8>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800554c:	22f0      	movs	r2, #240	; 0xf0
 800554e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	fa92 f2a2 	rbit	r2, r2
 8005556:	60fa      	str	r2, [r7, #12]
  return result;
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	fab2 f282 	clz	r2, r2
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	40d3      	lsrs	r3, r2
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <HAL_RCC_ClockConfig+0x2ec>)
 8005564:	5cd3      	ldrb	r3, [r2, r3]
 8005566:	fa21 f303 	lsr.w	r3, r1, r3
 800556a:	4a08      	ldr	r2, [pc, #32]	; (800558c <HAL_RCC_ClockConfig+0x2f0>)
 800556c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <HAL_RCC_ClockConfig+0x2f4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe f89e 	bl	80036b4 <HAL_InitTick>
  
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3778      	adds	r7, #120	; 0x78
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	08009ff8 	.word	0x08009ff8
 800558c:	20000084 	.word	0x20000084
 8005590:	20000088 	.word	0x20000088

08005594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	b08b      	sub	sp, #44	; 0x2c
 8005598:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80055ae:	4b29      	ldr	r3, [pc, #164]	; (8005654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d002      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0x30>
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_GetSysClockFreq+0x36>
 80055c2:	e03c      	b.n	800563e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055c4:	4b24      	ldr	r3, [pc, #144]	; (8005658 <HAL_RCC_GetSysClockFreq+0xc4>)
 80055c6:	623b      	str	r3, [r7, #32]
      break;
 80055c8:	e03c      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80055d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	fa92 f2a2 	rbit	r2, r2
 80055dc:	607a      	str	r2, [r7, #4]
  return result;
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	fab2 f282 	clz	r2, r2
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	40d3      	lsrs	r3, r2
 80055e8:	4a1c      	ldr	r2, [pc, #112]	; (800565c <HAL_RCC_GetSysClockFreq+0xc8>)
 80055ea:	5cd3      	ldrb	r3, [r2, r3]
 80055ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80055ee:	4b19      	ldr	r3, [pc, #100]	; (8005654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	220f      	movs	r2, #15
 80055f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	fa92 f2a2 	rbit	r2, r2
 8005600:	60fa      	str	r2, [r7, #12]
  return result;
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	fab2 f282 	clz	r2, r2
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	40d3      	lsrs	r3, r2
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <HAL_RCC_GetSysClockFreq+0xcc>)
 800560e:	5cd3      	ldrb	r3, [r2, r3]
 8005610:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800561c:	4a0e      	ldr	r2, [pc, #56]	; (8005658 <HAL_RCC_GetSysClockFreq+0xc4>)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	fbb2 f2f3 	udiv	r2, r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
 800562c:	e004      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	623b      	str	r3, [r7, #32]
      break;
 800563c:	e002      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005640:	623b      	str	r3, [r7, #32]
      break;
 8005642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005644:	6a3b      	ldr	r3, [r7, #32]
}
 8005646:	4618      	mov	r0, r3
 8005648:	372c      	adds	r7, #44	; 0x2c
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	007a1200 	.word	0x007a1200
 800565c:	0800a010 	.word	0x0800a010
 8005660:	0800a020 	.word	0x0800a020
 8005664:	003d0900 	.word	0x003d0900

08005668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <HAL_RCC_GetHCLKFreq+0x14>)
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000084 	.word	0x20000084

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005686:	f7ff ffef 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 800568a:	4601      	mov	r1, r0
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005694:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005698:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	fa92 f2a2 	rbit	r2, r2
 80056a0:	603a      	str	r2, [r7, #0]
  return result;
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	fab2 f282 	clz	r2, r2
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	40d3      	lsrs	r3, r2
 80056ac:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80056ae:	5cd3      	ldrb	r3, [r2, r3]
 80056b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0800a008 	.word	0x0800a008

080056c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80056ca:	f7ff ffcd 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 80056ce:	4601      	mov	r1, r0
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80056d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80056dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	fa92 f2a2 	rbit	r2, r2
 80056e4:	603a      	str	r2, [r7, #0]
  return result;
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	fab2 f282 	clz	r2, r2
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	40d3      	lsrs	r3, r2
 80056f0:	4a04      	ldr	r2, [pc, #16]	; (8005704 <HAL_RCC_GetPCLK2Freq+0x40>)
 80056f2:	5cd3      	ldrb	r3, [r2, r3]
 80056f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	0800a008 	.word	0x0800a008

08005708 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b092      	sub	sp, #72	; 0x48
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80d4 	beq.w	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572c:	4b4e      	ldr	r3, [pc, #312]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10e      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005738:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	4a4a      	ldr	r2, [pc, #296]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	61d3      	str	r3, [r2, #28]
 8005744:	4b48      	ldr	r3, [pc, #288]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005750:	2301      	movs	r3, #1
 8005752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005756:	4b45      	ldr	r3, [pc, #276]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d118      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005762:	4b42      	ldr	r3, [pc, #264]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a41      	ldr	r2, [pc, #260]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800576e:	f7fd ffe5 	bl	800373c <HAL_GetTick>
 8005772:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005774:	e008      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005776:	f7fd ffe1 	bl	800373c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b64      	cmp	r3, #100	; 0x64
 8005782:	d901      	bls.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e169      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005788:	4b38      	ldr	r3, [pc, #224]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f0      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005794:	4b34      	ldr	r3, [pc, #208]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8084 	beq.w	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d07c      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057b4:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	fa93 f3a3 	rbit	r3, r3
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057ce:	fab3 f383 	clz	r3, r3
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b26      	ldr	r3, [pc, #152]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	461a      	mov	r2, r3
 80057de:	2301      	movs	r3, #1
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	461a      	mov	r2, r3
 8005802:	2300      	movs	r3, #0
 8005804:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d04b      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fd ff91 	bl	800373c <HAL_GetTick>
 800581a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581c:	e00a      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581e:	f7fd ff8d 	bl	800373c <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f241 3288 	movw	r2, #5000	; 0x1388
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e113      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005834:	2302      	movs	r3, #2
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
 8005840:	2302      	movs	r3, #2
 8005842:	623b      	str	r3, [r7, #32]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	61fb      	str	r3, [r7, #28]
  return result;
 800584c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584e:	fab3 f383 	clz	r3, r3
 8005852:	b2db      	uxtb	r3, r3
 8005854:	095b      	lsrs	r3, r3, #5
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d108      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005862:	4b01      	ldr	r3, [pc, #4]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	e00d      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005868:	40021000 	.word	0x40021000
 800586c:	40007000 	.word	0x40007000
 8005870:	10908100 	.word	0x10908100
 8005874:	2302      	movs	r3, #2
 8005876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	fa93 f3a3 	rbit	r3, r3
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	4b78      	ldr	r3, [pc, #480]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2202      	movs	r2, #2
 8005886:	613a      	str	r2, [r7, #16]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	fa92 f2a2 	rbit	r2, r2
 800588e:	60fa      	str	r2, [r7, #12]
  return result;
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	fab2 f282 	clz	r2, r2
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	f002 021f 	and.w	r2, r2, #31
 80058a2:	2101      	movs	r1, #1
 80058a4:	fa01 f202 	lsl.w	r2, r1, r2
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0b7      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058ae:	4b6d      	ldr	r3, [pc, #436]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	496a      	ldr	r1, [pc, #424]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c8:	4b66      	ldr	r3, [pc, #408]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	4a65      	ldr	r2, [pc, #404]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058e0:	4b60      	ldr	r3, [pc, #384]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	f023 0203 	bic.w	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	495d      	ldr	r1, [pc, #372]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058fe:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4956      	ldr	r1, [pc, #344]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590c:	4313      	orrs	r3, r2
 800590e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800591c:	4b51      	ldr	r3, [pc, #324]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	494e      	ldr	r1, [pc, #312]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800593a:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f023 0210 	bic.w	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	4947      	ldr	r1, [pc, #284]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005958:	4b42      	ldr	r3, [pc, #264]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	493f      	ldr	r1, [pc, #252]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	f023 0220 	bic.w	r2, r3, #32
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	4938      	ldr	r1, [pc, #224]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005984:	4313      	orrs	r3, r2
 8005986:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005994:	4b33      	ldr	r3, [pc, #204]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	4930      	ldr	r1, [pc, #192]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059b2:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	4929      	ldr	r1, [pc, #164]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059d0:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	4921      	ldr	r1, [pc, #132]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059ee:	4b1d      	ldr	r3, [pc, #116]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	491a      	ldr	r1, [pc, #104]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a0c:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	4912      	ldr	r1, [pc, #72]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a2a:	4b0e      	ldr	r3, [pc, #56]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	490b      	ldr	r1, [pc, #44]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a54:	4903      	ldr	r1, [pc, #12]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3748      	adds	r7, #72	; 0x48
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40021000 	.word	0x40021000

08005a68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e073      	b.n	8005b66 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7f5b      	ldrb	r3, [r3, #29]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fd f9ac 	bl	8002dec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d055      	beq.n	8005b54 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	22ca      	movs	r2, #202	; 0xca
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2253      	movs	r2, #83	; 0x53
 8005ab6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fa49 	bl	8005f50 <RTC_EnterInitMode>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d12c      	bne.n	8005b22 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ada:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6899      	ldr	r1, [r3, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68d2      	ldr	r2, [r2, #12]
 8005b02:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6919      	ldr	r1, [r3, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	041a      	lsls	r2, r3, #16
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa50 	bl	8005fbe <RTC_ExitInitMode>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d110      	bne.n	8005b4a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	22ff      	movs	r2, #255	; 0xff
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24
 8005b52:	e001      	b.n	8005b58 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d102      	bne.n	8005b64 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b6e:	b590      	push	{r4, r7, lr}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	7f1b      	ldrb	r3, [r3, #28]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_RTC_SetTime+0x1c>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e087      	b.n	8005c9a <HAL_RTC_SetTime+0x12c>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2202      	movs	r2, #2
 8005b94:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d126      	bne.n	8005bea <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2200      	movs	r2, #0
 8005bae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fa27 	bl	8006008 <RTC_ByteToBcd2>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fa20 	bl	8006008 <RTC_ByteToBcd2>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005bcc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	789b      	ldrb	r3, [r3, #2]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fa18 	bl	8006008 <RTC_ByteToBcd2>
 8005bd8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bda:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	78db      	ldrb	r3, [r3, #3]
 8005be2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e018      	b.n	8005c1c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d102      	bne.n	8005bfe <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c0a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c10:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	78db      	ldrb	r3, [r3, #3]
 8005c16:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	22ca      	movs	r2, #202	; 0xca
 8005c22:	625a      	str	r2, [r3, #36]	; 0x24
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2253      	movs	r2, #83	; 0x53
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f98f 	bl	8005f50 <RTC_EnterInitMode>
 8005c32:	4603      	mov	r3, r0
 8005c34:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d120      	bne.n	8005c7e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6899      	ldr	r1, [r3, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f9a2 	bl	8005fbe <RTC_ExitInitMode>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c7e:	7cfb      	ldrb	r3, [r7, #19]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	22ff      	movs	r2, #255	; 0xff
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]

  return status;
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd90      	pop	{r4, r7, pc}

08005ca2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cd4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	0c1b      	lsrs	r3, r3, #16
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	0d9b      	lsrs	r3, r3, #22
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11a      	bne.n	8005d54 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f98e 	bl	8006044 <RTC_Bcd2ToByte>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 f985 	bl	8006044 <RTC_Bcd2ToByte>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	789b      	ldrb	r3, [r3, #2]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f97c 	bl	8006044 <RTC_Bcd2ToByte>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d5e:	b590      	push	{r4, r7, lr}
 8005d60:	b087      	sub	sp, #28
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	7f1b      	ldrb	r3, [r3, #28]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_RTC_SetDate+0x1c>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e071      	b.n	8005e5e <HAL_RTC_SetDate+0x100>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2202      	movs	r2, #2
 8005d84:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10e      	bne.n	8005daa <HAL_RTC_SetDate+0x4c>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	f023 0310 	bic.w	r3, r3, #16
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	330a      	adds	r3, #10
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d11c      	bne.n	8005dea <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f927 	bl	8006008 <RTC_ByteToBcd2>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f920 	bl	8006008 <RTC_ByteToBcd2>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dcc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	789b      	ldrb	r3, [r3, #2]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f918 	bl	8006008 <RTC_ByteToBcd2>
 8005dd8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dda:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e00e      	b.n	8005e08 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005df6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dfc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	22ca      	movs	r2, #202	; 0xca
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2253      	movs	r2, #83	; 0x53
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f899 	bl	8005f50 <RTC_EnterInitMode>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e22:	7cfb      	ldrb	r3, [r7, #19]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10c      	bne.n	8005e42 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e36:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f8c0 	bl	8005fbe <RTC_ExitInitMode>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e42:	7cfb      	ldrb	r3, [r7, #19]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d102      	bne.n	8005e4e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	22ff      	movs	r2, #255	; 0xff
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]

  return status;
 8005e5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}

08005e66 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b086      	sub	sp, #24
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e84:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	0b5b      	lsrs	r3, r3, #13
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11a      	bne.n	8005efa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f8bb 	bl	8006044 <RTC_Bcd2ToByte>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f8b2 	bl	8006044 <RTC_Bcd2ToByte>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	789b      	ldrb	r3, [r3, #2]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 f8a9 	bl	8006044 <RTC_Bcd2ToByte>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <HAL_RTC_WaitForSynchro+0x48>)
 8005f16:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f18:	f7fd fc10 	bl	800373c <HAL_GetTick>
 8005f1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f1e:	e009      	b.n	8005f34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f20:	f7fd fc0c 	bl	800373c <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f2e:	d901      	bls.n	8005f34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e007      	b.n	8005f44 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0ee      	beq.n	8005f20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	0001ff5f 	.word	0x0001ff5f

08005f50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d122      	bne.n	8005fb4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f7c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f7e:	f7fd fbdd 	bl	800373c <HAL_GetTick>
 8005f82:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f84:	e00c      	b.n	8005fa0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f86:	f7fd fbd9 	bl	800373c <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f94:	d904      	bls.n	8005fa0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <RTC_EnterInitMode+0x64>
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d1e8      	bne.n	8005f86 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff ff8b 	bl	8005f04 <HAL_RTC_WaitForSynchro>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006016:	e005      	b.n	8006024 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3301      	adds	r3, #1
 800601c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	3b0a      	subs	r3, #10
 8006022:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	2b09      	cmp	r3, #9
 8006028:	d8f6      	bhi.n	8006018 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	b2da      	uxtb	r2, r3
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	4313      	orrs	r3, r2
 8006036:	b2db      	uxtb	r3, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	b2da      	uxtb	r2, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	b2db      	uxtb	r3, r3
 8006070:	4413      	add	r3, r2
 8006072:	b2db      	uxtb	r3, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e09d      	b.n	80061ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d108      	bne.n	80060ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a2:	d009      	beq.n	80060b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	61da      	str	r2, [r3, #28]
 80060aa:	e005      	b.n	80060b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fc feb0 	bl	8002e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060f8:	d902      	bls.n	8006100 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e002      	b.n	8006106 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006104:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800610e:	d007      	beq.n	8006120 <HAL_SPI_Init+0xa0>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006118:	d002      	beq.n	8006120 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	ea42 0103 	orr.w	r1, r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	0c1b      	lsrs	r3, r3, #16
 800617c:	f003 0204 	and.w	r2, r3, #4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800619c:	ea42 0103 	orr.w	r1, r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e049      	b.n	800627c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fc fe5d 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3304      	adds	r3, #4
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f000 fdb3 	bl	8006d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d001      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e04a      	b.n	8006332 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_TIM_Base_Start_IT+0xbc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d018      	beq.n	80062f0 <HAL_TIM_Base_Start_IT+0x6c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c6:	d013      	beq.n	80062f0 <HAL_TIM_Base_Start_IT+0x6c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <HAL_TIM_Base_Start_IT+0xc0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <HAL_TIM_Base_Start_IT+0x6c>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIM_Base_Start_IT+0xc4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_TIM_Base_Start_IT+0x6c>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1a      	ldr	r2, [pc, #104]	; (800634c <HAL_TIM_Base_Start_IT+0xc8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_TIM_Base_Start_IT+0x6c>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a19      	ldr	r2, [pc, #100]	; (8006350 <HAL_TIM_Base_Start_IT+0xcc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d115      	bne.n	800631c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <HAL_TIM_Base_Start_IT+0xd0>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b06      	cmp	r3, #6
 8006300:	d015      	beq.n	800632e <HAL_TIM_Base_Start_IT+0xaa>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006308:	d011      	beq.n	800632e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	e008      	b.n	800632e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e000      	b.n	8006330 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40013400 	.word	0x40013400
 8006350:	40014000 	.word	0x40014000
 8006354:	00010007 	.word	0x00010007

08006358 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e049      	b.n	80063fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc fdda 	bl	8002f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f000 fcf2 	bl	8006d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d109      	bne.n	800642c <HAL_TIM_PWM_Start+0x24>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	e03c      	b.n	80064a6 <HAL_TIM_PWM_Start+0x9e>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b04      	cmp	r3, #4
 8006430:	d109      	bne.n	8006446 <HAL_TIM_PWM_Start+0x3e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b01      	cmp	r3, #1
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	e02f      	b.n	80064a6 <HAL_TIM_PWM_Start+0x9e>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d109      	bne.n	8006460 <HAL_TIM_PWM_Start+0x58>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	e022      	b.n	80064a6 <HAL_TIM_PWM_Start+0x9e>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b0c      	cmp	r3, #12
 8006464:	d109      	bne.n	800647a <HAL_TIM_PWM_Start+0x72>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b01      	cmp	r3, #1
 8006470:	bf14      	ite	ne
 8006472:	2301      	movne	r3, #1
 8006474:	2300      	moveq	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	e015      	b.n	80064a6 <HAL_TIM_PWM_Start+0x9e>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b10      	cmp	r3, #16
 800647e:	d109      	bne.n	8006494 <HAL_TIM_PWM_Start+0x8c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	e008      	b.n	80064a6 <HAL_TIM_PWM_Start+0x9e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e097      	b.n	80065de <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d104      	bne.n	80064be <HAL_TIM_PWM_Start+0xb6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064bc:	e023      	b.n	8006506 <HAL_TIM_PWM_Start+0xfe>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_PWM_Start+0xc6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064cc:	e01b      	b.n	8006506 <HAL_TIM_PWM_Start+0xfe>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d104      	bne.n	80064de <HAL_TIM_PWM_Start+0xd6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064dc:	e013      	b.n	8006506 <HAL_TIM_PWM_Start+0xfe>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b0c      	cmp	r3, #12
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_PWM_Start+0xe6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064ec:	e00b      	b.n	8006506 <HAL_TIM_PWM_Start+0xfe>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_PWM_Start+0xf6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064fc:	e003      	b.n	8006506 <HAL_TIM_PWM_Start+0xfe>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2201      	movs	r2, #1
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f001 f836 	bl	8007580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a33      	ldr	r2, [pc, #204]	; (80065e8 <HAL_TIM_PWM_Start+0x1e0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_TIM_PWM_Start+0x13e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a32      	ldr	r2, [pc, #200]	; (80065ec <HAL_TIM_PWM_Start+0x1e4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_TIM_PWM_Start+0x13e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a30      	ldr	r2, [pc, #192]	; (80065f0 <HAL_TIM_PWM_Start+0x1e8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_TIM_PWM_Start+0x13e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2f      	ldr	r2, [pc, #188]	; (80065f4 <HAL_TIM_PWM_Start+0x1ec>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_TIM_PWM_Start+0x13e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <HAL_TIM_PWM_Start+0x1f0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <HAL_TIM_PWM_Start+0x142>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <HAL_TIM_PWM_Start+0x144>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <HAL_TIM_PWM_Start+0x1e0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d018      	beq.n	800659c <HAL_TIM_PWM_Start+0x194>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006572:	d013      	beq.n	800659c <HAL_TIM_PWM_Start+0x194>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <HAL_TIM_PWM_Start+0x1f4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00e      	beq.n	800659c <HAL_TIM_PWM_Start+0x194>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <HAL_TIM_PWM_Start+0x1f8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d009      	beq.n	800659c <HAL_TIM_PWM_Start+0x194>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <HAL_TIM_PWM_Start+0x1e4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d004      	beq.n	800659c <HAL_TIM_PWM_Start+0x194>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <HAL_TIM_PWM_Start+0x1e8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d115      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <HAL_TIM_PWM_Start+0x1fc>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b06      	cmp	r3, #6
 80065ac:	d015      	beq.n	80065da <HAL_TIM_PWM_Start+0x1d2>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b4:	d011      	beq.n	80065da <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c6:	e008      	b.n	80065da <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e000      	b.n	80065dc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	00010007 	.word	0x00010007

08006608 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 ffb0 	bl	8007580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3e      	ldr	r2, [pc, #248]	; (8006720 <HAL_TIM_PWM_Stop+0x118>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_TIM_PWM_Stop+0x4a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3d      	ldr	r2, [pc, #244]	; (8006724 <HAL_TIM_PWM_Stop+0x11c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_TIM_PWM_Stop+0x4a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a3b      	ldr	r2, [pc, #236]	; (8006728 <HAL_TIM_PWM_Stop+0x120>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_TIM_PWM_Stop+0x4a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a3a      	ldr	r2, [pc, #232]	; (800672c <HAL_TIM_PWM_Stop+0x124>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_TIM_PWM_Stop+0x4a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a38      	ldr	r2, [pc, #224]	; (8006730 <HAL_TIM_PWM_Stop+0x128>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d101      	bne.n	8006656 <HAL_TIM_PWM_Stop+0x4e>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <HAL_TIM_PWM_Stop+0x50>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	f241 1311 	movw	r3, #4369	; 0x1111
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10f      	bne.n	800668c <HAL_TIM_PWM_Stop+0x84>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6a1a      	ldr	r2, [r3, #32]
 8006672:	f240 4344 	movw	r3, #1092	; 0x444
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d107      	bne.n	800668c <HAL_TIM_PWM_Stop+0x84>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800668a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	f241 1311 	movw	r3, #4369	; 0x1111
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10f      	bne.n	80066bc <HAL_TIM_PWM_Stop+0xb4>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6a1a      	ldr	r2, [r3, #32]
 80066a2:	f240 4344 	movw	r3, #1092	; 0x444
 80066a6:	4013      	ands	r3, r2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d107      	bne.n	80066bc <HAL_TIM_PWM_Stop+0xb4>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <HAL_TIM_PWM_Stop+0xc4>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ca:	e023      	b.n	8006714 <HAL_TIM_PWM_Stop+0x10c>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d104      	bne.n	80066dc <HAL_TIM_PWM_Stop+0xd4>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066da:	e01b      	b.n	8006714 <HAL_TIM_PWM_Stop+0x10c>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d104      	bne.n	80066ec <HAL_TIM_PWM_Stop+0xe4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ea:	e013      	b.n	8006714 <HAL_TIM_PWM_Stop+0x10c>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b0c      	cmp	r3, #12
 80066f0:	d104      	bne.n	80066fc <HAL_TIM_PWM_Stop+0xf4>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066fa:	e00b      	b.n	8006714 <HAL_TIM_PWM_Stop+0x10c>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b10      	cmp	r3, #16
 8006700:	d104      	bne.n	800670c <HAL_TIM_PWM_Stop+0x104>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800670a:	e003      	b.n	8006714 <HAL_TIM_PWM_Stop+0x10c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40013400 	.word	0x40013400
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b02      	cmp	r3, #2
 8006748:	d122      	bne.n	8006790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0202 	mvn.w	r2, #2
 8006760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fae3 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 800677c:	e005      	b.n	800678a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fad5 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fae6 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b04      	cmp	r3, #4
 800679c:	d122      	bne.n	80067e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d11b      	bne.n	80067e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0204 	mvn.w	r2, #4
 80067b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2202      	movs	r2, #2
 80067ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fab9 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 80067d0:	e005      	b.n	80067de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 faab 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fabc 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d122      	bne.n	8006838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d11b      	bne.n	8006838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0208 	mvn.w	r2, #8
 8006808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2204      	movs	r2, #4
 800680e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa8f 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 8006824:	e005      	b.n	8006832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa81 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fa92 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b10      	cmp	r3, #16
 8006844:	d122      	bne.n	800688c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b10      	cmp	r3, #16
 8006852:	d11b      	bne.n	800688c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0210 	mvn.w	r2, #16
 800685c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2208      	movs	r2, #8
 8006862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa65 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 8006878:	e005      	b.n	8006886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa57 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa68 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b01      	cmp	r3, #1
 8006898:	d10e      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d107      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0201 	mvn.w	r2, #1
 80068b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fb fd6e 	bl	8002394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d10e      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d0:	2b80      	cmp	r3, #128	; 0x80
 80068d2:	d107      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fefe 	bl	80076e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f2:	d10e      	bne.n	8006912 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	d107      	bne.n	8006912 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800690a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fef1 	bl	80076f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d10e      	bne.n	800693e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d107      	bne.n	800693e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa16 	bl	8006d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b20      	cmp	r3, #32
 800694a:	d10e      	bne.n	800696a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b20      	cmp	r3, #32
 8006958:	d107      	bne.n	800696a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f06f 0220 	mvn.w	r2, #32
 8006962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 feb1 	bl	80076cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800698e:	2302      	movs	r3, #2
 8006990:	e0ff      	b.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b14      	cmp	r3, #20
 800699e:	f200 80f0 	bhi.w	8006b82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006b83 	.word	0x08006b83
 80069b0:	08006b83 	.word	0x08006b83
 80069b4:	08006b83 	.word	0x08006b83
 80069b8:	08006a3d 	.word	0x08006a3d
 80069bc:	08006b83 	.word	0x08006b83
 80069c0:	08006b83 	.word	0x08006b83
 80069c4:	08006b83 	.word	0x08006b83
 80069c8:	08006a7f 	.word	0x08006a7f
 80069cc:	08006b83 	.word	0x08006b83
 80069d0:	08006b83 	.word	0x08006b83
 80069d4:	08006b83 	.word	0x08006b83
 80069d8:	08006abf 	.word	0x08006abf
 80069dc:	08006b83 	.word	0x08006b83
 80069e0:	08006b83 	.word	0x08006b83
 80069e4:	08006b83 	.word	0x08006b83
 80069e8:	08006b01 	.word	0x08006b01
 80069ec:	08006b83 	.word	0x08006b83
 80069f0:	08006b83 	.word	0x08006b83
 80069f4:	08006b83 	.word	0x08006b83
 80069f8:	08006b41 	.word	0x08006b41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fa4c 	bl	8006ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0208 	orr.w	r2, r2, #8
 8006a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6999      	ldr	r1, [r3, #24]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	619a      	str	r2, [r3, #24]
      break;
 8006a3a:	e0a5      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fabc 	bl	8006fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6999      	ldr	r1, [r3, #24]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	021a      	lsls	r2, r3, #8
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	619a      	str	r2, [r3, #24]
      break;
 8006a7c:	e084      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fb25 	bl	80070d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0208 	orr.w	r2, r2, #8
 8006a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0204 	bic.w	r2, r2, #4
 8006aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69d9      	ldr	r1, [r3, #28]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	61da      	str	r2, [r3, #28]
      break;
 8006abc:	e064      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fb8d 	bl	80071e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69d9      	ldr	r1, [r3, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	021a      	lsls	r2, r3, #8
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	61da      	str	r2, [r3, #28]
      break;
 8006afe:	e043      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fbd6 	bl	80072b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0204 	bic.w	r2, r2, #4
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b3e:	e023      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fc1a 	bl	8007380 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b80:	e002      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
      break;
 8006b86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop

08006b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e0b6      	b.n	8006d26 <HAL_TIM_ConfigClockSource+0x18a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006be2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf4:	d03e      	beq.n	8006c74 <HAL_TIM_ConfigClockSource+0xd8>
 8006bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfa:	f200 8087 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c02:	f000 8086 	beq.w	8006d12 <HAL_TIM_ConfigClockSource+0x176>
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	d87f      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c0c:	2b70      	cmp	r3, #112	; 0x70
 8006c0e:	d01a      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0xaa>
 8006c10:	2b70      	cmp	r3, #112	; 0x70
 8006c12:	d87b      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c14:	2b60      	cmp	r3, #96	; 0x60
 8006c16:	d050      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x11e>
 8006c18:	2b60      	cmp	r3, #96	; 0x60
 8006c1a:	d877      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c1c:	2b50      	cmp	r3, #80	; 0x50
 8006c1e:	d03c      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0xfe>
 8006c20:	2b50      	cmp	r3, #80	; 0x50
 8006c22:	d873      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c24:	2b40      	cmp	r3, #64	; 0x40
 8006c26:	d058      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x13e>
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d86f      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c2c:	2b30      	cmp	r3, #48	; 0x30
 8006c2e:	d064      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c30:	2b30      	cmp	r3, #48	; 0x30
 8006c32:	d86b      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d060      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d867      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d05c      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d05a      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c44:	e062      	b.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6899      	ldr	r1, [r3, #8]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f000 fc73 	bl	8007540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	609a      	str	r2, [r3, #8]
      break;
 8006c72:	e04f      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	6899      	ldr	r1, [r3, #8]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f000 fc5c 	bl	8007540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c96:	609a      	str	r2, [r3, #8]
      break;
 8006c98:	e03c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f000 fbd0 	bl	800744c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2150      	movs	r1, #80	; 0x50
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fc29 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006cb8:	e02c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 fbef 	bl	80074aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2160      	movs	r1, #96	; 0x60
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fc19 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006cd8:	e01c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6859      	ldr	r1, [r3, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f000 fbb0 	bl	800744c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2140      	movs	r1, #64	; 0x40
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fc09 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006cf8:	e00c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f000 fc00 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006d0a:	e003      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d10:	e000      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a3c      	ldr	r2, [pc, #240]	; (8006e84 <TIM_Base_SetConfig+0x104>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00f      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9e:	d00b      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a39      	ldr	r2, [pc, #228]	; (8006e88 <TIM_Base_SetConfig+0x108>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d007      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a38      	ldr	r2, [pc, #224]	; (8006e8c <TIM_Base_SetConfig+0x10c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_Base_SetConfig+0x38>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a37      	ldr	r2, [pc, #220]	; (8006e90 <TIM_Base_SetConfig+0x110>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d108      	bne.n	8006dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a2d      	ldr	r2, [pc, #180]	; (8006e84 <TIM_Base_SetConfig+0x104>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d01b      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd8:	d017      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <TIM_Base_SetConfig+0x108>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <TIM_Base_SetConfig+0x10c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00f      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <TIM_Base_SetConfig+0x110>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00b      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a27      	ldr	r2, [pc, #156]	; (8006e94 <TIM_Base_SetConfig+0x114>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a26      	ldr	r2, [pc, #152]	; (8006e98 <TIM_Base_SetConfig+0x118>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_Base_SetConfig+0x8a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a25      	ldr	r2, [pc, #148]	; (8006e9c <TIM_Base_SetConfig+0x11c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d108      	bne.n	8006e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a10      	ldr	r2, [pc, #64]	; (8006e84 <TIM_Base_SetConfig+0x104>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00f      	beq.n	8006e68 <TIM_Base_SetConfig+0xe8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a11      	ldr	r2, [pc, #68]	; (8006e90 <TIM_Base_SetConfig+0x110>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <TIM_Base_SetConfig+0xe8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a10      	ldr	r2, [pc, #64]	; (8006e94 <TIM_Base_SetConfig+0x114>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_Base_SetConfig+0xe8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a0f      	ldr	r2, [pc, #60]	; (8006e98 <TIM_Base_SetConfig+0x118>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0xe8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <TIM_Base_SetConfig+0x11c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d103      	bne.n	8006e70 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691a      	ldr	r2, [r3, #16]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	615a      	str	r2, [r3, #20]
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800
 8006e90:	40013400 	.word	0x40013400
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800

08006ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0201 	bic.w	r2, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f023 0302 	bic.w	r3, r3, #2
 8006eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <TIM_OC1_SetConfig+0x10c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00f      	beq.n	8006f20 <TIM_OC1_SetConfig+0x80>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a2b      	ldr	r2, [pc, #172]	; (8006fb0 <TIM_OC1_SetConfig+0x110>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <TIM_OC1_SetConfig+0x80>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <TIM_OC1_SetConfig+0x114>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_OC1_SetConfig+0x80>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a29      	ldr	r2, [pc, #164]	; (8006fb8 <TIM_OC1_SetConfig+0x118>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_OC1_SetConfig+0x80>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a28      	ldr	r2, [pc, #160]	; (8006fbc <TIM_OC1_SetConfig+0x11c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10c      	bne.n	8006f3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 0308 	bic.w	r3, r3, #8
 8006f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 0304 	bic.w	r3, r3, #4
 8006f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <TIM_OC1_SetConfig+0x10c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <TIM_OC1_SetConfig+0xc2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <TIM_OC1_SetConfig+0x110>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_OC1_SetConfig+0xc2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <TIM_OC1_SetConfig+0x114>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_OC1_SetConfig+0xc2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <TIM_OC1_SetConfig+0x118>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC1_SetConfig+0xc2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <TIM_OC1_SetConfig+0x11c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d111      	bne.n	8006f86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800

08006fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0210 	bic.w	r2, r3, #16
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f023 0320 	bic.w	r3, r3, #32
 800700e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a28      	ldr	r2, [pc, #160]	; (80070c0 <TIM_OC2_SetConfig+0x100>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_OC2_SetConfig+0x6c>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <TIM_OC2_SetConfig+0x104>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d10d      	bne.n	8007048 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a1d      	ldr	r2, [pc, #116]	; (80070c0 <TIM_OC2_SetConfig+0x100>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d00f      	beq.n	8007070 <TIM_OC2_SetConfig+0xb0>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <TIM_OC2_SetConfig+0x104>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00b      	beq.n	8007070 <TIM_OC2_SetConfig+0xb0>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a1b      	ldr	r2, [pc, #108]	; (80070c8 <TIM_OC2_SetConfig+0x108>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <TIM_OC2_SetConfig+0xb0>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a1a      	ldr	r2, [pc, #104]	; (80070cc <TIM_OC2_SetConfig+0x10c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_OC2_SetConfig+0xb0>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a19      	ldr	r2, [pc, #100]	; (80070d0 <TIM_OC2_SetConfig+0x110>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d113      	bne.n	8007098 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007076:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800707e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40013400 	.word	0x40013400
 80070c8:	40014000 	.word	0x40014000
 80070cc:	40014400 	.word	0x40014400
 80070d0:	40014800 	.word	0x40014800

080070d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a27      	ldr	r2, [pc, #156]	; (80071d0 <TIM_OC3_SetConfig+0xfc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d003      	beq.n	800713e <TIM_OC3_SetConfig+0x6a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <TIM_OC3_SetConfig+0x100>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d10d      	bne.n	800715a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007144:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	021b      	lsls	r3, r3, #8
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	4313      	orrs	r3, r2
 8007150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007158:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <TIM_OC3_SetConfig+0xfc>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00f      	beq.n	8007182 <TIM_OC3_SetConfig+0xae>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <TIM_OC3_SetConfig+0x100>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00b      	beq.n	8007182 <TIM_OC3_SetConfig+0xae>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1a      	ldr	r2, [pc, #104]	; (80071d8 <TIM_OC3_SetConfig+0x104>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d007      	beq.n	8007182 <TIM_OC3_SetConfig+0xae>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a19      	ldr	r2, [pc, #100]	; (80071dc <TIM_OC3_SetConfig+0x108>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC3_SetConfig+0xae>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <TIM_OC3_SetConfig+0x10c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d113      	bne.n	80071aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	621a      	str	r2, [r3, #32]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40013400 	.word	0x40013400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800

080071e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	031b      	lsls	r3, r3, #12
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <TIM_OC4_SetConfig+0xc0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00f      	beq.n	8007268 <TIM_OC4_SetConfig+0x84>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <TIM_OC4_SetConfig+0xc4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00b      	beq.n	8007268 <TIM_OC4_SetConfig+0x84>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <TIM_OC4_SetConfig+0xc8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_OC4_SetConfig+0x84>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <TIM_OC4_SetConfig+0xcc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_OC4_SetConfig+0x84>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <TIM_OC4_SetConfig+0xd0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d109      	bne.n	800727c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800726e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	019b      	lsls	r3, r3, #6
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40013400 	.word	0x40013400
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800

080072b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	041b      	lsls	r3, r3, #16
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a17      	ldr	r2, [pc, #92]	; (800736c <TIM_OC5_SetConfig+0xb4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00f      	beq.n	8007332 <TIM_OC5_SetConfig+0x7a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a16      	ldr	r2, [pc, #88]	; (8007370 <TIM_OC5_SetConfig+0xb8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00b      	beq.n	8007332 <TIM_OC5_SetConfig+0x7a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a15      	ldr	r2, [pc, #84]	; (8007374 <TIM_OC5_SetConfig+0xbc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <TIM_OC5_SetConfig+0x7a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a14      	ldr	r2, [pc, #80]	; (8007378 <TIM_OC5_SetConfig+0xc0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d003      	beq.n	8007332 <TIM_OC5_SetConfig+0x7a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <TIM_OC5_SetConfig+0xc4>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d109      	bne.n	8007346 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007338:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	021b      	lsls	r3, r3, #8
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	621a      	str	r2, [r3, #32]
}
 8007360:	bf00      	nop
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	40012c00 	.word	0x40012c00
 8007370:	40013400 	.word	0x40013400
 8007374:	40014000 	.word	0x40014000
 8007378:	40014400 	.word	0x40014400
 800737c:	40014800 	.word	0x40014800

08007380 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	051b      	lsls	r3, r3, #20
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a18      	ldr	r2, [pc, #96]	; (8007438 <TIM_OC6_SetConfig+0xb8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00f      	beq.n	80073fc <TIM_OC6_SetConfig+0x7c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a17      	ldr	r2, [pc, #92]	; (800743c <TIM_OC6_SetConfig+0xbc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00b      	beq.n	80073fc <TIM_OC6_SetConfig+0x7c>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a16      	ldr	r2, [pc, #88]	; (8007440 <TIM_OC6_SetConfig+0xc0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d007      	beq.n	80073fc <TIM_OC6_SetConfig+0x7c>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a15      	ldr	r2, [pc, #84]	; (8007444 <TIM_OC6_SetConfig+0xc4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d003      	beq.n	80073fc <TIM_OC6_SetConfig+0x7c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a14      	ldr	r2, [pc, #80]	; (8007448 <TIM_OC6_SetConfig+0xc8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d109      	bne.n	8007410 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	029b      	lsls	r3, r3, #10
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40013400 	.word	0x40013400
 8007440:	40014000 	.word	0x40014000
 8007444:	40014400 	.word	0x40014400
 8007448:	40014800 	.word	0x40014800

0800744c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0201 	bic.w	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f023 030a 	bic.w	r3, r3, #10
 8007488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	621a      	str	r2, [r3, #32]
}
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b087      	sub	sp, #28
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0210 	bic.w	r2, r3, #16
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	031b      	lsls	r3, r3, #12
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	621a      	str	r2, [r3, #32]
}
 80074fe:	bf00      	nop
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	f043 0307 	orr.w	r3, r3, #7
 800752c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	609a      	str	r2, [r3, #8]
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800755a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	021a      	lsls	r2, r3, #8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	431a      	orrs	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4313      	orrs	r3, r2
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	609a      	str	r2, [r3, #8]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2201      	movs	r2, #1
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	43db      	mvns	r3, r3
 80075a2:	401a      	ands	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	fa01 f303 	lsl.w	r3, r1, r3
 80075b8:	431a      	orrs	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e063      	b.n	80076ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d108      	bne.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800761e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d018      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007656:	d013      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00e      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a12      	ldr	r2, [pc, #72]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d10c      	bne.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	4313      	orrs	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	40012c00 	.word	0x40012c00
 80076bc:	40013400 	.word	0x40013400
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40014000 	.word	0x40014000

080076cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e040      	b.n	800779c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fb fc56 	bl	8002fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2224      	movs	r2, #36	; 0x24
 8007734:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fbbc 	bl	8007ec4 <UART_SetConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e022      	b.n	800779c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fd84 	bl	800826c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fe0b 	bl	80083b0 <UART_CheckIdleState>
 800779a:	4603      	mov	r3, r0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d178      	bne.n	80078ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_UART_Transmit+0x24>
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e071      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2221      	movs	r2, #33	; 0x21
 80077d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077da:	f7fb ffaf 	bl	800373c <HAL_GetTick>
 80077de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	88fa      	ldrh	r2, [r7, #6]
 80077e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f8:	d108      	bne.n	800780c <HAL_UART_Transmit+0x68>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e003      	b.n	8007814 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007814:	e030      	b.n	8007878 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2200      	movs	r2, #0
 800781e:	2180      	movs	r1, #128	; 0x80
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fe6d 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e03c      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	881a      	ldrh	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007848:	b292      	uxth	r2, r2
 800784a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	3302      	adds	r3, #2
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e008      	b.n	8007866 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	781a      	ldrb	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	b292      	uxth	r2, r2
 800785e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	3301      	adds	r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1c8      	bne.n	8007816 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2200      	movs	r2, #0
 800788c:	2140      	movs	r1, #64	; 0x40
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fe36 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e005      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e000      	b.n	80078b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
  }
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b0ba      	sub	sp, #232	; 0xe8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80078e6:	4013      	ands	r3, r2
 80078e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d115      	bne.n	8007920 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00f      	beq.n	8007920 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 82ab 	beq.w	8007e6c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
      }
      return;
 800791e:	e2a5      	b.n	8007e6c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8117 	beq.w	8007b58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800792a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007936:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800793a:	4b85      	ldr	r3, [pc, #532]	; (8007b50 <HAL_UART_IRQHandler+0x298>)
 800793c:	4013      	ands	r3, r2
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 810a 	beq.w	8007b58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d011      	beq.n	8007974 <HAL_UART_IRQHandler+0xbc>
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2201      	movs	r2, #1
 8007962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800796a:	f043 0201 	orr.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d011      	beq.n	80079a4 <HAL_UART_IRQHandler+0xec>
 8007980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2202      	movs	r2, #2
 8007992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799a:	f043 0204 	orr.w	r2, r3, #4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d011      	beq.n	80079d4 <HAL_UART_IRQHandler+0x11c>
 80079b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2204      	movs	r2, #4
 80079c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ca:	f043 0202 	orr.w	r2, r3, #2
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d8:	f003 0308 	and.w	r3, r3, #8
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d017      	beq.n	8007a10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d105      	bne.n	80079f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2208      	movs	r2, #8
 80079fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a06:	f043 0208 	orr.w	r2, r3, #8
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d012      	beq.n	8007a42 <HAL_UART_IRQHandler+0x18a>
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00c      	beq.n	8007a42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a38:	f043 0220 	orr.w	r2, r3, #32
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8211 	beq.w	8007e70 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00d      	beq.n	8007a76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	d005      	beq.n	8007a9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d04f      	beq.n	8007b3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fd97 	bl	80085ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	d141      	bne.n	8007b32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ada:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1d9      	bne.n	8007aae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d013      	beq.n	8007b2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b06:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <HAL_UART_IRQHandler+0x29c>)
 8007b08:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fb ff8e 	bl	8003a30 <HAL_DMA_Abort_IT>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d017      	beq.n	8007b4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	e00f      	b.n	8007b4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f9b4 	bl	8007e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e00b      	b.n	8007b4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9b0 	bl	8007e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	e007      	b.n	8007b4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f9ac 	bl	8007e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007b48:	e192      	b.n	8007e70 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4a:	bf00      	nop
    return;
 8007b4c:	e190      	b.n	8007e70 <HAL_UART_IRQHandler+0x5b8>
 8007b4e:	bf00      	nop
 8007b50:	04000120 	.word	0x04000120
 8007b54:	08008697 	.word	0x08008697

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	f040 814b 	bne.w	8007df8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8144 	beq.w	8007df8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 813d 	beq.w	8007df8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2210      	movs	r2, #16
 8007b84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	f040 80b5 	bne.w	8007d00 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ba2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8164 	beq.w	8007e74 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	f080 815c 	bcs.w	8007e74 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	f000 8086 	beq.w	8007cde <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c00:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1da      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3308      	adds	r3, #8
 8007c22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c2e:	f023 0301 	bic.w	r3, r3, #1
 8007c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e1      	bne.n	8007c1c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3308      	adds	r3, #8
 8007c78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e3      	bne.n	8007c58 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cae:	f023 0310 	bic.w	r3, r3, #16
 8007cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cc2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e4      	bne.n	8007c9e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fb fe70 	bl	80039be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8d7 	bl	8007eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cfe:	e0b9      	b.n	8007e74 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80ab 	beq.w	8007e78 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007d22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 80a6 	beq.w	8007e78 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e4      	bne.n	8007d2c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3308      	adds	r3, #8
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	623b      	str	r3, [r7, #32]
   return(result);
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d86:	633a      	str	r2, [r7, #48]	; 0x30
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e3      	bne.n	8007d62 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0310 	bic.w	r3, r3, #16
 8007dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	69b9      	ldr	r1, [r7, #24]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e4      	bne.n	8007dae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f85b 	bl	8007eac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007df6:	e03f      	b.n	8007e78 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00e      	beq.n	8007e22 <HAL_UART_IRQHandler+0x56a>
 8007e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fc7b 	bl	8008716 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e20:	e02d      	b.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00e      	beq.n	8007e4c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d008      	beq.n	8007e4c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01c      	beq.n	8007e7c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
    }
    return;
 8007e4a:	e017      	b.n	8007e7c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
 8007e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00c      	beq.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fc2c 	bl	80086c2 <UART_EndTransmit_IT>
    return;
 8007e6a:	e008      	b.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e6c:	bf00      	nop
 8007e6e:	e006      	b.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007e7c:	bf00      	nop
  }

}
 8007e7e:	37e8      	adds	r7, #232	; 0xe8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ef2:	f023 030c 	bic.w	r3, r3, #12
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	430b      	orrs	r3, r1
 8007efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4aa7      	ldr	r2, [pc, #668]	; (80081dc <UART_SetConfig+0x318>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d120      	bne.n	8007f86 <UART_SetConfig+0xc2>
 8007f44:	4ba6      	ldr	r3, [pc, #664]	; (80081e0 <UART_SetConfig+0x31c>)
 8007f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d817      	bhi.n	8007f80 <UART_SetConfig+0xbc>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x94>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007f69 	.word	0x08007f69
 8007f5c:	08007f75 	.word	0x08007f75
 8007f60:	08007f7b 	.word	0x08007f7b
 8007f64:	08007f6f 	.word	0x08007f6f
 8007f68:	2301      	movs	r3, #1
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e0b5      	b.n	80080da <UART_SetConfig+0x216>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e0b2      	b.n	80080da <UART_SetConfig+0x216>
 8007f74:	2304      	movs	r3, #4
 8007f76:	77fb      	strb	r3, [r7, #31]
 8007f78:	e0af      	b.n	80080da <UART_SetConfig+0x216>
 8007f7a:	2308      	movs	r3, #8
 8007f7c:	77fb      	strb	r3, [r7, #31]
 8007f7e:	e0ac      	b.n	80080da <UART_SetConfig+0x216>
 8007f80:	2310      	movs	r3, #16
 8007f82:	77fb      	strb	r3, [r7, #31]
 8007f84:	e0a9      	b.n	80080da <UART_SetConfig+0x216>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a96      	ldr	r2, [pc, #600]	; (80081e4 <UART_SetConfig+0x320>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d124      	bne.n	8007fda <UART_SetConfig+0x116>
 8007f90:	4b93      	ldr	r3, [pc, #588]	; (80081e0 <UART_SetConfig+0x31c>)
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f9c:	d011      	beq.n	8007fc2 <UART_SetConfig+0xfe>
 8007f9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fa2:	d817      	bhi.n	8007fd4 <UART_SetConfig+0x110>
 8007fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa8:	d011      	beq.n	8007fce <UART_SetConfig+0x10a>
 8007faa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fae:	d811      	bhi.n	8007fd4 <UART_SetConfig+0x110>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <UART_SetConfig+0xf8>
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb8:	d006      	beq.n	8007fc8 <UART_SetConfig+0x104>
 8007fba:	e00b      	b.n	8007fd4 <UART_SetConfig+0x110>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	77fb      	strb	r3, [r7, #31]
 8007fc0:	e08b      	b.n	80080da <UART_SetConfig+0x216>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	77fb      	strb	r3, [r7, #31]
 8007fc6:	e088      	b.n	80080da <UART_SetConfig+0x216>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	77fb      	strb	r3, [r7, #31]
 8007fcc:	e085      	b.n	80080da <UART_SetConfig+0x216>
 8007fce:	2308      	movs	r3, #8
 8007fd0:	77fb      	strb	r3, [r7, #31]
 8007fd2:	e082      	b.n	80080da <UART_SetConfig+0x216>
 8007fd4:	2310      	movs	r3, #16
 8007fd6:	77fb      	strb	r3, [r7, #31]
 8007fd8:	e07f      	b.n	80080da <UART_SetConfig+0x216>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a82      	ldr	r2, [pc, #520]	; (80081e8 <UART_SetConfig+0x324>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d124      	bne.n	800802e <UART_SetConfig+0x16a>
 8007fe4:	4b7e      	ldr	r3, [pc, #504]	; (80081e0 <UART_SetConfig+0x31c>)
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007fec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ff0:	d011      	beq.n	8008016 <UART_SetConfig+0x152>
 8007ff2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ff6:	d817      	bhi.n	8008028 <UART_SetConfig+0x164>
 8007ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ffc:	d011      	beq.n	8008022 <UART_SetConfig+0x15e>
 8007ffe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008002:	d811      	bhi.n	8008028 <UART_SetConfig+0x164>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <UART_SetConfig+0x14c>
 8008008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800800c:	d006      	beq.n	800801c <UART_SetConfig+0x158>
 800800e:	e00b      	b.n	8008028 <UART_SetConfig+0x164>
 8008010:	2300      	movs	r3, #0
 8008012:	77fb      	strb	r3, [r7, #31]
 8008014:	e061      	b.n	80080da <UART_SetConfig+0x216>
 8008016:	2302      	movs	r3, #2
 8008018:	77fb      	strb	r3, [r7, #31]
 800801a:	e05e      	b.n	80080da <UART_SetConfig+0x216>
 800801c:	2304      	movs	r3, #4
 800801e:	77fb      	strb	r3, [r7, #31]
 8008020:	e05b      	b.n	80080da <UART_SetConfig+0x216>
 8008022:	2308      	movs	r3, #8
 8008024:	77fb      	strb	r3, [r7, #31]
 8008026:	e058      	b.n	80080da <UART_SetConfig+0x216>
 8008028:	2310      	movs	r3, #16
 800802a:	77fb      	strb	r3, [r7, #31]
 800802c:	e055      	b.n	80080da <UART_SetConfig+0x216>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a6e      	ldr	r2, [pc, #440]	; (80081ec <UART_SetConfig+0x328>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d124      	bne.n	8008082 <UART_SetConfig+0x1be>
 8008038:	4b69      	ldr	r3, [pc, #420]	; (80081e0 <UART_SetConfig+0x31c>)
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008044:	d011      	beq.n	800806a <UART_SetConfig+0x1a6>
 8008046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800804a:	d817      	bhi.n	800807c <UART_SetConfig+0x1b8>
 800804c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008050:	d011      	beq.n	8008076 <UART_SetConfig+0x1b2>
 8008052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008056:	d811      	bhi.n	800807c <UART_SetConfig+0x1b8>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <UART_SetConfig+0x1a0>
 800805c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008060:	d006      	beq.n	8008070 <UART_SetConfig+0x1ac>
 8008062:	e00b      	b.n	800807c <UART_SetConfig+0x1b8>
 8008064:	2300      	movs	r3, #0
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e037      	b.n	80080da <UART_SetConfig+0x216>
 800806a:	2302      	movs	r3, #2
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e034      	b.n	80080da <UART_SetConfig+0x216>
 8008070:	2304      	movs	r3, #4
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e031      	b.n	80080da <UART_SetConfig+0x216>
 8008076:	2308      	movs	r3, #8
 8008078:	77fb      	strb	r3, [r7, #31]
 800807a:	e02e      	b.n	80080da <UART_SetConfig+0x216>
 800807c:	2310      	movs	r3, #16
 800807e:	77fb      	strb	r3, [r7, #31]
 8008080:	e02b      	b.n	80080da <UART_SetConfig+0x216>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a5a      	ldr	r2, [pc, #360]	; (80081f0 <UART_SetConfig+0x32c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d124      	bne.n	80080d6 <UART_SetConfig+0x212>
 800808c:	4b54      	ldr	r3, [pc, #336]	; (80081e0 <UART_SetConfig+0x31c>)
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008098:	d011      	beq.n	80080be <UART_SetConfig+0x1fa>
 800809a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800809e:	d817      	bhi.n	80080d0 <UART_SetConfig+0x20c>
 80080a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080a4:	d011      	beq.n	80080ca <UART_SetConfig+0x206>
 80080a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080aa:	d811      	bhi.n	80080d0 <UART_SetConfig+0x20c>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <UART_SetConfig+0x1f4>
 80080b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b4:	d006      	beq.n	80080c4 <UART_SetConfig+0x200>
 80080b6:	e00b      	b.n	80080d0 <UART_SetConfig+0x20c>
 80080b8:	2300      	movs	r3, #0
 80080ba:	77fb      	strb	r3, [r7, #31]
 80080bc:	e00d      	b.n	80080da <UART_SetConfig+0x216>
 80080be:	2302      	movs	r3, #2
 80080c0:	77fb      	strb	r3, [r7, #31]
 80080c2:	e00a      	b.n	80080da <UART_SetConfig+0x216>
 80080c4:	2304      	movs	r3, #4
 80080c6:	77fb      	strb	r3, [r7, #31]
 80080c8:	e007      	b.n	80080da <UART_SetConfig+0x216>
 80080ca:	2308      	movs	r3, #8
 80080cc:	77fb      	strb	r3, [r7, #31]
 80080ce:	e004      	b.n	80080da <UART_SetConfig+0x216>
 80080d0:	2310      	movs	r3, #16
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e001      	b.n	80080da <UART_SetConfig+0x216>
 80080d6:	2310      	movs	r3, #16
 80080d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e2:	d15b      	bne.n	800819c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80080e4:	7ffb      	ldrb	r3, [r7, #31]
 80080e6:	2b08      	cmp	r3, #8
 80080e8:	d827      	bhi.n	800813a <UART_SetConfig+0x276>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <UART_SetConfig+0x22c>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008115 	.word	0x08008115
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	08008125 	.word	0x08008125
 80080fc:	0800813b 	.word	0x0800813b
 8008100:	0800812b 	.word	0x0800812b
 8008104:	0800813b 	.word	0x0800813b
 8008108:	0800813b 	.word	0x0800813b
 800810c:	0800813b 	.word	0x0800813b
 8008110:	08008133 	.word	0x08008133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008114:	f7fd fab4 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8008118:	61b8      	str	r0, [r7, #24]
        break;
 800811a:	e013      	b.n	8008144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800811c:	f7fd fad2 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 8008120:	61b8      	str	r0, [r7, #24]
        break;
 8008122:	e00f      	b.n	8008144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008124:	4b33      	ldr	r3, [pc, #204]	; (80081f4 <UART_SetConfig+0x330>)
 8008126:	61bb      	str	r3, [r7, #24]
        break;
 8008128:	e00c      	b.n	8008144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800812a:	f7fd fa33 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 800812e:	61b8      	str	r0, [r7, #24]
        break;
 8008130:	e008      	b.n	8008144 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008136:	61bb      	str	r3, [r7, #24]
        break;
 8008138:	e004      	b.n	8008144 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	77bb      	strb	r3, [r7, #30]
        break;
 8008142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 8082 	beq.w	8008250 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	005a      	lsls	r2, r3, #1
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	441a      	add	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008160:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b0f      	cmp	r3, #15
 8008166:	d916      	bls.n	8008196 <UART_SetConfig+0x2d2>
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800816e:	d212      	bcs.n	8008196 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	b29b      	uxth	r3, r3
 8008174:	f023 030f 	bic.w	r3, r3, #15
 8008178:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	085b      	lsrs	r3, r3, #1
 800817e:	b29b      	uxth	r3, r3
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	b29a      	uxth	r2, r3
 8008186:	89fb      	ldrh	r3, [r7, #14]
 8008188:	4313      	orrs	r3, r2
 800818a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	89fa      	ldrh	r2, [r7, #14]
 8008192:	60da      	str	r2, [r3, #12]
 8008194:	e05c      	b.n	8008250 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	77bb      	strb	r3, [r7, #30]
 800819a:	e059      	b.n	8008250 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800819c:	7ffb      	ldrb	r3, [r7, #31]
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d835      	bhi.n	800820e <UART_SetConfig+0x34a>
 80081a2:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <UART_SetConfig+0x2e4>)
 80081a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a8:	080081cd 	.word	0x080081cd
 80081ac:	080081d5 	.word	0x080081d5
 80081b0:	080081f9 	.word	0x080081f9
 80081b4:	0800820f 	.word	0x0800820f
 80081b8:	080081ff 	.word	0x080081ff
 80081bc:	0800820f 	.word	0x0800820f
 80081c0:	0800820f 	.word	0x0800820f
 80081c4:	0800820f 	.word	0x0800820f
 80081c8:	08008207 	.word	0x08008207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081cc:	f7fd fa58 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80081d0:	61b8      	str	r0, [r7, #24]
        break;
 80081d2:	e021      	b.n	8008218 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d4:	f7fd fa76 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 80081d8:	61b8      	str	r0, [r7, #24]
        break;
 80081da:	e01d      	b.n	8008218 <UART_SetConfig+0x354>
 80081dc:	40013800 	.word	0x40013800
 80081e0:	40021000 	.word	0x40021000
 80081e4:	40004400 	.word	0x40004400
 80081e8:	40004800 	.word	0x40004800
 80081ec:	40004c00 	.word	0x40004c00
 80081f0:	40005000 	.word	0x40005000
 80081f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <UART_SetConfig+0x3a4>)
 80081fa:	61bb      	str	r3, [r7, #24]
        break;
 80081fc:	e00c      	b.n	8008218 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081fe:	f7fd f9c9 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8008202:	61b8      	str	r0, [r7, #24]
        break;
 8008204:	e008      	b.n	8008218 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820a:	61bb      	str	r3, [r7, #24]
        break;
 800820c:	e004      	b.n	8008218 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	77bb      	strb	r3, [r7, #30]
        break;
 8008216:	bf00      	nop
    }

    if (pclk != 0U)
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d018      	beq.n	8008250 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	085a      	lsrs	r2, r3, #1
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	441a      	add	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d909      	bls.n	800824c <UART_SetConfig+0x388>
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823e:	d205      	bcs.n	800824c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	b29a      	uxth	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	e001      	b.n	8008250 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800825c:	7fbb      	ldrb	r3, [r7, #30]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	007a1200 	.word	0x007a1200

0800826c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	f003 0310 	and.w	r3, r3, #16
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01a      	beq.n	8008382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800836a:	d10a      	bne.n	8008382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	605a      	str	r2, [r3, #4]
  }
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b098      	sub	sp, #96	; 0x60
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083c0:	f7fb f9bc 	bl	800373c <HAL_GetTick>
 80083c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0308 	and.w	r3, r3, #8
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d12e      	bne.n	8008432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083dc:	2200      	movs	r2, #0
 80083de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f88c 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d021      	beq.n	8008432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008402:	653b      	str	r3, [r7, #80]	; 0x50
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800840c:	647b      	str	r3, [r7, #68]	; 0x44
 800840e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800841a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2220      	movs	r2, #32
 8008424:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e062      	b.n	80084f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b04      	cmp	r3, #4
 800843e:	d149      	bne.n	80084d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008448:	2200      	movs	r2, #0
 800844a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f856 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d03c      	beq.n	80084d4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	623b      	str	r3, [r7, #32]
   return(result);
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008478:	633b      	str	r3, [r7, #48]	; 0x30
 800847a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800847e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008480:	e841 2300 	strex	r3, r2, [r1]
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e6      	bne.n	800845a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3308      	adds	r3, #8
 8008492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	60fb      	str	r3, [r7, #12]
   return(result);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ac:	61fa      	str	r2, [r7, #28]
 80084ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	69b9      	ldr	r1, [r7, #24]
 80084b2:	69fa      	ldr	r2, [r7, #28]
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	617b      	str	r3, [r7, #20]
   return(result);
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e5      	bne.n	800848c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e011      	b.n	80084f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3758      	adds	r7, #88	; 0x58
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008510:	e049      	b.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d045      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851a:	f7fb f90f 	bl	800373c <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	429a      	cmp	r2, r3
 8008528:	d302      	bcc.n	8008530 <UART_WaitOnFlagUntilTimeout+0x30>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e048      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d031      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b08      	cmp	r3, #8
 800854e:	d110      	bne.n	8008572 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2208      	movs	r2, #8
 8008556:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f838 	bl	80085ce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2208      	movs	r2, #8
 8008562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e029      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800857c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008580:	d111      	bne.n	80085a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800858a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f81e 	bl	80085ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2220      	movs	r2, #32
 8008596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e00f      	b.n	80085c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4013      	ands	r3, r2
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	bf0c      	ite	eq
 80085b6:	2301      	moveq	r3, #1
 80085b8:	2300      	movne	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d0a6      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b095      	sub	sp, #84	; 0x54
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f4:	643b      	str	r3, [r7, #64]	; 0x40
 80085f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	61fb      	str	r3, [r7, #28]
   return(result);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800862a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800862e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008640:	2b01      	cmp	r3, #1
 8008642:	d118      	bne.n	8008676 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	60bb      	str	r3, [r7, #8]
   return(result);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	647b      	str	r3, [r7, #68]	; 0x44
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6979      	ldr	r1, [r7, #20]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e6      	bne.n	8008644 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	669a      	str	r2, [r3, #104]	; 0x68
}
 800868a:	bf00      	nop
 800868c:	3754      	adds	r7, #84	; 0x54
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff fbef 	bl	8007e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b088      	sub	sp, #32
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086de:	61fb      	str	r3, [r7, #28]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6979      	ldr	r1, [r7, #20]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	613b      	str	r3, [r7, #16]
   return(result);
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e6      	bne.n	80086ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fbbb 	bl	8007e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800870e:	bf00      	nop
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800872a:	b480      	push	{r7}
 800872c:	b085      	sub	sp, #20
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008732:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008736:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	b29b      	uxth	r3, r3
 8008744:	43db      	mvns	r3, r3
 8008746:	b29b      	uxth	r3, r3
 8008748:	4013      	ands	r3, r2
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008760:	b084      	sub	sp, #16
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	f107 0014 	add.w	r0, r7, #20
 800876e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	b004      	add	sp, #16
 80087a0:	4770      	bx	lr
	...

080087a4 <__errno>:
 80087a4:	4b01      	ldr	r3, [pc, #4]	; (80087ac <__errno+0x8>)
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000090 	.word	0x20000090

080087b0 <__libc_init_array>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4d0d      	ldr	r5, [pc, #52]	; (80087e8 <__libc_init_array+0x38>)
 80087b4:	4c0d      	ldr	r4, [pc, #52]	; (80087ec <__libc_init_array+0x3c>)
 80087b6:	1b64      	subs	r4, r4, r5
 80087b8:	10a4      	asrs	r4, r4, #2
 80087ba:	2600      	movs	r6, #0
 80087bc:	42a6      	cmp	r6, r4
 80087be:	d109      	bne.n	80087d4 <__libc_init_array+0x24>
 80087c0:	4d0b      	ldr	r5, [pc, #44]	; (80087f0 <__libc_init_array+0x40>)
 80087c2:	4c0c      	ldr	r4, [pc, #48]	; (80087f4 <__libc_init_array+0x44>)
 80087c4:	f001 fa96 	bl	8009cf4 <_init>
 80087c8:	1b64      	subs	r4, r4, r5
 80087ca:	10a4      	asrs	r4, r4, #2
 80087cc:	2600      	movs	r6, #0
 80087ce:	42a6      	cmp	r6, r4
 80087d0:	d105      	bne.n	80087de <__libc_init_array+0x2e>
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d8:	4798      	blx	r3
 80087da:	3601      	adds	r6, #1
 80087dc:	e7ee      	b.n	80087bc <__libc_init_array+0xc>
 80087de:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e2:	4798      	blx	r3
 80087e4:	3601      	adds	r6, #1
 80087e6:	e7f2      	b.n	80087ce <__libc_init_array+0x1e>
 80087e8:	0800a178 	.word	0x0800a178
 80087ec:	0800a178 	.word	0x0800a178
 80087f0:	0800a178 	.word	0x0800a178
 80087f4:	0800a17c 	.word	0x0800a17c

080087f8 <memset>:
 80087f8:	4402      	add	r2, r0
 80087fa:	4603      	mov	r3, r0
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d100      	bne.n	8008802 <memset+0xa>
 8008800:	4770      	bx	lr
 8008802:	f803 1b01 	strb.w	r1, [r3], #1
 8008806:	e7f9      	b.n	80087fc <memset+0x4>

08008808 <srand>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4b10      	ldr	r3, [pc, #64]	; (800884c <srand+0x44>)
 800880c:	681d      	ldr	r5, [r3, #0]
 800880e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008810:	4604      	mov	r4, r0
 8008812:	b9b3      	cbnz	r3, 8008842 <srand+0x3a>
 8008814:	2018      	movs	r0, #24
 8008816:	f000 f8df 	bl	80089d8 <malloc>
 800881a:	4602      	mov	r2, r0
 800881c:	63a8      	str	r0, [r5, #56]	; 0x38
 800881e:	b920      	cbnz	r0, 800882a <srand+0x22>
 8008820:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <srand+0x48>)
 8008822:	480c      	ldr	r0, [pc, #48]	; (8008854 <srand+0x4c>)
 8008824:	2142      	movs	r1, #66	; 0x42
 8008826:	f000 f895 	bl	8008954 <__assert_func>
 800882a:	490b      	ldr	r1, [pc, #44]	; (8008858 <srand+0x50>)
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <srand+0x54>)
 800882e:	e9c0 1300 	strd	r1, r3, [r0]
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <srand+0x58>)
 8008834:	6083      	str	r3, [r0, #8]
 8008836:	230b      	movs	r3, #11
 8008838:	8183      	strh	r3, [r0, #12]
 800883a:	2100      	movs	r1, #0
 800883c:	2001      	movs	r0, #1
 800883e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008842:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008844:	2200      	movs	r2, #0
 8008846:	611c      	str	r4, [r3, #16]
 8008848:	615a      	str	r2, [r3, #20]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000090 	.word	0x20000090
 8008850:	0800a034 	.word	0x0800a034
 8008854:	0800a04b 	.word	0x0800a04b
 8008858:	abcd330e 	.word	0xabcd330e
 800885c:	e66d1234 	.word	0xe66d1234
 8008860:	0005deec 	.word	0x0005deec

08008864 <rand>:
 8008864:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <rand+0x5c>)
 8008866:	b510      	push	{r4, lr}
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800886c:	b9b3      	cbnz	r3, 800889c <rand+0x38>
 800886e:	2018      	movs	r0, #24
 8008870:	f000 f8b2 	bl	80089d8 <malloc>
 8008874:	63a0      	str	r0, [r4, #56]	; 0x38
 8008876:	b928      	cbnz	r0, 8008884 <rand+0x20>
 8008878:	4602      	mov	r2, r0
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <rand+0x60>)
 800887c:	4812      	ldr	r0, [pc, #72]	; (80088c8 <rand+0x64>)
 800887e:	214e      	movs	r1, #78	; 0x4e
 8008880:	f000 f868 	bl	8008954 <__assert_func>
 8008884:	4a11      	ldr	r2, [pc, #68]	; (80088cc <rand+0x68>)
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <rand+0x6c>)
 8008888:	e9c0 2300 	strd	r2, r3, [r0]
 800888c:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <rand+0x70>)
 800888e:	6083      	str	r3, [r0, #8]
 8008890:	230b      	movs	r3, #11
 8008892:	8183      	strh	r3, [r0, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	2300      	movs	r3, #0
 8008898:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800889c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800889e:	4a0e      	ldr	r2, [pc, #56]	; (80088d8 <rand+0x74>)
 80088a0:	6920      	ldr	r0, [r4, #16]
 80088a2:	6963      	ldr	r3, [r4, #20]
 80088a4:	490d      	ldr	r1, [pc, #52]	; (80088dc <rand+0x78>)
 80088a6:	4342      	muls	r2, r0
 80088a8:	fb01 2203 	mla	r2, r1, r3, r2
 80088ac:	fba0 0101 	umull	r0, r1, r0, r1
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	eb42 0001 	adc.w	r0, r2, r1
 80088b6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80088ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80088be:	bd10      	pop	{r4, pc}
 80088c0:	20000090 	.word	0x20000090
 80088c4:	0800a034 	.word	0x0800a034
 80088c8:	0800a04b 	.word	0x0800a04b
 80088cc:	abcd330e 	.word	0xabcd330e
 80088d0:	e66d1234 	.word	0xe66d1234
 80088d4:	0005deec 	.word	0x0005deec
 80088d8:	5851f42d 	.word	0x5851f42d
 80088dc:	4c957f2d 	.word	0x4c957f2d

080088e0 <siprintf>:
 80088e0:	b40e      	push	{r1, r2, r3}
 80088e2:	b500      	push	{lr}
 80088e4:	b09c      	sub	sp, #112	; 0x70
 80088e6:	ab1d      	add	r3, sp, #116	; 0x74
 80088e8:	9002      	str	r0, [sp, #8]
 80088ea:	9006      	str	r0, [sp, #24]
 80088ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f0:	4809      	ldr	r0, [pc, #36]	; (8008918 <siprintf+0x38>)
 80088f2:	9107      	str	r1, [sp, #28]
 80088f4:	9104      	str	r1, [sp, #16]
 80088f6:	4909      	ldr	r1, [pc, #36]	; (800891c <siprintf+0x3c>)
 80088f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fc:	9105      	str	r1, [sp, #20]
 80088fe:	6800      	ldr	r0, [r0, #0]
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	a902      	add	r1, sp, #8
 8008904:	f000 f9ac 	bl	8008c60 <_svfiprintf_r>
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	b01c      	add	sp, #112	; 0x70
 8008910:	f85d eb04 	ldr.w	lr, [sp], #4
 8008914:	b003      	add	sp, #12
 8008916:	4770      	bx	lr
 8008918:	20000090 	.word	0x20000090
 800891c:	ffff0208 	.word	0xffff0208

08008920 <time>:
 8008920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008922:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <time+0x30>)
 8008924:	2200      	movs	r2, #0
 8008926:	4669      	mov	r1, sp
 8008928:	4604      	mov	r4, r0
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	f000 f842 	bl	80089b4 <_gettimeofday_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	bfbe      	ittt	lt
 8008934:	f04f 32ff 	movlt.w	r2, #4294967295
 8008938:	f04f 33ff 	movlt.w	r3, #4294967295
 800893c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008944:	b10c      	cbz	r4, 800894a <time+0x2a>
 8008946:	e9c4 0100 	strd	r0, r1, [r4]
 800894a:	b004      	add	sp, #16
 800894c:	bd10      	pop	{r4, pc}
 800894e:	bf00      	nop
 8008950:	20000090 	.word	0x20000090

08008954 <__assert_func>:
 8008954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008956:	4614      	mov	r4, r2
 8008958:	461a      	mov	r2, r3
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <__assert_func+0x2c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4605      	mov	r5, r0
 8008960:	68d8      	ldr	r0, [r3, #12]
 8008962:	b14c      	cbz	r4, 8008978 <__assert_func+0x24>
 8008964:	4b07      	ldr	r3, [pc, #28]	; (8008984 <__assert_func+0x30>)
 8008966:	9100      	str	r1, [sp, #0]
 8008968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800896c:	4906      	ldr	r1, [pc, #24]	; (8008988 <__assert_func+0x34>)
 800896e:	462b      	mov	r3, r5
 8008970:	f000 f80e 	bl	8008990 <fiprintf>
 8008974:	f000 fe32 	bl	80095dc <abort>
 8008978:	4b04      	ldr	r3, [pc, #16]	; (800898c <__assert_func+0x38>)
 800897a:	461c      	mov	r4, r3
 800897c:	e7f3      	b.n	8008966 <__assert_func+0x12>
 800897e:	bf00      	nop
 8008980:	20000090 	.word	0x20000090
 8008984:	0800a0a6 	.word	0x0800a0a6
 8008988:	0800a0b3 	.word	0x0800a0b3
 800898c:	0800a0e1 	.word	0x0800a0e1

08008990 <fiprintf>:
 8008990:	b40e      	push	{r1, r2, r3}
 8008992:	b503      	push	{r0, r1, lr}
 8008994:	4601      	mov	r1, r0
 8008996:	ab03      	add	r3, sp, #12
 8008998:	4805      	ldr	r0, [pc, #20]	; (80089b0 <fiprintf+0x20>)
 800899a:	f853 2b04 	ldr.w	r2, [r3], #4
 800899e:	6800      	ldr	r0, [r0, #0]
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	f000 fa87 	bl	8008eb4 <_vfiprintf_r>
 80089a6:	b002      	add	sp, #8
 80089a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089ac:	b003      	add	sp, #12
 80089ae:	4770      	bx	lr
 80089b0:	20000090 	.word	0x20000090

080089b4 <_gettimeofday_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_gettimeofday_r+0x20>)
 80089b8:	2300      	movs	r3, #0
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	4611      	mov	r1, r2
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	f001 f98f 	bl	8009ce4 <_gettimeofday>
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	d102      	bne.n	80089d0 <_gettimeofday_r+0x1c>
 80089ca:	682b      	ldr	r3, [r5, #0]
 80089cc:	b103      	cbz	r3, 80089d0 <_gettimeofday_r+0x1c>
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	bd38      	pop	{r3, r4, r5, pc}
 80089d2:	bf00      	nop
 80089d4:	20000dbc 	.word	0x20000dbc

080089d8 <malloc>:
 80089d8:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <malloc+0xc>)
 80089da:	4601      	mov	r1, r0
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	f000 b86f 	b.w	8008ac0 <_malloc_r>
 80089e2:	bf00      	nop
 80089e4:	20000090 	.word	0x20000090

080089e8 <_free_r>:
 80089e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ea:	2900      	cmp	r1, #0
 80089ec:	d044      	beq.n	8008a78 <_free_r+0x90>
 80089ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089f2:	9001      	str	r0, [sp, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f1a1 0404 	sub.w	r4, r1, #4
 80089fa:	bfb8      	it	lt
 80089fc:	18e4      	addlt	r4, r4, r3
 80089fe:	f001 f83d 	bl	8009a7c <__malloc_lock>
 8008a02:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <_free_r+0x94>)
 8008a04:	9801      	ldr	r0, [sp, #4]
 8008a06:	6813      	ldr	r3, [r2, #0]
 8008a08:	b933      	cbnz	r3, 8008a18 <_free_r+0x30>
 8008a0a:	6063      	str	r3, [r4, #4]
 8008a0c:	6014      	str	r4, [r2, #0]
 8008a0e:	b003      	add	sp, #12
 8008a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a14:	f001 b838 	b.w	8009a88 <__malloc_unlock>
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d908      	bls.n	8008a2e <_free_r+0x46>
 8008a1c:	6825      	ldr	r5, [r4, #0]
 8008a1e:	1961      	adds	r1, r4, r5
 8008a20:	428b      	cmp	r3, r1
 8008a22:	bf01      	itttt	eq
 8008a24:	6819      	ldreq	r1, [r3, #0]
 8008a26:	685b      	ldreq	r3, [r3, #4]
 8008a28:	1949      	addeq	r1, r1, r5
 8008a2a:	6021      	streq	r1, [r4, #0]
 8008a2c:	e7ed      	b.n	8008a0a <_free_r+0x22>
 8008a2e:	461a      	mov	r2, r3
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b10b      	cbz	r3, 8008a38 <_free_r+0x50>
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d9fa      	bls.n	8008a2e <_free_r+0x46>
 8008a38:	6811      	ldr	r1, [r2, #0]
 8008a3a:	1855      	adds	r5, r2, r1
 8008a3c:	42a5      	cmp	r5, r4
 8008a3e:	d10b      	bne.n	8008a58 <_free_r+0x70>
 8008a40:	6824      	ldr	r4, [r4, #0]
 8008a42:	4421      	add	r1, r4
 8008a44:	1854      	adds	r4, r2, r1
 8008a46:	42a3      	cmp	r3, r4
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	d1e0      	bne.n	8008a0e <_free_r+0x26>
 8008a4c:	681c      	ldr	r4, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	6053      	str	r3, [r2, #4]
 8008a52:	4421      	add	r1, r4
 8008a54:	6011      	str	r1, [r2, #0]
 8008a56:	e7da      	b.n	8008a0e <_free_r+0x26>
 8008a58:	d902      	bls.n	8008a60 <_free_r+0x78>
 8008a5a:	230c      	movs	r3, #12
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	e7d6      	b.n	8008a0e <_free_r+0x26>
 8008a60:	6825      	ldr	r5, [r4, #0]
 8008a62:	1961      	adds	r1, r4, r5
 8008a64:	428b      	cmp	r3, r1
 8008a66:	bf04      	itt	eq
 8008a68:	6819      	ldreq	r1, [r3, #0]
 8008a6a:	685b      	ldreq	r3, [r3, #4]
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	bf04      	itt	eq
 8008a70:	1949      	addeq	r1, r1, r5
 8008a72:	6021      	streq	r1, [r4, #0]
 8008a74:	6054      	str	r4, [r2, #4]
 8008a76:	e7ca      	b.n	8008a0e <_free_r+0x26>
 8008a78:	b003      	add	sp, #12
 8008a7a:	bd30      	pop	{r4, r5, pc}
 8008a7c:	20000db4 	.word	0x20000db4

08008a80 <sbrk_aligned>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	4e0e      	ldr	r6, [pc, #56]	; (8008abc <sbrk_aligned+0x3c>)
 8008a84:	460c      	mov	r4, r1
 8008a86:	6831      	ldr	r1, [r6, #0]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	b911      	cbnz	r1, 8008a92 <sbrk_aligned+0x12>
 8008a8c:	f000 fcd6 	bl	800943c <_sbrk_r>
 8008a90:	6030      	str	r0, [r6, #0]
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 fcd1 	bl	800943c <_sbrk_r>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d00a      	beq.n	8008ab4 <sbrk_aligned+0x34>
 8008a9e:	1cc4      	adds	r4, r0, #3
 8008aa0:	f024 0403 	bic.w	r4, r4, #3
 8008aa4:	42a0      	cmp	r0, r4
 8008aa6:	d007      	beq.n	8008ab8 <sbrk_aligned+0x38>
 8008aa8:	1a21      	subs	r1, r4, r0
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f000 fcc6 	bl	800943c <_sbrk_r>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d101      	bne.n	8008ab8 <sbrk_aligned+0x38>
 8008ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ab8:	4620      	mov	r0, r4
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	20000db8 	.word	0x20000db8

08008ac0 <_malloc_r>:
 8008ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac4:	1ccd      	adds	r5, r1, #3
 8008ac6:	f025 0503 	bic.w	r5, r5, #3
 8008aca:	3508      	adds	r5, #8
 8008acc:	2d0c      	cmp	r5, #12
 8008ace:	bf38      	it	cc
 8008ad0:	250c      	movcc	r5, #12
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	db01      	blt.n	8008adc <_malloc_r+0x1c>
 8008ad8:	42a9      	cmp	r1, r5
 8008ada:	d905      	bls.n	8008ae8 <_malloc_r+0x28>
 8008adc:	230c      	movs	r3, #12
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	2600      	movs	r6, #0
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	4e2e      	ldr	r6, [pc, #184]	; (8008ba4 <_malloc_r+0xe4>)
 8008aea:	f000 ffc7 	bl	8009a7c <__malloc_lock>
 8008aee:	6833      	ldr	r3, [r6, #0]
 8008af0:	461c      	mov	r4, r3
 8008af2:	bb34      	cbnz	r4, 8008b42 <_malloc_r+0x82>
 8008af4:	4629      	mov	r1, r5
 8008af6:	4638      	mov	r0, r7
 8008af8:	f7ff ffc2 	bl	8008a80 <sbrk_aligned>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	4604      	mov	r4, r0
 8008b00:	d14d      	bne.n	8008b9e <_malloc_r+0xde>
 8008b02:	6834      	ldr	r4, [r6, #0]
 8008b04:	4626      	mov	r6, r4
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	d140      	bne.n	8008b8c <_malloc_r+0xcc>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4638      	mov	r0, r7
 8008b10:	eb04 0803 	add.w	r8, r4, r3
 8008b14:	f000 fc92 	bl	800943c <_sbrk_r>
 8008b18:	4580      	cmp	r8, r0
 8008b1a:	d13a      	bne.n	8008b92 <_malloc_r+0xd2>
 8008b1c:	6821      	ldr	r1, [r4, #0]
 8008b1e:	3503      	adds	r5, #3
 8008b20:	1a6d      	subs	r5, r5, r1
 8008b22:	f025 0503 	bic.w	r5, r5, #3
 8008b26:	3508      	adds	r5, #8
 8008b28:	2d0c      	cmp	r5, #12
 8008b2a:	bf38      	it	cc
 8008b2c:	250c      	movcc	r5, #12
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4638      	mov	r0, r7
 8008b32:	f7ff ffa5 	bl	8008a80 <sbrk_aligned>
 8008b36:	3001      	adds	r0, #1
 8008b38:	d02b      	beq.n	8008b92 <_malloc_r+0xd2>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	442b      	add	r3, r5
 8008b3e:	6023      	str	r3, [r4, #0]
 8008b40:	e00e      	b.n	8008b60 <_malloc_r+0xa0>
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	1b52      	subs	r2, r2, r5
 8008b46:	d41e      	bmi.n	8008b86 <_malloc_r+0xc6>
 8008b48:	2a0b      	cmp	r2, #11
 8008b4a:	d916      	bls.n	8008b7a <_malloc_r+0xba>
 8008b4c:	1961      	adds	r1, r4, r5
 8008b4e:	42a3      	cmp	r3, r4
 8008b50:	6025      	str	r5, [r4, #0]
 8008b52:	bf18      	it	ne
 8008b54:	6059      	strne	r1, [r3, #4]
 8008b56:	6863      	ldr	r3, [r4, #4]
 8008b58:	bf08      	it	eq
 8008b5a:	6031      	streq	r1, [r6, #0]
 8008b5c:	5162      	str	r2, [r4, r5]
 8008b5e:	604b      	str	r3, [r1, #4]
 8008b60:	4638      	mov	r0, r7
 8008b62:	f104 060b 	add.w	r6, r4, #11
 8008b66:	f000 ff8f 	bl	8009a88 <__malloc_unlock>
 8008b6a:	f026 0607 	bic.w	r6, r6, #7
 8008b6e:	1d23      	adds	r3, r4, #4
 8008b70:	1af2      	subs	r2, r6, r3
 8008b72:	d0b6      	beq.n	8008ae2 <_malloc_r+0x22>
 8008b74:	1b9b      	subs	r3, r3, r6
 8008b76:	50a3      	str	r3, [r4, r2]
 8008b78:	e7b3      	b.n	8008ae2 <_malloc_r+0x22>
 8008b7a:	6862      	ldr	r2, [r4, #4]
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	bf0c      	ite	eq
 8008b80:	6032      	streq	r2, [r6, #0]
 8008b82:	605a      	strne	r2, [r3, #4]
 8008b84:	e7ec      	b.n	8008b60 <_malloc_r+0xa0>
 8008b86:	4623      	mov	r3, r4
 8008b88:	6864      	ldr	r4, [r4, #4]
 8008b8a:	e7b2      	b.n	8008af2 <_malloc_r+0x32>
 8008b8c:	4634      	mov	r4, r6
 8008b8e:	6876      	ldr	r6, [r6, #4]
 8008b90:	e7b9      	b.n	8008b06 <_malloc_r+0x46>
 8008b92:	230c      	movs	r3, #12
 8008b94:	603b      	str	r3, [r7, #0]
 8008b96:	4638      	mov	r0, r7
 8008b98:	f000 ff76 	bl	8009a88 <__malloc_unlock>
 8008b9c:	e7a1      	b.n	8008ae2 <_malloc_r+0x22>
 8008b9e:	6025      	str	r5, [r4, #0]
 8008ba0:	e7de      	b.n	8008b60 <_malloc_r+0xa0>
 8008ba2:	bf00      	nop
 8008ba4:	20000db4 	.word	0x20000db4

08008ba8 <__ssputs_r>:
 8008ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	688e      	ldr	r6, [r1, #8]
 8008bae:	429e      	cmp	r6, r3
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	4690      	mov	r8, r2
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	d838      	bhi.n	8008c2c <__ssputs_r+0x84>
 8008bba:	898a      	ldrh	r2, [r1, #12]
 8008bbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bc0:	d032      	beq.n	8008c28 <__ssputs_r+0x80>
 8008bc2:	6825      	ldr	r5, [r4, #0]
 8008bc4:	6909      	ldr	r1, [r1, #16]
 8008bc6:	eba5 0901 	sub.w	r9, r5, r1
 8008bca:	6965      	ldr	r5, [r4, #20]
 8008bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	444b      	add	r3, r9
 8008bd8:	106d      	asrs	r5, r5, #1
 8008bda:	429d      	cmp	r5, r3
 8008bdc:	bf38      	it	cc
 8008bde:	461d      	movcc	r5, r3
 8008be0:	0553      	lsls	r3, r2, #21
 8008be2:	d531      	bpl.n	8008c48 <__ssputs_r+0xa0>
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7ff ff6b 	bl	8008ac0 <_malloc_r>
 8008bea:	4606      	mov	r6, r0
 8008bec:	b950      	cbnz	r0, 8008c04 <__ssputs_r+0x5c>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	f8ca 3000 	str.w	r3, [sl]
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c04:	6921      	ldr	r1, [r4, #16]
 8008c06:	464a      	mov	r2, r9
 8008c08:	f000 ff10 	bl	8009a2c <memcpy>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	6126      	str	r6, [r4, #16]
 8008c1a:	6165      	str	r5, [r4, #20]
 8008c1c:	444e      	add	r6, r9
 8008c1e:	eba5 0509 	sub.w	r5, r5, r9
 8008c22:	6026      	str	r6, [r4, #0]
 8008c24:	60a5      	str	r5, [r4, #8]
 8008c26:	463e      	mov	r6, r7
 8008c28:	42be      	cmp	r6, r7
 8008c2a:	d900      	bls.n	8008c2e <__ssputs_r+0x86>
 8008c2c:	463e      	mov	r6, r7
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	4632      	mov	r2, r6
 8008c32:	4641      	mov	r1, r8
 8008c34:	f000 ff08 	bl	8009a48 <memmove>
 8008c38:	68a3      	ldr	r3, [r4, #8]
 8008c3a:	1b9b      	subs	r3, r3, r6
 8008c3c:	60a3      	str	r3, [r4, #8]
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	4433      	add	r3, r6
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	2000      	movs	r0, #0
 8008c46:	e7db      	b.n	8008c00 <__ssputs_r+0x58>
 8008c48:	462a      	mov	r2, r5
 8008c4a:	f000 ff23 	bl	8009a94 <_realloc_r>
 8008c4e:	4606      	mov	r6, r0
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1e1      	bne.n	8008c18 <__ssputs_r+0x70>
 8008c54:	6921      	ldr	r1, [r4, #16]
 8008c56:	4650      	mov	r0, sl
 8008c58:	f7ff fec6 	bl	80089e8 <_free_r>
 8008c5c:	e7c7      	b.n	8008bee <__ssputs_r+0x46>
	...

08008c60 <_svfiprintf_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4698      	mov	r8, r3
 8008c66:	898b      	ldrh	r3, [r1, #12]
 8008c68:	061b      	lsls	r3, r3, #24
 8008c6a:	b09d      	sub	sp, #116	; 0x74
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	460d      	mov	r5, r1
 8008c70:	4614      	mov	r4, r2
 8008c72:	d50e      	bpl.n	8008c92 <_svfiprintf_r+0x32>
 8008c74:	690b      	ldr	r3, [r1, #16]
 8008c76:	b963      	cbnz	r3, 8008c92 <_svfiprintf_r+0x32>
 8008c78:	2140      	movs	r1, #64	; 0x40
 8008c7a:	f7ff ff21 	bl	8008ac0 <_malloc_r>
 8008c7e:	6028      	str	r0, [r5, #0]
 8008c80:	6128      	str	r0, [r5, #16]
 8008c82:	b920      	cbnz	r0, 8008c8e <_svfiprintf_r+0x2e>
 8008c84:	230c      	movs	r3, #12
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e0d1      	b.n	8008e32 <_svfiprintf_r+0x1d2>
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	616b      	str	r3, [r5, #20]
 8008c92:	2300      	movs	r3, #0
 8008c94:	9309      	str	r3, [sp, #36]	; 0x24
 8008c96:	2320      	movs	r3, #32
 8008c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca0:	2330      	movs	r3, #48	; 0x30
 8008ca2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e4c <_svfiprintf_r+0x1ec>
 8008ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008caa:	f04f 0901 	mov.w	r9, #1
 8008cae:	4623      	mov	r3, r4
 8008cb0:	469a      	mov	sl, r3
 8008cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb6:	b10a      	cbz	r2, 8008cbc <_svfiprintf_r+0x5c>
 8008cb8:	2a25      	cmp	r2, #37	; 0x25
 8008cba:	d1f9      	bne.n	8008cb0 <_svfiprintf_r+0x50>
 8008cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8008cc0:	d00b      	beq.n	8008cda <_svfiprintf_r+0x7a>
 8008cc2:	465b      	mov	r3, fp
 8008cc4:	4622      	mov	r2, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff ff6d 	bl	8008ba8 <__ssputs_r>
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f000 80aa 	beq.w	8008e28 <_svfiprintf_r+0x1c8>
 8008cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd6:	445a      	add	r2, fp
 8008cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8008cda:	f89a 3000 	ldrb.w	r3, [sl]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80a2 	beq.w	8008e28 <_svfiprintf_r+0x1c8>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cee:	f10a 0a01 	add.w	sl, sl, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	9307      	str	r3, [sp, #28]
 8008cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8008cfc:	4654      	mov	r4, sl
 8008cfe:	2205      	movs	r2, #5
 8008d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d04:	4851      	ldr	r0, [pc, #324]	; (8008e4c <_svfiprintf_r+0x1ec>)
 8008d06:	f7f7 fa6b 	bl	80001e0 <memchr>
 8008d0a:	9a04      	ldr	r2, [sp, #16]
 8008d0c:	b9d8      	cbnz	r0, 8008d46 <_svfiprintf_r+0xe6>
 8008d0e:	06d0      	lsls	r0, r2, #27
 8008d10:	bf44      	itt	mi
 8008d12:	2320      	movmi	r3, #32
 8008d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d18:	0711      	lsls	r1, r2, #28
 8008d1a:	bf44      	itt	mi
 8008d1c:	232b      	movmi	r3, #43	; 0x2b
 8008d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d22:	f89a 3000 	ldrb.w	r3, [sl]
 8008d26:	2b2a      	cmp	r3, #42	; 0x2a
 8008d28:	d015      	beq.n	8008d56 <_svfiprintf_r+0xf6>
 8008d2a:	9a07      	ldr	r2, [sp, #28]
 8008d2c:	4654      	mov	r4, sl
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f04f 0c0a 	mov.w	ip, #10
 8008d34:	4621      	mov	r1, r4
 8008d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d3a:	3b30      	subs	r3, #48	; 0x30
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d94e      	bls.n	8008dde <_svfiprintf_r+0x17e>
 8008d40:	b1b0      	cbz	r0, 8008d70 <_svfiprintf_r+0x110>
 8008d42:	9207      	str	r2, [sp, #28]
 8008d44:	e014      	b.n	8008d70 <_svfiprintf_r+0x110>
 8008d46:	eba0 0308 	sub.w	r3, r0, r8
 8008d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	46a2      	mov	sl, r4
 8008d54:	e7d2      	b.n	8008cfc <_svfiprintf_r+0x9c>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	1d19      	adds	r1, r3, #4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	9103      	str	r1, [sp, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bfbb      	ittet	lt
 8008d62:	425b      	neglt	r3, r3
 8008d64:	f042 0202 	orrlt.w	r2, r2, #2
 8008d68:	9307      	strge	r3, [sp, #28]
 8008d6a:	9307      	strlt	r3, [sp, #28]
 8008d6c:	bfb8      	it	lt
 8008d6e:	9204      	strlt	r2, [sp, #16]
 8008d70:	7823      	ldrb	r3, [r4, #0]
 8008d72:	2b2e      	cmp	r3, #46	; 0x2e
 8008d74:	d10c      	bne.n	8008d90 <_svfiprintf_r+0x130>
 8008d76:	7863      	ldrb	r3, [r4, #1]
 8008d78:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7a:	d135      	bne.n	8008de8 <_svfiprintf_r+0x188>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	1d1a      	adds	r2, r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	9203      	str	r2, [sp, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfb8      	it	lt
 8008d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d8c:	3402      	adds	r4, #2
 8008d8e:	9305      	str	r3, [sp, #20]
 8008d90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e5c <_svfiprintf_r+0x1fc>
 8008d94:	7821      	ldrb	r1, [r4, #0]
 8008d96:	2203      	movs	r2, #3
 8008d98:	4650      	mov	r0, sl
 8008d9a:	f7f7 fa21 	bl	80001e0 <memchr>
 8008d9e:	b140      	cbz	r0, 8008db2 <_svfiprintf_r+0x152>
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	eba0 000a 	sub.w	r0, r0, sl
 8008da6:	fa03 f000 	lsl.w	r0, r3, r0
 8008daa:	9b04      	ldr	r3, [sp, #16]
 8008dac:	4303      	orrs	r3, r0
 8008dae:	3401      	adds	r4, #1
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db6:	4826      	ldr	r0, [pc, #152]	; (8008e50 <_svfiprintf_r+0x1f0>)
 8008db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dbc:	2206      	movs	r2, #6
 8008dbe:	f7f7 fa0f 	bl	80001e0 <memchr>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d038      	beq.n	8008e38 <_svfiprintf_r+0x1d8>
 8008dc6:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <_svfiprintf_r+0x1f4>)
 8008dc8:	bb1b      	cbnz	r3, 8008e12 <_svfiprintf_r+0x1b2>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	3307      	adds	r3, #7
 8008dce:	f023 0307 	bic.w	r3, r3, #7
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	9303      	str	r3, [sp, #12]
 8008dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd8:	4433      	add	r3, r6
 8008dda:	9309      	str	r3, [sp, #36]	; 0x24
 8008ddc:	e767      	b.n	8008cae <_svfiprintf_r+0x4e>
 8008dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de2:	460c      	mov	r4, r1
 8008de4:	2001      	movs	r0, #1
 8008de6:	e7a5      	b.n	8008d34 <_svfiprintf_r+0xd4>
 8008de8:	2300      	movs	r3, #0
 8008dea:	3401      	adds	r4, #1
 8008dec:	9305      	str	r3, [sp, #20]
 8008dee:	4619      	mov	r1, r3
 8008df0:	f04f 0c0a 	mov.w	ip, #10
 8008df4:	4620      	mov	r0, r4
 8008df6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dfa:	3a30      	subs	r2, #48	; 0x30
 8008dfc:	2a09      	cmp	r2, #9
 8008dfe:	d903      	bls.n	8008e08 <_svfiprintf_r+0x1a8>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0c5      	beq.n	8008d90 <_svfiprintf_r+0x130>
 8008e04:	9105      	str	r1, [sp, #20]
 8008e06:	e7c3      	b.n	8008d90 <_svfiprintf_r+0x130>
 8008e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7f0      	b.n	8008df4 <_svfiprintf_r+0x194>
 8008e12:	ab03      	add	r3, sp, #12
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	462a      	mov	r2, r5
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <_svfiprintf_r+0x1f8>)
 8008e1a:	a904      	add	r1, sp, #16
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f3af 8000 	nop.w
 8008e22:	1c42      	adds	r2, r0, #1
 8008e24:	4606      	mov	r6, r0
 8008e26:	d1d6      	bne.n	8008dd6 <_svfiprintf_r+0x176>
 8008e28:	89ab      	ldrh	r3, [r5, #12]
 8008e2a:	065b      	lsls	r3, r3, #25
 8008e2c:	f53f af2c 	bmi.w	8008c88 <_svfiprintf_r+0x28>
 8008e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e32:	b01d      	add	sp, #116	; 0x74
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	ab03      	add	r3, sp, #12
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <_svfiprintf_r+0x1f8>)
 8008e40:	a904      	add	r1, sp, #16
 8008e42:	4638      	mov	r0, r7
 8008e44:	f000 f9d4 	bl	80091f0 <_printf_i>
 8008e48:	e7eb      	b.n	8008e22 <_svfiprintf_r+0x1c2>
 8008e4a:	bf00      	nop
 8008e4c:	0800a0e2 	.word	0x0800a0e2
 8008e50:	0800a0ec 	.word	0x0800a0ec
 8008e54:	00000000 	.word	0x00000000
 8008e58:	08008ba9 	.word	0x08008ba9
 8008e5c:	0800a0e8 	.word	0x0800a0e8

08008e60 <__sfputc_r>:
 8008e60:	6893      	ldr	r3, [r2, #8]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	b410      	push	{r4}
 8008e68:	6093      	str	r3, [r2, #8]
 8008e6a:	da08      	bge.n	8008e7e <__sfputc_r+0x1e>
 8008e6c:	6994      	ldr	r4, [r2, #24]
 8008e6e:	42a3      	cmp	r3, r4
 8008e70:	db01      	blt.n	8008e76 <__sfputc_r+0x16>
 8008e72:	290a      	cmp	r1, #10
 8008e74:	d103      	bne.n	8008e7e <__sfputc_r+0x1e>
 8008e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e7a:	f000 baef 	b.w	800945c <__swbuf_r>
 8008e7e:	6813      	ldr	r3, [r2, #0]
 8008e80:	1c58      	adds	r0, r3, #1
 8008e82:	6010      	str	r0, [r2, #0]
 8008e84:	7019      	strb	r1, [r3, #0]
 8008e86:	4608      	mov	r0, r1
 8008e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <__sfputs_r>:
 8008e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e90:	4606      	mov	r6, r0
 8008e92:	460f      	mov	r7, r1
 8008e94:	4614      	mov	r4, r2
 8008e96:	18d5      	adds	r5, r2, r3
 8008e98:	42ac      	cmp	r4, r5
 8008e9a:	d101      	bne.n	8008ea0 <__sfputs_r+0x12>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e007      	b.n	8008eb0 <__sfputs_r+0x22>
 8008ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea4:	463a      	mov	r2, r7
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ffda 	bl	8008e60 <__sfputc_r>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d1f3      	bne.n	8008e98 <__sfputs_r+0xa>
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008eb4 <_vfiprintf_r>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	460d      	mov	r5, r1
 8008eba:	b09d      	sub	sp, #116	; 0x74
 8008ebc:	4614      	mov	r4, r2
 8008ebe:	4698      	mov	r8, r3
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	b118      	cbz	r0, 8008ecc <_vfiprintf_r+0x18>
 8008ec4:	6983      	ldr	r3, [r0, #24]
 8008ec6:	b90b      	cbnz	r3, 8008ecc <_vfiprintf_r+0x18>
 8008ec8:	f000 fcaa 	bl	8009820 <__sinit>
 8008ecc:	4b89      	ldr	r3, [pc, #548]	; (80090f4 <_vfiprintf_r+0x240>)
 8008ece:	429d      	cmp	r5, r3
 8008ed0:	d11b      	bne.n	8008f0a <_vfiprintf_r+0x56>
 8008ed2:	6875      	ldr	r5, [r6, #4]
 8008ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed6:	07d9      	lsls	r1, r3, #31
 8008ed8:	d405      	bmi.n	8008ee6 <_vfiprintf_r+0x32>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d402      	bmi.n	8008ee6 <_vfiprintf_r+0x32>
 8008ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ee2:	f000 fd3b 	bl	800995c <__retarget_lock_acquire_recursive>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	071b      	lsls	r3, r3, #28
 8008eea:	d501      	bpl.n	8008ef0 <_vfiprintf_r+0x3c>
 8008eec:	692b      	ldr	r3, [r5, #16]
 8008eee:	b9eb      	cbnz	r3, 8008f2c <_vfiprintf_r+0x78>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 fb04 	bl	8009500 <__swsetup_r>
 8008ef8:	b1c0      	cbz	r0, 8008f2c <_vfiprintf_r+0x78>
 8008efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008efc:	07dc      	lsls	r4, r3, #31
 8008efe:	d50e      	bpl.n	8008f1e <_vfiprintf_r+0x6a>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	b01d      	add	sp, #116	; 0x74
 8008f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0a:	4b7b      	ldr	r3, [pc, #492]	; (80090f8 <_vfiprintf_r+0x244>)
 8008f0c:	429d      	cmp	r5, r3
 8008f0e:	d101      	bne.n	8008f14 <_vfiprintf_r+0x60>
 8008f10:	68b5      	ldr	r5, [r6, #8]
 8008f12:	e7df      	b.n	8008ed4 <_vfiprintf_r+0x20>
 8008f14:	4b79      	ldr	r3, [pc, #484]	; (80090fc <_vfiprintf_r+0x248>)
 8008f16:	429d      	cmp	r5, r3
 8008f18:	bf08      	it	eq
 8008f1a:	68f5      	ldreq	r5, [r6, #12]
 8008f1c:	e7da      	b.n	8008ed4 <_vfiprintf_r+0x20>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	0598      	lsls	r0, r3, #22
 8008f22:	d4ed      	bmi.n	8008f00 <_vfiprintf_r+0x4c>
 8008f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f26:	f000 fd1a 	bl	800995e <__retarget_lock_release_recursive>
 8008f2a:	e7e9      	b.n	8008f00 <_vfiprintf_r+0x4c>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f30:	2320      	movs	r3, #32
 8008f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f3a:	2330      	movs	r3, #48	; 0x30
 8008f3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009100 <_vfiprintf_r+0x24c>
 8008f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f44:	f04f 0901 	mov.w	r9, #1
 8008f48:	4623      	mov	r3, r4
 8008f4a:	469a      	mov	sl, r3
 8008f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f50:	b10a      	cbz	r2, 8008f56 <_vfiprintf_r+0xa2>
 8008f52:	2a25      	cmp	r2, #37	; 0x25
 8008f54:	d1f9      	bne.n	8008f4a <_vfiprintf_r+0x96>
 8008f56:	ebba 0b04 	subs.w	fp, sl, r4
 8008f5a:	d00b      	beq.n	8008f74 <_vfiprintf_r+0xc0>
 8008f5c:	465b      	mov	r3, fp
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7ff ff93 	bl	8008e8e <__sfputs_r>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f000 80aa 	beq.w	80090c2 <_vfiprintf_r+0x20e>
 8008f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f70:	445a      	add	r2, fp
 8008f72:	9209      	str	r2, [sp, #36]	; 0x24
 8008f74:	f89a 3000 	ldrb.w	r3, [sl]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 80a2 	beq.w	80090c2 <_vfiprintf_r+0x20e>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f04f 32ff 	mov.w	r2, #4294967295
 8008f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f88:	f10a 0a01 	add.w	sl, sl, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	9307      	str	r3, [sp, #28]
 8008f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f94:	931a      	str	r3, [sp, #104]	; 0x68
 8008f96:	4654      	mov	r4, sl
 8008f98:	2205      	movs	r2, #5
 8008f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9e:	4858      	ldr	r0, [pc, #352]	; (8009100 <_vfiprintf_r+0x24c>)
 8008fa0:	f7f7 f91e 	bl	80001e0 <memchr>
 8008fa4:	9a04      	ldr	r2, [sp, #16]
 8008fa6:	b9d8      	cbnz	r0, 8008fe0 <_vfiprintf_r+0x12c>
 8008fa8:	06d1      	lsls	r1, r2, #27
 8008faa:	bf44      	itt	mi
 8008fac:	2320      	movmi	r3, #32
 8008fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb2:	0713      	lsls	r3, r2, #28
 8008fb4:	bf44      	itt	mi
 8008fb6:	232b      	movmi	r3, #43	; 0x2b
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc2:	d015      	beq.n	8008ff0 <_vfiprintf_r+0x13c>
 8008fc4:	9a07      	ldr	r2, [sp, #28]
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f04f 0c0a 	mov.w	ip, #10
 8008fce:	4621      	mov	r1, r4
 8008fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fd4:	3b30      	subs	r3, #48	; 0x30
 8008fd6:	2b09      	cmp	r3, #9
 8008fd8:	d94e      	bls.n	8009078 <_vfiprintf_r+0x1c4>
 8008fda:	b1b0      	cbz	r0, 800900a <_vfiprintf_r+0x156>
 8008fdc:	9207      	str	r2, [sp, #28]
 8008fde:	e014      	b.n	800900a <_vfiprintf_r+0x156>
 8008fe0:	eba0 0308 	sub.w	r3, r0, r8
 8008fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	9304      	str	r3, [sp, #16]
 8008fec:	46a2      	mov	sl, r4
 8008fee:	e7d2      	b.n	8008f96 <_vfiprintf_r+0xe2>
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	1d19      	adds	r1, r3, #4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	9103      	str	r1, [sp, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bfbb      	ittet	lt
 8008ffc:	425b      	neglt	r3, r3
 8008ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8009002:	9307      	strge	r3, [sp, #28]
 8009004:	9307      	strlt	r3, [sp, #28]
 8009006:	bfb8      	it	lt
 8009008:	9204      	strlt	r2, [sp, #16]
 800900a:	7823      	ldrb	r3, [r4, #0]
 800900c:	2b2e      	cmp	r3, #46	; 0x2e
 800900e:	d10c      	bne.n	800902a <_vfiprintf_r+0x176>
 8009010:	7863      	ldrb	r3, [r4, #1]
 8009012:	2b2a      	cmp	r3, #42	; 0x2a
 8009014:	d135      	bne.n	8009082 <_vfiprintf_r+0x1ce>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	1d1a      	adds	r2, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	9203      	str	r2, [sp, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfb8      	it	lt
 8009022:	f04f 33ff 	movlt.w	r3, #4294967295
 8009026:	3402      	adds	r4, #2
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009110 <_vfiprintf_r+0x25c>
 800902e:	7821      	ldrb	r1, [r4, #0]
 8009030:	2203      	movs	r2, #3
 8009032:	4650      	mov	r0, sl
 8009034:	f7f7 f8d4 	bl	80001e0 <memchr>
 8009038:	b140      	cbz	r0, 800904c <_vfiprintf_r+0x198>
 800903a:	2340      	movs	r3, #64	; 0x40
 800903c:	eba0 000a 	sub.w	r0, r0, sl
 8009040:	fa03 f000 	lsl.w	r0, r3, r0
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	4303      	orrs	r3, r0
 8009048:	3401      	adds	r4, #1
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009050:	482c      	ldr	r0, [pc, #176]	; (8009104 <_vfiprintf_r+0x250>)
 8009052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009056:	2206      	movs	r2, #6
 8009058:	f7f7 f8c2 	bl	80001e0 <memchr>
 800905c:	2800      	cmp	r0, #0
 800905e:	d03f      	beq.n	80090e0 <_vfiprintf_r+0x22c>
 8009060:	4b29      	ldr	r3, [pc, #164]	; (8009108 <_vfiprintf_r+0x254>)
 8009062:	bb1b      	cbnz	r3, 80090ac <_vfiprintf_r+0x1f8>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	3307      	adds	r3, #7
 8009068:	f023 0307 	bic.w	r3, r3, #7
 800906c:	3308      	adds	r3, #8
 800906e:	9303      	str	r3, [sp, #12]
 8009070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009072:	443b      	add	r3, r7
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	e767      	b.n	8008f48 <_vfiprintf_r+0x94>
 8009078:	fb0c 3202 	mla	r2, ip, r2, r3
 800907c:	460c      	mov	r4, r1
 800907e:	2001      	movs	r0, #1
 8009080:	e7a5      	b.n	8008fce <_vfiprintf_r+0x11a>
 8009082:	2300      	movs	r3, #0
 8009084:	3401      	adds	r4, #1
 8009086:	9305      	str	r3, [sp, #20]
 8009088:	4619      	mov	r1, r3
 800908a:	f04f 0c0a 	mov.w	ip, #10
 800908e:	4620      	mov	r0, r4
 8009090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009094:	3a30      	subs	r2, #48	; 0x30
 8009096:	2a09      	cmp	r2, #9
 8009098:	d903      	bls.n	80090a2 <_vfiprintf_r+0x1ee>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0c5      	beq.n	800902a <_vfiprintf_r+0x176>
 800909e:	9105      	str	r1, [sp, #20]
 80090a0:	e7c3      	b.n	800902a <_vfiprintf_r+0x176>
 80090a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a6:	4604      	mov	r4, r0
 80090a8:	2301      	movs	r3, #1
 80090aa:	e7f0      	b.n	800908e <_vfiprintf_r+0x1da>
 80090ac:	ab03      	add	r3, sp, #12
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	462a      	mov	r2, r5
 80090b2:	4b16      	ldr	r3, [pc, #88]	; (800910c <_vfiprintf_r+0x258>)
 80090b4:	a904      	add	r1, sp, #16
 80090b6:	4630      	mov	r0, r6
 80090b8:	f3af 8000 	nop.w
 80090bc:	4607      	mov	r7, r0
 80090be:	1c78      	adds	r0, r7, #1
 80090c0:	d1d6      	bne.n	8009070 <_vfiprintf_r+0x1bc>
 80090c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090c4:	07d9      	lsls	r1, r3, #31
 80090c6:	d405      	bmi.n	80090d4 <_vfiprintf_r+0x220>
 80090c8:	89ab      	ldrh	r3, [r5, #12]
 80090ca:	059a      	lsls	r2, r3, #22
 80090cc:	d402      	bmi.n	80090d4 <_vfiprintf_r+0x220>
 80090ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d0:	f000 fc45 	bl	800995e <__retarget_lock_release_recursive>
 80090d4:	89ab      	ldrh	r3, [r5, #12]
 80090d6:	065b      	lsls	r3, r3, #25
 80090d8:	f53f af12 	bmi.w	8008f00 <_vfiprintf_r+0x4c>
 80090dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090de:	e711      	b.n	8008f04 <_vfiprintf_r+0x50>
 80090e0:	ab03      	add	r3, sp, #12
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	462a      	mov	r2, r5
 80090e6:	4b09      	ldr	r3, [pc, #36]	; (800910c <_vfiprintf_r+0x258>)
 80090e8:	a904      	add	r1, sp, #16
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f880 	bl	80091f0 <_printf_i>
 80090f0:	e7e4      	b.n	80090bc <_vfiprintf_r+0x208>
 80090f2:	bf00      	nop
 80090f4:	0800a138 	.word	0x0800a138
 80090f8:	0800a158 	.word	0x0800a158
 80090fc:	0800a118 	.word	0x0800a118
 8009100:	0800a0e2 	.word	0x0800a0e2
 8009104:	0800a0ec 	.word	0x0800a0ec
 8009108:	00000000 	.word	0x00000000
 800910c:	08008e8f 	.word	0x08008e8f
 8009110:	0800a0e8 	.word	0x0800a0e8

08009114 <_printf_common>:
 8009114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	4616      	mov	r6, r2
 800911a:	4699      	mov	r9, r3
 800911c:	688a      	ldr	r2, [r1, #8]
 800911e:	690b      	ldr	r3, [r1, #16]
 8009120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009124:	4293      	cmp	r3, r2
 8009126:	bfb8      	it	lt
 8009128:	4613      	movlt	r3, r2
 800912a:	6033      	str	r3, [r6, #0]
 800912c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009130:	4607      	mov	r7, r0
 8009132:	460c      	mov	r4, r1
 8009134:	b10a      	cbz	r2, 800913a <_printf_common+0x26>
 8009136:	3301      	adds	r3, #1
 8009138:	6033      	str	r3, [r6, #0]
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	0699      	lsls	r1, r3, #26
 800913e:	bf42      	ittt	mi
 8009140:	6833      	ldrmi	r3, [r6, #0]
 8009142:	3302      	addmi	r3, #2
 8009144:	6033      	strmi	r3, [r6, #0]
 8009146:	6825      	ldr	r5, [r4, #0]
 8009148:	f015 0506 	ands.w	r5, r5, #6
 800914c:	d106      	bne.n	800915c <_printf_common+0x48>
 800914e:	f104 0a19 	add.w	sl, r4, #25
 8009152:	68e3      	ldr	r3, [r4, #12]
 8009154:	6832      	ldr	r2, [r6, #0]
 8009156:	1a9b      	subs	r3, r3, r2
 8009158:	42ab      	cmp	r3, r5
 800915a:	dc26      	bgt.n	80091aa <_printf_common+0x96>
 800915c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009160:	1e13      	subs	r3, r2, #0
 8009162:	6822      	ldr	r2, [r4, #0]
 8009164:	bf18      	it	ne
 8009166:	2301      	movne	r3, #1
 8009168:	0692      	lsls	r2, r2, #26
 800916a:	d42b      	bmi.n	80091c4 <_printf_common+0xb0>
 800916c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009170:	4649      	mov	r1, r9
 8009172:	4638      	mov	r0, r7
 8009174:	47c0      	blx	r8
 8009176:	3001      	adds	r0, #1
 8009178:	d01e      	beq.n	80091b8 <_printf_common+0xa4>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	68e5      	ldr	r5, [r4, #12]
 800917e:	6832      	ldr	r2, [r6, #0]
 8009180:	f003 0306 	and.w	r3, r3, #6
 8009184:	2b04      	cmp	r3, #4
 8009186:	bf08      	it	eq
 8009188:	1aad      	subeq	r5, r5, r2
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	bf0c      	ite	eq
 8009190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009194:	2500      	movne	r5, #0
 8009196:	4293      	cmp	r3, r2
 8009198:	bfc4      	itt	gt
 800919a:	1a9b      	subgt	r3, r3, r2
 800919c:	18ed      	addgt	r5, r5, r3
 800919e:	2600      	movs	r6, #0
 80091a0:	341a      	adds	r4, #26
 80091a2:	42b5      	cmp	r5, r6
 80091a4:	d11a      	bne.n	80091dc <_printf_common+0xc8>
 80091a6:	2000      	movs	r0, #0
 80091a8:	e008      	b.n	80091bc <_printf_common+0xa8>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4652      	mov	r2, sl
 80091ae:	4649      	mov	r1, r9
 80091b0:	4638      	mov	r0, r7
 80091b2:	47c0      	blx	r8
 80091b4:	3001      	adds	r0, #1
 80091b6:	d103      	bne.n	80091c0 <_printf_common+0xac>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c0:	3501      	adds	r5, #1
 80091c2:	e7c6      	b.n	8009152 <_printf_common+0x3e>
 80091c4:	18e1      	adds	r1, r4, r3
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	2030      	movs	r0, #48	; 0x30
 80091ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ce:	4422      	add	r2, r4
 80091d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091d8:	3302      	adds	r3, #2
 80091da:	e7c7      	b.n	800916c <_printf_common+0x58>
 80091dc:	2301      	movs	r3, #1
 80091de:	4622      	mov	r2, r4
 80091e0:	4649      	mov	r1, r9
 80091e2:	4638      	mov	r0, r7
 80091e4:	47c0      	blx	r8
 80091e6:	3001      	adds	r0, #1
 80091e8:	d0e6      	beq.n	80091b8 <_printf_common+0xa4>
 80091ea:	3601      	adds	r6, #1
 80091ec:	e7d9      	b.n	80091a2 <_printf_common+0x8e>
	...

080091f0 <_printf_i>:
 80091f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	7e0f      	ldrb	r7, [r1, #24]
 80091f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091f8:	2f78      	cmp	r7, #120	; 0x78
 80091fa:	4691      	mov	r9, r2
 80091fc:	4680      	mov	r8, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	469a      	mov	sl, r3
 8009202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009206:	d807      	bhi.n	8009218 <_printf_i+0x28>
 8009208:	2f62      	cmp	r7, #98	; 0x62
 800920a:	d80a      	bhi.n	8009222 <_printf_i+0x32>
 800920c:	2f00      	cmp	r7, #0
 800920e:	f000 80d8 	beq.w	80093c2 <_printf_i+0x1d2>
 8009212:	2f58      	cmp	r7, #88	; 0x58
 8009214:	f000 80a3 	beq.w	800935e <_printf_i+0x16e>
 8009218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800921c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009220:	e03a      	b.n	8009298 <_printf_i+0xa8>
 8009222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009226:	2b15      	cmp	r3, #21
 8009228:	d8f6      	bhi.n	8009218 <_printf_i+0x28>
 800922a:	a101      	add	r1, pc, #4	; (adr r1, 8009230 <_printf_i+0x40>)
 800922c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009230:	08009289 	.word	0x08009289
 8009234:	0800929d 	.word	0x0800929d
 8009238:	08009219 	.word	0x08009219
 800923c:	08009219 	.word	0x08009219
 8009240:	08009219 	.word	0x08009219
 8009244:	08009219 	.word	0x08009219
 8009248:	0800929d 	.word	0x0800929d
 800924c:	08009219 	.word	0x08009219
 8009250:	08009219 	.word	0x08009219
 8009254:	08009219 	.word	0x08009219
 8009258:	08009219 	.word	0x08009219
 800925c:	080093a9 	.word	0x080093a9
 8009260:	080092cd 	.word	0x080092cd
 8009264:	0800938b 	.word	0x0800938b
 8009268:	08009219 	.word	0x08009219
 800926c:	08009219 	.word	0x08009219
 8009270:	080093cb 	.word	0x080093cb
 8009274:	08009219 	.word	0x08009219
 8009278:	080092cd 	.word	0x080092cd
 800927c:	08009219 	.word	0x08009219
 8009280:	08009219 	.word	0x08009219
 8009284:	08009393 	.word	0x08009393
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	1d1a      	adds	r2, r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	602a      	str	r2, [r5, #0]
 8009290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009298:	2301      	movs	r3, #1
 800929a:	e0a3      	b.n	80093e4 <_printf_i+0x1f4>
 800929c:	6820      	ldr	r0, [r4, #0]
 800929e:	6829      	ldr	r1, [r5, #0]
 80092a0:	0606      	lsls	r6, r0, #24
 80092a2:	f101 0304 	add.w	r3, r1, #4
 80092a6:	d50a      	bpl.n	80092be <_printf_i+0xce>
 80092a8:	680e      	ldr	r6, [r1, #0]
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	2e00      	cmp	r6, #0
 80092ae:	da03      	bge.n	80092b8 <_printf_i+0xc8>
 80092b0:	232d      	movs	r3, #45	; 0x2d
 80092b2:	4276      	negs	r6, r6
 80092b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b8:	485e      	ldr	r0, [pc, #376]	; (8009434 <_printf_i+0x244>)
 80092ba:	230a      	movs	r3, #10
 80092bc:	e019      	b.n	80092f2 <_printf_i+0x102>
 80092be:	680e      	ldr	r6, [r1, #0]
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092c6:	bf18      	it	ne
 80092c8:	b236      	sxthne	r6, r6
 80092ca:	e7ef      	b.n	80092ac <_printf_i+0xbc>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	6820      	ldr	r0, [r4, #0]
 80092d0:	1d19      	adds	r1, r3, #4
 80092d2:	6029      	str	r1, [r5, #0]
 80092d4:	0601      	lsls	r1, r0, #24
 80092d6:	d501      	bpl.n	80092dc <_printf_i+0xec>
 80092d8:	681e      	ldr	r6, [r3, #0]
 80092da:	e002      	b.n	80092e2 <_printf_i+0xf2>
 80092dc:	0646      	lsls	r6, r0, #25
 80092de:	d5fb      	bpl.n	80092d8 <_printf_i+0xe8>
 80092e0:	881e      	ldrh	r6, [r3, #0]
 80092e2:	4854      	ldr	r0, [pc, #336]	; (8009434 <_printf_i+0x244>)
 80092e4:	2f6f      	cmp	r7, #111	; 0x6f
 80092e6:	bf0c      	ite	eq
 80092e8:	2308      	moveq	r3, #8
 80092ea:	230a      	movne	r3, #10
 80092ec:	2100      	movs	r1, #0
 80092ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092f2:	6865      	ldr	r5, [r4, #4]
 80092f4:	60a5      	str	r5, [r4, #8]
 80092f6:	2d00      	cmp	r5, #0
 80092f8:	bfa2      	ittt	ge
 80092fa:	6821      	ldrge	r1, [r4, #0]
 80092fc:	f021 0104 	bicge.w	r1, r1, #4
 8009300:	6021      	strge	r1, [r4, #0]
 8009302:	b90e      	cbnz	r6, 8009308 <_printf_i+0x118>
 8009304:	2d00      	cmp	r5, #0
 8009306:	d04d      	beq.n	80093a4 <_printf_i+0x1b4>
 8009308:	4615      	mov	r5, r2
 800930a:	fbb6 f1f3 	udiv	r1, r6, r3
 800930e:	fb03 6711 	mls	r7, r3, r1, r6
 8009312:	5dc7      	ldrb	r7, [r0, r7]
 8009314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009318:	4637      	mov	r7, r6
 800931a:	42bb      	cmp	r3, r7
 800931c:	460e      	mov	r6, r1
 800931e:	d9f4      	bls.n	800930a <_printf_i+0x11a>
 8009320:	2b08      	cmp	r3, #8
 8009322:	d10b      	bne.n	800933c <_printf_i+0x14c>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	07de      	lsls	r6, r3, #31
 8009328:	d508      	bpl.n	800933c <_printf_i+0x14c>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	6861      	ldr	r1, [r4, #4]
 800932e:	4299      	cmp	r1, r3
 8009330:	bfde      	ittt	le
 8009332:	2330      	movle	r3, #48	; 0x30
 8009334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800933c:	1b52      	subs	r2, r2, r5
 800933e:	6122      	str	r2, [r4, #16]
 8009340:	f8cd a000 	str.w	sl, [sp]
 8009344:	464b      	mov	r3, r9
 8009346:	aa03      	add	r2, sp, #12
 8009348:	4621      	mov	r1, r4
 800934a:	4640      	mov	r0, r8
 800934c:	f7ff fee2 	bl	8009114 <_printf_common>
 8009350:	3001      	adds	r0, #1
 8009352:	d14c      	bne.n	80093ee <_printf_i+0x1fe>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	b004      	add	sp, #16
 800935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935e:	4835      	ldr	r0, [pc, #212]	; (8009434 <_printf_i+0x244>)
 8009360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009364:	6829      	ldr	r1, [r5, #0]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	f851 6b04 	ldr.w	r6, [r1], #4
 800936c:	6029      	str	r1, [r5, #0]
 800936e:	061d      	lsls	r5, r3, #24
 8009370:	d514      	bpl.n	800939c <_printf_i+0x1ac>
 8009372:	07df      	lsls	r7, r3, #31
 8009374:	bf44      	itt	mi
 8009376:	f043 0320 	orrmi.w	r3, r3, #32
 800937a:	6023      	strmi	r3, [r4, #0]
 800937c:	b91e      	cbnz	r6, 8009386 <_printf_i+0x196>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	f023 0320 	bic.w	r3, r3, #32
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	2310      	movs	r3, #16
 8009388:	e7b0      	b.n	80092ec <_printf_i+0xfc>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	f043 0320 	orr.w	r3, r3, #32
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	2378      	movs	r3, #120	; 0x78
 8009394:	4828      	ldr	r0, [pc, #160]	; (8009438 <_printf_i+0x248>)
 8009396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800939a:	e7e3      	b.n	8009364 <_printf_i+0x174>
 800939c:	0659      	lsls	r1, r3, #25
 800939e:	bf48      	it	mi
 80093a0:	b2b6      	uxthmi	r6, r6
 80093a2:	e7e6      	b.n	8009372 <_printf_i+0x182>
 80093a4:	4615      	mov	r5, r2
 80093a6:	e7bb      	b.n	8009320 <_printf_i+0x130>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	6826      	ldr	r6, [r4, #0]
 80093ac:	6961      	ldr	r1, [r4, #20]
 80093ae:	1d18      	adds	r0, r3, #4
 80093b0:	6028      	str	r0, [r5, #0]
 80093b2:	0635      	lsls	r5, r6, #24
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	d501      	bpl.n	80093bc <_printf_i+0x1cc>
 80093b8:	6019      	str	r1, [r3, #0]
 80093ba:	e002      	b.n	80093c2 <_printf_i+0x1d2>
 80093bc:	0670      	lsls	r0, r6, #25
 80093be:	d5fb      	bpl.n	80093b8 <_printf_i+0x1c8>
 80093c0:	8019      	strh	r1, [r3, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	4615      	mov	r5, r2
 80093c8:	e7ba      	b.n	8009340 <_printf_i+0x150>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	1d1a      	adds	r2, r3, #4
 80093ce:	602a      	str	r2, [r5, #0]
 80093d0:	681d      	ldr	r5, [r3, #0]
 80093d2:	6862      	ldr	r2, [r4, #4]
 80093d4:	2100      	movs	r1, #0
 80093d6:	4628      	mov	r0, r5
 80093d8:	f7f6 ff02 	bl	80001e0 <memchr>
 80093dc:	b108      	cbz	r0, 80093e2 <_printf_i+0x1f2>
 80093de:	1b40      	subs	r0, r0, r5
 80093e0:	6060      	str	r0, [r4, #4]
 80093e2:	6863      	ldr	r3, [r4, #4]
 80093e4:	6123      	str	r3, [r4, #16]
 80093e6:	2300      	movs	r3, #0
 80093e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ec:	e7a8      	b.n	8009340 <_printf_i+0x150>
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	462a      	mov	r2, r5
 80093f2:	4649      	mov	r1, r9
 80093f4:	4640      	mov	r0, r8
 80093f6:	47d0      	blx	sl
 80093f8:	3001      	adds	r0, #1
 80093fa:	d0ab      	beq.n	8009354 <_printf_i+0x164>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	079b      	lsls	r3, r3, #30
 8009400:	d413      	bmi.n	800942a <_printf_i+0x23a>
 8009402:	68e0      	ldr	r0, [r4, #12]
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	4298      	cmp	r0, r3
 8009408:	bfb8      	it	lt
 800940a:	4618      	movlt	r0, r3
 800940c:	e7a4      	b.n	8009358 <_printf_i+0x168>
 800940e:	2301      	movs	r3, #1
 8009410:	4632      	mov	r2, r6
 8009412:	4649      	mov	r1, r9
 8009414:	4640      	mov	r0, r8
 8009416:	47d0      	blx	sl
 8009418:	3001      	adds	r0, #1
 800941a:	d09b      	beq.n	8009354 <_printf_i+0x164>
 800941c:	3501      	adds	r5, #1
 800941e:	68e3      	ldr	r3, [r4, #12]
 8009420:	9903      	ldr	r1, [sp, #12]
 8009422:	1a5b      	subs	r3, r3, r1
 8009424:	42ab      	cmp	r3, r5
 8009426:	dcf2      	bgt.n	800940e <_printf_i+0x21e>
 8009428:	e7eb      	b.n	8009402 <_printf_i+0x212>
 800942a:	2500      	movs	r5, #0
 800942c:	f104 0619 	add.w	r6, r4, #25
 8009430:	e7f5      	b.n	800941e <_printf_i+0x22e>
 8009432:	bf00      	nop
 8009434:	0800a0f3 	.word	0x0800a0f3
 8009438:	0800a104 	.word	0x0800a104

0800943c <_sbrk_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d06      	ldr	r5, [pc, #24]	; (8009458 <_sbrk_r+0x1c>)
 8009440:	2300      	movs	r3, #0
 8009442:	4604      	mov	r4, r0
 8009444:	4608      	mov	r0, r1
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	f7fa f8ac 	bl	80035a4 <_sbrk>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d102      	bne.n	8009456 <_sbrk_r+0x1a>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	b103      	cbz	r3, 8009456 <_sbrk_r+0x1a>
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	20000dbc 	.word	0x20000dbc

0800945c <__swbuf_r>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	460e      	mov	r6, r1
 8009460:	4614      	mov	r4, r2
 8009462:	4605      	mov	r5, r0
 8009464:	b118      	cbz	r0, 800946e <__swbuf_r+0x12>
 8009466:	6983      	ldr	r3, [r0, #24]
 8009468:	b90b      	cbnz	r3, 800946e <__swbuf_r+0x12>
 800946a:	f000 f9d9 	bl	8009820 <__sinit>
 800946e:	4b21      	ldr	r3, [pc, #132]	; (80094f4 <__swbuf_r+0x98>)
 8009470:	429c      	cmp	r4, r3
 8009472:	d12b      	bne.n	80094cc <__swbuf_r+0x70>
 8009474:	686c      	ldr	r4, [r5, #4]
 8009476:	69a3      	ldr	r3, [r4, #24]
 8009478:	60a3      	str	r3, [r4, #8]
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	071a      	lsls	r2, r3, #28
 800947e:	d52f      	bpl.n	80094e0 <__swbuf_r+0x84>
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	b36b      	cbz	r3, 80094e0 <__swbuf_r+0x84>
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	6820      	ldr	r0, [r4, #0]
 8009488:	1ac0      	subs	r0, r0, r3
 800948a:	6963      	ldr	r3, [r4, #20]
 800948c:	b2f6      	uxtb	r6, r6
 800948e:	4283      	cmp	r3, r0
 8009490:	4637      	mov	r7, r6
 8009492:	dc04      	bgt.n	800949e <__swbuf_r+0x42>
 8009494:	4621      	mov	r1, r4
 8009496:	4628      	mov	r0, r5
 8009498:	f000 f92e 	bl	80096f8 <_fflush_r>
 800949c:	bb30      	cbnz	r0, 80094ec <__swbuf_r+0x90>
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	60a3      	str	r3, [r4, #8]
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	6022      	str	r2, [r4, #0]
 80094aa:	701e      	strb	r6, [r3, #0]
 80094ac:	6963      	ldr	r3, [r4, #20]
 80094ae:	3001      	adds	r0, #1
 80094b0:	4283      	cmp	r3, r0
 80094b2:	d004      	beq.n	80094be <__swbuf_r+0x62>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	07db      	lsls	r3, r3, #31
 80094b8:	d506      	bpl.n	80094c8 <__swbuf_r+0x6c>
 80094ba:	2e0a      	cmp	r6, #10
 80094bc:	d104      	bne.n	80094c8 <__swbuf_r+0x6c>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 f919 	bl	80096f8 <_fflush_r>
 80094c6:	b988      	cbnz	r0, 80094ec <__swbuf_r+0x90>
 80094c8:	4638      	mov	r0, r7
 80094ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094cc:	4b0a      	ldr	r3, [pc, #40]	; (80094f8 <__swbuf_r+0x9c>)
 80094ce:	429c      	cmp	r4, r3
 80094d0:	d101      	bne.n	80094d6 <__swbuf_r+0x7a>
 80094d2:	68ac      	ldr	r4, [r5, #8]
 80094d4:	e7cf      	b.n	8009476 <__swbuf_r+0x1a>
 80094d6:	4b09      	ldr	r3, [pc, #36]	; (80094fc <__swbuf_r+0xa0>)
 80094d8:	429c      	cmp	r4, r3
 80094da:	bf08      	it	eq
 80094dc:	68ec      	ldreq	r4, [r5, #12]
 80094de:	e7ca      	b.n	8009476 <__swbuf_r+0x1a>
 80094e0:	4621      	mov	r1, r4
 80094e2:	4628      	mov	r0, r5
 80094e4:	f000 f80c 	bl	8009500 <__swsetup_r>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d0cb      	beq.n	8009484 <__swbuf_r+0x28>
 80094ec:	f04f 37ff 	mov.w	r7, #4294967295
 80094f0:	e7ea      	b.n	80094c8 <__swbuf_r+0x6c>
 80094f2:	bf00      	nop
 80094f4:	0800a138 	.word	0x0800a138
 80094f8:	0800a158 	.word	0x0800a158
 80094fc:	0800a118 	.word	0x0800a118

08009500 <__swsetup_r>:
 8009500:	4b32      	ldr	r3, [pc, #200]	; (80095cc <__swsetup_r+0xcc>)
 8009502:	b570      	push	{r4, r5, r6, lr}
 8009504:	681d      	ldr	r5, [r3, #0]
 8009506:	4606      	mov	r6, r0
 8009508:	460c      	mov	r4, r1
 800950a:	b125      	cbz	r5, 8009516 <__swsetup_r+0x16>
 800950c:	69ab      	ldr	r3, [r5, #24]
 800950e:	b913      	cbnz	r3, 8009516 <__swsetup_r+0x16>
 8009510:	4628      	mov	r0, r5
 8009512:	f000 f985 	bl	8009820 <__sinit>
 8009516:	4b2e      	ldr	r3, [pc, #184]	; (80095d0 <__swsetup_r+0xd0>)
 8009518:	429c      	cmp	r4, r3
 800951a:	d10f      	bne.n	800953c <__swsetup_r+0x3c>
 800951c:	686c      	ldr	r4, [r5, #4]
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009524:	0719      	lsls	r1, r3, #28
 8009526:	d42c      	bmi.n	8009582 <__swsetup_r+0x82>
 8009528:	06dd      	lsls	r5, r3, #27
 800952a:	d411      	bmi.n	8009550 <__swsetup_r+0x50>
 800952c:	2309      	movs	r3, #9
 800952e:	6033      	str	r3, [r6, #0]
 8009530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	e03e      	b.n	80095ba <__swsetup_r+0xba>
 800953c:	4b25      	ldr	r3, [pc, #148]	; (80095d4 <__swsetup_r+0xd4>)
 800953e:	429c      	cmp	r4, r3
 8009540:	d101      	bne.n	8009546 <__swsetup_r+0x46>
 8009542:	68ac      	ldr	r4, [r5, #8]
 8009544:	e7eb      	b.n	800951e <__swsetup_r+0x1e>
 8009546:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <__swsetup_r+0xd8>)
 8009548:	429c      	cmp	r4, r3
 800954a:	bf08      	it	eq
 800954c:	68ec      	ldreq	r4, [r5, #12]
 800954e:	e7e6      	b.n	800951e <__swsetup_r+0x1e>
 8009550:	0758      	lsls	r0, r3, #29
 8009552:	d512      	bpl.n	800957a <__swsetup_r+0x7a>
 8009554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009556:	b141      	cbz	r1, 800956a <__swsetup_r+0x6a>
 8009558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800955c:	4299      	cmp	r1, r3
 800955e:	d002      	beq.n	8009566 <__swsetup_r+0x66>
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff fa41 	bl	80089e8 <_free_r>
 8009566:	2300      	movs	r3, #0
 8009568:	6363      	str	r3, [r4, #52]	; 0x34
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009570:	81a3      	strh	r3, [r4, #12]
 8009572:	2300      	movs	r3, #0
 8009574:	6063      	str	r3, [r4, #4]
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f043 0308 	orr.w	r3, r3, #8
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	b94b      	cbnz	r3, 800959a <__swsetup_r+0x9a>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800958c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009590:	d003      	beq.n	800959a <__swsetup_r+0x9a>
 8009592:	4621      	mov	r1, r4
 8009594:	4630      	mov	r0, r6
 8009596:	f000 fa09 	bl	80099ac <__smakebuf_r>
 800959a:	89a0      	ldrh	r0, [r4, #12]
 800959c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095a0:	f010 0301 	ands.w	r3, r0, #1
 80095a4:	d00a      	beq.n	80095bc <__swsetup_r+0xbc>
 80095a6:	2300      	movs	r3, #0
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	6963      	ldr	r3, [r4, #20]
 80095ac:	425b      	negs	r3, r3
 80095ae:	61a3      	str	r3, [r4, #24]
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	b943      	cbnz	r3, 80095c6 <__swsetup_r+0xc6>
 80095b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095b8:	d1ba      	bne.n	8009530 <__swsetup_r+0x30>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	0781      	lsls	r1, r0, #30
 80095be:	bf58      	it	pl
 80095c0:	6963      	ldrpl	r3, [r4, #20]
 80095c2:	60a3      	str	r3, [r4, #8]
 80095c4:	e7f4      	b.n	80095b0 <__swsetup_r+0xb0>
 80095c6:	2000      	movs	r0, #0
 80095c8:	e7f7      	b.n	80095ba <__swsetup_r+0xba>
 80095ca:	bf00      	nop
 80095cc:	20000090 	.word	0x20000090
 80095d0:	0800a138 	.word	0x0800a138
 80095d4:	0800a158 	.word	0x0800a158
 80095d8:	0800a118 	.word	0x0800a118

080095dc <abort>:
 80095dc:	b508      	push	{r3, lr}
 80095de:	2006      	movs	r0, #6
 80095e0:	f000 fab0 	bl	8009b44 <raise>
 80095e4:	2001      	movs	r0, #1
 80095e6:	f7f9 ff65 	bl	80034b4 <_exit>
	...

080095ec <__sflush_r>:
 80095ec:	898a      	ldrh	r2, [r1, #12]
 80095ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f2:	4605      	mov	r5, r0
 80095f4:	0710      	lsls	r0, r2, #28
 80095f6:	460c      	mov	r4, r1
 80095f8:	d458      	bmi.n	80096ac <__sflush_r+0xc0>
 80095fa:	684b      	ldr	r3, [r1, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dc05      	bgt.n	800960c <__sflush_r+0x20>
 8009600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009602:	2b00      	cmp	r3, #0
 8009604:	dc02      	bgt.n	800960c <__sflush_r+0x20>
 8009606:	2000      	movs	r0, #0
 8009608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800960e:	2e00      	cmp	r6, #0
 8009610:	d0f9      	beq.n	8009606 <__sflush_r+0x1a>
 8009612:	2300      	movs	r3, #0
 8009614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009618:	682f      	ldr	r7, [r5, #0]
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	d032      	beq.n	8009684 <__sflush_r+0x98>
 800961e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	075a      	lsls	r2, r3, #29
 8009624:	d505      	bpl.n	8009632 <__sflush_r+0x46>
 8009626:	6863      	ldr	r3, [r4, #4]
 8009628:	1ac0      	subs	r0, r0, r3
 800962a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800962c:	b10b      	cbz	r3, 8009632 <__sflush_r+0x46>
 800962e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009630:	1ac0      	subs	r0, r0, r3
 8009632:	2300      	movs	r3, #0
 8009634:	4602      	mov	r2, r0
 8009636:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009638:	6a21      	ldr	r1, [r4, #32]
 800963a:	4628      	mov	r0, r5
 800963c:	47b0      	blx	r6
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	d106      	bne.n	8009652 <__sflush_r+0x66>
 8009644:	6829      	ldr	r1, [r5, #0]
 8009646:	291d      	cmp	r1, #29
 8009648:	d82c      	bhi.n	80096a4 <__sflush_r+0xb8>
 800964a:	4a2a      	ldr	r2, [pc, #168]	; (80096f4 <__sflush_r+0x108>)
 800964c:	40ca      	lsrs	r2, r1
 800964e:	07d6      	lsls	r6, r2, #31
 8009650:	d528      	bpl.n	80096a4 <__sflush_r+0xb8>
 8009652:	2200      	movs	r2, #0
 8009654:	6062      	str	r2, [r4, #4]
 8009656:	04d9      	lsls	r1, r3, #19
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	6022      	str	r2, [r4, #0]
 800965c:	d504      	bpl.n	8009668 <__sflush_r+0x7c>
 800965e:	1c42      	adds	r2, r0, #1
 8009660:	d101      	bne.n	8009666 <__sflush_r+0x7a>
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	b903      	cbnz	r3, 8009668 <__sflush_r+0x7c>
 8009666:	6560      	str	r0, [r4, #84]	; 0x54
 8009668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800966a:	602f      	str	r7, [r5, #0]
 800966c:	2900      	cmp	r1, #0
 800966e:	d0ca      	beq.n	8009606 <__sflush_r+0x1a>
 8009670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009674:	4299      	cmp	r1, r3
 8009676:	d002      	beq.n	800967e <__sflush_r+0x92>
 8009678:	4628      	mov	r0, r5
 800967a:	f7ff f9b5 	bl	80089e8 <_free_r>
 800967e:	2000      	movs	r0, #0
 8009680:	6360      	str	r0, [r4, #52]	; 0x34
 8009682:	e7c1      	b.n	8009608 <__sflush_r+0x1c>
 8009684:	6a21      	ldr	r1, [r4, #32]
 8009686:	2301      	movs	r3, #1
 8009688:	4628      	mov	r0, r5
 800968a:	47b0      	blx	r6
 800968c:	1c41      	adds	r1, r0, #1
 800968e:	d1c7      	bne.n	8009620 <__sflush_r+0x34>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0c4      	beq.n	8009620 <__sflush_r+0x34>
 8009696:	2b1d      	cmp	r3, #29
 8009698:	d001      	beq.n	800969e <__sflush_r+0xb2>
 800969a:	2b16      	cmp	r3, #22
 800969c:	d101      	bne.n	80096a2 <__sflush_r+0xb6>
 800969e:	602f      	str	r7, [r5, #0]
 80096a0:	e7b1      	b.n	8009606 <__sflush_r+0x1a>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	e7ad      	b.n	8009608 <__sflush_r+0x1c>
 80096ac:	690f      	ldr	r7, [r1, #16]
 80096ae:	2f00      	cmp	r7, #0
 80096b0:	d0a9      	beq.n	8009606 <__sflush_r+0x1a>
 80096b2:	0793      	lsls	r3, r2, #30
 80096b4:	680e      	ldr	r6, [r1, #0]
 80096b6:	bf08      	it	eq
 80096b8:	694b      	ldreq	r3, [r1, #20]
 80096ba:	600f      	str	r7, [r1, #0]
 80096bc:	bf18      	it	ne
 80096be:	2300      	movne	r3, #0
 80096c0:	eba6 0807 	sub.w	r8, r6, r7
 80096c4:	608b      	str	r3, [r1, #8]
 80096c6:	f1b8 0f00 	cmp.w	r8, #0
 80096ca:	dd9c      	ble.n	8009606 <__sflush_r+0x1a>
 80096cc:	6a21      	ldr	r1, [r4, #32]
 80096ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096d0:	4643      	mov	r3, r8
 80096d2:	463a      	mov	r2, r7
 80096d4:	4628      	mov	r0, r5
 80096d6:	47b0      	blx	r6
 80096d8:	2800      	cmp	r0, #0
 80096da:	dc06      	bgt.n	80096ea <__sflush_r+0xfe>
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e78e      	b.n	8009608 <__sflush_r+0x1c>
 80096ea:	4407      	add	r7, r0
 80096ec:	eba8 0800 	sub.w	r8, r8, r0
 80096f0:	e7e9      	b.n	80096c6 <__sflush_r+0xda>
 80096f2:	bf00      	nop
 80096f4:	20400001 	.word	0x20400001

080096f8 <_fflush_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	690b      	ldr	r3, [r1, #16]
 80096fc:	4605      	mov	r5, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	b913      	cbnz	r3, 8009708 <_fflush_r+0x10>
 8009702:	2500      	movs	r5, #0
 8009704:	4628      	mov	r0, r5
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	b118      	cbz	r0, 8009712 <_fflush_r+0x1a>
 800970a:	6983      	ldr	r3, [r0, #24]
 800970c:	b90b      	cbnz	r3, 8009712 <_fflush_r+0x1a>
 800970e:	f000 f887 	bl	8009820 <__sinit>
 8009712:	4b14      	ldr	r3, [pc, #80]	; (8009764 <_fflush_r+0x6c>)
 8009714:	429c      	cmp	r4, r3
 8009716:	d11b      	bne.n	8009750 <_fflush_r+0x58>
 8009718:	686c      	ldr	r4, [r5, #4]
 800971a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0ef      	beq.n	8009702 <_fflush_r+0xa>
 8009722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009724:	07d0      	lsls	r0, r2, #31
 8009726:	d404      	bmi.n	8009732 <_fflush_r+0x3a>
 8009728:	0599      	lsls	r1, r3, #22
 800972a:	d402      	bmi.n	8009732 <_fflush_r+0x3a>
 800972c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800972e:	f000 f915 	bl	800995c <__retarget_lock_acquire_recursive>
 8009732:	4628      	mov	r0, r5
 8009734:	4621      	mov	r1, r4
 8009736:	f7ff ff59 	bl	80095ec <__sflush_r>
 800973a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800973c:	07da      	lsls	r2, r3, #31
 800973e:	4605      	mov	r5, r0
 8009740:	d4e0      	bmi.n	8009704 <_fflush_r+0xc>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	059b      	lsls	r3, r3, #22
 8009746:	d4dd      	bmi.n	8009704 <_fflush_r+0xc>
 8009748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800974a:	f000 f908 	bl	800995e <__retarget_lock_release_recursive>
 800974e:	e7d9      	b.n	8009704 <_fflush_r+0xc>
 8009750:	4b05      	ldr	r3, [pc, #20]	; (8009768 <_fflush_r+0x70>)
 8009752:	429c      	cmp	r4, r3
 8009754:	d101      	bne.n	800975a <_fflush_r+0x62>
 8009756:	68ac      	ldr	r4, [r5, #8]
 8009758:	e7df      	b.n	800971a <_fflush_r+0x22>
 800975a:	4b04      	ldr	r3, [pc, #16]	; (800976c <_fflush_r+0x74>)
 800975c:	429c      	cmp	r4, r3
 800975e:	bf08      	it	eq
 8009760:	68ec      	ldreq	r4, [r5, #12]
 8009762:	e7da      	b.n	800971a <_fflush_r+0x22>
 8009764:	0800a138 	.word	0x0800a138
 8009768:	0800a158 	.word	0x0800a158
 800976c:	0800a118 	.word	0x0800a118

08009770 <std>:
 8009770:	2300      	movs	r3, #0
 8009772:	b510      	push	{r4, lr}
 8009774:	4604      	mov	r4, r0
 8009776:	e9c0 3300 	strd	r3, r3, [r0]
 800977a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800977e:	6083      	str	r3, [r0, #8]
 8009780:	8181      	strh	r1, [r0, #12]
 8009782:	6643      	str	r3, [r0, #100]	; 0x64
 8009784:	81c2      	strh	r2, [r0, #14]
 8009786:	6183      	str	r3, [r0, #24]
 8009788:	4619      	mov	r1, r3
 800978a:	2208      	movs	r2, #8
 800978c:	305c      	adds	r0, #92	; 0x5c
 800978e:	f7ff f833 	bl	80087f8 <memset>
 8009792:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <std+0x38>)
 8009794:	6263      	str	r3, [r4, #36]	; 0x24
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <std+0x3c>)
 8009798:	62a3      	str	r3, [r4, #40]	; 0x28
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <std+0x40>)
 800979c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800979e:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <std+0x44>)
 80097a0:	6224      	str	r4, [r4, #32]
 80097a2:	6323      	str	r3, [r4, #48]	; 0x30
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	bf00      	nop
 80097a8:	08009b7d 	.word	0x08009b7d
 80097ac:	08009b9f 	.word	0x08009b9f
 80097b0:	08009bd7 	.word	0x08009bd7
 80097b4:	08009bfb 	.word	0x08009bfb

080097b8 <_cleanup_r>:
 80097b8:	4901      	ldr	r1, [pc, #4]	; (80097c0 <_cleanup_r+0x8>)
 80097ba:	f000 b8af 	b.w	800991c <_fwalk_reent>
 80097be:	bf00      	nop
 80097c0:	080096f9 	.word	0x080096f9

080097c4 <__sfmoreglue>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	2268      	movs	r2, #104	; 0x68
 80097c8:	1e4d      	subs	r5, r1, #1
 80097ca:	4355      	muls	r5, r2
 80097cc:	460e      	mov	r6, r1
 80097ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097d2:	f7ff f975 	bl	8008ac0 <_malloc_r>
 80097d6:	4604      	mov	r4, r0
 80097d8:	b140      	cbz	r0, 80097ec <__sfmoreglue+0x28>
 80097da:	2100      	movs	r1, #0
 80097dc:	e9c0 1600 	strd	r1, r6, [r0]
 80097e0:	300c      	adds	r0, #12
 80097e2:	60a0      	str	r0, [r4, #8]
 80097e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097e8:	f7ff f806 	bl	80087f8 <memset>
 80097ec:	4620      	mov	r0, r4
 80097ee:	bd70      	pop	{r4, r5, r6, pc}

080097f0 <__sfp_lock_acquire>:
 80097f0:	4801      	ldr	r0, [pc, #4]	; (80097f8 <__sfp_lock_acquire+0x8>)
 80097f2:	f000 b8b3 	b.w	800995c <__retarget_lock_acquire_recursive>
 80097f6:	bf00      	nop
 80097f8:	20000dc1 	.word	0x20000dc1

080097fc <__sfp_lock_release>:
 80097fc:	4801      	ldr	r0, [pc, #4]	; (8009804 <__sfp_lock_release+0x8>)
 80097fe:	f000 b8ae 	b.w	800995e <__retarget_lock_release_recursive>
 8009802:	bf00      	nop
 8009804:	20000dc1 	.word	0x20000dc1

08009808 <__sinit_lock_acquire>:
 8009808:	4801      	ldr	r0, [pc, #4]	; (8009810 <__sinit_lock_acquire+0x8>)
 800980a:	f000 b8a7 	b.w	800995c <__retarget_lock_acquire_recursive>
 800980e:	bf00      	nop
 8009810:	20000dc2 	.word	0x20000dc2

08009814 <__sinit_lock_release>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__sinit_lock_release+0x8>)
 8009816:	f000 b8a2 	b.w	800995e <__retarget_lock_release_recursive>
 800981a:	bf00      	nop
 800981c:	20000dc2 	.word	0x20000dc2

08009820 <__sinit>:
 8009820:	b510      	push	{r4, lr}
 8009822:	4604      	mov	r4, r0
 8009824:	f7ff fff0 	bl	8009808 <__sinit_lock_acquire>
 8009828:	69a3      	ldr	r3, [r4, #24]
 800982a:	b11b      	cbz	r3, 8009834 <__sinit+0x14>
 800982c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009830:	f7ff bff0 	b.w	8009814 <__sinit_lock_release>
 8009834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009838:	6523      	str	r3, [r4, #80]	; 0x50
 800983a:	4b13      	ldr	r3, [pc, #76]	; (8009888 <__sinit+0x68>)
 800983c:	4a13      	ldr	r2, [pc, #76]	; (800988c <__sinit+0x6c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	62a2      	str	r2, [r4, #40]	; 0x28
 8009842:	42a3      	cmp	r3, r4
 8009844:	bf04      	itt	eq
 8009846:	2301      	moveq	r3, #1
 8009848:	61a3      	streq	r3, [r4, #24]
 800984a:	4620      	mov	r0, r4
 800984c:	f000 f820 	bl	8009890 <__sfp>
 8009850:	6060      	str	r0, [r4, #4]
 8009852:	4620      	mov	r0, r4
 8009854:	f000 f81c 	bl	8009890 <__sfp>
 8009858:	60a0      	str	r0, [r4, #8]
 800985a:	4620      	mov	r0, r4
 800985c:	f000 f818 	bl	8009890 <__sfp>
 8009860:	2200      	movs	r2, #0
 8009862:	60e0      	str	r0, [r4, #12]
 8009864:	2104      	movs	r1, #4
 8009866:	6860      	ldr	r0, [r4, #4]
 8009868:	f7ff ff82 	bl	8009770 <std>
 800986c:	68a0      	ldr	r0, [r4, #8]
 800986e:	2201      	movs	r2, #1
 8009870:	2109      	movs	r1, #9
 8009872:	f7ff ff7d 	bl	8009770 <std>
 8009876:	68e0      	ldr	r0, [r4, #12]
 8009878:	2202      	movs	r2, #2
 800987a:	2112      	movs	r1, #18
 800987c:	f7ff ff78 	bl	8009770 <std>
 8009880:	2301      	movs	r3, #1
 8009882:	61a3      	str	r3, [r4, #24]
 8009884:	e7d2      	b.n	800982c <__sinit+0xc>
 8009886:	bf00      	nop
 8009888:	0800a030 	.word	0x0800a030
 800988c:	080097b9 	.word	0x080097b9

08009890 <__sfp>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	4607      	mov	r7, r0
 8009894:	f7ff ffac 	bl	80097f0 <__sfp_lock_acquire>
 8009898:	4b1e      	ldr	r3, [pc, #120]	; (8009914 <__sfp+0x84>)
 800989a:	681e      	ldr	r6, [r3, #0]
 800989c:	69b3      	ldr	r3, [r6, #24]
 800989e:	b913      	cbnz	r3, 80098a6 <__sfp+0x16>
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff ffbd 	bl	8009820 <__sinit>
 80098a6:	3648      	adds	r6, #72	; 0x48
 80098a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	d503      	bpl.n	80098b8 <__sfp+0x28>
 80098b0:	6833      	ldr	r3, [r6, #0]
 80098b2:	b30b      	cbz	r3, 80098f8 <__sfp+0x68>
 80098b4:	6836      	ldr	r6, [r6, #0]
 80098b6:	e7f7      	b.n	80098a8 <__sfp+0x18>
 80098b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098bc:	b9d5      	cbnz	r5, 80098f4 <__sfp+0x64>
 80098be:	4b16      	ldr	r3, [pc, #88]	; (8009918 <__sfp+0x88>)
 80098c0:	60e3      	str	r3, [r4, #12]
 80098c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098c6:	6665      	str	r5, [r4, #100]	; 0x64
 80098c8:	f000 f847 	bl	800995a <__retarget_lock_init_recursive>
 80098cc:	f7ff ff96 	bl	80097fc <__sfp_lock_release>
 80098d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098d8:	6025      	str	r5, [r4, #0]
 80098da:	61a5      	str	r5, [r4, #24]
 80098dc:	2208      	movs	r2, #8
 80098de:	4629      	mov	r1, r5
 80098e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098e4:	f7fe ff88 	bl	80087f8 <memset>
 80098e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098f0:	4620      	mov	r0, r4
 80098f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f4:	3468      	adds	r4, #104	; 0x68
 80098f6:	e7d9      	b.n	80098ac <__sfp+0x1c>
 80098f8:	2104      	movs	r1, #4
 80098fa:	4638      	mov	r0, r7
 80098fc:	f7ff ff62 	bl	80097c4 <__sfmoreglue>
 8009900:	4604      	mov	r4, r0
 8009902:	6030      	str	r0, [r6, #0]
 8009904:	2800      	cmp	r0, #0
 8009906:	d1d5      	bne.n	80098b4 <__sfp+0x24>
 8009908:	f7ff ff78 	bl	80097fc <__sfp_lock_release>
 800990c:	230c      	movs	r3, #12
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	e7ee      	b.n	80098f0 <__sfp+0x60>
 8009912:	bf00      	nop
 8009914:	0800a030 	.word	0x0800a030
 8009918:	ffff0001 	.word	0xffff0001

0800991c <_fwalk_reent>:
 800991c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009920:	4606      	mov	r6, r0
 8009922:	4688      	mov	r8, r1
 8009924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009928:	2700      	movs	r7, #0
 800992a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800992e:	f1b9 0901 	subs.w	r9, r9, #1
 8009932:	d505      	bpl.n	8009940 <_fwalk_reent+0x24>
 8009934:	6824      	ldr	r4, [r4, #0]
 8009936:	2c00      	cmp	r4, #0
 8009938:	d1f7      	bne.n	800992a <_fwalk_reent+0xe>
 800993a:	4638      	mov	r0, r7
 800993c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009940:	89ab      	ldrh	r3, [r5, #12]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d907      	bls.n	8009956 <_fwalk_reent+0x3a>
 8009946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800994a:	3301      	adds	r3, #1
 800994c:	d003      	beq.n	8009956 <_fwalk_reent+0x3a>
 800994e:	4629      	mov	r1, r5
 8009950:	4630      	mov	r0, r6
 8009952:	47c0      	blx	r8
 8009954:	4307      	orrs	r7, r0
 8009956:	3568      	adds	r5, #104	; 0x68
 8009958:	e7e9      	b.n	800992e <_fwalk_reent+0x12>

0800995a <__retarget_lock_init_recursive>:
 800995a:	4770      	bx	lr

0800995c <__retarget_lock_acquire_recursive>:
 800995c:	4770      	bx	lr

0800995e <__retarget_lock_release_recursive>:
 800995e:	4770      	bx	lr

08009960 <__swhatbuf_r>:
 8009960:	b570      	push	{r4, r5, r6, lr}
 8009962:	460e      	mov	r6, r1
 8009964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009968:	2900      	cmp	r1, #0
 800996a:	b096      	sub	sp, #88	; 0x58
 800996c:	4614      	mov	r4, r2
 800996e:	461d      	mov	r5, r3
 8009970:	da08      	bge.n	8009984 <__swhatbuf_r+0x24>
 8009972:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	602a      	str	r2, [r5, #0]
 800997a:	061a      	lsls	r2, r3, #24
 800997c:	d410      	bmi.n	80099a0 <__swhatbuf_r+0x40>
 800997e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009982:	e00e      	b.n	80099a2 <__swhatbuf_r+0x42>
 8009984:	466a      	mov	r2, sp
 8009986:	f000 f95f 	bl	8009c48 <_fstat_r>
 800998a:	2800      	cmp	r0, #0
 800998c:	dbf1      	blt.n	8009972 <__swhatbuf_r+0x12>
 800998e:	9a01      	ldr	r2, [sp, #4]
 8009990:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009994:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009998:	425a      	negs	r2, r3
 800999a:	415a      	adcs	r2, r3
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	e7ee      	b.n	800997e <__swhatbuf_r+0x1e>
 80099a0:	2340      	movs	r3, #64	; 0x40
 80099a2:	2000      	movs	r0, #0
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	b016      	add	sp, #88	; 0x58
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080099ac <__smakebuf_r>:
 80099ac:	898b      	ldrh	r3, [r1, #12]
 80099ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099b0:	079d      	lsls	r5, r3, #30
 80099b2:	4606      	mov	r6, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	d507      	bpl.n	80099c8 <__smakebuf_r+0x1c>
 80099b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	6123      	str	r3, [r4, #16]
 80099c0:	2301      	movs	r3, #1
 80099c2:	6163      	str	r3, [r4, #20]
 80099c4:	b002      	add	sp, #8
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	ab01      	add	r3, sp, #4
 80099ca:	466a      	mov	r2, sp
 80099cc:	f7ff ffc8 	bl	8009960 <__swhatbuf_r>
 80099d0:	9900      	ldr	r1, [sp, #0]
 80099d2:	4605      	mov	r5, r0
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7ff f873 	bl	8008ac0 <_malloc_r>
 80099da:	b948      	cbnz	r0, 80099f0 <__smakebuf_r+0x44>
 80099dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e0:	059a      	lsls	r2, r3, #22
 80099e2:	d4ef      	bmi.n	80099c4 <__smakebuf_r+0x18>
 80099e4:	f023 0303 	bic.w	r3, r3, #3
 80099e8:	f043 0302 	orr.w	r3, r3, #2
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	e7e3      	b.n	80099b8 <__smakebuf_r+0xc>
 80099f0:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <__smakebuf_r+0x7c>)
 80099f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	6020      	str	r0, [r4, #0]
 80099f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	6163      	str	r3, [r4, #20]
 8009a02:	9b01      	ldr	r3, [sp, #4]
 8009a04:	6120      	str	r0, [r4, #16]
 8009a06:	b15b      	cbz	r3, 8009a20 <__smakebuf_r+0x74>
 8009a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f000 f92d 	bl	8009c6c <_isatty_r>
 8009a12:	b128      	cbz	r0, 8009a20 <__smakebuf_r+0x74>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	f023 0303 	bic.w	r3, r3, #3
 8009a1a:	f043 0301 	orr.w	r3, r3, #1
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	89a0      	ldrh	r0, [r4, #12]
 8009a22:	4305      	orrs	r5, r0
 8009a24:	81a5      	strh	r5, [r4, #12]
 8009a26:	e7cd      	b.n	80099c4 <__smakebuf_r+0x18>
 8009a28:	080097b9 	.word	0x080097b9

08009a2c <memcpy>:
 8009a2c:	440a      	add	r2, r1
 8009a2e:	4291      	cmp	r1, r2
 8009a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a34:	d100      	bne.n	8009a38 <memcpy+0xc>
 8009a36:	4770      	bx	lr
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a42:	4291      	cmp	r1, r2
 8009a44:	d1f9      	bne.n	8009a3a <memcpy+0xe>
 8009a46:	bd10      	pop	{r4, pc}

08009a48 <memmove>:
 8009a48:	4288      	cmp	r0, r1
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	eb01 0402 	add.w	r4, r1, r2
 8009a50:	d902      	bls.n	8009a58 <memmove+0x10>
 8009a52:	4284      	cmp	r4, r0
 8009a54:	4623      	mov	r3, r4
 8009a56:	d807      	bhi.n	8009a68 <memmove+0x20>
 8009a58:	1e43      	subs	r3, r0, #1
 8009a5a:	42a1      	cmp	r1, r4
 8009a5c:	d008      	beq.n	8009a70 <memmove+0x28>
 8009a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a66:	e7f8      	b.n	8009a5a <memmove+0x12>
 8009a68:	4402      	add	r2, r0
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	428a      	cmp	r2, r1
 8009a6e:	d100      	bne.n	8009a72 <memmove+0x2a>
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a7a:	e7f7      	b.n	8009a6c <memmove+0x24>

08009a7c <__malloc_lock>:
 8009a7c:	4801      	ldr	r0, [pc, #4]	; (8009a84 <__malloc_lock+0x8>)
 8009a7e:	f7ff bf6d 	b.w	800995c <__retarget_lock_acquire_recursive>
 8009a82:	bf00      	nop
 8009a84:	20000dc0 	.word	0x20000dc0

08009a88 <__malloc_unlock>:
 8009a88:	4801      	ldr	r0, [pc, #4]	; (8009a90 <__malloc_unlock+0x8>)
 8009a8a:	f7ff bf68 	b.w	800995e <__retarget_lock_release_recursive>
 8009a8e:	bf00      	nop
 8009a90:	20000dc0 	.word	0x20000dc0

08009a94 <_realloc_r>:
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	4680      	mov	r8, r0
 8009a9a:	4614      	mov	r4, r2
 8009a9c:	460e      	mov	r6, r1
 8009a9e:	b921      	cbnz	r1, 8009aaa <_realloc_r+0x16>
 8009aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	f7ff b80b 	b.w	8008ac0 <_malloc_r>
 8009aaa:	b92a      	cbnz	r2, 8009ab8 <_realloc_r+0x24>
 8009aac:	f7fe ff9c 	bl	80089e8 <_free_r>
 8009ab0:	4625      	mov	r5, r4
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab8:	f000 f8fa 	bl	8009cb0 <_malloc_usable_size_r>
 8009abc:	4284      	cmp	r4, r0
 8009abe:	4607      	mov	r7, r0
 8009ac0:	d802      	bhi.n	8009ac8 <_realloc_r+0x34>
 8009ac2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ac6:	d812      	bhi.n	8009aee <_realloc_r+0x5a>
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4640      	mov	r0, r8
 8009acc:	f7fe fff8 	bl	8008ac0 <_malloc_r>
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d0ed      	beq.n	8009ab2 <_realloc_r+0x1e>
 8009ad6:	42bc      	cmp	r4, r7
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4631      	mov	r1, r6
 8009adc:	bf28      	it	cs
 8009ade:	463a      	movcs	r2, r7
 8009ae0:	f7ff ffa4 	bl	8009a2c <memcpy>
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	f7fe ff7e 	bl	80089e8 <_free_r>
 8009aec:	e7e1      	b.n	8009ab2 <_realloc_r+0x1e>
 8009aee:	4635      	mov	r5, r6
 8009af0:	e7df      	b.n	8009ab2 <_realloc_r+0x1e>

08009af2 <_raise_r>:
 8009af2:	291f      	cmp	r1, #31
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4604      	mov	r4, r0
 8009af8:	460d      	mov	r5, r1
 8009afa:	d904      	bls.n	8009b06 <_raise_r+0x14>
 8009afc:	2316      	movs	r3, #22
 8009afe:	6003      	str	r3, [r0, #0]
 8009b00:	f04f 30ff 	mov.w	r0, #4294967295
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
 8009b06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b08:	b112      	cbz	r2, 8009b10 <_raise_r+0x1e>
 8009b0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b0e:	b94b      	cbnz	r3, 8009b24 <_raise_r+0x32>
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 f831 	bl	8009b78 <_getpid_r>
 8009b16:	462a      	mov	r2, r5
 8009b18:	4601      	mov	r1, r0
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b20:	f000 b818 	b.w	8009b54 <_kill_r>
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d00a      	beq.n	8009b3e <_raise_r+0x4c>
 8009b28:	1c59      	adds	r1, r3, #1
 8009b2a:	d103      	bne.n	8009b34 <_raise_r+0x42>
 8009b2c:	2316      	movs	r3, #22
 8009b2e:	6003      	str	r3, [r0, #0]
 8009b30:	2001      	movs	r0, #1
 8009b32:	e7e7      	b.n	8009b04 <_raise_r+0x12>
 8009b34:	2400      	movs	r4, #0
 8009b36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	4798      	blx	r3
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e7e0      	b.n	8009b04 <_raise_r+0x12>
	...

08009b44 <raise>:
 8009b44:	4b02      	ldr	r3, [pc, #8]	; (8009b50 <raise+0xc>)
 8009b46:	4601      	mov	r1, r0
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	f7ff bfd2 	b.w	8009af2 <_raise_r>
 8009b4e:	bf00      	nop
 8009b50:	20000090 	.word	0x20000090

08009b54 <_kill_r>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	4d07      	ldr	r5, [pc, #28]	; (8009b74 <_kill_r+0x20>)
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	4608      	mov	r0, r1
 8009b5e:	4611      	mov	r1, r2
 8009b60:	602b      	str	r3, [r5, #0]
 8009b62:	f7f9 fc97 	bl	8003494 <_kill>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	d102      	bne.n	8009b70 <_kill_r+0x1c>
 8009b6a:	682b      	ldr	r3, [r5, #0]
 8009b6c:	b103      	cbz	r3, 8009b70 <_kill_r+0x1c>
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	bd38      	pop	{r3, r4, r5, pc}
 8009b72:	bf00      	nop
 8009b74:	20000dbc 	.word	0x20000dbc

08009b78 <_getpid_r>:
 8009b78:	f7f9 bc84 	b.w	8003484 <_getpid>

08009b7c <__sread>:
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	460c      	mov	r4, r1
 8009b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b84:	f000 f89c 	bl	8009cc0 <_read_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	bfab      	itete	ge
 8009b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b90:	181b      	addge	r3, r3, r0
 8009b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b96:	bfac      	ite	ge
 8009b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b9a:	81a3      	strhlt	r3, [r4, #12]
 8009b9c:	bd10      	pop	{r4, pc}

08009b9e <__swrite>:
 8009b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba2:	461f      	mov	r7, r3
 8009ba4:	898b      	ldrh	r3, [r1, #12]
 8009ba6:	05db      	lsls	r3, r3, #23
 8009ba8:	4605      	mov	r5, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	4616      	mov	r6, r2
 8009bae:	d505      	bpl.n	8009bbc <__swrite+0x1e>
 8009bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f000 f868 	bl	8009c8c <_lseek_r>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	4632      	mov	r2, r6
 8009bca:	463b      	mov	r3, r7
 8009bcc:	4628      	mov	r0, r5
 8009bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd2:	f000 b817 	b.w	8009c04 <_write_r>

08009bd6 <__sseek>:
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	460c      	mov	r4, r1
 8009bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bde:	f000 f855 	bl	8009c8c <_lseek_r>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	bf15      	itete	ne
 8009be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bf2:	81a3      	strheq	r3, [r4, #12]
 8009bf4:	bf18      	it	ne
 8009bf6:	81a3      	strhne	r3, [r4, #12]
 8009bf8:	bd10      	pop	{r4, pc}

08009bfa <__sclose>:
 8009bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfe:	f000 b813 	b.w	8009c28 <_close_r>
	...

08009c04 <_write_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d07      	ldr	r5, [pc, #28]	; (8009c24 <_write_r+0x20>)
 8009c08:	4604      	mov	r4, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	602a      	str	r2, [r5, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f7f9 fc75 	bl	8003502 <_write>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_write_r+0x1e>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_write_r+0x1e>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	20000dbc 	.word	0x20000dbc

08009c28 <_close_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	; (8009c44 <_close_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f9 fc81 	bl	800353a <_close>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_close_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_close_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20000dbc 	.word	0x20000dbc

08009c48 <_fstat_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	; (8009c68 <_fstat_r+0x20>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	4611      	mov	r1, r2
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	f7f9 fc7c 	bl	8003552 <_fstat>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d102      	bne.n	8009c64 <_fstat_r+0x1c>
 8009c5e:	682b      	ldr	r3, [r5, #0]
 8009c60:	b103      	cbz	r3, 8009c64 <_fstat_r+0x1c>
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	bf00      	nop
 8009c68:	20000dbc 	.word	0x20000dbc

08009c6c <_isatty_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d06      	ldr	r5, [pc, #24]	; (8009c88 <_isatty_r+0x1c>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f9 fc7b 	bl	8003572 <_isatty>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_isatty_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_isatty_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20000dbc 	.word	0x20000dbc

08009c8c <_lseek_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	; (8009cac <_lseek_r+0x20>)
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7f9 fc74 	bl	8003588 <_lseek>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_lseek_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_lseek_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	20000dbc 	.word	0x20000dbc

08009cb0 <_malloc_usable_size_r>:
 8009cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cb4:	1f18      	subs	r0, r3, #4
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	bfbc      	itt	lt
 8009cba:	580b      	ldrlt	r3, [r1, r0]
 8009cbc:	18c0      	addlt	r0, r0, r3
 8009cbe:	4770      	bx	lr

08009cc0 <_read_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d07      	ldr	r5, [pc, #28]	; (8009ce0 <_read_r+0x20>)
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	602a      	str	r2, [r5, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f7f9 fbfa 	bl	80034c8 <_read>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_read_r+0x1e>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_read_r+0x1e>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20000dbc 	.word	0x20000dbc

08009ce4 <_gettimeofday>:
 8009ce4:	4b02      	ldr	r3, [pc, #8]	; (8009cf0 <_gettimeofday+0xc>)
 8009ce6:	2258      	movs	r2, #88	; 0x58
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	f04f 30ff 	mov.w	r0, #4294967295
 8009cee:	4770      	bx	lr
 8009cf0:	20000dbc 	.word	0x20000dbc

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
