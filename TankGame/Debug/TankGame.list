
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004afc  08004afc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004afc  08004afc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004afc  08004afc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000474  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143c6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ef  00000000  00000000  0003440e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00036d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e70  00000000  00000000  00037c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e744  00000000  00000000  00038ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140a3  00000000  00000000  0005721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b43af  00000000  00000000  0006b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f66e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004018  00000000  00000000  0011f6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a48 	.word	0x08004a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004a48 	.word	0x08004a48

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08e      	sub	sp, #56	; 0x38
 80001dc:	af0a      	add	r7, sp, #40	; 0x28
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	4608      	mov	r0, r1
 80001e2:	4611      	mov	r1, r2
 80001e4:	461a      	mov	r2, r3
 80001e6:	4603      	mov	r3, r0
 80001e8:	817b      	strh	r3, [r7, #10]
 80001ea:	460b      	mov	r3, r1
 80001ec:	813b      	strh	r3, [r7, #8]
 80001ee:	4613      	mov	r3, r2
 80001f0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <LiquidCrystal+0x90>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d019      	beq.n	800022e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80001fa:	8939      	ldrh	r1, [r7, #8]
 80001fc:	897a      	ldrh	r2, [r7, #10]
 80001fe:	2300      	movs	r3, #0
 8000200:	9308      	str	r3, [sp, #32]
 8000202:	2300      	movs	r3, #0
 8000204:	9307      	str	r3, [sp, #28]
 8000206:	2300      	movs	r3, #0
 8000208:	9306      	str	r3, [sp, #24]
 800020a:	2300      	movs	r3, #0
 800020c:	9305      	str	r3, [sp, #20]
 800020e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000210:	9304      	str	r3, [sp, #16]
 8000212:	8c3b      	ldrh	r3, [r7, #32]
 8000214:	9303      	str	r3, [sp, #12]
 8000216:	8bbb      	ldrh	r3, [r7, #28]
 8000218:	9302      	str	r3, [sp, #8]
 800021a:	8b3b      	ldrh	r3, [r7, #24]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	460b      	mov	r3, r1
 8000224:	68f9      	ldr	r1, [r7, #12]
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f820 	bl	800026c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800022c:	e018      	b.n	8000260 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800022e:	8939      	ldrh	r1, [r7, #8]
 8000230:	897a      	ldrh	r2, [r7, #10]
 8000232:	2300      	movs	r3, #0
 8000234:	9308      	str	r3, [sp, #32]
 8000236:	2300      	movs	r3, #0
 8000238:	9307      	str	r3, [sp, #28]
 800023a:	2300      	movs	r3, #0
 800023c:	9306      	str	r3, [sp, #24]
 800023e:	2300      	movs	r3, #0
 8000240:	9305      	str	r3, [sp, #20]
 8000242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000244:	9304      	str	r3, [sp, #16]
 8000246:	8c3b      	ldrh	r3, [r7, #32]
 8000248:	9303      	str	r3, [sp, #12]
 800024a:	8bbb      	ldrh	r3, [r7, #28]
 800024c:	9302      	str	r3, [sp, #8]
 800024e:	8b3b      	ldrh	r3, [r7, #24]
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	460b      	mov	r3, r1
 8000258:	68f9      	ldr	r1, [r7, #12]
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f806 	bl	800026c <init>
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	60b9      	str	r1, [r7, #8]
 8000274:	4611      	mov	r1, r2
 8000276:	461a      	mov	r2, r3
 8000278:	4603      	mov	r3, r0
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	460b      	mov	r3, r1
 800027e:	81bb      	strh	r3, [r7, #12]
 8000280:	4613      	mov	r3, r2
 8000282:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000284:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <init+0x84>)
 8000286:	89bb      	ldrh	r3, [r7, #12]
 8000288:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800028a:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <init+0x88>)
 800028c:	88fb      	ldrh	r3, [r7, #6]
 800028e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000290:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <init+0x8c>)
 8000292:	8b3b      	ldrh	r3, [r7, #24]
 8000294:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000296:	4a19      	ldr	r2, [pc, #100]	; (80002fc <init+0x90>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 800029c:	4a18      	ldr	r2, [pc, #96]	; (8000300 <init+0x94>)
 800029e:	8bbb      	ldrh	r3, [r7, #28]
 80002a0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80002a2:	4a17      	ldr	r2, [pc, #92]	; (8000300 <init+0x94>)
 80002a4:	8c3b      	ldrh	r3, [r7, #32]
 80002a6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80002a8:	4a15      	ldr	r2, [pc, #84]	; (8000300 <init+0x94>)
 80002aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ac:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 80002ae:	4a14      	ldr	r2, [pc, #80]	; (8000300 <init+0x94>)
 80002b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80002b2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <init+0x94>)
 80002b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80002b8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <init+0x94>)
 80002bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80002be:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <init+0x94>)
 80002c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002c4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <init+0x94>)
 80002c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002ca:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <init+0x98>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e002      	b.n	80002e0 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <init+0x98>)
 80002dc:	2210      	movs	r2, #16
 80002de:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 80002e0:	2102      	movs	r1, #2
 80002e2:	2010      	movs	r0, #16
 80002e4:	f000 f810 	bl	8000308 <begin>
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000036 	.word	0x20000036
 80002f4:	20000038 	.word	0x20000038
 80002f8:	2000003a 	.word	0x2000003a
 80002fc:	2000004c 	.word	0x2000004c
 8000300:	2000003c 	.word	0x2000003c
 8000304:	20000050 	.word	0x20000050

08000308 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	460a      	mov	r2, r1
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	4613      	mov	r3, r2
 8000316:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d906      	bls.n	800032c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800031e:	4b77      	ldr	r3, [pc, #476]	; (80004fc <begin+0x1f4>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4b74      	ldr	r3, [pc, #464]	; (80004fc <begin+0x1f4>)
 800032a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800032c:	4a74      	ldr	r2, [pc, #464]	; (8000500 <begin+0x1f8>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000332:	79fa      	ldrb	r2, [r7, #7]
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	3340      	adds	r3, #64	; 0x40
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	2000      	movs	r0, #0
 800033c:	f000 f988 	bl	8000650 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000340:	4b70      	ldr	r3, [pc, #448]	; (8000504 <begin+0x1fc>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d009      	beq.n	800035c <begin+0x54>
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d106      	bne.n	800035c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800034e:	4b6b      	ldr	r3, [pc, #428]	; (80004fc <begin+0x1f4>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b68      	ldr	r3, [pc, #416]	; (80004fc <begin+0x1f4>)
 800035a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800035c:	f000 f8e4 	bl	8000528 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000360:	2303      	movs	r3, #3
 8000362:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000368:	4b67      	ldr	r3, [pc, #412]	; (8000508 <begin+0x200>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d01b      	beq.n	80003a8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000370:	4b66      	ldr	r3, [pc, #408]	; (800050c <begin+0x204>)
 8000372:	881a      	ldrh	r2, [r3, #0]
 8000374:	4b66      	ldr	r3, [pc, #408]	; (8000510 <begin+0x208>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4313      	orrs	r3, r2
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b65      	ldr	r3, [pc, #404]	; (8000514 <begin+0x20c>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b64      	ldr	r3, [pc, #400]	; (8000518 <begin+0x210>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	4313      	orrs	r3, r2
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b62      	ldr	r3, [pc, #392]	; (8000518 <begin+0x210>)
 800038e:	885b      	ldrh	r3, [r3, #2]
 8000390:	4313      	orrs	r3, r2
 8000392:	b29a      	uxth	r2, r3
 8000394:	4b60      	ldr	r3, [pc, #384]	; (8000518 <begin+0x210>)
 8000396:	889b      	ldrh	r3, [r3, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b5e      	ldr	r3, [pc, #376]	; (8000518 <begin+0x210>)
 800039e:	88db      	ldrh	r3, [r3, #6]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e02a      	b.n	80003fe <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003a8:	4b58      	ldr	r3, [pc, #352]	; (800050c <begin+0x204>)
 80003aa:	881a      	ldrh	r2, [r3, #0]
 80003ac:	4b58      	ldr	r3, [pc, #352]	; (8000510 <begin+0x208>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b57      	ldr	r3, [pc, #348]	; (8000514 <begin+0x20c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003bc:	4b56      	ldr	r3, [pc, #344]	; (8000518 <begin+0x210>)
 80003be:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003c4:	4b54      	ldr	r3, [pc, #336]	; (8000518 <begin+0x210>)
 80003c6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003cc:	4b52      	ldr	r3, [pc, #328]	; (8000518 <begin+0x210>)
 80003ce:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003d4:	4b50      	ldr	r3, [pc, #320]	; (8000518 <begin+0x210>)
 80003d6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003d8:	4313      	orrs	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b4e      	ldr	r3, [pc, #312]	; (8000518 <begin+0x210>)
 80003de:	891b      	ldrh	r3, [r3, #8]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	4b4c      	ldr	r3, [pc, #304]	; (8000518 <begin+0x210>)
 80003e6:	895b      	ldrh	r3, [r3, #10]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b4a      	ldr	r3, [pc, #296]	; (8000518 <begin+0x210>)
 80003ee:	899b      	ldrh	r3, [r3, #12]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b48      	ldr	r3, [pc, #288]	; (8000518 <begin+0x210>)
 80003f6:	89db      	ldrh	r3, [r3, #14]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003fc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80003fe:	4b47      	ldr	r3, [pc, #284]	; (800051c <begin+0x214>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f107 020c 	add.w	r2, r7, #12
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fa19 	bl	8001840 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 800040e:	2032      	movs	r0, #50	; 0x32
 8000410:	f001 f86a 	bl	80014e8 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000414:	4b41      	ldr	r3, [pc, #260]	; (800051c <begin+0x214>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <begin+0x204>)
 800041a:	8811      	ldrh	r1, [r2, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fba0 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <begin+0x214>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a3a      	ldr	r2, [pc, #232]	; (8000514 <begin+0x20c>)
 800042a:	8811      	ldrh	r1, [r2, #0]
 800042c:	2200      	movs	r2, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fb98 	bl	8001b64 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000434:	4b36      	ldr	r3, [pc, #216]	; (8000510 <begin+0x208>)
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d007      	beq.n	800044c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800043c:	4b37      	ldr	r3, [pc, #220]	; (800051c <begin+0x214>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a33      	ldr	r2, [pc, #204]	; (8000510 <begin+0x208>)
 8000442:	8811      	ldrh	r1, [r2, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fb8c 	bl	8001b64 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <begin+0x1f4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	2b00      	cmp	r3, #0
 8000456:	d115      	bne.n	8000484 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000458:	2003      	movs	r0, #3
 800045a:	f000 fa45 	bl	80008e8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800045e:	2005      	movs	r0, #5
 8000460:	f001 f842 	bl	80014e8 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 fa3f 	bl	80008e8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800046a:	2005      	movs	r0, #5
 800046c:	f001 f83c 	bl	80014e8 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000470:	2003      	movs	r0, #3
 8000472:	f000 fa39 	bl	80008e8 <write4bits>
    HAL_Delay(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f001 f836 	bl	80014e8 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 800047c:	2002      	movs	r0, #2
 800047e:	f000 fa33 	bl	80008e8 <write4bits>
 8000482:	e01d      	b.n	80004c0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <begin+0x1f4>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f043 0320 	orr.w	r3, r3, #32
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f9a4 	bl	80007dc <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000494:	2005      	movs	r0, #5
 8000496:	f001 f827 	bl	80014e8 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <begin+0x1f4>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f999 	bl	80007dc <command>
    HAL_Delay(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f001 f81c 	bl	80014e8 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <begin+0x1f4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f043 0320 	orr.w	r3, r3, #32
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f98e 	bl	80007dc <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <begin+0x1f4>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f986 	bl	80007dc <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <begin+0x218>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	701a      	strb	r2, [r3, #0]
  display();
 80004d6:	f000 f917 	bl	8000708 <display>

  // clear it off
  clear();
 80004da:	f000 f8d9 	bl	8000690 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <begin+0x21c>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <begin+0x21c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f974 	bl	80007dc <command>

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000050 	.word	0x20000050
 8000500:	20000053 	.word	0x20000053
 8000504:	20000034 	.word	0x20000034
 8000508:	20000000 	.word	0x20000000
 800050c:	20000036 	.word	0x20000036
 8000510:	20000038 	.word	0x20000038
 8000514:	2000003a 	.word	0x2000003a
 8000518:	2000003c 	.word	0x2000003c
 800051c:	2000004c 	.word	0x2000004c
 8000520:	20000051 	.word	0x20000051
 8000524:	20000052 	.word	0x20000052

08000528 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800052e:	4b41      	ldr	r3, [pc, #260]	; (8000634 <enableClock+0x10c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000536:	d10c      	bne.n	8000552 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b3f      	ldr	r3, [pc, #252]	; (8000638 <enableClock+0x110>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a3e      	ldr	r2, [pc, #248]	; (8000638 <enableClock+0x110>)
 800053e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <enableClock+0x110>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000550:	e06a      	b.n	8000628 <enableClock+0x100>
  else if(_port == GPIOB)
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <enableClock+0x10c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a39      	ldr	r2, [pc, #228]	; (800063c <enableClock+0x114>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d10c      	bne.n	8000576 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b36      	ldr	r3, [pc, #216]	; (8000638 <enableClock+0x110>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a35      	ldr	r2, [pc, #212]	; (8000638 <enableClock+0x110>)
 8000562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000566:	6153      	str	r3, [r2, #20]
 8000568:	4b33      	ldr	r3, [pc, #204]	; (8000638 <enableClock+0x110>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000570:	61bb      	str	r3, [r7, #24]
 8000572:	69bb      	ldr	r3, [r7, #24]
}
 8000574:	e058      	b.n	8000628 <enableClock+0x100>
  else if(_port == GPIOB)
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <enableClock+0x10c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <enableClock+0x114>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d10c      	bne.n	800059a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <enableClock+0x110>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <enableClock+0x110>)
 8000586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058a:	6153      	str	r3, [r2, #20]
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <enableClock+0x110>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	697b      	ldr	r3, [r7, #20]
}
 8000598:	e046      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOC)
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <enableClock+0x10c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <enableClock+0x118>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d10c      	bne.n	80005be <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <enableClock+0x110>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a23      	ldr	r2, [pc, #140]	; (8000638 <enableClock+0x110>)
 80005aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005ae:	6153      	str	r3, [r2, #20]
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <enableClock+0x110>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]
}
 80005bc:	e034      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOD)
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <enableClock+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a20      	ldr	r2, [pc, #128]	; (8000644 <enableClock+0x11c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d10c      	bne.n	80005e2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <enableClock+0x110>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <enableClock+0x110>)
 80005ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <enableClock+0x110>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	e022      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOE)
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <enableClock+0x10c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <enableClock+0x120>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d10c      	bne.n	8000606 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a11      	ldr	r2, [pc, #68]	; (8000638 <enableClock+0x110>)
 80005f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f6:	6153      	str	r3, [r2, #20]
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <enableClock+0x110>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
}
 8000604:	e010      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOF)
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <enableClock+0x10c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <enableClock+0x124>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d10b      	bne.n	8000628 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <enableClock+0x110>)
 8000616:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800061a:	6153      	str	r3, [r2, #20]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <enableClock+0x110>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
}
 8000628:	bf00      	nop
 800062a:	3724      	adds	r7, #36	; 0x24
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	2000004c 	.word	0x2000004c
 8000638:	40021000 	.word	0x40021000
 800063c:	48000400 	.word	0x48000400
 8000640:	48000800 	.word	0x48000800
 8000644:	48000c00 	.word	0x48000c00
 8000648:	48001000 	.word	0x48001000
 800064c:	48001400 	.word	0x48001400

08000650 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <setRowOffsets+0x3c>)
 8000664:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <setRowOffsets+0x3c>)
 800066c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <setRowOffsets+0x3c>)
 8000674:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <setRowOffsets+0x3c>)
 800067c:	70da      	strb	r2, [r3, #3]
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000054 	.word	0x20000054

08000690 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000694:	2001      	movs	r0, #1
 8000696:	f000 f8a1 	bl	80007dc <command>
  HAL_Delay(2);  // this command takes a long time!
 800069a:	2002      	movs	r0, #2
 800069c:	f000 ff24 	bl	80014e8 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80006b4:	2304      	movs	r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d803      	bhi.n	80006c8 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <setCursor+0x5c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d303      	bcc.n	80006da <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <setCursor+0x5c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <setCursor+0x60>)
 80006de:	5cd2      	ldrb	r2, [r2, r3]
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4413      	add	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f873 	bl	80007dc <command>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000053 	.word	0x20000053
 8000704:	20000054 	.word	0x20000054

08000708 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <display+0x28>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <display+0x28>)
 8000718:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <display+0x28>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f859 	bl	80007dc <command>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000051 	.word	0x20000051

08000734 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d101      	bne.n	8000746 <print+0x12>
 8000742:	2300      	movs	r3, #0
 8000744:	e01d      	b.n	8000782 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fd3c 	bl	80001c8 <strlen>
 8000750:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000756:	e00c      	b.n	8000772 <print+0x3e>
    if (write(*buffer++)) n++;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	617a      	str	r2, [r7, #20]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f849 	bl	80007f8 <write>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <print+0x4a>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	613a      	str	r2, [r7, #16]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1ed      	bne.n	8000758 <print+0x24>
 800077c:	e000      	b.n	8000780 <print+0x4c>
    else break;
 800077e:	bf00      	nop
  }
  return n;
 8000780:	68fb      	ldr	r3, [r7, #12]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	6039      	str	r1, [r7, #0]
 8000794:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f815 	bl	80007dc <command>
  for (int i=0; i<8; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e009      	b.n	80007cc <createChar+0x42>
    write(charmap[i]);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f819 	bl	80007f8 <write>
  for (int i=0; i<8; i++) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	ddf2      	ble.n	80007b8 <createChar+0x2e>
  }
}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f814 	bl	8000818 <send>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <write>:

inline size_t write(uint8_t value) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2101      	movs	r1, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f806 	bl	8000818 <send>
  return 1; // assume sucess
 800080c:	2301      	movs	r3, #1
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <send+0x6c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a16      	ldr	r2, [pc, #88]	; (8000888 <send+0x70>)
 800082e:	8811      	ldrh	r1, [r2, #0]
 8000830:	79ba      	ldrb	r2, [r7, #6]
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f996 	bl	8001b64 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <send+0x74>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d007      	beq.n	8000850 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <send+0x6c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a11      	ldr	r2, [pc, #68]	; (800088c <send+0x74>)
 8000846:	8811      	ldrh	r1, [r2, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f98a 	bl	8001b64 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <send+0x78>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f003 0310 	and.w	r3, r3, #16
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <send+0x4e>
    write8bits(value);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f86c 	bl	800093c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000864:	e009      	b.n	800087a <send+0x62>
    write4bits(value>>4);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	091b      	lsrs	r3, r3, #4
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f83b 	bl	80008e8 <write4bits>
    write4bits(value);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f837 	bl	80008e8 <write4bits>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000004c 	.word	0x2000004c
 8000888:	20000036 	.word	0x20000036
 800088c:	20000038 	.word	0x20000038
 8000890:	20000050 	.word	0x20000050

08000894 <pulseEnable>:

void pulseEnable(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <pulseEnable+0x4c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <pulseEnable+0x50>)
 800089e:	8811      	ldrh	r1, [r2, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f95e 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fe1d 	bl	80014e8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <pulseEnable+0x4c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <pulseEnable+0x50>)
 80008b4:	8811      	ldrh	r1, [r2, #0]
 80008b6:	2201      	movs	r2, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 f953 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 fe12 	bl	80014e8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <pulseEnable+0x4c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <pulseEnable+0x50>)
 80008ca:	8811      	ldrh	r1, [r2, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f948 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fe07 	bl	80014e8 <HAL_Delay>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000004c 	.word	0x2000004c
 80008e4:	2000003a 	.word	0x2000003a

080008e8 <write4bits>:

void write4bits(uint8_t value) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e013      	b.n	8000920 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <write4bits+0x4c>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <write4bits+0x50>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	fa42 f303 	asr.w	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	f001 f925 	bl	8001b64 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b03      	cmp	r3, #3
 8000924:	dde8      	ble.n	80008f8 <write4bits+0x10>
  }

  pulseEnable();
 8000926:	f7ff ffb5 	bl	8000894 <pulseEnable>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000004c 	.word	0x2000004c
 8000938:	2000003c 	.word	0x2000003c

0800093c <write8bits>:

void write8bits(uint8_t value) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	e013      	b.n	8000974 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <write8bits+0x4c>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <write8bits+0x50>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	fa42 f303 	asr.w	r3, r2, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	f001 f8fb 	bl	8001b64 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b07      	cmp	r3, #7
 8000978:	dde8      	ble.n	800094c <write8bits+0x10>
  }

  pulseEnable();
 800097a:	f7ff ff8b 	bl	8000894 <pulseEnable>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000004c 	.word	0x2000004c
 800098c:	2000003c 	.word	0x2000003c

08000990 <HAL_GPIO_EXTI_Callback>:
    { GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]

  if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 800099a:	4b85      	ldr	r3, [pc, #532]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x220>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80009a2:	f000 fd95 	bl	80014d0 <HAL_GetTick>
 80009a6:	4603      	mov	r3, r0
 80009a8:	429c      	cmp	r4, r3
 80009aa:	f200 80f9 	bhi.w	8000ba0 <HAL_GPIO_EXTI_Callback+0x210>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80009ae:	f000 fd8f 	bl	80014d0 <HAL_GetTick>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a7e      	ldr	r2, [pc, #504]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x220>)
 80009b6:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80009b8:	23ff      	movs	r3, #255	; 0xff
 80009ba:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 80009bc:	23ff      	movs	r3, #255	; 0xff
 80009be:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80009c0:	2300      	movs	r3, #0
 80009c2:	737b      	strb	r3, [r7, #13]
 80009c4:	e00b      	b.n	80009de <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 80009c6:	7b7b      	ldrb	r3, [r7, #13]
 80009c8:	4a7a      	ldr	r2, [pc, #488]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x224>)
 80009ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d101      	bne.n	80009d8 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 80009d4:	7b7b      	ldrb	r3, [r7, #13]
 80009d6:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80009d8:	7b7b      	ldrb	r3, [r7, #13]
 80009da:	3301      	adds	r3, #1
 80009dc:	737b      	strb	r3, [r7, #13]
 80009de:	7b7b      	ldrb	r3, [r7, #13]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d9f0      	bls.n	80009c6 <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 80009e4:	4b74      	ldr	r3, [pc, #464]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	2200      	movs	r2, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f8ba 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 80009f0:	4b71      	ldr	r3, [pc, #452]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 80009f2:	2102      	movs	r1, #2
 80009f4:	2200      	movs	r2, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 f8b4 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 80009fc:	4b6e      	ldr	r3, [pc, #440]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 80009fe:	2104      	movs	r1, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f8ae 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000a08:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 f8a8 	bl	8001b64 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000a14:	2300      	movs	r3, #0
 8000a16:	733b      	strb	r3, [r7, #12]
 8000a18:	e02d      	b.n	8000a76 <HAL_GPIO_EXTI_Callback+0xe6>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000a1a:	7b3b      	ldrb	r3, [r7, #12]
 8000a1c:	4a67      	ldr	r2, [pc, #412]	; (8000bbc <HAL_GPIO_EXTI_Callback+0x22c>)
 8000a1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a22:	7b3b      	ldrb	r3, [r7, #12]
 8000a24:	4a66      	ldr	r2, [pc, #408]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f001 f899 	bl	8001b64 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4a63      	ldr	r2, [pc, #396]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x234>)
 8000a38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a40:	495c      	ldr	r1, [pc, #368]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x224>)
 8000a42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4610      	mov	r0, r2
 8000a4a:	f001 f873 	bl	8001b34 <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_GPIO_EXTI_Callback+0xc8>
    {

      column_number = col;
 8000a54:	7b3b      	ldrb	r3, [r7, #12]
 8000a56:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000a58:	7b3b      	ldrb	r3, [r7, #12]
 8000a5a:	4a58      	ldr	r2, [pc, #352]	; (8000bbc <HAL_GPIO_EXTI_Callback+0x22c>)
 8000a5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a60:	7b3b      	ldrb	r3, [r7, #12]
 8000a62:	4a57      	ldr	r2, [pc, #348]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x230>)
 8000a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f001 f87a 	bl	8001b64 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000a70:	7b3b      	ldrb	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	733b      	strb	r3, [r7, #12]
 8000a76:	7b3b      	ldrb	r3, [r7, #12]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d9ce      	bls.n	8000a1a <HAL_GPIO_EXTI_Callback+0x8a>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000a7c:	4b4e      	ldr	r3, [pc, #312]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2201      	movs	r2, #1
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f86e 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f868 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 8000a96:	2104      	movs	r1, #4
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f862 	bl	8001b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000aa0:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x228>)
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f85c 	bl	8001b64 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8000aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d076      	beq.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x214>
 8000ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abe:	d071      	beq.n	8000ba4 <HAL_GPIO_EXTI_Callback+0x214>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	3301      	adds	r3, #1
 8000ace:	72fb      	strb	r3, [r7, #11]
  switch (button_number)
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d867      	bhi.n	8000ba8 <HAL_GPIO_EXTI_Callback+0x218>
 8000ad8:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <HAL_GPIO_EXTI_Callback+0x150>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b21 	.word	0x08000b21
 8000ae4:	08000b31 	.word	0x08000b31
 8000ae8:	08000b41 	.word	0x08000b41
 8000aec:	08000b51 	.word	0x08000b51
 8000af0:	08000b61 	.word	0x08000b61
 8000af4:	08000b71 	.word	0x08000b71
 8000af8:	08000b81 	.word	0x08000b81
 8000afc:	08000b91 	.word	0x08000b91
 8000b00:	08000ba9 	.word	0x08000ba9
 8000b04:	08000ba9 	.word	0x08000ba9
 8000b08:	08000ba9 	.word	0x08000ba9
 8000b0c:	08000ba9 	.word	0x08000ba9
 8000b10:	08000ba9 	.word	0x08000ba9
 8000b14:	08000ba9 	.word	0x08000ba9
 8000b18:	08000ba9 	.word	0x08000ba9
 8000b1c:	08000ba9 	.word	0x08000ba9
  {
  case 1:
    HAL_UART_Transmit(&huart1, "1",
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	2201      	movs	r2, #1
 8000b26:	4928      	ldr	r1, [pc, #160]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x238>)
 8000b28:	4828      	ldr	r0, [pc, #160]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b2a:	f002 ff60 	bl	80039ee <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000b2e:	e03c      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 2:
    HAL_UART_Transmit(&huart1, "2",
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
 8000b34:	2201      	movs	r2, #1
 8000b36:	4926      	ldr	r1, [pc, #152]	; (8000bd0 <HAL_GPIO_EXTI_Callback+0x240>)
 8000b38:	4824      	ldr	r0, [pc, #144]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b3a:	f002 ff58 	bl	80039ee <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000b3e:	e034      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 3:
    HAL_UART_Transmit(&huart1, "3",
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2201      	movs	r2, #1
 8000b46:	4923      	ldr	r1, [pc, #140]	; (8000bd4 <HAL_GPIO_EXTI_Callback+0x244>)
 8000b48:	4820      	ldr	r0, [pc, #128]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b4a:	f002 ff50 	bl	80039ee <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000b4e:	e02c      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 4:
    HAL_UART_Transmit(&huart1, "4",
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	2201      	movs	r2, #1
 8000b56:	4920      	ldr	r1, [pc, #128]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x248>)
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b5a:	f002 ff48 	bl	80039ee <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000b5e:	e024      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 5:
    HAL_UART_Transmit(&huart1, "5",
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	2201      	movs	r2, #1
 8000b66:	491d      	ldr	r1, [pc, #116]	; (8000bdc <HAL_GPIO_EXTI_Callback+0x24c>)
 8000b68:	4818      	ldr	r0, [pc, #96]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b6a:	f002 ff40 	bl	80039ee <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000b6e:	e01c      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 6:
    HAL_UART_Transmit(&huart1, "6",
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	2201      	movs	r2, #1
 8000b76:	491a      	ldr	r1, [pc, #104]	; (8000be0 <HAL_GPIO_EXTI_Callback+0x250>)
 8000b78:	4814      	ldr	r0, [pc, #80]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b7a:	f002 ff38 	bl	80039ee <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000b7e:	e014      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 7:
    HAL_UART_Transmit(&huart1, "7",
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	2201      	movs	r2, #1
 8000b86:	4917      	ldr	r1, [pc, #92]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x254>)
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b8a:	f002 ff30 	bl	80039ee <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000b8e:	e00c      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 8:
    HAL_UART_Transmit(&huart1, "8",
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	2201      	movs	r2, #1
 8000b96:	4914      	ldr	r1, [pc, #80]	; (8000be8 <HAL_GPIO_EXTI_Callback+0x258>)
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x23c>)
 8000b9a:	f002 ff28 	bl	80039ee <HAL_UART_Transmit>
                          1,
                          HAL_MAX_DELAY);
    /* code */
    break;
 8000b9e:	e004      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
    return;
 8000ba0:	bf00      	nop
 8000ba2:	e002      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
    return; // Reject invalid scan
 8000ba4:	bf00      	nop
 8000ba6:	e000      	b.n	8000baa <HAL_GPIO_EXTI_Callback+0x21a>
  case 16:
    /* code */
    break;

  default:
    break;
 8000ba8:	bf00      	nop
  }
}
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	20000484 	.word	0x20000484
 8000bb4:	08004aa4 	.word	0x08004aa4
 8000bb8:	48000c00 	.word	0x48000c00
 8000bbc:	08004aac 	.word	0x08004aac
 8000bc0:	08004abc 	.word	0x08004abc
 8000bc4:	08004a94 	.word	0x08004a94
 8000bc8:	08004a60 	.word	0x08004a60
 8000bcc:	20000110 	.word	0x20000110
 8000bd0:	08004a64 	.word	0x08004a64
 8000bd4:	08004a68 	.word	0x08004a68
 8000bd8:	08004a6c 	.word	0x08004a6c
 8000bdc:	08004a70 	.word	0x08004a70
 8000be0:	08004a74 	.word	0x08004a74
 8000be4:	08004a78 	.word	0x08004a78
 8000be8:	08004a7c 	.word	0x08004a7c

08000bec <showMain>:
       0x0A,
       0x00,
       0x00
 };

 void showMain(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
     setCursor(1, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fd56 	bl	80006a4 <setCursor>

	 write(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f7ff fdfd 	bl	80007f8 <write>
	      print("ROCKET QUEEN");
 8000bfe:	4802      	ldr	r0, [pc, #8]	; (8000c08 <showMain+0x1c>)
 8000c00:	f7ff fd98 	bl	8000734 <print>
 }
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08004a80 	.word	0x08004a80

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f000 fc03 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f84f 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 f981 	bl	8000f20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c1e:	f000 f8af 	bl	8000d80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c22:	f000 f8ed 	bl	8000e00 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000c26:	f000 f959 	bl	8000edc <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000c2a:	f000 f927 	bl	8000e7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c34:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <main+0x98>)
 8000c36:	f000 ff95 	bl	8001b64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <main+0x98>)
 8000c42:	f000 ff8f 	bl	8001b64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <main+0x98>)
 8000c4e:	f000 ff89 	bl	8001b64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <main+0x98>)
 8000c5a:	f000 ff83 	bl	8001b64 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&huart1, "yo",
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	2202      	movs	r2, #2
 8000c64:	4910      	ldr	r1, [pc, #64]	; (8000ca8 <main+0x9c>)
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <main+0xa0>)
 8000c68:	f002 fec1 	bl	80039ee <HAL_UART_Transmit>
                                2,
                                HAL_MAX_DELAY);

      LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c70:	9303      	str	r3, [sp, #12]
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	9302      	str	r3, [sp, #8]
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <main+0xa4>)
 8000c92:	f7ff faa1 	bl	80001d8 <LiquidCrystal>
      createChar(1, bottomFox);
 8000c96:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <main+0xa8>)
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fd76 	bl	800078a <createChar>
      showMain();
 8000c9e:	f7ff ffa5 	bl	8000bec <showMain>
      /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <main+0x96>
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	08004a90 	.word	0x08004a90
 8000cac:	20000110 	.word	0x20000110
 8000cb0:	48000c00 	.word	0x48000c00
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b09e      	sub	sp, #120	; 0x78
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cc2:	2228      	movs	r2, #40	; 0x28
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 feb6 	bl	8004a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	223c      	movs	r2, #60	; 0x3c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fea8 	bl	8004a38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cf0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d06:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d0c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f94e 	bl	8001fb4 <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d1e:	f000 f9b9 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2302      	movs	r3, #2
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f976 	bl	8003030 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d4a:	f000 f9a3 	bl	8001094 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <SystemClock_Config+0xc4>)
 8000d50:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fb9a 	bl	800349c <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d6e:	f000 f991 	bl	8001094 <Error_Handler>
  }
}
 8000d72:	bf00      	nop
 8000d74:	3778      	adds	r7, #120	; 0x78
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	00020021 	.word	0x00020021

08000d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	f000 ff02 	bl	8001bc4 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 f965 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000dce:	f000 ff88 	bl	8001ce2 <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 f95c 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_I2C1_Init+0x74>)
 8000de0:	f000 ffca 	bl	8001d78 <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f953 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000058 	.word	0x20000058
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	2000090e 	.word	0x2000090e

08000e00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_SPI1_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e36:	2208      	movs	r2, #8
 8000e38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_SPI1_Init+0x74>)
 8000e60:	f002 fccc 	bl	80037fc <HAL_SPI_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 f913 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000ac 	.word	0x200000ac
 8000e78:	40013000 	.word	0x40013000

08000e7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <MX_USART1_UART_Init+0x5c>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART1_UART_Init+0x58>)
 8000ec0:	f002 fd47 	bl	8003952 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 f8e3 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000110 	.word	0x20000110
 8000ed8:	40013800 	.word	0x40013800

08000edc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_USB_PCD_Init+0x3c>)
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <MX_USB_PCD_Init+0x40>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USB_PCD_Init+0x3c>)
 8000ee8:	2208      	movs	r2, #8
 8000eea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_USB_PCD_Init+0x3c>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USB_PCD_Init+0x3c>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_USB_PCD_Init+0x3c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USB_PCD_Init+0x3c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_USB_PCD_Init+0x3c>)
 8000f06:	f000 ff83 	bl	8001e10 <HAL_PCD_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f10:	f000 f8c0 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000198 	.word	0x20000198
 8000f1c:	40005c00 	.word	0x40005c00

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a52      	ldr	r2, [pc, #328]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f40:	6153      	str	r3, [r2, #20]
 8000f42:	4b50      	ldr	r3, [pc, #320]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	4a4c      	ldr	r2, [pc, #304]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f58:	6153      	str	r3, [r2, #20]
 8000f5a:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a46      	ldr	r2, [pc, #280]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b44      	ldr	r3, [pc, #272]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b41      	ldr	r3, [pc, #260]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a40      	ldr	r2, [pc, #256]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a3a      	ldr	r2, [pc, #232]	; (8001084 <MX_GPIO_Init+0x164>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <MX_GPIO_Init+0x164>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <MX_GPIO_Init+0x164>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a34      	ldr	r2, [pc, #208]	; (8001084 <MX_GPIO_Init+0x164>)
 8000fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <MX_GPIO_Init+0x164>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000fcc:	482e      	ldr	r0, [pc, #184]	; (8001088 <MX_GPIO_Init+0x168>)
 8000fce:	f000 fdc9 	bl	8001b64 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8000fd8:	482c      	ldr	r0, [pc, #176]	; (800108c <MX_GPIO_Init+0x16c>)
 8000fda:	f000 fdc3 	bl	8001b64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000fde:	2337      	movs	r3, #55	; 0x37
 8000fe0:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4825      	ldr	r0, [pc, #148]	; (8001088 <MX_GPIO_Init+0x168>)
 8000ff4:	f000 fc24 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ff8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000ffc:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	481d      	ldr	r0, [pc, #116]	; (8001088 <MX_GPIO_Init+0x168>)
 8001012:	f000 fc15 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001016:	2301      	movs	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f000 fc08 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001030:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800103c:	2302      	movs	r3, #2
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <MX_GPIO_Init+0x170>)
 8001048:	f000 fbfa 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD0
                           PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800104c:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8001050:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_GPIO_Init+0x16c>)
 8001066:	f000 fbeb 	bl	8001840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	2028      	movs	r0, #40	; 0x28
 8001070:	f000 fb39 	bl	80016e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001074:	2028      	movs	r0, #40	; 0x28
 8001076:	f000 fb52 	bl	800171e <HAL_NVIC_EnableIRQ>

}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	48001000 	.word	0x48001000
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48000400 	.word	0x48000400

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_MspInit+0x44>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_MspInit+0x44>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_MspInit+0x44>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_MspInit+0x44>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_MspInit+0x44>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80010d6:	2006      	movs	r0, #6
 80010d8:	f000 fafa 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_I2C_MspInit+0x7c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d127      	bne.n	800115a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_I2C_MspInit+0x80>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001122:	23c0      	movs	r3, #192	; 0xc0
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001126:	2312      	movs	r3, #18
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112a:	2301      	movs	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001132:	2304      	movs	r3, #4
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <HAL_I2C_MspInit+0x84>)
 800113e:	f000 fb7f 	bl	8001840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_I2C_MspInit+0x80>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40005400 	.word	0x40005400
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400

08001170 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_SPI_MspInit+0x7c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d128      	bne.n	80011e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_SPI_MspInit+0x80>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <HAL_SPI_MspInit+0x80>)
 8001198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119c:	6193      	str	r3, [r2, #24]
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_SPI_MspInit+0x80>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_SPI_MspInit+0x80>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_SPI_MspInit+0x80>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_SPI_MspInit+0x80>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80011c2:	23e0      	movs	r3, #224	; 0xe0
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d2:	2305      	movs	r3, #5
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fb2e 	bl	8001840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013000 	.word	0x40013000
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_UART_MspInit+0x8c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12f      	bne.n	8001276 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_UART_MspInit+0x90>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_UART_MspInit+0x90>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_UART_MspInit+0x90>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_UART_MspInit+0x90>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <HAL_UART_MspInit+0x90>)
 8001234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_UART_MspInit+0x90>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001246:	2330      	movs	r3, #48	; 0x30
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001256:	2307      	movs	r3, #7
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4809      	ldr	r0, [pc, #36]	; (8001288 <HAL_UART_MspInit+0x94>)
 8001262:	f000 faed 	bl	8001840 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2025      	movs	r0, #37	; 0x25
 800126c:	f000 fa3b 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001270:	2025      	movs	r0, #37	; 0x25
 8001272:	f000 fa54 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40013800 	.word	0x40013800
 8001284:	40021000 	.word	0x40021000
 8001288:	48000800 	.word	0x48000800

0800128c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_PCD_MspInit+0x80>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d129      	bne.n	8001302 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_PCD_MspInit+0x84>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_PCD_MspInit+0x84>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_PCD_MspInit+0x84>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80012c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80012d8:	230e      	movs	r3, #14
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f000 faab 	bl	8001840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_PCD_MspInit+0x84>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_PCD_MspInit+0x84>)
 80012f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_PCD_MspInit+0x84>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40005c00 	.word	0x40005c00
 8001310:	40021000 	.word	0x40021000

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f8a2 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <USART1_IRQHandler+0x10>)
 800136e:	f002 fbc9 	bl	8003b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000110 	.word	0x20000110

0800137c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001380:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001384:	f000 fc06 	bl	8001b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001388:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800138c:	f000 fc02 	bl	8001b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001390:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001394:	f000 fbfe 	bl	8001b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001398:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800139c:	f000 fbfa 	bl	8001b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001400 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	; (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	; (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fafb 	bl	80049f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff fc07 	bl	8000c0c <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001400:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800140c:	08004b04 	.word	0x08004b04
  ldr r2, =_sbss
 8001410:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001414:	2000048c 	.word	0x2000048c

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>
	...

0800141c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_Init+0x28>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_Init+0x28>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f94f 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe32 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40022000 	.word	0x40022000

08001448 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f967 	bl	800173a <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f92f 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000014 	.word	0x20000014
 80014a4:	20000010 	.word	0x20000010

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000014 	.word	0x20000014
 80014cc:	20000488 	.word	0x20000488

080014d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000488 	.word	0x20000488

080014e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000014 	.word	0x20000014

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff29 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff3e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff31 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001760:	2b02      	cmp	r3, #2
 8001762:	d008      	beq.n	8001776 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2204      	movs	r2, #4
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e020      	b.n	80017b8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 020e 	bic.w	r2, r2, #14
 8001784:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d005      	beq.n	80017e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2204      	movs	r2, #4
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e027      	b.n	8001836 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 020e 	bic.w	r2, r2, #14
 80017f4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
    } 
  }
  return status;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e154      	b.n	8001afa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8146 	beq.w	8001af4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d005      	beq.n	8001880 <HAL_GPIO_Init+0x40>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d130      	bne.n	80018e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b6:	2201      	movs	r2, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 0201 	and.w	r2, r3, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d017      	beq.n	800191e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d123      	bne.n	8001972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	6939      	ldr	r1, [r7, #16]
 800196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0203 	and.w	r2, r3, #3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80a0 	beq.w	8001af4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b4:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <HAL_GPIO_Init+0x2d8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <HAL_GPIO_Init+0x2d8>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b55      	ldr	r3, [pc, #340]	; (8001b18 <HAL_GPIO_Init+0x2d8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019cc:	4a53      	ldr	r2, [pc, #332]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f6:	d019      	beq.n	8001a2c <HAL_GPIO_Init+0x1ec>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_GPIO_Init+0x2e0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d013      	beq.n	8001a28 <HAL_GPIO_Init+0x1e8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a48      	ldr	r2, [pc, #288]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_GPIO_Init+0x1e4>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <HAL_GPIO_Init+0x2e8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d007      	beq.n	8001a20 <HAL_GPIO_Init+0x1e0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a46      	ldr	r2, [pc, #280]	; (8001b2c <HAL_GPIO_Init+0x2ec>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_GPIO_Init+0x1dc>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a3e:	4937      	ldr	r1, [pc, #220]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4c:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a70:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a9a:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ac4:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f aea3 	bne.w	8001850 <HAL_GPIO_Init+0x10>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48000c00 	.word	0x48000c00
 8001b2c:	48001000 	.word	0x48001000
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
 8001b70:	4613      	mov	r3, r2
 8001b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d006      	beq.n	8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe feec 	bl	8000990 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e081      	b.n	8001cda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fa7c 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	e006      	b.n	8001c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d104      	bne.n	8001c5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69d9      	ldr	r1, [r3, #28]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1a      	ldr	r2, [r3, #32]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d138      	bne.n	8001d6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e032      	b.n	8001d6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2224      	movs	r2, #36	; 0x24
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d139      	bne.n	8001e02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e033      	b.n	8001e04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	; 0x24
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
  }
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af06      	add	r7, sp, #24
 8001e16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0c4      	b.n	8001fac <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fa28 	bl	800128c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fd94 	bl	8004976 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e040      	b.n	8001ed6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3301      	adds	r3, #1
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3303      	adds	r3, #3
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3338      	adds	r3, #56	; 0x38
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	333c      	adds	r3, #60	; 0x3c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	3340      	adds	r3, #64	; 0x40
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3b9      	bcc.n	8001e54 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e044      	b.n	8001f70 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3b5      	bcc.n	8001ee6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	687e      	ldr	r6, [r7, #4]
 8001f82:	466d      	mov	r5, sp
 8001f84:	f106 0410 	add.w	r4, r6, #16
 8001f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	602b      	str	r3, [r5, #0]
 8001f90:	1d33      	adds	r3, r6, #4
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f002 fd09 	bl	80049ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f001 b823 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 817d 	beq.w	80022ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ff0:	4bbc      	ldr	r3, [pc, #752]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d00c      	beq.n	8002016 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ffc:	4bb9      	ldr	r3, [pc, #740]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d15c      	bne.n	80020c2 <HAL_RCC_OscConfig+0x10e>
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d155      	bne.n	80020c2 <HAL_RCC_OscConfig+0x10e>
 8002016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800202a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x94>
 8002042:	4ba8      	ldr	r3, [pc, #672]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0xc0>
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002064:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002070:	4b9c      	ldr	r3, [pc, #624]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002078:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800207c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002080:	fa92 f2a2 	rbit	r2, r2
 8002084:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002088:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 811f 	beq.w	80022e8 <HAL_RCC_OscConfig+0x334>
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8116 	bne.w	80022e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	f000 bfaf 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12e>
 80020d4:	4b83      	ldr	r3, [pc, #524]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a82      	ldr	r2, [pc, #520]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e036      	b.n	8002150 <HAL_RCC_OscConfig+0x19c>
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x158>
 80020f2:	4b7c      	ldr	r3, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a7b      	ldr	r2, [pc, #492]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 80020f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b79      	ldr	r3, [pc, #484]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a78      	ldr	r2, [pc, #480]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e021      	b.n	8002150 <HAL_RCC_OscConfig+0x19c>
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x184>
 800211e:	4b71      	ldr	r3, [pc, #452]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a70      	ldr	r2, [pc, #448]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6e      	ldr	r3, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6d      	ldr	r2, [pc, #436]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0x19c>
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a69      	ldr	r2, [pc, #420]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a66      	ldr	r2, [pc, #408]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002150:	4b64      	ldr	r3, [pc, #400]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f023 020f 	bic.w	r2, r3, #15
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	495f      	ldr	r1, [pc, #380]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 8002166:	4313      	orrs	r3, r2
 8002168:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d059      	beq.n	800222e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff f9a9 	bl	80014d0 <HAL_GetTick>
 800217e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff f9a4 	bl	80014d0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d902      	bls.n	800219a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	f000 bf43 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
 800219a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800219e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_OscConfig+0x218>
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e015      	b.n	80021f8 <HAL_RCC_OscConfig+0x244>
 80021cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002200:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002204:	fa92 f2a2 	rbit	r2, r2
 8002208:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800220c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f042 0220 	orr.w	r2, r2, #32
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	f002 021f 	and.w	r2, r2, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ab      	beq.n	8002184 <HAL_RCC_OscConfig+0x1d0>
 800222c:	e05d      	b.n	80022ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff f94f 	bl	80014d0 <HAL_GetTick>
 8002232:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e00a      	b.n	800224e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff f94a 	bl	80014d0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d902      	bls.n	800224e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	f000 bee9 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
 800224e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002252:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002262:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x2cc>
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	e015      	b.n	80022ac <HAL_RCC_OscConfig+0x2f8>
 8002280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002284:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002298:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800229c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_RCC_OscConfig+0x330>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80022b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80022c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ab      	bne.n	8002238 <HAL_RCC_OscConfig+0x284>
 80022e0:	e003      	b.n	80022ea <HAL_RCC_OscConfig+0x336>
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 817d 	beq.w	80025fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002300:	4ba6      	ldr	r3, [pc, #664]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00b      	beq.n	8002324 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800230c:	4ba3      	ldr	r3, [pc, #652]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b08      	cmp	r3, #8
 8002316:	d172      	bne.n	80023fe <HAL_RCC_OscConfig+0x44a>
 8002318:	4ba0      	ldr	r3, [pc, #640]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d16c      	bne.n	80023fe <HAL_RCC_OscConfig+0x44a>
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002336:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <HAL_RCC_OscConfig+0x3a0>
 800234e:	4b93      	ldr	r3, [pc, #588]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e013      	b.n	800237c <HAL_RCC_OscConfig+0x3c8>
 8002354:	2302      	movs	r3, #2
 8002356:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800236c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002378:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2202      	movs	r2, #2
 800237e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002382:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002386:	fa92 f2a2 	rbit	r2, r2
 800238a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800238e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002392:	fab2 f282 	clz	r2, r2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f042 0220 	orr.w	r2, r2, #32
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f002 021f 	and.w	r2, r2, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCC_OscConfig+0x410>
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d002      	beq.n	80023c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 be2e 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	21f8      	movs	r1, #248	; 0xf8
 80023da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023e2:	fa91 f1a1 	rbit	r1, r1
 80023e6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80023ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80023ee:	fab1 f181 	clz	r1, r1
 80023f2:	b2c9      	uxtb	r1, r1
 80023f4:	408b      	lsls	r3, r1
 80023f6:	4969      	ldr	r1, [pc, #420]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fc:	e0fd      	b.n	80025fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8088 	beq.w	8002520 <HAL_RCC_OscConfig+0x56c>
 8002410:	2301      	movs	r3, #1
 8002412:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002422:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	461a      	mov	r2, r3
 8002438:	2301      	movs	r3, #1
 800243a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff f848 	bl	80014d0 <HAL_GetTick>
 8002440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002446:	f7ff f843 	bl	80014d0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d902      	bls.n	800245c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	f000 bde2 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800246e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0x4d8>
 8002486:	4b45      	ldr	r3, [pc, #276]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e013      	b.n	80024b4 <HAL_RCC_OscConfig+0x500>
 800248c:	2302      	movs	r3, #2
 800248e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800249e:	2302      	movs	r3, #2
 80024a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024b0:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2202      	movs	r2, #2
 80024b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80024ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024be:	fa92 f2a2 	rbit	r2, r2
 80024c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80024c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f002 021f 	and.w	r2, r2, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0af      	beq.n	8002446 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	21f8      	movs	r1, #248	; 0xf8
 80024fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002504:	fa91 f1a1 	rbit	r1, r1
 8002508:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800250c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002510:	fab1 f181 	clz	r1, r1
 8002514:	b2c9      	uxtb	r1, r1
 8002516:	408b      	lsls	r3, r1
 8002518:	4920      	ldr	r1, [pc, #128]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
 800251e:	e06c      	b.n	80025fa <HAL_RCC_OscConfig+0x646>
 8002520:	2301      	movs	r3, #1
 8002522:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	461a      	mov	r2, r3
 8002548:	2300      	movs	r3, #0
 800254a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe ffc0 	bl	80014d0 <HAL_GetTick>
 8002550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7fe ffbb 	bl	80014d0 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d902      	bls.n	800256c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	f000 bd5a 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800257e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d104      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5ec>
 8002596:	4b01      	ldr	r3, [pc, #4]	; (800259c <HAL_RCC_OscConfig+0x5e8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e015      	b.n	80025c8 <HAL_RCC_OscConfig+0x614>
 800259c:	40021000 	.word	0x40021000
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025c4:	4bc8      	ldr	r3, [pc, #800]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2202      	movs	r2, #2
 80025ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80025ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025d2:	fa92 f2a2 	rbit	r2, r2
 80025d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80025da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f042 0220 	orr.w	r2, r2, #32
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f002 021f 	and.w	r2, r2, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1ad      	bne.n	8002556 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8110 	beq.w	8002830 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d079      	beq.n	8002714 <HAL_RCC_OscConfig+0x760>
 8002620:	2301      	movs	r3, #1
 8002622:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	4bab      	ldr	r3, [pc, #684]	; (80028ec <HAL_RCC_OscConfig+0x938>)
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	461a      	mov	r2, r3
 8002646:	2301      	movs	r3, #1
 8002648:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe ff41 	bl	80014d0 <HAL_GetTick>
 800264e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe ff3c 	bl	80014d0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d902      	bls.n	800266a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	f000 bcdb 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002684:	2202      	movs	r2, #2
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026a8:	2202      	movs	r2, #2
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c4:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 80026c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026d0:	2102      	movs	r1, #2
 80026d2:	6019      	str	r1, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f1a3 	rbit	r1, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026ea:	6019      	str	r1, [r3, #0]
  return result;
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0a0      	beq.n	8002654 <HAL_RCC_OscConfig+0x6a0>
 8002712:	e08d      	b.n	8002830 <HAL_RCC_OscConfig+0x87c>
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002736:	601a      	str	r2, [r3, #0]
  return result;
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002740:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_OscConfig+0x938>)
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	461a      	mov	r2, r3
 8002752:	2300      	movs	r3, #0
 8002754:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7fe febb 	bl	80014d0 <HAL_GetTick>
 800275a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe feb6 	bl	80014d0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d902      	bls.n	8002776 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	f000 bc55 	b.w	8003020 <HAL_RCC_OscConfig+0x106c>
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027a2:	2202      	movs	r2, #2
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027c6:	2202      	movs	r2, #2
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e2:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 80027e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027ee:	2102      	movs	r1, #2
 80027f0:	6019      	str	r1, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f1a3 	rbit	r1, r3
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002808:	6019      	str	r1, [r3, #0]
  return result;
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d197      	bne.n	8002760 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 81a1 	beq.w	8002b88 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d116      	bne.n	8002886 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002862:	61d3      	str	r3, [r2, #28]
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800287e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_RCC_OscConfig+0x93c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11a      	bne.n	80028c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_RCC_OscConfig+0x93c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_RCC_OscConfig+0x93c>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7fe fe17 	bl	80014d0 <HAL_GetTick>
 80028a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	e009      	b.n	80028bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7fe fe12 	bl	80014d0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	; 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e3b1      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_RCC_OscConfig+0x93c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ef      	beq.n	80028a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10d      	bne.n	80028f4 <HAL_RCC_OscConfig+0x940>
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a02      	ldr	r2, [pc, #8]	; (80028e8 <HAL_RCC_OscConfig+0x934>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	e03c      	b.n	8002960 <HAL_RCC_OscConfig+0x9ac>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	10908120 	.word	0x10908120
 80028f0:	40007000 	.word	0x40007000
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x96a>
 8002904:	4bc1      	ldr	r3, [pc, #772]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4ac0      	ldr	r2, [pc, #768]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	4bbe      	ldr	r3, [pc, #760]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4abd      	ldr	r2, [pc, #756]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	e020      	b.n	8002960 <HAL_RCC_OscConfig+0x9ac>
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b05      	cmp	r3, #5
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x994>
 800292e:	4bb7      	ldr	r3, [pc, #732]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4ab6      	ldr	r2, [pc, #728]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	4bb4      	ldr	r3, [pc, #720]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4ab3      	ldr	r2, [pc, #716]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6213      	str	r3, [r2, #32]
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0x9ac>
 8002948:	4bb0      	ldr	r3, [pc, #704]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4aaf      	ldr	r2, [pc, #700]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	4bad      	ldr	r3, [pc, #692]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4aac      	ldr	r2, [pc, #688]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8081 	beq.w	8002a74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe fdad 	bl	80014d0 <HAL_GetTick>
 8002976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fda8 	bl	80014d0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e345      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800299c:	2202      	movs	r2, #2
 800299e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029c0:	2202      	movs	r2, #2
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fa93 f2a3 	rbit	r2, r3
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029da:	601a      	str	r2, [r3, #0]
  return result;
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d102      	bne.n	8002a00 <HAL_RCC_OscConfig+0xa4c>
 80029fa:	4b84      	ldr	r3, [pc, #528]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	e013      	b.n	8002a28 <HAL_RCC_OscConfig+0xa74>
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a08:	2202      	movs	r2, #2
 8002a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fa93 f2a3 	rbit	r2, r3
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	4b79      	ldr	r3, [pc, #484]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a30:	2102      	movs	r1, #2
 8002a32:	6011      	str	r1, [r2, #0]
 8002a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	fa92 f1a2 	rbit	r1, r2
 8002a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a4a:	6011      	str	r1, [r2, #0]
  return result;
 8002a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a50:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d084      	beq.n	800297c <HAL_RCC_OscConfig+0x9c8>
 8002a72:	e07f      	b.n	8002b74 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a74:	f7fe fd2c 	bl	80014d0 <HAL_GetTick>
 8002a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	e00b      	b.n	8002a96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fd27 	bl	80014d0 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e2c4      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fa93 f2a3 	rbit	r2, r3
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002adc:	601a      	str	r2, [r3, #0]
  return result;
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ae6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d102      	bne.n	8002b02 <HAL_RCC_OscConfig+0xb4e>
 8002afc:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	e013      	b.n	8002b2a <HAL_RCC_OscConfig+0xb76>
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b32:	2102      	movs	r1, #2
 8002b34:	6011      	str	r1, [r2, #0]
 8002b36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	fa92 f1a2 	rbit	r1, r2
 8002b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b4c:	6011      	str	r1, [r2, #0]
  return result;
 8002b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b52:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	fab2 f282 	clz	r2, r2
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f002 021f 	and.w	r2, r2, #31
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d184      	bne.n	8002a7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b74:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8242 	beq.w	800301e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_RCC_OscConfig+0xc58>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	f000 8213 	beq.w	8002fce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	f040 8162 	bne.w	8002e7e <HAL_RCC_OscConfig+0xeca>
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bcc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bde:	601a      	str	r2, [r3, #0]
  return result;
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002be8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fc66 	bl	80014d0 <HAL_GetTick>
 8002c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	e00c      	b.n	8002c24 <HAL_RCC_OscConfig+0xc70>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fc5e 	bl	80014d0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1fd      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c48:	601a      	str	r2, [r3, #0]
  return result;
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_OscConfig+0xcba>
 8002c68:	4bb0      	ldr	r3, [pc, #704]	; (8002f2c <HAL_RCC_OscConfig+0xf78>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	e027      	b.n	8002cbe <HAL_RCC_OscConfig+0xd0a>
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f2a3 	rbit	r2, r3
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	fa93 f2a3 	rbit	r2, r3
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	4b9c      	ldr	r3, [pc, #624]	; (8002f2c <HAL_RCC_OscConfig+0xf78>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002cc6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cca:	6011      	str	r1, [r2, #0]
 8002ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	fa92 f1a2 	rbit	r1, r2
 8002cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cde:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ce2:	6011      	str	r1, [r2, #0]
  return result;
 8002ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	fab2 f282 	clz	r2, r2
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f042 0220 	orr.w	r2, r2, #32
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	f002 021f 	and.w	r2, r2, #31
 8002cfe:	2101      	movs	r1, #1
 8002d00:	fa01 f202 	lsl.w	r2, r1, r2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d182      	bne.n	8002c10 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0a:	4b88      	ldr	r3, [pc, #544]	; (8002f2c <HAL_RCC_OscConfig+0xf78>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	497f      	ldr	r1, [pc, #508]	; (8002f2c <HAL_RCC_OscConfig+0xf78>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fa93 f2a3 	rbit	r2, r3
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d56:	601a      	str	r2, [r3, #0]
  return result;
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d60:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	461a      	mov	r2, r3
 8002d74:	2301      	movs	r3, #1
 8002d76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fbaa 	bl	80014d0 <HAL_GetTick>
 8002d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d80:	e009      	b.n	8002d96 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe fba5 	bl	80014d0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e144      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dba:	601a      	str	r2, [r3, #0]
  return result;
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0xe2c>
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_RCC_OscConfig+0xf78>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e027      	b.n	8002e30 <HAL_RCC_OscConfig+0xe7c>
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002de8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	fa93 f2a3 	rbit	r2, r3
 8002dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <HAL_RCC_OscConfig+0xf78>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e34:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e3c:	6011      	str	r1, [r2, #0]
 8002e3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e42:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	fa92 f1a2 	rbit	r1, r2
 8002e4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e54:	6011      	str	r1, [r2, #0]
  return result;
 8002e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e5a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f042 0220 	orr.w	r2, r2, #32
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f002 021f 	and.w	r2, r2, #31
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d082      	beq.n	8002d82 <HAL_RCC_OscConfig+0xdce>
 8002e7c:	e0cf      	b.n	800301e <HAL_RCC_OscConfig+0x106a>
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f2a3 	rbit	r2, r3
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ea2:	601a      	str	r2, [r3, #0]
  return result;
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002eac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fb04 	bl	80014d0 <HAL_GetTick>
 8002ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ecc:	e009      	b.n	8002ee2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe faff 	bl	80014d0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e09e      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f06:	601a      	str	r2, [r3, #0]
  return result;
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d104      	bne.n	8002f30 <HAL_RCC_OscConfig+0xf7c>
 8002f26:	4b01      	ldr	r3, [pc, #4]	; (8002f2c <HAL_RCC_OscConfig+0xf78>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e029      	b.n	8002f80 <HAL_RCC_OscConfig+0xfcc>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f68:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x1078>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f84:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f8c:	6011      	str	r1, [r2, #0]
 8002f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f92:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	fa92 f1a2 	rbit	r1, r2
 8002f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fa4:	6011      	str	r1, [r2, #0]
  return result;
 8002fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002faa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	fab2 f282 	clz	r2, r2
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f042 0220 	orr.w	r2, r2, #32
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f002 021f 	and.w	r2, r2, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d180      	bne.n	8002ece <HAL_RCC_OscConfig+0xf1a>
 8002fcc:	e027      	b.n	800301e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e01e      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_OscConfig+0x1078>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d10b      	bne.n	800301a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003002:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b09e      	sub	sp, #120	; 0x78
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e162      	b.n	800330e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b90      	ldr	r3, [pc, #576]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b8d      	ldr	r3, [pc, #564]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	498b      	ldr	r1, [pc, #556]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b89      	ldr	r3, [pc, #548]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e14a      	b.n	800330e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003084:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	497f      	ldr	r1, [pc, #508]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80dc 	beq.w	800325c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d13c      	bne.n	8003126 <HAL_RCC_ClockConfig+0xf6>
 80030ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d102      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xa6>
 80030d0:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	e00f      	b.n	80030f6 <HAL_RCC_ClockConfig+0xc6>
 80030d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	667b      	str	r3, [r7, #100]	; 0x64
 80030e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e8:	663b      	str	r3, [r7, #96]	; 0x60
 80030ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f2:	4b67      	ldr	r3, [pc, #412]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80030fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030fe:	fa92 f2a2 	rbit	r2, r2
 8003102:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003106:	fab2 f282 	clz	r2, r2
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	f042 0220 	orr.w	r2, r2, #32
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	f002 021f 	and.w	r2, r2, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d17b      	bne.n	800321a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0f3      	b.n	800330e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d13c      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x178>
 800312e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003132:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_RCC_ClockConfig+0x128>
 8003152:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e00f      	b.n	8003178 <HAL_RCC_ClockConfig+0x148>
 8003158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800315c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	647b      	str	r3, [r7, #68]	; 0x44
 8003166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316a:	643b      	str	r3, [r7, #64]	; 0x40
 800316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317c:	63ba      	str	r2, [r7, #56]	; 0x38
 800317e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003180:	fa92 f2a2 	rbit	r2, r2
 8003184:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003188:	fab2 f282 	clz	r2, r2
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f002 021f 	and.w	r2, r2, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d13a      	bne.n	800321a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b2      	b.n	800330e <HAL_RCC_ClockConfig+0x2de>
 80031a8:	2302      	movs	r3, #2
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x1a0>
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	e00d      	b.n	80031ec <HAL_RCC_ClockConfig+0x1bc>
 80031d0:	2302      	movs	r3, #2
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	2302      	movs	r3, #2
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2202      	movs	r2, #2
 80031ee:	61ba      	str	r2, [r7, #24]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	fa92 f2a2 	rbit	r2, r2
 80031f6:	617a      	str	r2, [r7, #20]
  return result;
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f042 0220 	orr.w	r2, r2, #32
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f002 021f 	and.w	r2, r2, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e079      	b.n	800330e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	491a      	ldr	r1, [pc, #104]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800322c:	f7fe f950 	bl	80014d0 <HAL_GetTick>
 8003230:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	e00a      	b.n	800324a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003234:	f7fe f94c 	bl	80014d0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e061      	b.n	800330e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCC_ClockConfig+0x260>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 020c 	and.w	r2, r3, #12
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d1eb      	bne.n	8003234 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d214      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	4906      	ldr	r1, [pc, #24]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <HAL_RCC_ClockConfig+0x25c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e040      	b.n	800330e <HAL_RCC_ClockConfig+0x2de>
 800328c:	40022000 	.word	0x40022000
 8003290:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_ClockConfig+0x2e8>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	491a      	ldr	r1, [pc, #104]	; (8003318 <HAL_RCC_ClockConfig+0x2e8>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x2e8>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4912      	ldr	r1, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x2e8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032d2:	f000 f829 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032d6:	4601      	mov	r1, r0
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_RCC_ClockConfig+0x2e8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	22f0      	movs	r2, #240	; 0xf0
 80032e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	fa92 f2a2 	rbit	r2, r2
 80032ea:	60fa      	str	r2, [r7, #12]
  return result;
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	40d3      	lsrs	r3, r2
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x2ec>)
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	fa21 f303 	lsr.w	r3, r1, r3
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <HAL_RCC_ClockConfig+0x2f0>)
 8003300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_ClockConfig+0x2f4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe f89e 	bl	8001448 <HAL_InitTick>
  
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3778      	adds	r7, #120	; 0x78
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	08004ac4 	.word	0x08004ac4
 8003320:	2000000c 	.word	0x2000000c
 8003324:	20000010 	.word	0x20000010

08003328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	b08b      	sub	sp, #44	; 0x2c
 800332c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003342:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d002      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x30>
 8003352:	2b08      	cmp	r3, #8
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x36>
 8003356:	e03c      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003358:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800335a:	623b      	str	r3, [r7, #32]
      break;
 800335c:	e03c      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003364:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003368:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	fa92 f2a2 	rbit	r2, r2
 8003370:	607a      	str	r2, [r7, #4]
  return result;
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	40d3      	lsrs	r3, r2
 800337c:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	220f      	movs	r2, #15
 800338c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	fa92 f2a2 	rbit	r2, r2
 8003394:	60fa      	str	r2, [r7, #12]
  return result;
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	40d3      	lsrs	r3, r2
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	e004      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	623b      	str	r3, [r7, #32]
      break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80033d4:	623b      	str	r3, [r7, #32]
      break;
 80033d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	372c      	adds	r7, #44	; 0x2c
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	007a1200 	.word	0x007a1200
 80033f0:	08004adc 	.word	0x08004adc
 80033f4:	08004aec 	.word	0x08004aec
 80033f8:	003d0900 	.word	0x003d0900

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800341a:	f7ff ffef 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341e:	4601      	mov	r1, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003428:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800342c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	fa92 f2a2 	rbit	r2, r2
 8003434:	603a      	str	r2, [r7, #0]
  return result;
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	fab2 f282 	clz	r2, r2
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	40d3      	lsrs	r3, r2
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	08004ad4 	.word	0x08004ad4

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800345e:	f7ff ffcd 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003462:	4601      	mov	r1, r0
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800346c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003470:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	fa92 f2a2 	rbit	r2, r2
 8003478:	603a      	str	r2, [r7, #0]
  return result;
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	fab2 f282 	clz	r2, r2
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	40d3      	lsrs	r3, r2
 8003484:	4a04      	ldr	r2, [pc, #16]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	08004ad4 	.word	0x08004ad4

0800349c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b092      	sub	sp, #72	; 0x48
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80d4 	beq.w	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c0:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10e      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034cc:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d6:	61d3      	str	r3, [r2, #28]
 80034d8:	4b48      	ldr	r3, [pc, #288]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d118      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f6:	4b42      	ldr	r3, [pc, #264]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a41      	ldr	r2, [pc, #260]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003500:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003502:	f7fd ffe5 	bl	80014d0 <HAL_GetTick>
 8003506:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	e008      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350a:	f7fd ffe1 	bl	80014d0 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b64      	cmp	r3, #100	; 0x64
 8003516:	d901      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e169      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	4b38      	ldr	r3, [pc, #224]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003530:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8084 	beq.w	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003544:	429a      	cmp	r2, r3
 8003546:	d07c      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003548:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	461a      	mov	r2, r3
 8003572:	2301      	movs	r3, #1
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	461a      	mov	r2, r3
 8003596:	2300      	movs	r3, #0
 8003598:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d04b      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fd ff91 	bl	80014d0 <HAL_GetTick>
 80035ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fd ff8d 	bl	80014d0 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e113      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80035c8:	2302      	movs	r3, #2
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
 80035d4:	2302      	movs	r3, #2
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	61fb      	str	r3, [r7, #28]
  return result;
 80035e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d108      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035f6:	4b01      	ldr	r3, [pc, #4]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	e00d      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
 8003604:	10908100 	.word	0x10908100
 8003608:	2302      	movs	r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	4b78      	ldr	r3, [pc, #480]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2202      	movs	r2, #2
 800361a:	613a      	str	r2, [r7, #16]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	fa92 f2a2 	rbit	r2, r2
 8003622:	60fa      	str	r2, [r7, #12]
  return result;
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	fab2 f282 	clz	r2, r2
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f002 021f 	and.w	r2, r2, #31
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0b7      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003642:	4b6d      	ldr	r3, [pc, #436]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	496a      	ldr	r1, [pc, #424]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003654:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4a65      	ldr	r2, [pc, #404]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003666:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003674:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	f023 0203 	bic.w	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	495d      	ldr	r1, [pc, #372]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003692:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4956      	ldr	r1, [pc, #344]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	494e      	ldr	r1, [pc, #312]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f023 0210 	bic.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4947      	ldr	r1, [pc, #284]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	493f      	ldr	r1, [pc, #252]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f023 0220 	bic.w	r2, r3, #32
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4938      	ldr	r1, [pc, #224]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003718:	4313      	orrs	r3, r2
 800371a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003728:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4930      	ldr	r1, [pc, #192]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	4929      	ldr	r1, [pc, #164]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003754:	4313      	orrs	r3, r2
 8003756:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4921      	ldr	r1, [pc, #132]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	491a      	ldr	r1, [pc, #104]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	4912      	ldr	r1, [pc, #72]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	490b      	ldr	r1, [pc, #44]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	4903      	ldr	r1, [pc, #12]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3748      	adds	r7, #72	; 0x48
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e09d      	b.n	800394a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d108      	bne.n	8003828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381e:	d009      	beq.n	8003834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
 8003826:	e005      	b.n	8003834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fc8e 	bl	8001170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003874:	d902      	bls.n	800387c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e002      	b.n	8003882 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800387c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003880:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800388a:	d007      	beq.n	800389c <HAL_SPI_Init+0xa0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003894:	d002      	beq.n	800389c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	ea42 0103 	orr.w	r1, r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	f003 0204 	and.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003918:	ea42 0103 	orr.w	r1, r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003938:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e040      	b.n	80039e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fd fc3d 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2224      	movs	r2, #36	; 0x24
 800397e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fbbd 	bl	8004110 <UART_SetConfig>
 8003996:	4603      	mov	r3, r0
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e022      	b.n	80039e6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fd85 	bl	80044b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fe0c 	bl	80045fc <UART_CheckIdleState>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08a      	sub	sp, #40	; 0x28
 80039f2:	af02      	add	r7, sp, #8
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d178      	bne.n	8003af8 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_Transmit+0x24>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e071      	b.n	8003afa <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a24:	f7fd fd54 	bl	80014d0 <HAL_GetTick>
 8003a28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d108      	bne.n	8003a56 <HAL_UART_Transmit+0x68>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e003      	b.n	8003a5e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a5e:	e030      	b.n	8003ac2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fe6e 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e03c      	b.n	8003afa <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	881a      	ldrh	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a92:	b292      	uxth	r2, r2
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e008      	b.n	8003ab0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	b292      	uxth	r2, r2
 8003aa8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1c8      	bne.n	8003a60 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fe37 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e005      	b.n	8003afa <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b0ba      	sub	sp, #232	; 0xe8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b32:	4013      	ands	r3, r2
 8003b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d115      	bne.n	8003b6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00f      	beq.n	8003b6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 82ab 	beq.w	80040b8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
      }
      return;
 8003b6a:	e2a5      	b.n	80040b8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8117 	beq.w	8003da4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b86:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <HAL_UART_IRQHandler+0x298>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 810a 	beq.w	8003da4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d011      	beq.n	8003bc0 <HAL_UART_IRQHandler+0xbc>
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d011      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xec>
 8003bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be6:	f043 0204 	orr.w	r2, r3, #4
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d011      	beq.n	8003c20 <HAL_UART_IRQHandler+0x11c>
 8003bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c16:	f043 0202 	orr.w	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	f043 0208 	orr.w	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <HAL_UART_IRQHandler+0x18a>
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8211 	beq.w	80040bc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d005      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d04f      	beq.n	8003d86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fd97 	bl	800481a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d141      	bne.n	8003d7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3308      	adds	r3, #8
 8003d22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1d9      	bne.n	8003cfa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d013      	beq.n	8003d76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d52:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <HAL_UART_IRQHandler+0x29c>)
 8003d54:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fd32 	bl	80017c4 <HAL_DMA_Abort_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d70:	4610      	mov	r0, r2
 8003d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e00f      	b.n	8003d96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9b4 	bl	80040e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e00b      	b.n	8003d96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f9b0 	bl	80040e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	e007      	b.n	8003d96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f9ac 	bl	80040e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d94:	e192      	b.n	80040bc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d96:	bf00      	nop
    return;
 8003d98:	e190      	b.n	80040bc <HAL_UART_IRQHandler+0x5b8>
 8003d9a:	bf00      	nop
 8003d9c:	04000120 	.word	0x04000120
 8003da0:	080048e3 	.word	0x080048e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	f040 814b 	bne.w	8004044 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8144 	beq.w	8004044 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 813d 	beq.w	8004044 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	f040 80b5 	bne.w	8003f4c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8164 	beq.w	80040c0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e02:	429a      	cmp	r2, r3
 8003e04:	f080 815c 	bcs.w	80040c0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	f000 8086 	beq.w	8003f2a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1da      	bne.n	8003e1e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e1      	bne.n	8003e68 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ec8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ece:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e3      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e4      	bne.n	8003eea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd fc14 	bl	8001752 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8d7 	bl	80040f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f4a:	e0b9      	b.n	80040c0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80ab 	beq.w	80040c4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80a6 	beq.w	80040c4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e4      	bne.n	8003f78 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fd2:	633a      	str	r2, [r7, #48]	; 0x30
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e3      	bne.n	8003fae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	60fb      	str	r3, [r7, #12]
   return(result);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0310 	bic.w	r3, r3, #16
 800400e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	617b      	str	r3, [r7, #20]
   return(result);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e4      	bne.n	8003ffa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f85b 	bl	80040f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004042:	e03f      	b.n	80040c4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00e      	beq.n	800406e <HAL_UART_IRQHandler+0x56a>
 8004050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fc7b 	bl	8004962 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800406c:	e02d      	b.n	80040ca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800407a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01c      	beq.n	80040c8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
    }
    return;
 8004096:	e017      	b.n	80040c8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <HAL_UART_IRQHandler+0x5c6>
 80040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00c      	beq.n	80040ca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fc2c 	bl	800490e <UART_EndTransmit_IT>
    return;
 80040b6:	e008      	b.n	80040ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80040b8:	bf00      	nop
 80040ba:	e006      	b.n	80040ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80040bc:	bf00      	nop
 80040be:	e004      	b.n	80040ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80040c0:	bf00      	nop
 80040c2:	e002      	b.n	80040ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80040c4:	bf00      	nop
 80040c6:	e000      	b.n	80040ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80040c8:	bf00      	nop
  }

}
 80040ca:	37e8      	adds	r7, #232	; 0xe8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800413e:	f023 030c 	bic.w	r3, r3, #12
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	430b      	orrs	r3, r1
 800414a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4aa7      	ldr	r2, [pc, #668]	; (8004428 <UART_SetConfig+0x318>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d120      	bne.n	80041d2 <UART_SetConfig+0xc2>
 8004190:	4ba6      	ldr	r3, [pc, #664]	; (800442c <UART_SetConfig+0x31c>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b03      	cmp	r3, #3
 800419a:	d817      	bhi.n	80041cc <UART_SetConfig+0xbc>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <UART_SetConfig+0x94>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c1 	.word	0x080041c1
 80041ac:	080041c7 	.word	0x080041c7
 80041b0:	080041bb 	.word	0x080041bb
 80041b4:	2301      	movs	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e0b5      	b.n	8004326 <UART_SetConfig+0x216>
 80041ba:	2302      	movs	r3, #2
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e0b2      	b.n	8004326 <UART_SetConfig+0x216>
 80041c0:	2304      	movs	r3, #4
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e0af      	b.n	8004326 <UART_SetConfig+0x216>
 80041c6:	2308      	movs	r3, #8
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e0ac      	b.n	8004326 <UART_SetConfig+0x216>
 80041cc:	2310      	movs	r3, #16
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e0a9      	b.n	8004326 <UART_SetConfig+0x216>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a96      	ldr	r2, [pc, #600]	; (8004430 <UART_SetConfig+0x320>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d124      	bne.n	8004226 <UART_SetConfig+0x116>
 80041dc:	4b93      	ldr	r3, [pc, #588]	; (800442c <UART_SetConfig+0x31c>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041e8:	d011      	beq.n	800420e <UART_SetConfig+0xfe>
 80041ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041ee:	d817      	bhi.n	8004220 <UART_SetConfig+0x110>
 80041f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041f4:	d011      	beq.n	800421a <UART_SetConfig+0x10a>
 80041f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041fa:	d811      	bhi.n	8004220 <UART_SetConfig+0x110>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <UART_SetConfig+0xf8>
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d006      	beq.n	8004214 <UART_SetConfig+0x104>
 8004206:	e00b      	b.n	8004220 <UART_SetConfig+0x110>
 8004208:	2300      	movs	r3, #0
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e08b      	b.n	8004326 <UART_SetConfig+0x216>
 800420e:	2302      	movs	r3, #2
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e088      	b.n	8004326 <UART_SetConfig+0x216>
 8004214:	2304      	movs	r3, #4
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e085      	b.n	8004326 <UART_SetConfig+0x216>
 800421a:	2308      	movs	r3, #8
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e082      	b.n	8004326 <UART_SetConfig+0x216>
 8004220:	2310      	movs	r3, #16
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e07f      	b.n	8004326 <UART_SetConfig+0x216>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a82      	ldr	r2, [pc, #520]	; (8004434 <UART_SetConfig+0x324>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d124      	bne.n	800427a <UART_SetConfig+0x16a>
 8004230:	4b7e      	ldr	r3, [pc, #504]	; (800442c <UART_SetConfig+0x31c>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004238:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800423c:	d011      	beq.n	8004262 <UART_SetConfig+0x152>
 800423e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004242:	d817      	bhi.n	8004274 <UART_SetConfig+0x164>
 8004244:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004248:	d011      	beq.n	800426e <UART_SetConfig+0x15e>
 800424a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800424e:	d811      	bhi.n	8004274 <UART_SetConfig+0x164>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <UART_SetConfig+0x14c>
 8004254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004258:	d006      	beq.n	8004268 <UART_SetConfig+0x158>
 800425a:	e00b      	b.n	8004274 <UART_SetConfig+0x164>
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e061      	b.n	8004326 <UART_SetConfig+0x216>
 8004262:	2302      	movs	r3, #2
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e05e      	b.n	8004326 <UART_SetConfig+0x216>
 8004268:	2304      	movs	r3, #4
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e05b      	b.n	8004326 <UART_SetConfig+0x216>
 800426e:	2308      	movs	r3, #8
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e058      	b.n	8004326 <UART_SetConfig+0x216>
 8004274:	2310      	movs	r3, #16
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e055      	b.n	8004326 <UART_SetConfig+0x216>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6e      	ldr	r2, [pc, #440]	; (8004438 <UART_SetConfig+0x328>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d124      	bne.n	80042ce <UART_SetConfig+0x1be>
 8004284:	4b69      	ldr	r3, [pc, #420]	; (800442c <UART_SetConfig+0x31c>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800428c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004290:	d011      	beq.n	80042b6 <UART_SetConfig+0x1a6>
 8004292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004296:	d817      	bhi.n	80042c8 <UART_SetConfig+0x1b8>
 8004298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800429c:	d011      	beq.n	80042c2 <UART_SetConfig+0x1b2>
 800429e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a2:	d811      	bhi.n	80042c8 <UART_SetConfig+0x1b8>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <UART_SetConfig+0x1a0>
 80042a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ac:	d006      	beq.n	80042bc <UART_SetConfig+0x1ac>
 80042ae:	e00b      	b.n	80042c8 <UART_SetConfig+0x1b8>
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e037      	b.n	8004326 <UART_SetConfig+0x216>
 80042b6:	2302      	movs	r3, #2
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e034      	b.n	8004326 <UART_SetConfig+0x216>
 80042bc:	2304      	movs	r3, #4
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e031      	b.n	8004326 <UART_SetConfig+0x216>
 80042c2:	2308      	movs	r3, #8
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e02e      	b.n	8004326 <UART_SetConfig+0x216>
 80042c8:	2310      	movs	r3, #16
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e02b      	b.n	8004326 <UART_SetConfig+0x216>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5a      	ldr	r2, [pc, #360]	; (800443c <UART_SetConfig+0x32c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d124      	bne.n	8004322 <UART_SetConfig+0x212>
 80042d8:	4b54      	ldr	r3, [pc, #336]	; (800442c <UART_SetConfig+0x31c>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e4:	d011      	beq.n	800430a <UART_SetConfig+0x1fa>
 80042e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ea:	d817      	bhi.n	800431c <UART_SetConfig+0x20c>
 80042ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f0:	d011      	beq.n	8004316 <UART_SetConfig+0x206>
 80042f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f6:	d811      	bhi.n	800431c <UART_SetConfig+0x20c>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x1f4>
 80042fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004300:	d006      	beq.n	8004310 <UART_SetConfig+0x200>
 8004302:	e00b      	b.n	800431c <UART_SetConfig+0x20c>
 8004304:	2300      	movs	r3, #0
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e00d      	b.n	8004326 <UART_SetConfig+0x216>
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e00a      	b.n	8004326 <UART_SetConfig+0x216>
 8004310:	2304      	movs	r3, #4
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e007      	b.n	8004326 <UART_SetConfig+0x216>
 8004316:	2308      	movs	r3, #8
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e004      	b.n	8004326 <UART_SetConfig+0x216>
 800431c:	2310      	movs	r3, #16
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e001      	b.n	8004326 <UART_SetConfig+0x216>
 8004322:	2310      	movs	r3, #16
 8004324:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432e:	d15b      	bne.n	80043e8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004330:	7ffb      	ldrb	r3, [r7, #31]
 8004332:	2b08      	cmp	r3, #8
 8004334:	d827      	bhi.n	8004386 <UART_SetConfig+0x276>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x22c>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004361 	.word	0x08004361
 8004340:	08004369 	.word	0x08004369
 8004344:	08004371 	.word	0x08004371
 8004348:	08004387 	.word	0x08004387
 800434c:	08004377 	.word	0x08004377
 8004350:	08004387 	.word	0x08004387
 8004354:	08004387 	.word	0x08004387
 8004358:	08004387 	.word	0x08004387
 800435c:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7ff f858 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8004364:	61b8      	str	r0, [r7, #24]
        break;
 8004366:	e013      	b.n	8004390 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004368:	f7ff f876 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 800436c:	61b8      	str	r0, [r7, #24]
        break;
 800436e:	e00f      	b.n	8004390 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b33      	ldr	r3, [pc, #204]	; (8004440 <UART_SetConfig+0x330>)
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e00c      	b.n	8004390 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fe ffd7 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 800437a:	61b8      	str	r0, [r7, #24]
        break;
 800437c:	e008      	b.n	8004390 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	61bb      	str	r3, [r7, #24]
        break;
 8004384:	e004      	b.n	8004390 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77bb      	strb	r3, [r7, #30]
        break;
 800438e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8082 	beq.w	800449c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	005a      	lsls	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	441a      	add	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b0f      	cmp	r3, #15
 80043b2:	d916      	bls.n	80043e2 <UART_SetConfig+0x2d2>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ba:	d212      	bcs.n	80043e2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f023 030f 	bic.w	r3, r3, #15
 80043c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	89fb      	ldrh	r3, [r7, #14]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	89fa      	ldrh	r2, [r7, #14]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	e05c      	b.n	800449c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	77bb      	strb	r3, [r7, #30]
 80043e6:	e059      	b.n	800449c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043e8:	7ffb      	ldrb	r3, [r7, #31]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d835      	bhi.n	800445a <UART_SetConfig+0x34a>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0x2e4>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004445 	.word	0x08004445
 8004400:	0800445b 	.word	0x0800445b
 8004404:	0800444b 	.word	0x0800444b
 8004408:	0800445b 	.word	0x0800445b
 800440c:	0800445b 	.word	0x0800445b
 8004410:	0800445b 	.word	0x0800445b
 8004414:	08004453 	.word	0x08004453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7fe fffc 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 800441c:	61b8      	str	r0, [r7, #24]
        break;
 800441e:	e021      	b.n	8004464 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7ff f81a 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 8004424:	61b8      	str	r0, [r7, #24]
        break;
 8004426:	e01d      	b.n	8004464 <UART_SetConfig+0x354>
 8004428:	40013800 	.word	0x40013800
 800442c:	40021000 	.word	0x40021000
 8004430:	40004400 	.word	0x40004400
 8004434:	40004800 	.word	0x40004800
 8004438:	40004c00 	.word	0x40004c00
 800443c:	40005000 	.word	0x40005000
 8004440:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <UART_SetConfig+0x3a4>)
 8004446:	61bb      	str	r3, [r7, #24]
        break;
 8004448:	e00c      	b.n	8004464 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444a:	f7fe ff6d 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 800444e:	61b8      	str	r0, [r7, #24]
        break;
 8004450:	e008      	b.n	8004464 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004456:	61bb      	str	r3, [r7, #24]
        break;
 8004458:	e004      	b.n	8004464 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	77bb      	strb	r3, [r7, #30]
        break;
 8004462:	bf00      	nop
    }

    if (pclk != 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	085a      	lsrs	r2, r3, #1
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	441a      	add	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d909      	bls.n	8004498 <UART_SetConfig+0x388>
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448a:	d205      	bcs.n	8004498 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	e001      	b.n	800449c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01a      	beq.n	80045ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b6:	d10a      	bne.n	80045ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b098      	sub	sp, #96	; 0x60
 8004600:	af02      	add	r7, sp, #8
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800460c:	f7fc ff60 	bl	80014d0 <HAL_GetTick>
 8004610:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b08      	cmp	r3, #8
 800461e:	d12e      	bne.n	800467e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004628:	2200      	movs	r2, #0
 800462a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f88c 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d021      	beq.n	800467e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	653b      	str	r3, [r7, #80]	; 0x50
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	647b      	str	r3, [r7, #68]	; 0x44
 800465a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800465e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e062      	b.n	8004744 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d149      	bne.n	8004720 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f856 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d03c      	beq.n	8004720 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	623b      	str	r3, [r7, #32]
   return(result);
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	633b      	str	r3, [r7, #48]	; 0x30
 80046c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f8:	61fa      	str	r2, [r7, #28]
 80046fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	617b      	str	r3, [r7, #20]
   return(result);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e011      	b.n	8004744 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3758      	adds	r7, #88	; 0x58
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800475c:	e049      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d045      	beq.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004766:	f7fc feb3 	bl	80014d0 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <UART_WaitOnFlagUntilTimeout+0x30>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e048      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d031      	beq.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b08      	cmp	r3, #8
 800479a:	d110      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2208      	movs	r2, #8
 80047a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f838 	bl	800481a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2208      	movs	r2, #8
 80047ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e029      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047cc:	d111      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f81e 	bl	800481a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e00f      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	429a      	cmp	r2, r3
 800480e:	d0a6      	beq.n	800475e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800481a:	b480      	push	{r7}
 800481c:	b095      	sub	sp, #84	; 0x54
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004840:	643b      	str	r3, [r7, #64]	; 0x40
 8004842:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	61fb      	str	r3, [r7, #28]
   return(result);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	64bb      	str	r3, [r7, #72]	; 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004874:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800487a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	2b01      	cmp	r3, #1
 800488e:	d118      	bne.n	80048c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	60bb      	str	r3, [r7, #8]
   return(result);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f023 0310 	bic.w	r3, r3, #16
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6979      	ldr	r1, [r7, #20]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	613b      	str	r3, [r7, #16]
   return(result);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e6      	bne.n	8004890 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048d6:	bf00      	nop
 80048d8:	3754      	adds	r7, #84	; 0x54
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff fbef 	bl	80040e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b088      	sub	sp, #32
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60bb      	str	r3, [r7, #8]
   return(result);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	613b      	str	r3, [r7, #16]
   return(result);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fbbb 	bl	80040d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495a:	bf00      	nop
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800497e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004982:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	b29b      	uxth	r3, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	4013      	ands	r3, r2
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049ac:	b084      	sub	sp, #16
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	f107 0014 	add.w	r0, r7, #20
 80049ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	b004      	add	sp, #16
 80049ec:	4770      	bx	lr
	...

080049f0 <__libc_init_array>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4d0d      	ldr	r5, [pc, #52]	; (8004a28 <__libc_init_array+0x38>)
 80049f4:	4c0d      	ldr	r4, [pc, #52]	; (8004a2c <__libc_init_array+0x3c>)
 80049f6:	1b64      	subs	r4, r4, r5
 80049f8:	10a4      	asrs	r4, r4, #2
 80049fa:	2600      	movs	r6, #0
 80049fc:	42a6      	cmp	r6, r4
 80049fe:	d109      	bne.n	8004a14 <__libc_init_array+0x24>
 8004a00:	4d0b      	ldr	r5, [pc, #44]	; (8004a30 <__libc_init_array+0x40>)
 8004a02:	4c0c      	ldr	r4, [pc, #48]	; (8004a34 <__libc_init_array+0x44>)
 8004a04:	f000 f820 	bl	8004a48 <_init>
 8004a08:	1b64      	subs	r4, r4, r5
 8004a0a:	10a4      	asrs	r4, r4, #2
 8004a0c:	2600      	movs	r6, #0
 8004a0e:	42a6      	cmp	r6, r4
 8004a10:	d105      	bne.n	8004a1e <__libc_init_array+0x2e>
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a18:	4798      	blx	r3
 8004a1a:	3601      	adds	r6, #1
 8004a1c:	e7ee      	b.n	80049fc <__libc_init_array+0xc>
 8004a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a22:	4798      	blx	r3
 8004a24:	3601      	adds	r6, #1
 8004a26:	e7f2      	b.n	8004a0e <__libc_init_array+0x1e>
 8004a28:	08004afc 	.word	0x08004afc
 8004a2c:	08004afc 	.word	0x08004afc
 8004a30:	08004afc 	.word	0x08004afc
 8004a34:	08004b00 	.word	0x08004b00

08004a38 <memset>:
 8004a38:	4402      	add	r2, r0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d100      	bne.n	8004a42 <memset+0xa>
 8004a40:	4770      	bx	lr
 8004a42:	f803 1b01 	strb.w	r1, [r3], #1
 8004a46:	e7f9      	b.n	8004a3c <memset+0x4>

08004a48 <_init>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr

08004a54 <_fini>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr
