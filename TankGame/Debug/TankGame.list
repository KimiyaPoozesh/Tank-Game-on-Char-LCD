
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08007358  08007358  00017358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007670  08007670  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007670  08007670  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000005d0  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a0  200006a0  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c0a  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e50  00000000  00000000  00036d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  0003acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002027a  00000000  00000000  0003bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169f8  00000000  00000000  0005bfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbae7  00000000  00000000  000729a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e489  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000543c  00000000  00000000  0012e4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  00133918  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0013393c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007340 	.word	0x08007340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08007340 	.word	0x08007340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000ee 	.word	0x200000ee
 800039c:	200000f0 	.word	0x200000f0
 80003a0:	200000f2 	.word	0x200000f2
 80003a4:	20000104 	.word	0x20000104
 80003a8:	200000f4 	.word	0x200000f4
 80003ac:	20000108 	.word	0x20000108

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 f8b9 	bl	8002628 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 ff0a 	bl	80022d0 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fa40 	bl	800294c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fa38 	bl	800294c <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fa2c 	bl	800294c <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 fee2 	bl	80022d0 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 fedc 	bl	80022d0 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fed6 	bl	80022d0 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 fec7 	bl	80022d0 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 febc 	bl	80022d0 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000108 	.word	0x20000108
 80005a8:	2000010b 	.word	0x2000010b
 80005ac:	200000ec 	.word	0x200000ec
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000ee 	.word	0x200000ee
 80005b8:	200000f0 	.word	0x200000f0
 80005bc:	200000f2 	.word	0x200000f2
 80005c0:	200000f4 	.word	0x200000f4
 80005c4:	20000104 	.word	0x20000104
 80005c8:	20000109 	.word	0x20000109
 80005cc:	2000010a 	.word	0x2000010a

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000104 	.word	0x20000104
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	2000010c 	.word	0x2000010c

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 fdc4 	bl	80022d0 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000010b 	.word	0x2000010b
 80007ac:	2000010c 	.word	0x2000010c

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000109 	.word	0x20000109

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 f836 	bl	800294c <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 f82a 	bl	800294c <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000104 	.word	0x20000104
 8000930:	200000ee 	.word	0x200000ee
 8000934:	200000f0 	.word	0x200000f0
 8000938:	20000108 	.word	0x20000108

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fffe 	bl	800294c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f001 fcbd 	bl	80022d0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fff3 	bl	800294c <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f001 fcb2 	bl	80022d0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 ffe8 	bl	800294c <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f001 fca7 	bl	80022d0 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000104 	.word	0x20000104
 800098c:	200000f2 	.word	0x200000f2

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f001 ffc5 	bl	800294c <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000104 	.word	0x20000104
 80009e0:	200000f4 	.word	0x200000f4

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f001 ff9b 	bl	800294c <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }

  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000104 	.word	0x20000104
 8000a34:	200000f4 	.word	0x200000f4

08000a38 <HAL_GPIO_EXTI_Callback>:
const uint16_t Column_pins[] =
		{ GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]

	if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000a42:	4bc1      	ldr	r3, [pc, #772]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000a4a:	f001 fc35 	bl	80022b8 <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	f200 8280 	bhi.w	8000f56 <HAL_GPIO_EXTI_Callback+0x51e>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000a56:	f001 fc2f 	bl	80022b8 <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4aba      	ldr	r2, [pc, #744]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000a5e:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a68:	2300      	movs	r3, #0
 8000a6a:	737b      	strb	r3, [r7, #13]
 8000a6c:	e00b      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	4ab6      	ldr	r2, [pc, #728]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d101      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9f0      	bls.n	8000a6e <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000a8c:	4bb0      	ldr	r3, [pc, #704]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 ff5a 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000a98:	4bad      	ldr	r3, [pc, #692]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 ff54 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000aa4:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 ff4e 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000ab0:	4ba7      	ldr	r3, [pc, #668]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 ff48 	bl	800294c <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000abc:	2300      	movs	r3, #0
 8000abe:	733b      	strb	r3, [r7, #12]
 8000ac0:	e02d      	b.n	8000b1e <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	4aa3      	ldr	r2, [pc, #652]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aca:	7b3b      	ldrb	r3, [r7, #12]
 8000acc:	4aa2      	ldr	r2, [pc, #648]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f001 ff39 	bl	800294c <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4a9f      	ldr	r2, [pc, #636]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	4998      	ldr	r1, [pc, #608]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000aea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f001 ff13 	bl	800291c <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_GPIO_EXTI_Callback+0xc8>

			column_number = col;
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b00:	7b3b      	ldrb	r3, [r7, #12]
 8000b02:	4a94      	ldr	r2, [pc, #592]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	4a93      	ldr	r2, [pc, #588]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	f001 ff1a 	bl	800294c <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d9ce      	bls.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b24:	4b8a      	ldr	r3, [pc, #552]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 ff0e 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000b30:	4b87      	ldr	r3, [pc, #540]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b32:	2102      	movs	r1, #2
 8000b34:	2201      	movs	r2, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 ff08 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000b3c:	4b84      	ldr	r3, [pc, #528]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 ff02 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000b48:	4b81      	ldr	r3, [pc, #516]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fefc 	bl	800294c <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	f000 81fd 	beq.w	8000f5a <HAL_GPIO_EXTI_Callback+0x522>
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	f000 81f7 	beq.w	8000f5a <HAL_GPIO_EXTI_Callback+0x522>
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	//1 - 6 - 9 for the Right Player
	//4 -7 -12 for the left player
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	f200 81ec 	bhi.w	8000f5e <HAL_GPIO_EXTI_Callback+0x526>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_EXTI_Callback+0x154>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bcd 	.word	0x08000bcd
 8000b90:	08000c49 	.word	0x08000c49
 8000b94:	08000c89 	.word	0x08000c89
 8000b98:	08000cc9 	.word	0x08000cc9
 8000b9c:	08000d39 	.word	0x08000d39
 8000ba0:	08000d95 	.word	0x08000d95
 8000ba4:	08000dab 	.word	0x08000dab
 8000ba8:	08000dc1 	.word	0x08000dc1
 8000bac:	08000e0f 	.word	0x08000e0f
 8000bb0:	08000f5f 	.word	0x08000f5f
 8000bb4:	08000f5f 	.word	0x08000f5f
 8000bb8:	08000e6d 	.word	0x08000e6d
 8000bbc:	08000ec9 	.word	0x08000ec9
 8000bc0:	08000ee9 	.word	0x08000ee9
 8000bc4:	08000f0b 	.word	0x08000f0b
 8000bc8:	08000f5f 	.word	0x08000f5f
	case 1:
		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000bcc:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d113      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x1c4>
			R_Health = (R_Health + 10 - 1) % 10;
 8000bd4:	4b63      	ldr	r3, [pc, #396]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f103 0109 	add.w	r1, r3, #9
 8000bdc:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000bde:	fb83 2301 	smull	r2, r3, r3, r1
 8000be2:	109a      	asrs	r2, r3, #2
 8000be4:	17cb      	asrs	r3, r1, #31
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	1aca      	subs	r2, r1, r3
 8000bf2:	4b5c      	ldr	r3, [pc, #368]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000bf4:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000bf6:	f000 fcdf 	bl	80015b8 <HealthSetting>
 8000bfa:	e016      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
		} else if (screen == 5) {
 8000bfc:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d112      	bne.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
			R_bullets = (R_bullets + 10 - 1) % 10;
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f103 0109 	add.w	r1, r3, #9
 8000c0c:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000c0e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c12:	109a      	asrs	r2, r3, #2
 8000c14:	17cb      	asrs	r3, r1, #31
 8000c16:	1ad2      	subs	r2, r2, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1aca      	subs	r2, r1, r3
 8000c22:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000c24:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000c26:	f000 fc8f 	bl	8001548 <bulletsSetting>
		}
		if (screen == 0) {
 8000c2a:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 8197 	bne.w	8000f62 <HAL_GPIO_EXTI_Callback+0x52a>
			screen = 1;
 8000c34:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000c3a:	f000 f9bd 	bl	8000fb8 <refreshAll>
			initializeObjects();
 8000c3e:	f000 fa1b 	bl	8001078 <initializeObjects>
			displayObjects();
 8000c42:	f000 fc05 	bl	8001450 <displayObjects>
		}

		/* code */
		break;
 8000c46:	e18c      	b.n	8000f62 <HAL_GPIO_EXTI_Callback+0x52a>
	case 2:
		HAL_UART_Transmit(&huart1, "2", 1,
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4948      	ldr	r1, [pc, #288]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c50:	4848      	ldr	r0, [pc, #288]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c52:	f004 f8cc 	bl	8004dee <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8183 	bne.w	8000f66 <HAL_GPIO_EXTI_Callback+0x52e>
			screen = 2;
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2014      	movs	r0, #20
 8000c6a:	f7ff fd6f 	bl	800074c <setCursor>
			print("                    ");
 8000c6e:	4842      	ldr	r0, [pc, #264]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000c70:	f7ff fdb4 	bl	80007dc <print>
			setCursor(0, 1);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fd68 	bl	800074c <setCursor>
			print("                      ");
 8000c7c:	483f      	ldr	r0, [pc, #252]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000c7e:	f7ff fdad 	bl	80007dc <print>
			showAbout();
 8000c82:	f000 fc33 	bl	80014ec <showAbout>
		}
		/* code */
		break;
 8000c86:	e16e      	b.n	8000f66 <HAL_GPIO_EXTI_Callback+0x52e>
	case 3:
		HAL_UART_Transmit(&huart1, "3", 1,
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	493c      	ldr	r1, [pc, #240]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x348>)
 8000c90:	4838      	ldr	r0, [pc, #224]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c92:	f004 f8ac 	bl	8004dee <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 8165 	bne.w	8000f6a <HAL_GPIO_EXTI_Callback+0x532>
			screen = 3;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2014      	movs	r0, #20
 8000caa:	f7ff fd4f 	bl	800074c <setCursor>
			print("                    ");
 8000cae:	4832      	ldr	r0, [pc, #200]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000cb0:	f7ff fd94 	bl	80007dc <print>
			setCursor(0, 1);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fd48 	bl	800074c <setCursor>
			print("                      ");
 8000cbc:	482f      	ldr	r0, [pc, #188]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000cbe:	f7ff fd8d 	bl	80007dc <print>
			showSetting();
 8000cc2:	f000 fc21 	bl	8001508 <showSetting>
		}
		/* code */
		break;
 8000cc6:	e150      	b.n	8000f6a <HAL_GPIO_EXTI_Callback+0x532>
	case 4:
		HAL_UART_Transmit(&huart1, "4", 1,
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ccc:	2201      	movs	r2, #1
 8000cce:	492d      	ldr	r1, [pc, #180]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x34c>)
 8000cd0:	4828      	ldr	r0, [pc, #160]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000cd2:	f004 f88c 	bl	8004dee <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d113      	bne.n	8000d06 <HAL_GPIO_EXTI_Callback+0x2ce>
			L_Health = (L_Health + 10 - 1) % 10;
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x350>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f103 0109 	add.w	r1, r3, #9
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000ce8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cec:	109a      	asrs	r2, r3, #2
 8000cee:	17cb      	asrs	r3, r1, #31
 8000cf0:	1ad2      	subs	r2, r2, r3
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1aca      	subs	r2, r1, r3
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x350>)
 8000cfe:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000d00:	f000 fc5a 	bl	80015b8 <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 10 - 1) % 10;
			bulletsSetting();
		}

		break;
 8000d04:	e133      	b.n	8000f6e <HAL_GPIO_EXTI_Callback+0x536>
		} else if (screen == 5) {
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	f040 812f 	bne.w	8000f6e <HAL_GPIO_EXTI_Callback+0x536>
			L_bullets = (L_bullets + 10 - 1) % 10;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x354>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f103 0109 	add.w	r1, r3, #9
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d1a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d1e:	109a      	asrs	r2, r3, #2
 8000d20:	17cb      	asrs	r3, r1, #31
 8000d22:	1ad2      	subs	r2, r2, r3
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	1aca      	subs	r2, r1, r3
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x354>)
 8000d30:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000d32:	f000 fc09 	bl	8001548 <bulletsSetting>
		break;
 8000d36:	e11a      	b.n	8000f6e <HAL_GPIO_EXTI_Callback+0x536>
	case 5:
		HAL_UART_Transmit(&huart1, "5", 1,
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4914      	ldr	r1, [pc, #80]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000d42:	f004 f854 	bl	8004dee <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000d46:	e11b      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
 8000d48:	2000067c 	.word	0x2000067c
 8000d4c:	080074d0 	.word	0x080074d0
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	080074d8 	.word	0x080074d8
 8000d58:	080074e8 	.word	0x080074e8
 8000d5c:	080074c0 	.word	0x080074c0
 8000d60:	2000055c 	.word	0x2000055c
 8000d64:	20000560 	.word	0x20000560
 8000d68:	66666667 	.word	0x66666667
 8000d6c:	20000568 	.word	0x20000568
 8000d70:	08007358 	.word	0x08007358
 8000d74:	200001e8 	.word	0x200001e8
 8000d78:	0800735c 	.word	0x0800735c
 8000d7c:	08007374 	.word	0x08007374
 8000d80:	0800738c 	.word	0x0800738c
 8000d84:	08007390 	.word	0x08007390
 8000d88:	20000564 	.word	0x20000564
 8000d8c:	2000056c 	.word	0x2000056c
 8000d90:	08007394 	.word	0x08007394
	case 6:
		HAL_UART_Transmit(&huart1, "6", 1,
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	2201      	movs	r2, #1
 8000d9a:	497b      	ldr	r1, [pc, #492]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x550>)
 8000d9c:	487b      	ldr	r0, [pc, #492]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x554>)
 8000d9e:	f004 f826 	bl	8004dee <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(0);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f92a 	bl	8000ffc <changeFoxStateR>
		break;
 8000da8:	e0ea      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
	case 7:
		HAL_UART_Transmit(&huart1, "7", 1,
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	2201      	movs	r2, #1
 8000db0:	4977      	ldr	r1, [pc, #476]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x558>)
 8000db2:	4876      	ldr	r0, [pc, #472]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x554>)
 8000db4:	f004 f81b 	bl	8004dee <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 f91f 	bl	8000ffc <changeFoxStateR>
		/* code */
		break;
 8000dbe:	e0df      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
	case 8:
		//back btn
		refreshAll();
 8000dc0:	f000 f8fa 	bl	8000fb8 <refreshAll>
		if (screen == 4 | screen == 5) {
 8000dc4:	4b73      	ldr	r3, [pc, #460]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b70      	ldr	r3, [pc, #448]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_EXTI_Callback+0x3bc>
			screen = 3;
 8000de8:	4b6a      	ldr	r3, [pc, #424]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000dea:	2203      	movs	r2, #3
 8000dec:	601a      	str	r2, [r3, #0]
			showSetting();
 8000dee:	f000 fb8b 	bl	8001508 <showSetting>
 8000df2:	e004      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x3c6>
		} else {
			screen = 0;
 8000df4:	4b67      	ldr	r3, [pc, #412]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
			showMain();
 8000dfa:	f000 fb55 	bl	80014a8 <showMain>
		}

		HAL_UART_Transmit(&huart1, "B", 1,
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	2201      	movs	r2, #1
 8000e04:	4964      	ldr	r1, [pc, #400]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x560>)
 8000e06:	4861      	ldr	r0, [pc, #388]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x554>)
 8000e08:	f003 fff1 	bl	8004dee <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000e0c:	e0b8      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
	case 9:

		if (screen == 4) {
 8000e0e:	4b61      	ldr	r3, [pc, #388]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d112      	bne.n	8000e3c <HAL_GPIO_EXTI_Callback+0x404>
			R_Health = (R_Health + 1) % 10;
 8000e16:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x564>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x568>)
 8000e1e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e22:	109a      	asrs	r2, r3, #2
 8000e24:	17cb      	asrs	r3, r1, #31
 8000e26:	1ad2      	subs	r2, r2, r3
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	1aca      	subs	r2, r1, r3
 8000e32:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x564>)
 8000e34:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000e36:	f000 fbbf 	bl	80015b8 <HealthSetting>
		} else if (screen == 5) {
			R_bullets = (R_bullets + 1) % 10;
			bulletsSetting();
		}
		break;
 8000e3a:	e09a      	b.n	8000f72 <HAL_GPIO_EXTI_Callback+0x53a>
		} else if (screen == 5) {
 8000e3c:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	f040 8096 	bne.w	8000f72 <HAL_GPIO_EXTI_Callback+0x53a>
			R_bullets = (R_bullets + 1) % 10;
 8000e46:	4b57      	ldr	r3, [pc, #348]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1c59      	adds	r1, r3, #1
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x568>)
 8000e4e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e52:	109a      	asrs	r2, r3, #2
 8000e54:	17cb      	asrs	r3, r1, #31
 8000e56:	1ad2      	subs	r2, r2, r3
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	1aca      	subs	r2, r1, r3
 8000e62:	4b50      	ldr	r3, [pc, #320]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>)
 8000e64:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e66:	f000 fb6f 	bl	8001548 <bulletsSetting>
		break;
 8000e6a:	e082      	b.n	8000f72 <HAL_GPIO_EXTI_Callback+0x53a>
		break;
	case 11:
		/* code */
		break;
	case 12:
		if (screen == 4) {
 8000e6c:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d112      	bne.n	8000e9a <HAL_GPIO_EXTI_Callback+0x462>
			L_Health = (L_Health + 1) % 10;
 8000e74:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x570>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1c59      	adds	r1, r3, #1
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x568>)
 8000e7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e80:	109a      	asrs	r2, r3, #2
 8000e82:	17cb      	asrs	r3, r1, #31
 8000e84:	1ad2      	subs	r2, r2, r3
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	1aca      	subs	r2, r1, r3
 8000e90:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x570>)
 8000e92:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000e94:	f000 fb90 	bl	80015b8 <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 1) % 10;
			bulletsSetting();
		}
		/* code */
		break;
 8000e98:	e06d      	b.n	8000f76 <HAL_GPIO_EXTI_Callback+0x53e>
		} else if (screen == 5) {
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d169      	bne.n	8000f76 <HAL_GPIO_EXTI_Callback+0x53e>
			L_bullets = (L_bullets + 1) % 10;
 8000ea2:	4b42      	ldr	r3, [pc, #264]	; (8000fac <HAL_GPIO_EXTI_Callback+0x574>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1c59      	adds	r1, r3, #1
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x568>)
 8000eaa:	fb83 2301 	smull	r2, r3, r3, r1
 8000eae:	109a      	asrs	r2, r3, #2
 8000eb0:	17cb      	asrs	r3, r1, #31
 8000eb2:	1ad2      	subs	r2, r2, r3
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	1aca      	subs	r2, r1, r3
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <HAL_GPIO_EXTI_Callback+0x574>)
 8000ec0:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000ec2:	f000 fb41 	bl	8001548 <bulletsSetting>
		break;
 8000ec6:	e056      	b.n	8000f76 <HAL_GPIO_EXTI_Callback+0x53e>
	case 13:
		/* code */
		if (screen = 3) {
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2014      	movs	r0, #20
 8000ed2:	f7ff fc3b 	bl	800074c <setCursor>
			print("                   ");
 8000ed6:	4836      	ldr	r0, [pc, #216]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x578>)
 8000ed8:	f7ff fc80 	bl	80007dc <print>
			HealthSetting();
 8000edc:	f000 fb6c 	bl	80015b8 <HealthSetting>
			screen = 4;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ee6:	e04b      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
	case 14:
		/* code */
		if (screen == 3) {
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d144      	bne.n	8000f7a <HAL_GPIO_EXTI_Callback+0x542>
			screen = 5;
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fc27 	bl	800074c <setCursor>
			print("                   ");
 8000efe:	482c      	ldr	r0, [pc, #176]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x578>)
 8000f00:	f7ff fc6c 	bl	80007dc <print>
			bulletsSetting();
 8000f04:	f000 fb20 	bl	8001548 <bulletsSetting>
		}
		break;
 8000f08:	e037      	b.n	8000f7a <HAL_GPIO_EXTI_Callback+0x542>
	case 15:
		if (screen == 3) {
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d109      	bne.n	8000f26 <HAL_GPIO_EXTI_Callback+0x4ee>
			vfx = (vfx + 1) % 2;
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	bfb8      	it	lt
 8000f20:	425b      	neglt	r3, r3
 8000f22:	4a24      	ldr	r2, [pc, #144]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000f24:	6013      	str	r3, [r2, #0]
		}
		if (screen == 4 | screen == 5) {
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2301      	moveq	r3, #1
 8000f30:	2300      	movne	r3, #0
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_EXTI_Callback+0x546>
			screen = 3;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x55c>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	601a      	str	r2, [r3, #0]
			showSetting();
 8000f50:	f000 fada 	bl	8001508 <showSetting>
		}
		/* code */
		break;
 8000f54:	e013      	b.n	8000f7e <HAL_GPIO_EXTI_Callback+0x546>
		return;
 8000f56:	bf00      	nop
 8000f58:	e012      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		return; // Reject invalid scan
 8000f5a:	bf00      	nop
 8000f5c:	e010      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
	case 16:
		/* code */
		break;

	default:
		break;
 8000f5e:	bf00      	nop
 8000f60:	e00e      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f62:	bf00      	nop
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f66:	bf00      	nop
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f6a:	bf00      	nop
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f6e:	bf00      	nop
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f72:	bf00      	nop
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f76:	bf00      	nop
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f7a:	bf00      	nop
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0x548>
		break;
 8000f7e:	bf00      	nop
	}
}
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08007398 	.word	0x08007398
 8000f8c:	200001e8 	.word	0x200001e8
 8000f90:	0800739c 	.word	0x0800739c
 8000f94:	2000055c 	.word	0x2000055c
 8000f98:	080073a0 	.word	0x080073a0
 8000f9c:	20000560 	.word	0x20000560
 8000fa0:	66666667 	.word	0x66666667
 8000fa4:	20000568 	.word	0x20000568
 8000fa8:	20000564 	.word	0x20000564
 8000fac:	2000056c 	.word	0x2000056c
 8000fb0:	080073a4 	.word	0x080073a4
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <refreshAll>:

void refreshAll(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fbc4 	bl	800074c <setCursor>
	print("                   ");
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <refreshAll+0x40>)
 8000fc6:	f7ff fc09 	bl	80007dc <print>
	setCursor(0, 1);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fbbd 	bl	800074c <setCursor>
	print("                   ");
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <refreshAll+0x40>)
 8000fd4:	f7ff fc02 	bl	80007dc <print>
	setCursor(20, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2014      	movs	r0, #20
 8000fdc:	f7ff fbb6 	bl	800074c <setCursor>
	print("                   ");
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <refreshAll+0x40>)
 8000fe2:	f7ff fbfb 	bl	80007dc <print>
	setCursor(20, 1);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f7ff fbaf 	bl	800074c <setCursor>
	print("                   ");
 8000fee:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <refreshAll+0x40>)
 8000ff0:	f7ff fbf4 	bl	80007dc <print>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	080073a4 	.word	0x080073a4

08000ffc <changeFoxStateR>:
byte* foxStates[4] = { leftFox, rightFox, topFox, bottomFox };
int currentStateR = 0;
int currentStateL = 0;


void changeFoxStateR(int Player) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    byte* currentFoxR = foxStates[currentStateR];
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <changeFoxStateR+0x70>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <changeFoxStateR+0x74>)
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	60fb      	str	r3, [r7, #12]
    byte* currentFoxL = foxStates[currentStateL];
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <changeFoxStateR+0x78>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a16      	ldr	r2, [pc, #88]	; (8001070 <changeFoxStateR+0x74>)
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	60bb      	str	r3, [r7, #8]

    if (!Player) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d110      	bne.n	8001044 <changeFoxStateR+0x48>
    		createChar(7, currentFoxR);
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	2007      	movs	r0, #7
 8001026:	f7ff fc04 	bl	8000832 <createChar>
    		currentStateR = (currentStateR + 1) % 4;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <changeFoxStateR+0x70>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	425a      	negs	r2, r3
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	bf58      	it	pl
 800103c:	4253      	negpl	r3, r2
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <changeFoxStateR+0x70>)
 8001040:	6013      	str	r3, [r2, #0]
    	} else {
    		createChar(8, currentFoxL);
    		currentStateL = (currentStateL + 1) % 4;
    	}
}
 8001042:	e00f      	b.n	8001064 <changeFoxStateR+0x68>
    		createChar(8, currentFoxL);
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	2008      	movs	r0, #8
 8001048:	f7ff fbf3 	bl	8000832 <createChar>
    		currentStateL = (currentStateL + 1) % 4;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <changeFoxStateR+0x78>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	425a      	negs	r2, r3
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	f002 0203 	and.w	r2, r2, #3
 800105c:	bf58      	it	pl
 800105e:	4253      	negpl	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <changeFoxStateR+0x78>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000680 	.word	0x20000680
 8001070:	20000050 	.word	0x20000050
 8001074:	20000684 	.word	0x20000684

08001078 <initializeObjects>:




void initializeObjects() {
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0

	for (int i = 0; i < LCD_HEIGHT; i++) {
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
 8001082:	e015      	b.n	80010b0 <initializeObjects+0x38>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	e00c      	b.n	80010a4 <initializeObjects+0x2c>
			lcd[i][j] = ' ';  // Empty cell
 800108a:	4ab1      	ldr	r2, [pc, #708]	; (8001350 <initializeObjects+0x2d8>)
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	2126      	movs	r1, #38	; 0x26
 8001090:	fb01 f303 	mul.w	r3, r1, r3
 8001094:	441a      	add	r2, r3
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	4413      	add	r3, r2
 800109a:	2220      	movs	r2, #32
 800109c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < LCD_WIDTH; j++) {
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	3301      	adds	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	2b25      	cmp	r3, #37	; 0x25
 80010a8:	ddef      	ble.n	800108a <initializeObjects+0x12>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	3301      	adds	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	dde6      	ble.n	8001084 <initializeObjects+0xc>
		}
	}

	//hearts
	for (int i = 0; i < NUM_HEARTS; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e036      	b.n	800112a <initializeObjects+0xb2>
		hearts[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 80010bc:	f004 fef8 	bl	8005eb0 <rand>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4ba4      	ldr	r3, [pc, #656]	; (8001354 <initializeObjects+0x2dc>)
 80010c4:	fb83 1302 	smull	r1, r3, r3, r2
 80010c8:	4413      	add	r3, r2
 80010ca:	1119      	asrs	r1, r3, #4
 80010cc:	17d3      	asrs	r3, r2, #31
 80010ce:	1ac9      	subs	r1, r1, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a5b      	subs	r3, r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	1ad1      	subs	r1, r2, r3
 80010da:	3103      	adds	r1, #3
 80010dc:	489e      	ldr	r0, [pc, #632]	; (8001358 <initializeObjects+0x2e0>)
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4403      	add	r3, r0
 80010ea:	6019      	str	r1, [r3, #0]
		hearts[i].y = rand() % 2;       // Random number between 0 and 1
 80010ec:	f004 fee0 	bl	8005eb0 <rand>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	bfb8      	it	lt
 80010fa:	425b      	neglt	r3, r3
 80010fc:	4619      	mov	r1, r3
 80010fe:	4896      	ldr	r0, [pc, #600]	; (8001358 <initializeObjects+0x2e0>)
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4403      	add	r3, r0
 800110c:	3304      	adds	r3, #4
 800110e:	6019      	str	r1, [r3, #0]
		hearts[i].c = 1;
 8001110:	4991      	ldr	r1, [pc, #580]	; (8001358 <initializeObjects+0x2e0>)
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	3308      	adds	r3, #8
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	3301      	adds	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b02      	cmp	r3, #2
 800112e:	ddc5      	ble.n	80010bc <initializeObjects+0x44>
	}

	//  mistery boxes
	for (int i = 0; i < NUM_BOXES; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	e036      	b.n	80011a4 <initializeObjects+0x12c>
		boxes[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001136:	f004 febb 	bl	8005eb0 <rand>
 800113a:	4602      	mov	r2, r0
 800113c:	4b85      	ldr	r3, [pc, #532]	; (8001354 <initializeObjects+0x2dc>)
 800113e:	fb83 1302 	smull	r1, r3, r3, r2
 8001142:	4413      	add	r3, r2
 8001144:	1119      	asrs	r1, r3, #4
 8001146:	17d3      	asrs	r3, r2, #31
 8001148:	1ac9      	subs	r1, r1, r3
 800114a:	460b      	mov	r3, r1
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	1a5b      	subs	r3, r3, r1
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	1ad1      	subs	r1, r2, r3
 8001154:	3103      	adds	r1, #3
 8001156:	4881      	ldr	r0, [pc, #516]	; (800135c <initializeObjects+0x2e4>)
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4403      	add	r3, r0
 8001164:	6019      	str	r1, [r3, #0]
		boxes[i].y = rand() % 2;       // Random number between 0 and 1
 8001166:	f004 fea3 	bl	8005eb0 <rand>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	bfb8      	it	lt
 8001174:	425b      	neglt	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	4878      	ldr	r0, [pc, #480]	; (800135c <initializeObjects+0x2e4>)
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4403      	add	r3, r0
 8001186:	3304      	adds	r3, #4
 8001188:	6019      	str	r1, [r3, #0]
		boxes[i].c = 2;
 800118a:	4974      	ldr	r1, [pc, #464]	; (800135c <initializeObjects+0x2e4>)
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	3308      	adds	r3, #8
 800119a:	2202      	movs	r2, #2
 800119c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	ddc5      	ble.n	8001136 <initializeObjects+0xbe>
	}

	//bullets
	for (int i = 0; i < NUM_BULLETS; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	e036      	b.n	800121e <initializeObjects+0x1a6>
			bullets[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 80011b0:	f004 fe7e 	bl	8005eb0 <rand>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b67      	ldr	r3, [pc, #412]	; (8001354 <initializeObjects+0x2dc>)
 80011b8:	fb83 1302 	smull	r1, r3, r3, r2
 80011bc:	4413      	add	r3, r2
 80011be:	1119      	asrs	r1, r3, #4
 80011c0:	17d3      	asrs	r3, r2, #31
 80011c2:	1ac9      	subs	r1, r1, r3
 80011c4:	460b      	mov	r3, r1
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	1a5b      	subs	r3, r3, r1
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	1ad1      	subs	r1, r2, r3
 80011ce:	3103      	adds	r1, #3
 80011d0:	4863      	ldr	r0, [pc, #396]	; (8001360 <initializeObjects+0x2e8>)
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4403      	add	r3, r0
 80011de:	6019      	str	r1, [r3, #0]
			bullets[i].y = rand() % 2;       // Random number between 0 and 1
 80011e0:	f004 fe66 	bl	8005eb0 <rand>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	bfb8      	it	lt
 80011ee:	425b      	neglt	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	485b      	ldr	r0, [pc, #364]	; (8001360 <initializeObjects+0x2e8>)
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4403      	add	r3, r0
 8001200:	3304      	adds	r3, #4
 8001202:	6019      	str	r1, [r3, #0]
			bullets[i].c = 5;
 8001204:	4956      	ldr	r1, [pc, #344]	; (8001360 <initializeObjects+0x2e8>)
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	3308      	adds	r3, #8
 8001214:	2205      	movs	r2, #5
 8001216:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b04      	cmp	r3, #4
 8001222:	ddc5      	ble.n	80011b0 <initializeObjects+0x138>
		}
	//obstacles
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	e036      	b.n	8001298 <initializeObjects+0x220>
				obstacles[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 800122a:	f004 fe41 	bl	8005eb0 <rand>
 800122e:	4602      	mov	r2, r0
 8001230:	4b48      	ldr	r3, [pc, #288]	; (8001354 <initializeObjects+0x2dc>)
 8001232:	fb83 1302 	smull	r1, r3, r3, r2
 8001236:	4413      	add	r3, r2
 8001238:	1119      	asrs	r1, r3, #4
 800123a:	17d3      	asrs	r3, r2, #31
 800123c:	1ac9      	subs	r1, r1, r3
 800123e:	460b      	mov	r3, r1
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a5b      	subs	r3, r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	1ad1      	subs	r1, r2, r3
 8001248:	3103      	adds	r1, #3
 800124a:	4846      	ldr	r0, [pc, #280]	; (8001364 <initializeObjects+0x2ec>)
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4403      	add	r3, r0
 8001258:	6019      	str	r1, [r3, #0]
				obstacles[i].y = rand() % 2;       // Random number between 0 and 1
 800125a:	f004 fe29 	bl	8005eb0 <rand>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	bfb8      	it	lt
 8001268:	425b      	neglt	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	483d      	ldr	r0, [pc, #244]	; (8001364 <initializeObjects+0x2ec>)
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4403      	add	r3, r0
 800127a:	3304      	adds	r3, #4
 800127c:	6019      	str	r1, [r3, #0]
				obstacles[i].c = 4;
 800127e:	4939      	ldr	r1, [pc, #228]	; (8001364 <initializeObjects+0x2ec>)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	3308      	adds	r3, #8
 800128e:	2204      	movs	r2, #4
 8001290:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	3301      	adds	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b05      	cmp	r3, #5
 800129c:	ddc5      	ble.n	800122a <initializeObjects+0x1b2>
			}
	for (int i = 0; i < NUM_HEARTS; i++) {
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e024      	b.n	80012ee <initializeObjects+0x276>
		lcd[hearts[i].y][hearts[i].x] = hearts[i].c;
 80012a4:	492c      	ldr	r1, [pc, #176]	; (8001358 <initializeObjects+0x2e0>)
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3304      	adds	r3, #4
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	4928      	ldr	r1, [pc, #160]	; (8001358 <initializeObjects+0x2e0>)
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	4c24      	ldr	r4, [pc, #144]	; (8001358 <initializeObjects+0x2e0>)
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4423      	add	r3, r4
 80012d4:	3308      	adds	r3, #8
 80012d6:	781c      	ldrb	r4, [r3, #0]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <initializeObjects+0x2d8>)
 80012da:	2326      	movs	r3, #38	; 0x26
 80012dc:	fb00 f303 	mul.w	r3, r0, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	4622      	mov	r2, r4
 80012e6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	ddd7      	ble.n	80012a4 <initializeObjects+0x22c>
	}
	for (int i = 0; i < NUM_BULLETS; i++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	e024      	b.n	8001344 <initializeObjects+0x2cc>
		lcd[bullets[i].y][bullets[i].x] = bullets[i].c;
 80012fa:	4919      	ldr	r1, [pc, #100]	; (8001360 <initializeObjects+0x2e8>)
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	3304      	adds	r3, #4
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	4914      	ldr	r1, [pc, #80]	; (8001360 <initializeObjects+0x2e8>)
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	4c10      	ldr	r4, [pc, #64]	; (8001360 <initializeObjects+0x2e8>)
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4423      	add	r3, r4
 800132a:	3308      	adds	r3, #8
 800132c:	781c      	ldrb	r4, [r3, #0]
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <initializeObjects+0x2d8>)
 8001330:	2326      	movs	r3, #38	; 0x26
 8001332:	fb00 f303 	mul.w	r3, r0, r3
 8001336:	4413      	add	r3, r2
 8001338:	440b      	add	r3, r1
 800133a:	4622      	mov	r2, r4
 800133c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3301      	adds	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b04      	cmp	r3, #4
 8001348:	ddd7      	ble.n	80012fa <initializeObjects+0x282>
	}
	for (int i = 0; i < NUM_BOXES; i++) {
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	e030      	b.n	80013b2 <initializeObjects+0x33a>
 8001350:	20000630 	.word	0x20000630
 8001354:	92492493 	.word	0x92492493
 8001358:	20000570 	.word	0x20000570
 800135c:	20000594 	.word	0x20000594
 8001360:	200005ac 	.word	0x200005ac
 8001364:	200005e8 	.word	0x200005e8
			lcd[boxes[i].y][boxes[i].x] = boxes[i].c;
 8001368:	4936      	ldr	r1, [pc, #216]	; (8001444 <initializeObjects+0x3cc>)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	3304      	adds	r3, #4
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	4932      	ldr	r1, [pc, #200]	; (8001444 <initializeObjects+0x3cc>)
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	4c2e      	ldr	r4, [pc, #184]	; (8001444 <initializeObjects+0x3cc>)
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4423      	add	r3, r4
 8001398:	3308      	adds	r3, #8
 800139a:	781c      	ldrb	r4, [r3, #0]
 800139c:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <initializeObjects+0x3d0>)
 800139e:	2326      	movs	r3, #38	; 0x26
 80013a0:	fb00 f303 	mul.w	r3, r0, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	4622      	mov	r2, r4
 80013aa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3301      	adds	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	ddd7      	ble.n	8001368 <initializeObjects+0x2f0>
		}
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	e024      	b.n	8001408 <initializeObjects+0x390>
				lcd[obstacles[i].y][obstacles[i].x] = obstacles[i].c;
 80013be:	4923      	ldr	r1, [pc, #140]	; (800144c <initializeObjects+0x3d4>)
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	3304      	adds	r3, #4
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	491e      	ldr	r1, [pc, #120]	; (800144c <initializeObjects+0x3d4>)
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	4c1a      	ldr	r4, [pc, #104]	; (800144c <initializeObjects+0x3d4>)
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4423      	add	r3, r4
 80013ee:	3308      	adds	r3, #8
 80013f0:	781c      	ldrb	r4, [r3, #0]
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <initializeObjects+0x3d0>)
 80013f4:	2326      	movs	r3, #38	; 0x26
 80013f6:	fb00 f303 	mul.w	r3, r0, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	4622      	mov	r2, r4
 8001400:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b05      	cmp	r3, #5
 800140c:	ddd7      	ble.n	80013be <initializeObjects+0x346>
			}
	//WALLS
	lcd[1][1]=3;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <initializeObjects+0x3d0>)
 8001410:	2203      	movs	r2, #3
 8001412:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	lcd[0][22]=3;
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <initializeObjects+0x3d0>)
 8001418:	2203      	movs	r2, #3
 800141a:	759a      	strb	r2, [r3, #22]
	lcd[1][18]=3;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <initializeObjects+0x3d0>)
 800141e:	2203      	movs	r2, #3
 8001420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd[0][37]=3;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <initializeObjects+0x3d0>)
 8001426:	2203      	movs	r2, #3
 8001428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//[0][38] [0][39] [1][38] [1][39]  are dead
	//Wolves
	lcd[1][0]=8;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <initializeObjects+0x3d0>)
 800142e:	2208      	movs	r2, #8
 8001430:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	lcd[1][19]=7;
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <initializeObjects+0x3d0>)
 8001436:	2207      	movs	r2, #7
 8001438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800143c:	bf00      	nop
 800143e:	372c      	adds	r7, #44	; 0x2c
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	20000594 	.word	0x20000594
 8001448:	20000630 	.word	0x20000630
 800144c:	200005e8 	.word	0x200005e8

08001450 <displayObjects>:

void displayObjects() {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	// Display the objects based on the screen array
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	e01b      	b.n	8001494 <displayObjects+0x44>
		for (int j = 0; j < LCD_WIDTH; j++) {
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	e012      	b.n	8001488 <displayObjects+0x38>
			setCursor(j, i);
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f7ff f971 	bl	800074c <setCursor>
			write(lcd[i][j]);
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <displayObjects+0x54>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2126      	movs	r1, #38	; 0x26
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	441a      	add	r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fa0f 	bl	80008a0 <write>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b25      	cmp	r3, #37	; 0x25
 800148c:	dde9      	ble.n	8001462 <displayObjects+0x12>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3301      	adds	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	dde0      	ble.n	800145c <displayObjects+0xc>
		}
	}
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000630 	.word	0x20000630

080014a8 <showMain>:

//MENU PART
void showMain(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80014ac:	2100      	movs	r1, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff f94c 	bl	800074c <setCursor>
	print("1- Play");
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <showMain+0x38>)
 80014b6:	f7ff f991 	bl	80007dc <print>
	setCursor(0, 1);
 80014ba:	2101      	movs	r1, #1
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff f945 	bl	800074c <setCursor>
	print("2- About");
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <showMain+0x3c>)
 80014c4:	f7ff f98a 	bl	80007dc <print>
	write(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff f9e9 	bl	80008a0 <write>
	setCursor(20, 0);
 80014ce:	2100      	movs	r1, #0
 80014d0:	2014      	movs	r0, #20
 80014d2:	f7ff f93b 	bl	800074c <setCursor>
	print("3- Setting");
 80014d6:	4804      	ldr	r0, [pc, #16]	; (80014e8 <showMain+0x40>)
 80014d8:	f7ff f980 	bl	80007dc <print>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	080073b8 	.word	0x080073b8
 80014e4:	080073c0 	.word	0x080073c0
 80014e8:	080073cc 	.word	0x080073cc

080014ec <showAbout>:

void showAbout(void) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80014f0:	2100      	movs	r1, #0
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff f92a 	bl	800074c <setCursor>
	print("Kimiya & Atiye");
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <showAbout+0x18>)
 80014fa:	f7ff f96f 	bl	80007dc <print>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	080073d8 	.word	0x080073d8

08001508 <showSetting>:

void showSetting(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 800150c:	2100      	movs	r1, #0
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff f91c 	bl	800074c <setCursor>
	print("Right vs Left");
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <showSetting+0x34>)
 8001516:	f7ff f961 	bl	80007dc <print>
	setCursor(0, 1);
 800151a:	2101      	movs	r1, #1
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff f915 	bl	800074c <setCursor>
	print("0-Bullets");
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <showSetting+0x38>)
 8001524:	f7ff f95a 	bl	80007dc <print>
	setCursor(20, 0);
 8001528:	2100      	movs	r1, #0
 800152a:	2014      	movs	r0, #20
 800152c:	f7ff f90e 	bl	800074c <setCursor>
	print("*-Health");
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <showSetting+0x3c>)
 8001532:	f7ff f953 	bl	80007dc <print>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	080073e8 	.word	0x080073e8
 8001540:	080073f8 	.word	0x080073f8
 8001544:	08007404 	.word	0x08007404

08001548 <bulletsSetting>:

void bulletsSetting(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 800154e:	2101      	movs	r1, #1
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff f8fb 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Bullets:%d", R_bullets);
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <bulletsSetting+0x5c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4912      	ldr	r1, [pc, #72]	; (80015a8 <bulletsSetting+0x60>)
 8001560:	4618      	mov	r0, r3
 8001562:	f004 fce3 	bl	8005f2c <siprintf>
	print(RBStr);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f936 	bl	80007dc <print>
	setCursor(20, 0);
 8001570:	2100      	movs	r1, #0
 8001572:	2014      	movs	r0, #20
 8001574:	f7ff f8ea 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Bullets:%d", L_bullets);
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <bulletsSetting+0x64>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	463b      	mov	r3, r7
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <bulletsSetting+0x68>)
 8001580:	4618      	mov	r0, r3
 8001582:	f004 fcd3 	bl	8005f2c <siprintf>
	print(LBStr);
 8001586:	463b      	mov	r3, r7
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f927 	bl	80007dc <print>
	setCursor(20, 1);
 800158e:	2101      	movs	r1, #1
 8001590:	2014      	movs	r0, #20
 8001592:	f7ff f8db 	bl	800074c <setCursor>

	print("#-Confirm");
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <bulletsSetting+0x6c>)
 8001598:	f7ff f920 	bl	80007dc <print>
}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000568 	.word	0x20000568
 80015a8:	08007410 	.word	0x08007410
 80015ac:	2000056c 	.word	0x2000056c
 80015b0:	08007424 	.word	0x08007424
 80015b4:	08007434 	.word	0x08007434

080015b8 <HealthSetting>:

void HealthSetting(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 80015be:	2101      	movs	r1, #1
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff f8c3 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Health:%d", R_Health);
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HealthSetting+0x5c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4912      	ldr	r1, [pc, #72]	; (8001618 <HealthSetting+0x60>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fcab 	bl	8005f2c <siprintf>
	print(RBStr);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f8fe 	bl	80007dc <print>
	setCursor(20, 0);
 80015e0:	2100      	movs	r1, #0
 80015e2:	2014      	movs	r0, #20
 80015e4:	f7ff f8b2 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Health:%d", L_Health);
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HealthSetting+0x64>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	463b      	mov	r3, r7
 80015ee:	490c      	ldr	r1, [pc, #48]	; (8001620 <HealthSetting+0x68>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fc9b 	bl	8005f2c <siprintf>
	print(LBStr);
 80015f6:	463b      	mov	r3, r7
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff f8ef 	bl	80007dc <print>
	setCursor(20, 1);
 80015fe:	2101      	movs	r1, #1
 8001600:	2014      	movs	r0, #20
 8001602:	f7ff f8a3 	bl	800074c <setCursor>

	print("#-Confirm");
 8001606:	4807      	ldr	r0, [pc, #28]	; (8001624 <HealthSetting+0x6c>)
 8001608:	f7ff f8e8 	bl	80007dc <print>
}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000560 	.word	0x20000560
 8001618:	08007440 	.word	0x08007440
 800161c:	20000564 	.word	0x20000564
 8001620:	08007450 	.word	0x08007450
 8001624:	08007434 	.word	0x08007434

08001628 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b099      	sub	sp, #100	; 0x64
 800162c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800162e:	f000 fde9 	bl	8002204 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001632:	f000 f8eb 	bl	800180c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001636:	f000 fa7b 	bl	8001b30 <MX_GPIO_Init>
	MX_I2C1_Init();
 800163a:	f000 f94f 	bl	80018dc <MX_I2C1_Init>
	MX_SPI1_Init();
 800163e:	f000 f9e7 	bl	8001a10 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8001642:	f000 fa53 	bl	8001aec <MX_USB_PCD_Init>
	MX_USART1_UART_Init();
 8001646:	f000 fa21 	bl	8001a8c <MX_USART1_UART_Init>
	MX_RTC_Init();
 800164a:	f000 f987 	bl	800195c <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001654:	485c      	ldr	r0, [pc, #368]	; (80017c8 <main+0x1a0>)
 8001656:	f001 f979 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001660:	4859      	ldr	r0, [pc, #356]	; (80017c8 <main+0x1a0>)
 8001662:	f001 f973 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166c:	4856      	ldr	r0, [pc, #344]	; (80017c8 <main+0x1a0>)
 800166e:	f001 f96d 	bl	800294c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001678:	4853      	ldr	r0, [pc, #332]	; (80017c8 <main+0x1a0>)
 800167a:	f001 f967 	bl	800294c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, "yo", 2,
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	2202      	movs	r2, #2
 8001684:	4951      	ldr	r1, [pc, #324]	; (80017cc <main+0x1a4>)
 8001686:	4852      	ldr	r0, [pc, #328]	; (80017d0 <main+0x1a8>)
 8001688:	f003 fbb1 	bl	8004dee <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	srand(time(NULL));  // Initialize the random number generator
 800168c:	2000      	movs	r0, #0
 800168e:	f004 fc6d 	bl	8005f6c <time>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4613      	mov	r3, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f004 fbdb 	bl	8005e54 <srand>

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
 800169e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016a2:	9303      	str	r3, [sp, #12]
 80016a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c2:	4844      	ldr	r0, [pc, #272]	; (80017d4 <main+0x1ac>)
 80016c4:	f7fe fddc 	bl	8000280 <LiquidCrystal>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	byte* foxStates[4] = { leftFox, rightFox, topFox, bottomFox };
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <main+0x1b0>)
 80016ca:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80016ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	createChar(2, MisteryBox);
 80016d4:	4941      	ldr	r1, [pc, #260]	; (80017dc <main+0x1b4>)
 80016d6:	2002      	movs	r0, #2
 80016d8:	f7ff f8ab 	bl	8000832 <createChar>
	createChar(3, wall);
 80016dc:	4940      	ldr	r1, [pc, #256]	; (80017e0 <main+0x1b8>)
 80016de:	2003      	movs	r0, #3
 80016e0:	f7ff f8a7 	bl	8000832 <createChar>
	createChar(4, obstacle);
 80016e4:	493f      	ldr	r1, [pc, #252]	; (80017e4 <main+0x1bc>)
 80016e6:	2004      	movs	r0, #4
 80016e8:	f7ff f8a3 	bl	8000832 <createChar>
	createChar(1, heart);
 80016ec:	493e      	ldr	r1, [pc, #248]	; (80017e8 <main+0x1c0>)
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff f89f 	bl	8000832 <createChar>
	createChar(5,bullet);
 80016f4:	493d      	ldr	r1, [pc, #244]	; (80017ec <main+0x1c4>)
 80016f6:	2005      	movs	r0, #5
 80016f8:	f7ff f89b 	bl	8000832 <createChar>
	RTC_TimeTypeDef mytime;
	RTC_DateTypeDef mydate;
	mydate.Year = 19;
 80016fc:	2313      	movs	r3, #19
 80016fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	mydate.Month = 6;
 8001702:	2306      	movs	r3, #6
 8001704:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mydate.Date = 5;
 8001708:	2305      	movs	r3, #5
 800170a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	2200      	movs	r2, #0
 8001714:	4619      	mov	r1, r3
 8001716:	4836      	ldr	r0, [pc, #216]	; (80017f0 <main+0x1c8>)
 8001718:	f003 f8df 	bl	80048da <HAL_RTC_SetDate>
	char timeStr[20];
	char dateStr[20];
	showMain();
 800171c:	f7ff fec4 	bl	80014a8 <showMain>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (screen == 2) {
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <main+0x1cc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d13b      	bne.n	80017a0 <main+0x178>
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	482f      	ldr	r0, [pc, #188]	; (80017f0 <main+0x1c8>)
 8001732:	f003 f874 	bl	800481e <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8001736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	482c      	ldr	r0, [pc, #176]	; (80017f0 <main+0x1c8>)
 8001740:	f003 f94f 	bl	80049e2 <HAL_RTC_GetDate>
			setCursor(20, 0);
 8001744:	2100      	movs	r1, #0
 8001746:	2014      	movs	r0, #20
 8001748:	f7ff f800 	bl	800074c <setCursor>
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 800174c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001750:	461a      	mov	r2, r3
 8001752:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001756:	4619      	mov	r1, r3
					mytime.Seconds);
 8001758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 800175c:	f107 0014 	add.w	r0, r7, #20
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	460b      	mov	r3, r1
 8001764:	4924      	ldr	r1, [pc, #144]	; (80017f8 <main+0x1d0>)
 8001766:	f004 fbe1 	bl	8005f2c <siprintf>

			print(timeStr);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f834 	bl	80007dc <print>
			setCursor(20, 1);
 8001774:	2101      	movs	r1, #1
 8001776:	2014      	movs	r0, #20
 8001778:	f7fe ffe8 	bl	800074c <setCursor>
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 800177c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001780:	461a      	mov	r2, r3
 8001782:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001786:	4619      	mov	r1, r3
					mydate.Date);
 8001788:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 800178c:	4638      	mov	r0, r7
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	460b      	mov	r3, r1
 8001792:	491a      	ldr	r1, [pc, #104]	; (80017fc <main+0x1d4>)
 8001794:	f004 fbca 	bl	8005f2c <siprintf>

			print(dateStr);
 8001798:	463b      	mov	r3, r7
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f81e 	bl	80007dc <print>

		}

		if (screen == 3) {
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <main+0x1cc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d1bb      	bne.n	8001720 <main+0xf8>
			setCursor(20, 1);
 80017a8:	2101      	movs	r1, #1
 80017aa:	2014      	movs	r0, #20
 80017ac:	f7fe ffce 	bl	800074c <setCursor>
			if (vfx) {
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <main+0x1d8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <main+0x198>
				print("vfx on-# to turn off");
 80017b8:	4812      	ldr	r0, [pc, #72]	; (8001804 <main+0x1dc>)
 80017ba:	f7ff f80f 	bl	80007dc <print>
 80017be:	e7af      	b.n	8001720 <main+0xf8>
			} else {
				print("vfx off-# to turn on");
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <main+0x1e0>)
 80017c2:	f7ff f80b 	bl	80007dc <print>
		if (screen == 2) {
 80017c6:	e7ab      	b.n	8001720 <main+0xf8>
 80017c8:	48000400 	.word	0x48000400
 80017cc:	08007460 	.word	0x08007460
 80017d0:	200001e8 	.word	0x200001e8
 80017d4:	48000c00 	.word	0x48000c00
 80017d8:	080074b0 	.word	0x080074b0
 80017dc:	20000018 	.word	0x20000018
 80017e0:	20000020 	.word	0x20000020
 80017e4:	20000028 	.word	0x20000028
 80017e8:	20000010 	.word	0x20000010
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20000164 	.word	0x20000164
 80017f4:	2000055c 	.word	0x2000055c
 80017f8:	08007464 	.word	0x08007464
 80017fc:	08007470 	.word	0x08007470
 8001800:	20000004 	.word	0x20000004
 8001804:	08007480 	.word	0x08007480
 8001808:	08007498 	.word	0x08007498

0800180c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b09e      	sub	sp, #120	; 0x78
 8001810:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001812:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001816:	2228      	movs	r2, #40	; 0x28
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fb12 	bl	8005e44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001820:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001830:	463b      	mov	r3, r7
 8001832:	223c      	movs	r2, #60	; 0x3c
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fb04 	bl	8005e44 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800183c:	230b      	movs	r3, #11
 800183e:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001840:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001844:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184a:	2301      	movs	r3, #1
 800184c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184e:	2310      	movs	r3, #16
 8001850:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001852:	2301      	movs	r3, #1
 8001854:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001860:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001864:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001866:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800186a:	4618      	mov	r0, r3
 800186c:	f001 fa96 	bl	8002d9c <HAL_RCC_OscConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x6e>
		Error_Handler();
 8001876:	f000 fa15 	bl	8001ca4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800187a:	230f      	movs	r3, #15
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187e:	2302      	movs	r3, #2
 8001880:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fabe 	bl	8003e18 <HAL_RCC_ClockConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x9a>
		Error_Handler();
 80018a2:	f000 f9ff 	bl	8001ca4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <SystemClock_Config+0xcc>)
 80018a8:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018b6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80018b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80018be:	463b      	mov	r3, r7
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fcdf 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0xc4>
		Error_Handler();
 80018cc:	f000 f9ea 	bl	8001ca4 <Error_Handler>
	}
}
 80018d0:	bf00      	nop
 80018d2:	3778      	adds	r7, #120	; 0x78
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	00030021 	.word	0x00030021

080018dc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_I2C1_Init+0x74>)
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <MX_I2C1_Init+0x78>)
 80018e4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_I2C1_Init+0x74>)
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <MX_I2C1_Init+0x7c>)
 80018ea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_I2C1_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_I2C1_Init+0x74>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_I2C1_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_I2C1_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_I2C1_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_I2C1_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_I2C1_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001916:	480e      	ldr	r0, [pc, #56]	; (8001950 <MX_I2C1_Init+0x74>)
 8001918:	f001 f848 	bl	80029ac <HAL_I2C_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001922:	f000 f9bf 	bl	8001ca4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001926:	2100      	movs	r1, #0
 8001928:	4809      	ldr	r0, [pc, #36]	; (8001950 <MX_I2C1_Init+0x74>)
 800192a:	f001 f8ce 	bl	8002aca <HAL_I2CEx_ConfigAnalogFilter>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001934:	f000 f9b6 	bl	8001ca4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001938:	2100      	movs	r1, #0
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_I2C1_Init+0x74>)
 800193c:	f001 f910 	bl	8002b60 <HAL_I2CEx_ConfigDigitalFilter>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001946:	f000 f9ad 	bl	8001ca4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000110 	.word	0x20000110
 8001954:	40005400 	.word	0x40005400
 8001958:	2000090e 	.word	0x2000090e

0800195c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_RTC_Init+0xac>)
 8001976:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <MX_RTC_Init+0xb0>)
 8001978:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MX_RTC_Init+0xac>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 39;
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_RTC_Init+0xac>)
 8001982:	2227      	movs	r2, #39	; 0x27
 8001984:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 999;
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <MX_RTC_Init+0xac>)
 8001988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_RTC_Init+0xac>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_RTC_Init+0xac>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_RTC_Init+0xac>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80019a0:	4819      	ldr	r0, [pc, #100]	; (8001a08 <MX_RTC_Init+0xac>)
 80019a2:	f002 fe1f 	bl	80045e4 <HAL_RTC_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_RTC_Init+0x54>
		Error_Handler();
 80019ac:	f000 f97a 	bl	8001ca4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2201      	movs	r2, #1
 80019c8:	4619      	mov	r1, r3
 80019ca:	480f      	ldr	r0, [pc, #60]	; (8001a08 <MX_RTC_Init+0xac>)
 80019cc:	f002 fe8d 	bl	80046ea <HAL_RTC_SetTime>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_RTC_Init+0x7e>
		Error_Handler();
 80019d6:	f000 f965 	bl	8001ca4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019da:	2301      	movs	r3, #1
 80019dc:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80019de:	2301      	movs	r3, #1
 80019e0:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80019ea:	463b      	mov	r3, r7
 80019ec:	2201      	movs	r2, #1
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_RTC_Init+0xac>)
 80019f2:	f002 ff72 	bl	80048da <HAL_RTC_SetDate>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_RTC_Init+0xa4>
		Error_Handler();
 80019fc:	f000 f952 	bl	8001ca4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000164 	.word	0x20000164
 8001a0c:	40002800 	.word	0x40002800

08001a10 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a16:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <MX_SPI1_Init+0x78>)
 8001a18:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a20:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a2e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a42:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a46:	2208      	movs	r2, #8
 8001a48:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a5e:	2207      	movs	r2, #7
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_SPI1_Init+0x74>)
 8001a70:	f003 f8c4 	bl	8004bfc <HAL_SPI_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_SPI1_Init+0x6e>
		Error_Handler();
 8001a7a:	f000 f913 	bl	8001ca4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000184 	.word	0x20000184
 8001a88:	40013000 	.word	0x40013000

08001a8c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001a92:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <MX_USART1_UART_Init+0x5c>)
 8001a94:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001a98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a9c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_USART1_UART_Init+0x58>)
 8001ad0:	f003 f93f 	bl	8004d52 <HAL_UART_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001ada:	f000 f8e3 	bl	8001ca4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200001e8 	.word	0x200001e8
 8001ae8:	40013800 	.word	0x40013800

08001aec <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <MX_USB_PCD_Init+0x3c>)
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <MX_USB_PCD_Init+0x40>)
 8001af4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_USB_PCD_Init+0x3c>)
 8001af8:	2208      	movs	r2, #8
 8001afa:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <MX_USB_PCD_Init+0x3c>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_USB_PCD_Init+0x3c>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <MX_USB_PCD_Init+0x3c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_USB_PCD_Init+0x3c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_USB_PCD_Init+0x3c>)
 8001b16:	f001 f86f 	bl	8002bf8 <HAL_PCD_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8001b20:	f000 f8c0 	bl	8001ca4 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000270 	.word	0x20000270
 8001b2c:	40005c00 	.word	0x40005c00

08001b30 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b50:	6153      	str	r3, [r2, #20]
 8001b52:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5a:	61bb      	str	r3, [r7, #24]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a4c      	ldr	r2, [pc, #304]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b68:	6153      	str	r3, [r2, #20]
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4a46      	ldr	r2, [pc, #280]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b80:	6153      	str	r3, [r2, #20]
 8001b82:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a40      	ldr	r2, [pc, #256]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	6153      	str	r3, [r2, #20]
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a3a      	ldr	r2, [pc, #232]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6153      	str	r3, [r2, #20]
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4a34      	ldr	r2, [pc, #208]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bc8:	6153      	str	r3, [r2, #20]
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <MX_GPIO_Init+0x164>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001bdc:	482e      	ldr	r0, [pc, #184]	; (8001c98 <MX_GPIO_Init+0x168>)
 8001bde:	f000 feb5 	bl	800294c <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001be2:	2200      	movs	r2, #0
 8001be4:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8001be8:	482c      	ldr	r0, [pc, #176]	; (8001c9c <MX_GPIO_Init+0x16c>)
 8001bea:	f000 feaf 	bl	800294c <HAL_GPIO_WritePin>
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 8001bee:	2337      	movs	r3, #55	; 0x37
 8001bf0:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bf2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bf6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4825      	ldr	r0, [pc, #148]	; (8001c98 <MX_GPIO_Init+0x168>)
 8001c04:	f000 fd10 	bl	8002628 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 8001c08:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001c0c:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481d      	ldr	r0, [pc, #116]	; (8001c98 <MX_GPIO_Init+0x168>)
 8001c22:	f000 fd01 	bl	8002628 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3c:	f000 fcf4 	bl	8002628 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001c40:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <MX_GPIO_Init+0x170>)
 8001c58:	f000 fce6 	bl	8002628 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001c5c:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8001c60:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <MX_GPIO_Init+0x16c>)
 8001c76:	f000 fcd7 	bl	8002628 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2028      	movs	r0, #40	; 0x28
 8001c80:	f000 fc25 	bl	80024ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c84:	2028      	movs	r0, #40	; 0x28
 8001c86:	f000 fc3e 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48001000 	.word	0x48001000
 8001c9c:	48000c00 	.word	0x48000c00
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cac:	e7fe      	b.n	8001cac <Error_Handler+0x8>
	...

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6193      	str	r3, [r2, #24]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001ce6:	2006      	movs	r0, #6
 8001ce8:	f000 fbe6 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_I2C_MspInit+0x7c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d127      	bne.n	8001d6a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d36:	2312      	movs	r3, #18
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d42:	2304      	movs	r3, #4
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480b      	ldr	r0, [pc, #44]	; (8001d7c <HAL_I2C_MspInit+0x84>)
 8001d4e:	f000 fc6b 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_I2C_MspInit+0x80>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40005400 	.word	0x40005400
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000400 	.word	0x48000400

08001d80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_RTC_MspInit+0x44>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d111      	bne.n	8001db6 <HAL_RTC_MspInit+0x36>
 8001d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d96:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001da0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RTC_MspInit+0x48>)
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	461a      	mov	r2, r3
 8001db2:	2301      	movs	r3, #1
 8001db4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40002800 	.word	0x40002800
 8001dc8:	10908100 	.word	0x10908100

08001dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_SPI_MspInit+0x7c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d128      	bne.n	8001e40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001df4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df8:	6193      	str	r3, [r2, #24]
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	6153      	str	r3, [r2, #20]
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_SPI_MspInit+0x80>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001e1e:	23e0      	movs	r3, #224	; 0xe0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f000 fbf4 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40013000 	.word	0x40013000
 8001e4c:	40021000 	.word	0x40021000

08001e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_UART_MspInit+0x8c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12f      	bne.n	8001ed2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e94:	6153      	str	r3, [r2, #20]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_UART_MspInit+0x90>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ea2:	2330      	movs	r3, #48	; 0x30
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <HAL_UART_MspInit+0x94>)
 8001ebe:	f000 fbb3 	bl	8002628 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2025      	movs	r0, #37	; 0x25
 8001ec8:	f000 fb01 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ecc:	2025      	movs	r0, #37	; 0x25
 8001ece:	f000 fb1a 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48000800 	.word	0x48000800

08001ee8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <HAL_PCD_MspInit+0x80>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d129      	bne.n	8001f5e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_PCD_MspInit+0x84>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_PCD_MspInit+0x84>)
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	6153      	str	r3, [r2, #20]
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_PCD_MspInit+0x84>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001f22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001f34:	230e      	movs	r3, #14
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f42:	f000 fb71 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_PCD_MspInit+0x84>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <HAL_PCD_MspInit+0x84>)
 8001f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_PCD_MspInit+0x84>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	; 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40005c00 	.word	0x40005c00
 8001f6c:	40021000 	.word	0x40021000

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <NMI_Handler+0x4>

08001f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <HardFault_Handler+0x4>

08001f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <MemManage_Handler+0x4>

08001f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbc:	f000 f968 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <USART1_IRQHandler+0x10>)
 8001fca:	f002 ff9b 	bl	8004f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200001e8 	.word	0x200001e8

08001fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001fdc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fe0:	f000 fccc 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fe4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fe8:	f000 fcc8 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001fec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ff0:	f000 fcc4 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001ff4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ff8:	f000 fcc0 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return 1;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_kill>:

int _kill(int pid, int sig)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800201a:	f003 fee9 	bl	8005df0 <__errno>
 800201e:	4603      	mov	r3, r0
 8002020:	2216      	movs	r2, #22
 8002022:	601a      	str	r2, [r3, #0]
  return -1;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_exit>:

void _exit (int status)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ffe7 	bl	8002010 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002042:	e7fe      	b.n	8002042 <_exit+0x12>

08002044 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e00a      	b.n	800206c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002056:	f3af 8000 	nop.w
 800205a:	4601      	mov	r1, r0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf0      	blt.n	8002056 <_read+0x12>
  }

  return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e009      	b.n	80020a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf1      	blt.n	8002090 <_write+0x12>
  }
  return len;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_close>:

int _close(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020de:	605a      	str	r2, [r3, #4]
  return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_isatty>:

int _isatty(int file)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f003 fe4e 	bl	8005df0 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000a000 	.word	0x2000a000
 8002180:	00000400 	.word	0x00000400
 8002184:	20000688 	.word	0x20000688
 8002188:	200006a0 	.word	0x200006a0

0800218c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021b4:	f7ff ffea 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <LoopForever+0x6>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	; (80021f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <LoopForever+0xe>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	; (80021fc <LoopForever+0x16>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021de:	f003 fe0d 	bl	8005dfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021e2:	f7ff fa21 	bl	8001628 <main>

080021e6 <LoopForever>:

LoopForever:
    b LoopForever
 80021e6:	e7fe      	b.n	80021e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021e8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80021f4:	08007678 	.word	0x08007678
  ldr r2, =_sbss
 80021f8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80021fc:	200006a0 	.word	0x200006a0

08002200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC1_2_IRQHandler>
	...

08002204 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_Init+0x28>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x28>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f94f 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	2000      	movs	r0, #0
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fd46 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f967 	bl	8002522 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 f92f 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000060 	.word	0x20000060
 8002288:	20000068 	.word	0x20000068
 800228c:	20000064 	.word	0x20000064

08002290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000068 	.word	0x20000068
 80022b4:	2000068c 	.word	0x2000068c

080022b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	2000068c 	.word	0x2000068c

080022d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000068 	.word	0x20000068

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002548:	2b02      	cmp	r3, #2
 800254a:	d008      	beq.n	800255e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2204      	movs	r2, #4
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e020      	b.n	80025a0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 020e 	bic.w	r2, r2, #14
 800256c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d005      	beq.n	80025ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2204      	movs	r2, #4
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e027      	b.n	800261e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 020e 	bic.w	r2, r2, #14
 80025dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
    } 
  }
  return status;
 800261e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002636:	e154      	b.n	80028e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8146 	beq.w	80028dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d005      	beq.n	8002668 <HAL_GPIO_Init+0x40>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d130      	bne.n	80026ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800269e:	2201      	movs	r2, #1
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 0201 	and.w	r2, r3, #1
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d017      	beq.n	8002706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d123      	bne.n	800275a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	6939      	ldr	r1, [r7, #16]
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80a0 	beq.w	80028dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279c:	4b58      	ldr	r3, [pc, #352]	; (8002900 <HAL_GPIO_Init+0x2d8>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_GPIO_Init+0x2d8>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6193      	str	r3, [r2, #24]
 80027a8:	4b55      	ldr	r3, [pc, #340]	; (8002900 <HAL_GPIO_Init+0x2d8>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027b4:	4a53      	ldr	r2, [pc, #332]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3302      	adds	r3, #2
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	220f      	movs	r2, #15
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027de:	d019      	beq.n	8002814 <HAL_GPIO_Init+0x1ec>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a49      	ldr	r2, [pc, #292]	; (8002908 <HAL_GPIO_Init+0x2e0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_GPIO_Init+0x1e8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a48      	ldr	r2, [pc, #288]	; (800290c <HAL_GPIO_Init+0x2e4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00d      	beq.n	800280c <HAL_GPIO_Init+0x1e4>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_GPIO_Init+0x2e8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <HAL_GPIO_Init+0x1e0>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a46      	ldr	r2, [pc, #280]	; (8002914 <HAL_GPIO_Init+0x2ec>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_GPIO_Init+0x1dc>
 8002800:	2304      	movs	r3, #4
 8002802:	e008      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002804:	2305      	movs	r3, #5
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002808:	2303      	movs	r3, #3
 800280a:	e004      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002814:	2300      	movs	r3, #0
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002826:	4937      	ldr	r1, [pc, #220]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002834:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002858:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800285e:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002882:	4a25      	ldr	r2, [pc, #148]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028ac:	4a1a      	ldr	r2, [pc, #104]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f aea3 	bne.w	8002638 <HAL_GPIO_Init+0x10>
  }
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000
 8002904:	40010000 	.word	0x40010000
 8002908:	48000400 	.word	0x48000400
 800290c:	48000800 	.word	0x48000800
 8002910:	48000c00 	.word	0x48000c00
 8002914:	48001000 	.word	0x48001000
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	e001      	b.n	800293e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002968:	e002      	b.n	8002970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe f84c 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e081      	b.n	8002ac2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff f990 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e006      	b.n	8002a34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d104      	bne.n	8002a46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69d9      	ldr	r1, [r3, #28]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d138      	bne.n	8002b52 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e032      	b.n	8002b54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2224      	movs	r2, #36	; 0x24
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d139      	bne.n	8002bea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e033      	b.n	8002bec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
  }
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	b08b      	sub	sp, #44	; 0x2c
 8002bfc:	af06      	add	r7, sp, #24
 8002bfe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0c4      	b.n	8002d94 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff f962 	bl	8001ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2203      	movs	r2, #3
 8002c28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 f8a0 	bl	8005d76 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	e040      	b.n	8002cbe <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	3303      	adds	r3, #3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	3338      	adds	r3, #56	; 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	333c      	adds	r3, #60	; 0x3c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3340      	adds	r3, #64	; 0x40
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d3b9      	bcc.n	8002c3c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e044      	b.n	8002d58 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	3301      	adds	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d3b5      	bcc.n	8002cce <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	687e      	ldr	r6, [r7, #4]
 8002d6a:	466d      	mov	r5, sp
 8002d6c:	f106 0410 	add.w	r4, r6, #16
 8002d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	1d33      	adds	r3, r6, #4
 8002d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	f003 f815 	bl	8005dac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f001 b823 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 817d 	beq.w	80030d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dd8:	4bbc      	ldr	r3, [pc, #752]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d00c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002de4:	4bb9      	ldr	r3, [pc, #740]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d15c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x10e>
 8002df0:	4bb6      	ldr	r3, [pc, #728]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d155      	bne.n	8002eaa <HAL_RCC_OscConfig+0x10e>
 8002dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8002e12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_OscConfig+0x94>
 8002e2a:	4ba8      	ldr	r3, [pc, #672]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e015      	b.n	8002e5c <HAL_RCC_OscConfig+0xc0>
 8002e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002e58:	4b9c      	ldr	r3, [pc, #624]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002e64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e68:	fa92 f2a2 	rbit	r2, r2
 8002e6c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002e70:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 811f 	beq.w	80030d0 <HAL_RCC_OscConfig+0x334>
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 8116 	bne.w	80030d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f000 bfaf 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x12e>
 8002ebc:	4b83      	ldr	r3, [pc, #524]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a82      	ldr	r2, [pc, #520]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e036      	b.n	8002f38 <HAL_RCC_OscConfig+0x19c>
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x158>
 8002eda:	4b7c      	ldr	r3, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a7b      	ldr	r2, [pc, #492]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b79      	ldr	r3, [pc, #484]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a78      	ldr	r2, [pc, #480]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e021      	b.n	8002f38 <HAL_RCC_OscConfig+0x19c>
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x184>
 8002f06:	4b71      	ldr	r3, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a70      	ldr	r2, [pc, #448]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b6e      	ldr	r3, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6d      	ldr	r2, [pc, #436]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x19c>
 8002f20:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a69      	ldr	r2, [pc, #420]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b67      	ldr	r3, [pc, #412]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a66      	ldr	r2, [pc, #408]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f38:	4b64      	ldr	r3, [pc, #400]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	f023 020f 	bic.w	r2, r3, #15
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	495f      	ldr	r1, [pc, #380]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d059      	beq.n	8003016 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7ff f9a9 	bl	80022b8 <HAL_GetTick>
 8002f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff f9a4 	bl	80022b8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d902      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	f000 bf43 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
 8002f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002f96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d102      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x218>
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	e015      	b.n	8002fe0 <HAL_RCC_OscConfig+0x244>
 8002fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fcc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fd0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fe4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002fe8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002fec:	fa92 f2a2 	rbit	r2, r2
 8002ff0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ff4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f002 021f 	and.w	r2, r2, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f202 	lsl.w	r2, r1, r2
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ab      	beq.n	8002f6c <HAL_RCC_OscConfig+0x1d0>
 8003014:	e05d      	b.n	80030d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7ff f94f 	bl	80022b8 <HAL_GetTick>
 800301a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7ff f94a 	bl	80022b8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d902      	bls.n	8003036 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	f000 bee9 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
 8003036:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800304a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_RCC_OscConfig+0x2cc>
 8003062:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	e015      	b.n	8003094 <HAL_RCC_OscConfig+0x2f8>
 8003068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800306c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800307c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003080:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003084:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003090:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_RCC_OscConfig+0x330>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003098:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800309c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80030a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80030ac:	fab2 f282 	clz	r2, r2
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	f042 0220 	orr.w	r2, r2, #32
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f002 021f 	and.w	r2, r2, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f202 	lsl.w	r2, r1, r2
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ab      	bne.n	8003020 <HAL_RCC_OscConfig+0x284>
 80030c8:	e003      	b.n	80030d2 <HAL_RCC_OscConfig+0x336>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 817d 	beq.w	80033e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030e8:	4ba6      	ldr	r3, [pc, #664]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030f4:	4ba3      	ldr	r3, [pc, #652]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d172      	bne.n	80031e6 <HAL_RCC_OscConfig+0x44a>
 8003100:	4ba0      	ldr	r3, [pc, #640]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d16c      	bne.n	80031e6 <HAL_RCC_OscConfig+0x44a>
 800310c:	2302      	movs	r3, #2
 800310e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800311e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <HAL_RCC_OscConfig+0x3a0>
 8003136:	4b93      	ldr	r3, [pc, #588]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	e013      	b.n	8003164 <HAL_RCC_OscConfig+0x3c8>
 800313c:	2302      	movs	r3, #2
 800313e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003154:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2202      	movs	r2, #2
 8003166:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800316a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800316e:	fa92 f2a2 	rbit	r2, r2
 8003172:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003176:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f002 021f 	and.w	r2, r2, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCC_OscConfig+0x410>
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d002      	beq.n	80031ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f000 be2e 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	21f8      	movs	r1, #248	; 0xf8
 80031c2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031ca:	fa91 f1a1 	rbit	r1, r1
 80031ce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80031d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80031d6:	fab1 f181 	clz	r1, r1
 80031da:	b2c9      	uxtb	r1, r1
 80031dc:	408b      	lsls	r3, r1
 80031de:	4969      	ldr	r1, [pc, #420]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e4:	e0fd      	b.n	80033e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8088 	beq.w	8003308 <HAL_RCC_OscConfig+0x56c>
 80031f8:	2301      	movs	r3, #1
 80031fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800320a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003218:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	461a      	mov	r2, r3
 8003220:	2301      	movs	r3, #1
 8003222:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7ff f848 	bl	80022b8 <HAL_GetTick>
 8003228:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	e00a      	b.n	8003244 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322e:	f7ff f843 	bl	80022b8 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	f000 bde2 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
 8003244:	2302      	movs	r3, #2
 8003246:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003256:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d102      	bne.n	8003274 <HAL_RCC_OscConfig+0x4d8>
 800326e:	4b45      	ldr	r3, [pc, #276]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e013      	b.n	800329c <HAL_RCC_OscConfig+0x500>
 8003274:	2302      	movs	r3, #2
 8003276:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003286:	2302      	movs	r3, #2
 8003288:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800328c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003298:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2202      	movs	r2, #2
 800329e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80032a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032a6:	fa92 f2a2 	rbit	r2, r2
 80032aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80032ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032b2:	fab2 f282 	clz	r2, r2
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f042 0220 	orr.w	r2, r2, #32
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f002 021f 	and.w	r2, r2, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0af      	beq.n	800322e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ce:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	21f8      	movs	r1, #248	; 0xf8
 80032e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032ec:	fa91 f1a1 	rbit	r1, r1
 80032f0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80032f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80032f8:	fab1 f181 	clz	r1, r1
 80032fc:	b2c9      	uxtb	r1, r1
 80032fe:	408b      	lsls	r3, r1
 8003300:	4920      	ldr	r1, [pc, #128]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
 8003306:	e06c      	b.n	80033e2 <HAL_RCC_OscConfig+0x646>
 8003308:	2301      	movs	r3, #1
 800330a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800331a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	461a      	mov	r2, r3
 8003330:	2300      	movs	r3, #0
 8003332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fe ffc0 	bl	80022b8 <HAL_GetTick>
 8003338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe ffbb 	bl	80022b8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d902      	bls.n	8003354 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	f000 bd5a 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
 8003354:	2302      	movs	r3, #2
 8003356:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d104      	bne.n	8003388 <HAL_RCC_OscConfig+0x5ec>
 800337e:	4b01      	ldr	r3, [pc, #4]	; (8003384 <HAL_RCC_OscConfig+0x5e8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e015      	b.n	80033b0 <HAL_RCC_OscConfig+0x614>
 8003384:	40021000 	.word	0x40021000
 8003388:	2302      	movs	r3, #2
 800338a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800339a:	2302      	movs	r3, #2
 800339c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033ac:	4bc8      	ldr	r3, [pc, #800]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2202      	movs	r2, #2
 80033b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80033b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033ba:	fa92 f2a2 	rbit	r2, r2
 80033be:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80033c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80033c6:	fab2 f282 	clz	r2, r2
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	f042 0220 	orr.w	r2, r2, #32
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f002 021f 	and.w	r2, r2, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ad      	bne.n	800333e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8110 	beq.w	8003618 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d079      	beq.n	80034fc <HAL_RCC_OscConfig+0x760>
 8003408:	2301      	movs	r3, #1
 800340a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800341a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4bab      	ldr	r3, [pc, #684]	; (80036d4 <HAL_RCC_OscConfig+0x938>)
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	461a      	mov	r2, r3
 800342e:	2301      	movs	r3, #1
 8003430:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003432:	f7fe ff41 	bl	80022b8 <HAL_GetTick>
 8003436:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343c:	f7fe ff3c 	bl	80022b8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d902      	bls.n	8003452 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	f000 bcdb 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
 8003452:	2302      	movs	r3, #2
 8003454:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800346c:	2202      	movs	r2, #2
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003490:	2202      	movs	r2, #2
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ac:	4b88      	ldr	r3, [pc, #544]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 80034ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034b8:	2102      	movs	r1, #2
 80034ba:	6019      	str	r1, [r3, #0]
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f1a3 	rbit	r1, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034d2:	6019      	str	r1, [r3, #0]
  return result;
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0a0      	beq.n	800343c <HAL_RCC_OscConfig+0x6a0>
 80034fa:	e08d      	b.n	8003618 <HAL_RCC_OscConfig+0x87c>
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800351e:	601a      	str	r2, [r3, #0]
  return result;
 8003520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003524:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003528:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_RCC_OscConfig+0x938>)
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	461a      	mov	r2, r3
 800353a:	2300      	movs	r3, #0
 800353c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe febb 	bl	80022b8 <HAL_GetTick>
 8003542:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe feb6 	bl	80022b8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d902      	bls.n	800355e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	f000 bc55 	b.w	8003e08 <HAL_RCC_OscConfig+0x106c>
 800355e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003562:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003566:	2202      	movs	r2, #2
 8003568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800358a:	2202      	movs	r2, #2
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035ae:	2202      	movs	r2, #2
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	fa93 f2a3 	rbit	r2, r3
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ca:	4b41      	ldr	r3, [pc, #260]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 80035cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035d6:	2102      	movs	r1, #2
 80035d8:	6019      	str	r1, [r3, #0]
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	fa93 f1a3 	rbit	r1, r3
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035f0:	6019      	str	r1, [r3, #0]
  return result;
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d197      	bne.n	8003548 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 81a1 	beq.w	8003970 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362e:	2300      	movs	r3, #0
 8003630:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003634:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	61d3      	str	r3, [r2, #28]
 800364c:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003666:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003668:	2301      	movs	r3, #1
 800366a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_RCC_OscConfig+0x93c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11a      	bne.n	80036b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_RCC_OscConfig+0x93c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_RCC_OscConfig+0x93c>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fe fe17 	bl	80022b8 <HAL_GetTick>
 800368a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	e009      	b.n	80036a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003690:	f7fe fe12 	bl	80022b8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	; 0x64
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e3b1      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_RCC_OscConfig+0x93c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ef      	beq.n	8003690 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10d      	bne.n	80036dc <HAL_RCC_OscConfig+0x940>
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4a02      	ldr	r2, [pc, #8]	; (80036d0 <HAL_RCC_OscConfig+0x934>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	e03c      	b.n	8003748 <HAL_RCC_OscConfig+0x9ac>
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	10908120 	.word	0x10908120
 80036d8:	40007000 	.word	0x40007000
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x96a>
 80036ec:	4bc1      	ldr	r3, [pc, #772]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4ac0      	ldr	r2, [pc, #768]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	4bbe      	ldr	r3, [pc, #760]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4abd      	ldr	r2, [pc, #756]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 80036fe:	f023 0304 	bic.w	r3, r3, #4
 8003702:	6213      	str	r3, [r2, #32]
 8003704:	e020      	b.n	8003748 <HAL_RCC_OscConfig+0x9ac>
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x994>
 8003716:	4bb7      	ldr	r3, [pc, #732]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4ab6      	ldr	r2, [pc, #728]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6213      	str	r3, [r2, #32]
 8003722:	4bb4      	ldr	r3, [pc, #720]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4ab3      	ldr	r2, [pc, #716]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6213      	str	r3, [r2, #32]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0x9ac>
 8003730:	4bb0      	ldr	r3, [pc, #704]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4aaf      	ldr	r2, [pc, #700]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6213      	str	r3, [r2, #32]
 800373c:	4bad      	ldr	r3, [pc, #692]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4aac      	ldr	r2, [pc, #688]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8081 	beq.w	800385c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375a:	f7fe fdad 	bl	80022b8 <HAL_GetTick>
 800375e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fe fda8 	bl	80022b8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e345      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
 800377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003780:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003784:	2202      	movs	r2, #2
 8003786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	fa93 f2a3 	rbit	r2, r3
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037a8:	2202      	movs	r2, #2
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	fa93 f2a3 	rbit	r2, r3
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037c2:	601a      	str	r2, [r3, #0]
  return result;
 80037c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f043 0302 	orr.w	r3, r3, #2
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d102      	bne.n	80037e8 <HAL_RCC_OscConfig+0xa4c>
 80037e2:	4b84      	ldr	r3, [pc, #528]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	e013      	b.n	8003810 <HAL_RCC_OscConfig+0xa74>
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037f0:	2202      	movs	r2, #2
 80037f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003814:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003818:	2102      	movs	r1, #2
 800381a:	6011      	str	r1, [r2, #0]
 800381c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003820:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	fa92 f1a2 	rbit	r1, r2
 800382a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800382e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003832:	6011      	str	r1, [r2, #0]
  return result;
 8003834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003838:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	fab2 f282 	clz	r2, r2
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f002 021f 	and.w	r2, r2, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d084      	beq.n	8003764 <HAL_RCC_OscConfig+0x9c8>
 800385a:	e07f      	b.n	800395c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe fd2c 	bl	80022b8 <HAL_GetTick>
 8003860:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003864:	e00b      	b.n	800387e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fe fd27 	bl	80022b8 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e2c4      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003886:	2202      	movs	r2, #2
 8003888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fa93 f2a3 	rbit	r2, r3
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038aa:	2202      	movs	r2, #2
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	fa93 f2a3 	rbit	r2, r3
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038c4:	601a      	str	r2, [r3, #0]
  return result;
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d102      	bne.n	80038ea <HAL_RCC_OscConfig+0xb4e>
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	e013      	b.n	8003912 <HAL_RCC_OscConfig+0xb76>
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038f2:	2202      	movs	r2, #2
 80038f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fa93 f2a3 	rbit	r2, r3
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003916:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800391a:	2102      	movs	r1, #2
 800391c:	6011      	str	r1, [r2, #0]
 800391e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003922:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	fa92 f1a2 	rbit	r1, r2
 800392c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003930:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003934:	6011      	str	r1, [r2, #0]
  return result;
 8003936:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800393a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f002 021f 	and.w	r2, r2, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f202 	lsl.w	r2, r1, r2
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d184      	bne.n	8003866 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800395c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8242 	beq.w	8003e06 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_RCC_OscConfig+0xc58>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	f000 8213 	beq.w	8003db6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	2b02      	cmp	r3, #2
 800399e:	f040 8162 	bne.w	8003c66 <HAL_RCC_OscConfig+0xeca>
 80039a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	fa93 f2a3 	rbit	r2, r3
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039c6:	601a      	str	r2, [r3, #0]
  return result;
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fc66 	bl	80022b8 <HAL_GetTick>
 80039ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	e00c      	b.n	8003a0c <HAL_RCC_OscConfig+0xc70>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fc5e 	bl	80022b8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1fd      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a30:	601a      	str	r2, [r3, #0]
  return result;
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCC_OscConfig+0xcba>
 8003a50:	4bb0      	ldr	r3, [pc, #704]	; (8003d14 <HAL_RCC_OscConfig+0xf78>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	e027      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd0a>
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	fa93 f2a3 	rbit	r2, r3
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	4b9c      	ldr	r3, [pc, #624]	; (8003d14 <HAL_RCC_OscConfig+0xf78>)
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aaa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003aae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ab2:	6011      	str	r1, [r2, #0]
 8003ab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	fa92 f1a2 	rbit	r1, r2
 8003ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003aca:	6011      	str	r1, [r2, #0]
  return result;
 8003acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	fab2 f282 	clz	r2, r2
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f042 0220 	orr.w	r2, r2, #32
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f002 021f 	and.w	r2, r2, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d182      	bne.n	80039f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af2:	4b88      	ldr	r3, [pc, #544]	; (8003d14 <HAL_RCC_OscConfig+0xf78>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	497f      	ldr	r1, [pc, #508]	; (8003d14 <HAL_RCC_OscConfig+0xf78>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]
 8003b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b3e:	601a      	str	r2, [r3, #0]
  return result;
 8003b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe fbaa 	bl	80022b8 <HAL_GetTick>
 8003b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b68:	e009      	b.n	8003b7e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fba5 	bl	80022b8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e144      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
 8003b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	fa93 f2a3 	rbit	r2, r3
 8003b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ba2:	601a      	str	r2, [r3, #0]
  return result;
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003bac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xe2c>
 8003bc2:	4b54      	ldr	r3, [pc, #336]	; (8003d14 <HAL_RCC_OscConfig+0xf78>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	e027      	b.n	8003c18 <HAL_RCC_OscConfig+0xe7c>
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	fa93 f2a3 	rbit	r2, r3
 8003be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c00:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	fa93 f2a3 	rbit	r2, r3
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCC_OscConfig+0xf78>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c1c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c24:	6011      	str	r1, [r2, #0]
 8003c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c2a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	fa92 f1a2 	rbit	r1, r2
 8003c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c3c:	6011      	str	r1, [r2, #0]
  return result;
 8003c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c42:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	fab2 f282 	clz	r2, r2
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	f042 0220 	orr.w	r2, r2, #32
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	f002 021f 	and.w	r2, r2, #31
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d082      	beq.n	8003b6a <HAL_RCC_OscConfig+0xdce>
 8003c64:	e0cf      	b.n	8003e06 <HAL_RCC_OscConfig+0x106a>
 8003c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c78:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c86:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c8a:	601a      	str	r2, [r3, #0]
  return result;
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ca0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fb04 	bl	80022b8 <HAL_GetTick>
 8003cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb4:	e009      	b.n	8003cca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb6:	f7fe faff 	bl	80022b8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e09e      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cdc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	fa93 f2a3 	rbit	r2, r3
 8003ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003cee:	601a      	str	r2, [r3, #0]
  return result;
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003cf8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d104      	bne.n	8003d18 <HAL_RCC_OscConfig+0xf7c>
 8003d0e:	4b01      	ldr	r3, [pc, #4]	; (8003d14 <HAL_RCC_OscConfig+0xf78>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	e029      	b.n	8003d68 <HAL_RCC_OscConfig+0xfcc>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	fa93 f2a3 	rbit	r2, r3
 8003d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d42:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	fa93 f2a3 	rbit	r2, r3
 8003d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_OscConfig+0x1078>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d6c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d74:	6011      	str	r1, [r2, #0]
 8003d76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d7a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	fa92 f1a2 	rbit	r1, r2
 8003d84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d88:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d8c:	6011      	str	r1, [r2, #0]
  return result;
 8003d8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	fab2 f282 	clz	r2, r2
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	f042 0220 	orr.w	r2, r2, #32
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	f002 021f 	and.w	r2, r2, #31
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d180      	bne.n	8003cb6 <HAL_RCC_OscConfig+0xf1a>
 8003db4:	e027      	b.n	8003e06 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e01e      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_OscConfig+0x1078>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dd6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d10b      	bne.n	8003e02 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003dea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000

08003e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b09e      	sub	sp, #120	; 0x78
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e162      	b.n	80040f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b90      	ldr	r3, [pc, #576]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d910      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b8d      	ldr	r3, [pc, #564]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	498b      	ldr	r1, [pc, #556]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b89      	ldr	r3, [pc, #548]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e14a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e6c:	4b82      	ldr	r3, [pc, #520]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	497f      	ldr	r1, [pc, #508]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80dc 	beq.w	8004044 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d13c      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xf6>
 8003e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d102      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xa6>
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	e00f      	b.n	8003ede <HAL_RCC_ClockConfig+0xc6>
 8003ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ec2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec6:	fa93 f3a3 	rbit	r3, r3
 8003eca:	667b      	str	r3, [r7, #100]	; 0x64
 8003ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eda:	4b67      	ldr	r3, [pc, #412]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ee2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ee6:	fa92 f2a2 	rbit	r2, r2
 8003eea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003eec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eee:	fab2 f282 	clz	r2, r2
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f042 0220 	orr.w	r2, r2, #32
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	f002 021f 	and.w	r2, r2, #31
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f202 	lsl.w	r2, r1, r2
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d17b      	bne.n	8004002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0f3      	b.n	80040f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d13c      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x178>
 8003f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x128>
 8003f3a:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	e00f      	b.n	8003f60 <HAL_RCC_ClockConfig+0x148>
 8003f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f48:	fa93 f3a3 	rbit	r3, r3
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f52:	643b      	str	r3, [r7, #64]	; 0x40
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5c:	4b46      	ldr	r3, [pc, #280]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f64:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f68:	fa92 f2a2 	rbit	r2, r2
 8003f6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f70:	fab2 f282 	clz	r2, r2
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	f042 0220 	orr.w	r2, r2, #32
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	f002 021f 	and.w	r2, r2, #31
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f202 	lsl.w	r2, r1, r2
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d13a      	bne.n	8004002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0b2      	b.n	80040f6 <HAL_RCC_ClockConfig+0x2de>
 8003f90:	2302      	movs	r3, #2
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x1a0>
 8003fb2:	4b31      	ldr	r3, [pc, #196]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	e00d      	b.n	8003fd4 <HAL_RCC_ClockConfig+0x1bc>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	61ba      	str	r2, [r7, #24]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	fa92 f2a2 	rbit	r2, r2
 8003fde:	617a      	str	r2, [r7, #20]
  return result;
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	fab2 f282 	clz	r2, r2
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	f042 0220 	orr.w	r2, r2, #32
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	f002 021f 	and.w	r2, r2, #31
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e079      	b.n	80040f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	491a      	ldr	r1, [pc, #104]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004014:	f7fe f950 	bl	80022b8 <HAL_GetTick>
 8004018:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	e00a      	b.n	8004032 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800401c:	f7fe f94c 	bl	80022b8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	; 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e061      	b.n	80040f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_RCC_ClockConfig+0x260>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 020c 	and.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	429a      	cmp	r2, r3
 8004042:	d1eb      	bne.n	800401c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d214      	bcs.n	800407c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 0207 	bic.w	r2, r3, #7
 800405a:	4906      	ldr	r1, [pc, #24]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <HAL_RCC_ClockConfig+0x25c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e040      	b.n	80040f6 <HAL_RCC_ClockConfig+0x2de>
 8004074:	40022000 	.word	0x40022000
 8004078:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <HAL_RCC_ClockConfig+0x2e8>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	491a      	ldr	r1, [pc, #104]	; (8004100 <HAL_RCC_ClockConfig+0x2e8>)
 8004096:	4313      	orrs	r3, r2
 8004098:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_RCC_ClockConfig+0x2e8>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4912      	ldr	r1, [pc, #72]	; (8004100 <HAL_RCC_ClockConfig+0x2e8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040ba:	f000 f829 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040be:	4601      	mov	r1, r0
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <HAL_RCC_ClockConfig+0x2e8>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c8:	22f0      	movs	r2, #240	; 0xf0
 80040ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	fa92 f2a2 	rbit	r2, r2
 80040d2:	60fa      	str	r2, [r7, #12]
  return result;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	fab2 f282 	clz	r2, r2
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	40d3      	lsrs	r3, r2
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x2ec>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	fa21 f303 	lsr.w	r3, r1, r3
 80040e6:	4a08      	ldr	r2, [pc, #32]	; (8004108 <HAL_RCC_ClockConfig+0x2f0>)
 80040e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_RCC_ClockConfig+0x2f4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe f89e 	bl	8002230 <HAL_InitTick>
  
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3778      	adds	r7, #120	; 0x78
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	080074f0 	.word	0x080074f0
 8004108:	20000060 	.word	0x20000060
 800410c:	20000064 	.word	0x20000064

08004110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b08b      	sub	sp, #44	; 0x2c
 8004114:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800412a:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d002      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x30>
 800413a:	2b08      	cmp	r3, #8
 800413c:	d003      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x36>
 800413e:	e03c      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004140:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004142:	623b      	str	r3, [r7, #32]
      break;
 8004144:	e03c      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800414c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004150:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	fa92 f2a2 	rbit	r2, r2
 8004158:	607a      	str	r2, [r7, #4]
  return result;
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	40d3      	lsrs	r3, r2
 8004164:	4a1c      	ldr	r2, [pc, #112]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	220f      	movs	r2, #15
 8004174:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	fa92 f2a2 	rbit	r2, r2
 800417c:	60fa      	str	r2, [r7, #12]
  return result;
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	fab2 f282 	clz	r2, r2
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	40d3      	lsrs	r3, r2
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	e004      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	623b      	str	r3, [r7, #32]
      break;
 80041b8:	e002      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041bc:	623b      	str	r3, [r7, #32]
      break;
 80041be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c0:	6a3b      	ldr	r3, [r7, #32]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	372c      	adds	r7, #44	; 0x2c
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	007a1200 	.word	0x007a1200
 80041d8:	08007508 	.word	0x08007508
 80041dc:	08007518 	.word	0x08007518
 80041e0:	003d0900 	.word	0x003d0900

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000060 	.word	0x20000060

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004202:	f7ff ffef 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004206:	4601      	mov	r1, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004210:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	fa92 f2a2 	rbit	r2, r2
 800421c:	603a      	str	r2, [r7, #0]
  return result;
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	fab2 f282 	clz	r2, r2
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	40d3      	lsrs	r3, r2
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_RCC_GetPCLK1Freq+0x40>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	08007500 	.word	0x08007500

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004246:	f7ff ffcd 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800424a:	4601      	mov	r1, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004254:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	fa92 f2a2 	rbit	r2, r2
 8004260:	603a      	str	r2, [r7, #0]
  return result;
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	40d3      	lsrs	r3, r2
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x40>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	08007500 	.word	0x08007500

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b092      	sub	sp, #72	; 0x48
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80d4 	beq.w	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a8:	4b4e      	ldr	r3, [pc, #312]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10e      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	4a4a      	ldr	r2, [pc, #296]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042be:	61d3      	str	r3, [r2, #28]
 80042c0:	4b48      	ldr	r3, [pc, #288]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b45      	ldr	r3, [pc, #276]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d118      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042de:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a41      	ldr	r2, [pc, #260]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ea:	f7fd ffe5 	bl	80022b8 <HAL_GetTick>
 80042ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f0:	e008      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f2:	f7fd ffe1 	bl	80022b8 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b64      	cmp	r3, #100	; 0x64
 80042fe:	d901      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e169      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	4b38      	ldr	r3, [pc, #224]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004310:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004318:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8084 	beq.w	800442a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800432c:	429a      	cmp	r2, r3
 800432e:	d07c      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004330:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	461a      	mov	r2, r3
 800435a:	2301      	movs	r3, #1
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	461a      	mov	r2, r3
 800437e:	2300      	movs	r3, #0
 8004380:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04b      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fd ff91 	bl	80022b8 <HAL_GetTick>
 8004396:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fd ff8d 	bl	80022b8 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e113      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80043b0:	2302      	movs	r3, #2
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
 80043bc:	2302      	movs	r3, #2
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	61fb      	str	r3, [r7, #28]
  return result;
 80043c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d108      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80043de:	4b01      	ldr	r3, [pc, #4]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	e00d      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40007000 	.word	0x40007000
 80043ec:	10908100 	.word	0x10908100
 80043f0:	2302      	movs	r3, #2
 80043f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	4b78      	ldr	r3, [pc, #480]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2202      	movs	r2, #2
 8004402:	613a      	str	r2, [r7, #16]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	fa92 f2a2 	rbit	r2, r2
 800440a:	60fa      	str	r2, [r7, #12]
  return result;
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	fab2 f282 	clz	r2, r2
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	f002 021f 	and.w	r2, r2, #31
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f202 	lsl.w	r2, r1, r2
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0b7      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800442a:	4b6d      	ldr	r3, [pc, #436]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	496a      	ldr	r1, [pc, #424]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800443c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004440:	2b01      	cmp	r3, #1
 8004442:	d105      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004444:	4b66      	ldr	r3, [pc, #408]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4a65      	ldr	r2, [pc, #404]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800445c:	4b60      	ldr	r3, [pc, #384]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f023 0203 	bic.w	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	495d      	ldr	r1, [pc, #372]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800447a:	4b59      	ldr	r3, [pc, #356]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	4956      	ldr	r1, [pc, #344]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004498:	4b51      	ldr	r3, [pc, #324]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	494e      	ldr	r1, [pc, #312]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044b6:	4b4a      	ldr	r3, [pc, #296]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f023 0210 	bic.w	r2, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4947      	ldr	r1, [pc, #284]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80044d4:	4b42      	ldr	r3, [pc, #264]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	493f      	ldr	r1, [pc, #252]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044f2:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f023 0220 	bic.w	r2, r3, #32
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4938      	ldr	r1, [pc, #224]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004510:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	4930      	ldr	r1, [pc, #192]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800452e:	4b2c      	ldr	r3, [pc, #176]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	4929      	ldr	r1, [pc, #164]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	4921      	ldr	r1, [pc, #132]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	491a      	ldr	r1, [pc, #104]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	4912      	ldr	r1, [pc, #72]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045a6:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	490b      	ldr	r1, [pc, #44]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	4903      	ldr	r1, [pc, #12]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3748      	adds	r7, #72	; 0x48
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000

080045e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e073      	b.n	80046e2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7f5b      	ldrb	r3, [r3, #29]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fbb8 	bl	8001d80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b10      	cmp	r3, #16
 8004622:	d055      	beq.n	80046d0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	22ca      	movs	r2, #202	; 0xca
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2253      	movs	r2, #83	; 0x53
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fa49 	bl	8004acc <RTC_EnterInitMode>
 800463a:	4603      	mov	r3, r0
 800463c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d12c      	bne.n	800469e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004656:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6919      	ldr	r1, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	041a      	lsls	r2, r3, #16
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa50 	bl	8004b3a <RTC_ExitInitMode>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d110      	bne.n	80046c6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	22ff      	movs	r2, #255	; 0xff
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
 80046ce:	e001      	b.n	80046d4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d102      	bne.n	80046e0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046ea:	b590      	push	{r4, r7, lr}
 80046ec:	b087      	sub	sp, #28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	7f1b      	ldrb	r3, [r3, #28]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_RTC_SetTime+0x1c>
 8004702:	2302      	movs	r3, #2
 8004704:	e087      	b.n	8004816 <HAL_RTC_SetTime+0x12c>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2202      	movs	r2, #2
 8004710:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d126      	bne.n	8004766 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2200      	movs	r2, #0
 800472a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fa27 	bl	8004b84 <RTC_ByteToBcd2>
 8004736:	4603      	mov	r3, r0
 8004738:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	785b      	ldrb	r3, [r3, #1]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fa20 	bl	8004b84 <RTC_ByteToBcd2>
 8004744:	4603      	mov	r3, r0
 8004746:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004748:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	789b      	ldrb	r3, [r3, #2]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa18 	bl	8004b84 <RTC_ByteToBcd2>
 8004754:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004756:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	78db      	ldrb	r3, [r3, #3]
 800475e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e018      	b.n	8004798 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2200      	movs	r2, #0
 8004778:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004786:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800478c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	78db      	ldrb	r3, [r3, #3]
 8004792:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	22ca      	movs	r2, #202	; 0xca
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2253      	movs	r2, #83	; 0x53
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f98f 	bl	8004acc <RTC_EnterInitMode>
 80047ae:	4603      	mov	r3, r0
 80047b0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d120      	bne.n	80047fa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80047c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80047c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f9a2 	bl	8004b3a <RTC_ExitInitMode>
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	771a      	strb	r2, [r3, #28]

  return status;
 8004814:	7cfb      	ldrb	r3, [r7, #19]
}
 8004816:	4618      	mov	r0, r3
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}

0800481e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004850:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004854:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	0d9b      	lsrs	r3, r3, #22
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11a      	bne.n	80048d0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f98e 	bl	8004bc0 <RTC_Bcd2ToByte>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	785b      	ldrb	r3, [r3, #1]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 f985 	bl	8004bc0 <RTC_Bcd2ToByte>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461a      	mov	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	789b      	ldrb	r3, [r3, #2]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f97c 	bl	8004bc0 <RTC_Bcd2ToByte>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048da:	b590      	push	{r4, r7, lr}
 80048dc:	b087      	sub	sp, #28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	7f1b      	ldrb	r3, [r3, #28]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_RTC_SetDate+0x1c>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e071      	b.n	80049da <HAL_RTC_SetDate+0x100>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2202      	movs	r2, #2
 8004900:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10e      	bne.n	8004926 <HAL_RTC_SetDate+0x4c>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	b2db      	uxtb	r3, r3
 800491e:	330a      	adds	r3, #10
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11c      	bne.n	8004966 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	78db      	ldrb	r3, [r3, #3]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f927 	bl	8004b84 <RTC_ByteToBcd2>
 8004936:	4603      	mov	r3, r0
 8004938:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f920 	bl	8004b84 <RTC_ByteToBcd2>
 8004944:	4603      	mov	r3, r0
 8004946:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004948:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	789b      	ldrb	r3, [r3, #2]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f918 	bl	8004b84 <RTC_ByteToBcd2>
 8004954:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004956:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e00e      	b.n	8004984 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	78db      	ldrb	r3, [r3, #3]
 800496a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004972:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004978:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	22ca      	movs	r2, #202	; 0xca
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2253      	movs	r2, #83	; 0x53
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f899 	bl	8004acc <RTC_EnterInitMode>
 800499a:	4603      	mov	r3, r0
 800499c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10c      	bne.n	80049be <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049b2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f8c0 	bl	8004b3a <RTC_ExitInitMode>
 80049ba:	4603      	mov	r3, r0
 80049bc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]

  return status;
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}

080049e2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	0b5b      	lsrs	r3, r3, #13
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d11a      	bne.n	8004a76 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	78db      	ldrb	r3, [r3, #3]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f8bb 	bl	8004bc0 <RTC_Bcd2ToByte>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f8b2 	bl	8004bc0 <RTC_Bcd2ToByte>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	789b      	ldrb	r3, [r3, #2]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f8a9 	bl	8004bc0 <RTC_Bcd2ToByte>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <HAL_RTC_WaitForSynchro+0x48>)
 8004a92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a94:	f7fd fc10 	bl	80022b8 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a9a:	e009      	b.n	8004ab0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a9c:	f7fd fc0c 	bl	80022b8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e007      	b.n	8004ac0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ee      	beq.n	8004a9c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	0001ff5f 	.word	0x0001ff5f

08004acc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d122      	bne.n	8004b30 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004af8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004afa:	f7fd fbdd 	bl	80022b8 <HAL_GetTick>
 8004afe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b00:	e00c      	b.n	8004b1c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b02:	f7fd fbd9 	bl	80022b8 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b10:	d904      	bls.n	8004b1c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <RTC_EnterInitMode+0x64>
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d1e8      	bne.n	8004b02 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b54:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ff8b 	bl	8004a80 <HAL_RTC_WaitForSynchro>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2204      	movs	r2, #4
 8004b74:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004b92:	e005      	b.n	8004ba0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	3b0a      	subs	r3, #10
 8004b9e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	2b09      	cmp	r3, #9
 8004ba4:	d8f6      	bhi.n	8004b94 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b2db      	uxtb	r3, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	79fb      	ldrb	r3, [r7, #7]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	b2db      	uxtb	r3, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e09d      	b.n	8004d4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d009      	beq.n	8004c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]
 8004c26:	e005      	b.n	8004c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fd f8bc 	bl	8001dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c74:	d902      	bls.n	8004c7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e002      	b.n	8004c82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c8a:	d007      	beq.n	8004c9c <HAL_SPI_Init+0xa0>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c94:	d002      	beq.n	8004c9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	ea42 0103 	orr.w	r1, r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	0c1b      	lsrs	r3, r3, #16
 8004cf8:	f003 0204 	and.w	r2, r3, #4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d18:	ea42 0103 	orr.w	r1, r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e040      	b.n	8004de6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fd f86b 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2224      	movs	r2, #36	; 0x24
 8004d7e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fbbd 	bl	8005510 <UART_SetConfig>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e022      	b.n	8004de6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fd85 	bl	80058b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0201 	orr.w	r2, r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fe0c 	bl	80059fc <UART_CheckIdleState>
 8004de4:	4603      	mov	r3, r0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b08a      	sub	sp, #40	; 0x28
 8004df2:	af02      	add	r7, sp, #8
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d178      	bne.n	8004ef8 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_UART_Transmit+0x24>
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e071      	b.n	8004efa <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2221      	movs	r2, #33	; 0x21
 8004e22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e24:	f7fd fa48 	bl	80022b8 <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	88fa      	ldrh	r2, [r7, #6]
 8004e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d108      	bne.n	8004e56 <HAL_UART_Transmit+0x68>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e003      	b.n	8004e5e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e5e:	e030      	b.n	8004ec2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	2180      	movs	r1, #128	; 0x80
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fe6e 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e03c      	b.n	8004efa <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e92:	b292      	uxth	r2, r2
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	3302      	adds	r3, #2
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e008      	b.n	8004eb0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	781a      	ldrb	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3301      	adds	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1c8      	bne.n	8004e60 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fe37 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e005      	b.n	8004efa <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e000      	b.n	8004efa <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b0ba      	sub	sp, #232	; 0xe8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f32:	4013      	ands	r3, r2
 8004f34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d115      	bne.n	8004f6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00f      	beq.n	8004f6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d009      	beq.n	8004f6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 82ab 	beq.w	80054b8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
      }
      return;
 8004f6a:	e2a5      	b.n	80054b8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8117 	beq.w	80051a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f86:	4b85      	ldr	r3, [pc, #532]	; (800519c <HAL_UART_IRQHandler+0x298>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 810a 	beq.w	80051a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d011      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xbc>
 8004f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d011      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xec>
 8004fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe6:	f043 0204 	orr.w	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <HAL_UART_IRQHandler+0x11c>
 8004ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2204      	movs	r2, #4
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	f043 0202 	orr.w	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d017      	beq.n	800505c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d105      	bne.n	8005044 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2208      	movs	r2, #8
 800504a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005052:	f043 0208 	orr.w	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005064:	2b00      	cmp	r3, #0
 8005066:	d012      	beq.n	800508e <HAL_UART_IRQHandler+0x18a>
 8005068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800507c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8211 	beq.w	80054bc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00d      	beq.n	80050c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d005      	beq.n	80050e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04f      	beq.n	8005186 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fd97 	bl	8005c1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d141      	bne.n	800517e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005126:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800512a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800513e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d9      	bne.n	80050fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	2b00      	cmp	r3, #0
 800514c:	d013      	beq.n	8005176 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <HAL_UART_IRQHandler+0x29c>)
 8005154:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd fa26 	bl	80025ac <HAL_DMA_Abort_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00f      	b.n	8005196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f9b4 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00b      	b.n	8005196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9b0 	bl	80054e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e007      	b.n	8005196 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9ac 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005194:	e192      	b.n	80054bc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005196:	bf00      	nop
    return;
 8005198:	e190      	b.n	80054bc <HAL_UART_IRQHandler+0x5b8>
 800519a:	bf00      	nop
 800519c:	04000120 	.word	0x04000120
 80051a0:	08005ce3 	.word	0x08005ce3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	f040 814b 	bne.w	8005444 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8144 	beq.w	8005444 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 813d 	beq.w	8005444 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2210      	movs	r2, #16
 80051d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	f040 80b5 	bne.w	800534c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8164 	beq.w	80054c0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005202:	429a      	cmp	r2, r3
 8005204:	f080 815c 	bcs.w	80054c0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800520e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b20      	cmp	r3, #32
 800521a:	f000 8086 	beq.w	800532a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005232:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800524c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005254:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1da      	bne.n	800521e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3308      	adds	r3, #8
 8005288:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800528c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005290:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800529e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e1      	bne.n	8005268 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3308      	adds	r3, #8
 80052aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e3      	bne.n	80052a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fa:	f023 0310 	bic.w	r3, r3, #16
 80052fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800530c:	65bb      	str	r3, [r7, #88]	; 0x58
 800530e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800531a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e4      	bne.n	80052ea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005324:	4618      	mov	r0, r3
 8005326:	f7fd f908 	bl	800253a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800533c:	b29b      	uxth	r3, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	b29b      	uxth	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f8d7 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800534a:	e0b9      	b.n	80054c0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005358:	b29b      	uxth	r3, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80ab 	beq.w	80054c4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800536e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80a6 	beq.w	80054c4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800538c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800539a:	647b      	str	r3, [r7, #68]	; 0x44
 800539c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e4      	bne.n	8005378 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3308      	adds	r3, #8
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	623b      	str	r3, [r7, #32]
   return(result);
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3308      	adds	r3, #8
 80053ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053d2:	633a      	str	r2, [r7, #48]	; 0x30
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	60fb      	str	r3, [r7, #12]
   return(result);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0310 	bic.w	r3, r3, #16
 800540e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	617b      	str	r3, [r7, #20]
   return(result);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e4      	bne.n	80053fa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f85b 	bl	80054f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005442:	e03f      	b.n	80054c4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <HAL_UART_IRQHandler+0x56a>
 8005450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fc7b 	bl	8005d62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800546c:	e02d      	b.n	80054ca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01c      	beq.n	80054c8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
    }
    return;
 8005496:	e017      	b.n	80054c8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d012      	beq.n	80054ca <HAL_UART_IRQHandler+0x5c6>
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fc2c 	bl	8005d0e <UART_EndTransmit_IT>
    return;
 80054b6:	e008      	b.n	80054ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80054b8:	bf00      	nop
 80054ba:	e006      	b.n	80054ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80054bc:	bf00      	nop
 80054be:	e004      	b.n	80054ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80054c0:	bf00      	nop
 80054c2:	e002      	b.n	80054ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80054c8:	bf00      	nop
  }

}
 80054ca:	37e8      	adds	r7, #232	; 0xe8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800553e:	f023 030c 	bic.w	r3, r3, #12
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	6979      	ldr	r1, [r7, #20]
 8005548:	430b      	orrs	r3, r1
 800554a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4aa7      	ldr	r2, [pc, #668]	; (8005828 <UART_SetConfig+0x318>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d120      	bne.n	80055d2 <UART_SetConfig+0xc2>
 8005590:	4ba6      	ldr	r3, [pc, #664]	; (800582c <UART_SetConfig+0x31c>)
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b03      	cmp	r3, #3
 800559a:	d817      	bhi.n	80055cc <UART_SetConfig+0xbc>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <UART_SetConfig+0x94>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055c1 	.word	0x080055c1
 80055ac:	080055c7 	.word	0x080055c7
 80055b0:	080055bb 	.word	0x080055bb
 80055b4:	2301      	movs	r3, #1
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e0b5      	b.n	8005726 <UART_SetConfig+0x216>
 80055ba:	2302      	movs	r3, #2
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e0b2      	b.n	8005726 <UART_SetConfig+0x216>
 80055c0:	2304      	movs	r3, #4
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e0af      	b.n	8005726 <UART_SetConfig+0x216>
 80055c6:	2308      	movs	r3, #8
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e0ac      	b.n	8005726 <UART_SetConfig+0x216>
 80055cc:	2310      	movs	r3, #16
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e0a9      	b.n	8005726 <UART_SetConfig+0x216>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a96      	ldr	r2, [pc, #600]	; (8005830 <UART_SetConfig+0x320>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d124      	bne.n	8005626 <UART_SetConfig+0x116>
 80055dc:	4b93      	ldr	r3, [pc, #588]	; (800582c <UART_SetConfig+0x31c>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055e8:	d011      	beq.n	800560e <UART_SetConfig+0xfe>
 80055ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ee:	d817      	bhi.n	8005620 <UART_SetConfig+0x110>
 80055f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f4:	d011      	beq.n	800561a <UART_SetConfig+0x10a>
 80055f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fa:	d811      	bhi.n	8005620 <UART_SetConfig+0x110>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <UART_SetConfig+0xf8>
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d006      	beq.n	8005614 <UART_SetConfig+0x104>
 8005606:	e00b      	b.n	8005620 <UART_SetConfig+0x110>
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e08b      	b.n	8005726 <UART_SetConfig+0x216>
 800560e:	2302      	movs	r3, #2
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e088      	b.n	8005726 <UART_SetConfig+0x216>
 8005614:	2304      	movs	r3, #4
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e085      	b.n	8005726 <UART_SetConfig+0x216>
 800561a:	2308      	movs	r3, #8
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e082      	b.n	8005726 <UART_SetConfig+0x216>
 8005620:	2310      	movs	r3, #16
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e07f      	b.n	8005726 <UART_SetConfig+0x216>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a82      	ldr	r2, [pc, #520]	; (8005834 <UART_SetConfig+0x324>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d124      	bne.n	800567a <UART_SetConfig+0x16a>
 8005630:	4b7e      	ldr	r3, [pc, #504]	; (800582c <UART_SetConfig+0x31c>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005638:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800563c:	d011      	beq.n	8005662 <UART_SetConfig+0x152>
 800563e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005642:	d817      	bhi.n	8005674 <UART_SetConfig+0x164>
 8005644:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005648:	d011      	beq.n	800566e <UART_SetConfig+0x15e>
 800564a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800564e:	d811      	bhi.n	8005674 <UART_SetConfig+0x164>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <UART_SetConfig+0x14c>
 8005654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005658:	d006      	beq.n	8005668 <UART_SetConfig+0x158>
 800565a:	e00b      	b.n	8005674 <UART_SetConfig+0x164>
 800565c:	2300      	movs	r3, #0
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e061      	b.n	8005726 <UART_SetConfig+0x216>
 8005662:	2302      	movs	r3, #2
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e05e      	b.n	8005726 <UART_SetConfig+0x216>
 8005668:	2304      	movs	r3, #4
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e05b      	b.n	8005726 <UART_SetConfig+0x216>
 800566e:	2308      	movs	r3, #8
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e058      	b.n	8005726 <UART_SetConfig+0x216>
 8005674:	2310      	movs	r3, #16
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e055      	b.n	8005726 <UART_SetConfig+0x216>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6e      	ldr	r2, [pc, #440]	; (8005838 <UART_SetConfig+0x328>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d124      	bne.n	80056ce <UART_SetConfig+0x1be>
 8005684:	4b69      	ldr	r3, [pc, #420]	; (800582c <UART_SetConfig+0x31c>)
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800568c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005690:	d011      	beq.n	80056b6 <UART_SetConfig+0x1a6>
 8005692:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005696:	d817      	bhi.n	80056c8 <UART_SetConfig+0x1b8>
 8005698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569c:	d011      	beq.n	80056c2 <UART_SetConfig+0x1b2>
 800569e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a2:	d811      	bhi.n	80056c8 <UART_SetConfig+0x1b8>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <UART_SetConfig+0x1a0>
 80056a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ac:	d006      	beq.n	80056bc <UART_SetConfig+0x1ac>
 80056ae:	e00b      	b.n	80056c8 <UART_SetConfig+0x1b8>
 80056b0:	2300      	movs	r3, #0
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e037      	b.n	8005726 <UART_SetConfig+0x216>
 80056b6:	2302      	movs	r3, #2
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e034      	b.n	8005726 <UART_SetConfig+0x216>
 80056bc:	2304      	movs	r3, #4
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e031      	b.n	8005726 <UART_SetConfig+0x216>
 80056c2:	2308      	movs	r3, #8
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e02e      	b.n	8005726 <UART_SetConfig+0x216>
 80056c8:	2310      	movs	r3, #16
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e02b      	b.n	8005726 <UART_SetConfig+0x216>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a5a      	ldr	r2, [pc, #360]	; (800583c <UART_SetConfig+0x32c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d124      	bne.n	8005722 <UART_SetConfig+0x212>
 80056d8:	4b54      	ldr	r3, [pc, #336]	; (800582c <UART_SetConfig+0x31c>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80056e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056e4:	d011      	beq.n	800570a <UART_SetConfig+0x1fa>
 80056e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056ea:	d817      	bhi.n	800571c <UART_SetConfig+0x20c>
 80056ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f0:	d011      	beq.n	8005716 <UART_SetConfig+0x206>
 80056f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056f6:	d811      	bhi.n	800571c <UART_SetConfig+0x20c>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <UART_SetConfig+0x1f4>
 80056fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005700:	d006      	beq.n	8005710 <UART_SetConfig+0x200>
 8005702:	e00b      	b.n	800571c <UART_SetConfig+0x20c>
 8005704:	2300      	movs	r3, #0
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e00d      	b.n	8005726 <UART_SetConfig+0x216>
 800570a:	2302      	movs	r3, #2
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e00a      	b.n	8005726 <UART_SetConfig+0x216>
 8005710:	2304      	movs	r3, #4
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e007      	b.n	8005726 <UART_SetConfig+0x216>
 8005716:	2308      	movs	r3, #8
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e004      	b.n	8005726 <UART_SetConfig+0x216>
 800571c:	2310      	movs	r3, #16
 800571e:	77fb      	strb	r3, [r7, #31]
 8005720:	e001      	b.n	8005726 <UART_SetConfig+0x216>
 8005722:	2310      	movs	r3, #16
 8005724:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572e:	d15b      	bne.n	80057e8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005730:	7ffb      	ldrb	r3, [r7, #31]
 8005732:	2b08      	cmp	r3, #8
 8005734:	d827      	bhi.n	8005786 <UART_SetConfig+0x276>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x22c>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	08005787 	.word	0x08005787
 800574c:	08005777 	.word	0x08005777
 8005750:	08005787 	.word	0x08005787
 8005754:	08005787 	.word	0x08005787
 8005758:	08005787 	.word	0x08005787
 800575c:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005760:	f7fe fd4c 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e013      	b.n	8005790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7fe fd6a 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 800576c:	61b8      	str	r0, [r7, #24]
        break;
 800576e:	e00f      	b.n	8005790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b33      	ldr	r3, [pc, #204]	; (8005840 <UART_SetConfig+0x330>)
 8005772:	61bb      	str	r3, [r7, #24]
        break;
 8005774:	e00c      	b.n	8005790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7fe fccb 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800577a:	61b8      	str	r0, [r7, #24]
        break;
 800577c:	e008      	b.n	8005790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005782:	61bb      	str	r3, [r7, #24]
        break;
 8005784:	e004      	b.n	8005790 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	77bb      	strb	r3, [r7, #30]
        break;
 800578e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8082 	beq.w	800589c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	005a      	lsls	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	441a      	add	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b0f      	cmp	r3, #15
 80057b2:	d916      	bls.n	80057e2 <UART_SetConfig+0x2d2>
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ba:	d212      	bcs.n	80057e2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f023 030f 	bic.w	r3, r3, #15
 80057c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	89fb      	ldrh	r3, [r7, #14]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	89fa      	ldrh	r2, [r7, #14]
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	e05c      	b.n	800589c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	77bb      	strb	r3, [r7, #30]
 80057e6:	e059      	b.n	800589c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e8:	7ffb      	ldrb	r3, [r7, #31]
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d835      	bhi.n	800585a <UART_SetConfig+0x34a>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x2e4>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005821 	.word	0x08005821
 80057fc:	08005845 	.word	0x08005845
 8005800:	0800585b 	.word	0x0800585b
 8005804:	0800584b 	.word	0x0800584b
 8005808:	0800585b 	.word	0x0800585b
 800580c:	0800585b 	.word	0x0800585b
 8005810:	0800585b 	.word	0x0800585b
 8005814:	08005853 	.word	0x08005853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005818:	f7fe fcf0 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 800581c:	61b8      	str	r0, [r7, #24]
        break;
 800581e:	e021      	b.n	8005864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fe fd0e 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005824:	61b8      	str	r0, [r7, #24]
        break;
 8005826:	e01d      	b.n	8005864 <UART_SetConfig+0x354>
 8005828:	40013800 	.word	0x40013800
 800582c:	40021000 	.word	0x40021000
 8005830:	40004400 	.word	0x40004400
 8005834:	40004800 	.word	0x40004800
 8005838:	40004c00 	.word	0x40004c00
 800583c:	40005000 	.word	0x40005000
 8005840:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <UART_SetConfig+0x3a4>)
 8005846:	61bb      	str	r3, [r7, #24]
        break;
 8005848:	e00c      	b.n	8005864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584a:	f7fe fc61 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 800584e:	61b8      	str	r0, [r7, #24]
        break;
 8005850:	e008      	b.n	8005864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005856:	61bb      	str	r3, [r7, #24]
        break;
 8005858:	e004      	b.n	8005864 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	77bb      	strb	r3, [r7, #30]
        break;
 8005862:	bf00      	nop
    }

    if (pclk != 0U)
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	085a      	lsrs	r2, r3, #1
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	441a      	add	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	fbb2 f3f3 	udiv	r3, r2, r3
 800587c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b0f      	cmp	r3, #15
 8005882:	d909      	bls.n	8005898 <UART_SetConfig+0x388>
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588a:	d205      	bcs.n	8005898 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	b29a      	uxth	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60da      	str	r2, [r3, #12]
 8005896:	e001      	b.n	800589c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	007a1200 	.word	0x007a1200

080058b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01a      	beq.n	80059ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b6:	d10a      	bne.n	80059ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b098      	sub	sp, #96	; 0x60
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a0c:	f7fc fc54 	bl	80022b8 <HAL_GetTick>
 8005a10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d12e      	bne.n	8005a7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f88c 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d021      	beq.n	8005a7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e6      	bne.n	8005a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e062      	b.n	8005b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d149      	bne.n	8005b20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	2200      	movs	r2, #0
 8005a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f856 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d03c      	beq.n	8005b20 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e6      	bne.n	8005aa6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af8:	61fa      	str	r2, [r7, #28]
 8005afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	617b      	str	r3, [r7, #20]
   return(result);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e5      	bne.n	8005ad8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e011      	b.n	8005b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3758      	adds	r7, #88	; 0x58
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5c:	e049      	b.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d045      	beq.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b66:	f7fc fba7 	bl	80022b8 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e048      	b.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d031      	beq.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d110      	bne.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f838 	bl	8005c1a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2208      	movs	r2, #8
 8005bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e029      	b.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bcc:	d111      	bne.n	8005bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f81e 	bl	8005c1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e00f      	b.n	8005c12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	bf0c      	ite	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	2300      	movne	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d0a6      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b095      	sub	sp, #84	; 0x54
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c40:	643b      	str	r3, [r7, #64]	; 0x40
 8005c42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e6      	bne.n	8005c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3308      	adds	r3, #8
 8005c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f023 0301 	bic.w	r3, r3, #1
 8005c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3308      	adds	r3, #8
 8005c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e5      	bne.n	8005c54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d118      	bne.n	8005cc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f023 0310 	bic.w	r3, r3, #16
 8005ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	613b      	str	r3, [r7, #16]
   return(result);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e6      	bne.n	8005c90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cd6:	bf00      	nop
 8005cd8:	3754      	adds	r7, #84	; 0x54
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff fbef 	bl	80054e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b088      	sub	sp, #32
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff fbbb 	bl	80054d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5a:	bf00      	nop
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d7e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	4013      	ands	r3, r2
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005dac:	b084      	sub	sp, #16
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	f107 0014 	add.w	r0, r7, #20
 8005dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	b004      	add	sp, #16
 8005dec:	4770      	bx	lr
	...

08005df0 <__errno>:
 8005df0:	4b01      	ldr	r3, [pc, #4]	; (8005df8 <__errno+0x8>)
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	2000006c 	.word	0x2000006c

08005dfc <__libc_init_array>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4d0d      	ldr	r5, [pc, #52]	; (8005e34 <__libc_init_array+0x38>)
 8005e00:	4c0d      	ldr	r4, [pc, #52]	; (8005e38 <__libc_init_array+0x3c>)
 8005e02:	1b64      	subs	r4, r4, r5
 8005e04:	10a4      	asrs	r4, r4, #2
 8005e06:	2600      	movs	r6, #0
 8005e08:	42a6      	cmp	r6, r4
 8005e0a:	d109      	bne.n	8005e20 <__libc_init_array+0x24>
 8005e0c:	4d0b      	ldr	r5, [pc, #44]	; (8005e3c <__libc_init_array+0x40>)
 8005e0e:	4c0c      	ldr	r4, [pc, #48]	; (8005e40 <__libc_init_array+0x44>)
 8005e10:	f001 fa96 	bl	8007340 <_init>
 8005e14:	1b64      	subs	r4, r4, r5
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	2600      	movs	r6, #0
 8005e1a:	42a6      	cmp	r6, r4
 8005e1c:	d105      	bne.n	8005e2a <__libc_init_array+0x2e>
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e24:	4798      	blx	r3
 8005e26:	3601      	adds	r6, #1
 8005e28:	e7ee      	b.n	8005e08 <__libc_init_array+0xc>
 8005e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2e:	4798      	blx	r3
 8005e30:	3601      	adds	r6, #1
 8005e32:	e7f2      	b.n	8005e1a <__libc_init_array+0x1e>
 8005e34:	08007670 	.word	0x08007670
 8005e38:	08007670 	.word	0x08007670
 8005e3c:	08007670 	.word	0x08007670
 8005e40:	08007674 	.word	0x08007674

08005e44 <memset>:
 8005e44:	4402      	add	r2, r0
 8005e46:	4603      	mov	r3, r0
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d100      	bne.n	8005e4e <memset+0xa>
 8005e4c:	4770      	bx	lr
 8005e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e52:	e7f9      	b.n	8005e48 <memset+0x4>

08005e54 <srand>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <srand+0x44>)
 8005e58:	681d      	ldr	r5, [r3, #0]
 8005e5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	b9b3      	cbnz	r3, 8005e8e <srand+0x3a>
 8005e60:	2018      	movs	r0, #24
 8005e62:	f000 f8df 	bl	8006024 <malloc>
 8005e66:	4602      	mov	r2, r0
 8005e68:	63a8      	str	r0, [r5, #56]	; 0x38
 8005e6a:	b920      	cbnz	r0, 8005e76 <srand+0x22>
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <srand+0x48>)
 8005e6e:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <srand+0x4c>)
 8005e70:	2142      	movs	r1, #66	; 0x42
 8005e72:	f000 f895 	bl	8005fa0 <__assert_func>
 8005e76:	490b      	ldr	r1, [pc, #44]	; (8005ea4 <srand+0x50>)
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <srand+0x54>)
 8005e7a:	e9c0 1300 	strd	r1, r3, [r0]
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <srand+0x58>)
 8005e80:	6083      	str	r3, [r0, #8]
 8005e82:	230b      	movs	r3, #11
 8005e84:	8183      	strh	r3, [r0, #12]
 8005e86:	2100      	movs	r1, #0
 8005e88:	2001      	movs	r0, #1
 8005e8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005e8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005e90:	2200      	movs	r2, #0
 8005e92:	611c      	str	r4, [r3, #16]
 8005e94:	615a      	str	r2, [r3, #20]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	2000006c 	.word	0x2000006c
 8005e9c:	0800752c 	.word	0x0800752c
 8005ea0:	08007543 	.word	0x08007543
 8005ea4:	abcd330e 	.word	0xabcd330e
 8005ea8:	e66d1234 	.word	0xe66d1234
 8005eac:	0005deec 	.word	0x0005deec

08005eb0 <rand>:
 8005eb0:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <rand+0x5c>)
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	681c      	ldr	r4, [r3, #0]
 8005eb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eb8:	b9b3      	cbnz	r3, 8005ee8 <rand+0x38>
 8005eba:	2018      	movs	r0, #24
 8005ebc:	f000 f8b2 	bl	8006024 <malloc>
 8005ec0:	63a0      	str	r0, [r4, #56]	; 0x38
 8005ec2:	b928      	cbnz	r0, 8005ed0 <rand+0x20>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <rand+0x60>)
 8005ec8:	4812      	ldr	r0, [pc, #72]	; (8005f14 <rand+0x64>)
 8005eca:	214e      	movs	r1, #78	; 0x4e
 8005ecc:	f000 f868 	bl	8005fa0 <__assert_func>
 8005ed0:	4a11      	ldr	r2, [pc, #68]	; (8005f18 <rand+0x68>)
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <rand+0x6c>)
 8005ed4:	e9c0 2300 	strd	r2, r3, [r0]
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <rand+0x70>)
 8005eda:	6083      	str	r3, [r0, #8]
 8005edc:	230b      	movs	r3, #11
 8005ede:	8183      	strh	r3, [r0, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005ee8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005eea:	4a0e      	ldr	r2, [pc, #56]	; (8005f24 <rand+0x74>)
 8005eec:	6920      	ldr	r0, [r4, #16]
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	490d      	ldr	r1, [pc, #52]	; (8005f28 <rand+0x78>)
 8005ef2:	4342      	muls	r2, r0
 8005ef4:	fb01 2203 	mla	r2, r1, r3, r2
 8005ef8:	fba0 0101 	umull	r0, r1, r0, r1
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	eb42 0001 	adc.w	r0, r2, r1
 8005f02:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005f06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f0a:	bd10      	pop	{r4, pc}
 8005f0c:	2000006c 	.word	0x2000006c
 8005f10:	0800752c 	.word	0x0800752c
 8005f14:	08007543 	.word	0x08007543
 8005f18:	abcd330e 	.word	0xabcd330e
 8005f1c:	e66d1234 	.word	0xe66d1234
 8005f20:	0005deec 	.word	0x0005deec
 8005f24:	5851f42d 	.word	0x5851f42d
 8005f28:	4c957f2d 	.word	0x4c957f2d

08005f2c <siprintf>:
 8005f2c:	b40e      	push	{r1, r2, r3}
 8005f2e:	b500      	push	{lr}
 8005f30:	b09c      	sub	sp, #112	; 0x70
 8005f32:	ab1d      	add	r3, sp, #116	; 0x74
 8005f34:	9002      	str	r0, [sp, #8]
 8005f36:	9006      	str	r0, [sp, #24]
 8005f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f3c:	4809      	ldr	r0, [pc, #36]	; (8005f64 <siprintf+0x38>)
 8005f3e:	9107      	str	r1, [sp, #28]
 8005f40:	9104      	str	r1, [sp, #16]
 8005f42:	4909      	ldr	r1, [pc, #36]	; (8005f68 <siprintf+0x3c>)
 8005f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f48:	9105      	str	r1, [sp, #20]
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	a902      	add	r1, sp, #8
 8005f50:	f000 f9ac 	bl	80062ac <_svfiprintf_r>
 8005f54:	9b02      	ldr	r3, [sp, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	b01c      	add	sp, #112	; 0x70
 8005f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f60:	b003      	add	sp, #12
 8005f62:	4770      	bx	lr
 8005f64:	2000006c 	.word	0x2000006c
 8005f68:	ffff0208 	.word	0xffff0208

08005f6c <time>:
 8005f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <time+0x30>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	4669      	mov	r1, sp
 8005f74:	4604      	mov	r4, r0
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	f000 f842 	bl	8006000 <_gettimeofday_r>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	bfbe      	ittt	lt
 8005f80:	f04f 32ff 	movlt.w	r2, #4294967295
 8005f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f88:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f90:	b10c      	cbz	r4, 8005f96 <time+0x2a>
 8005f92:	e9c4 0100 	strd	r0, r1, [r4]
 8005f96:	b004      	add	sp, #16
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000006c 	.word	0x2000006c

08005fa0 <__assert_func>:
 8005fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fa2:	4614      	mov	r4, r2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <__assert_func+0x2c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4605      	mov	r5, r0
 8005fac:	68d8      	ldr	r0, [r3, #12]
 8005fae:	b14c      	cbz	r4, 8005fc4 <__assert_func+0x24>
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <__assert_func+0x30>)
 8005fb2:	9100      	str	r1, [sp, #0]
 8005fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fb8:	4906      	ldr	r1, [pc, #24]	; (8005fd4 <__assert_func+0x34>)
 8005fba:	462b      	mov	r3, r5
 8005fbc:	f000 f80e 	bl	8005fdc <fiprintf>
 8005fc0:	f000 fe32 	bl	8006c28 <abort>
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <__assert_func+0x38>)
 8005fc6:	461c      	mov	r4, r3
 8005fc8:	e7f3      	b.n	8005fb2 <__assert_func+0x12>
 8005fca:	bf00      	nop
 8005fcc:	2000006c 	.word	0x2000006c
 8005fd0:	0800759e 	.word	0x0800759e
 8005fd4:	080075ab 	.word	0x080075ab
 8005fd8:	080075d9 	.word	0x080075d9

08005fdc <fiprintf>:
 8005fdc:	b40e      	push	{r1, r2, r3}
 8005fde:	b503      	push	{r0, r1, lr}
 8005fe0:	4601      	mov	r1, r0
 8005fe2:	ab03      	add	r3, sp, #12
 8005fe4:	4805      	ldr	r0, [pc, #20]	; (8005ffc <fiprintf+0x20>)
 8005fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fea:	6800      	ldr	r0, [r0, #0]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	f000 fa87 	bl	8006500 <_vfiprintf_r>
 8005ff2:	b002      	add	sp, #8
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	b003      	add	sp, #12
 8005ffa:	4770      	bx	lr
 8005ffc:	2000006c 	.word	0x2000006c

08006000 <_gettimeofday_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d07      	ldr	r5, [pc, #28]	; (8006020 <_gettimeofday_r+0x20>)
 8006004:	2300      	movs	r3, #0
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	f001 f98f 	bl	8007330 <_gettimeofday>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	d102      	bne.n	800601c <_gettimeofday_r+0x1c>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	b103      	cbz	r3, 800601c <_gettimeofday_r+0x1c>
 800601a:	6023      	str	r3, [r4, #0]
 800601c:	bd38      	pop	{r3, r4, r5, pc}
 800601e:	bf00      	nop
 8006020:	20000698 	.word	0x20000698

08006024 <malloc>:
 8006024:	4b02      	ldr	r3, [pc, #8]	; (8006030 <malloc+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f000 b86f 	b.w	800610c <_malloc_r>
 800602e:	bf00      	nop
 8006030:	2000006c 	.word	0x2000006c

08006034 <_free_r>:
 8006034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006036:	2900      	cmp	r1, #0
 8006038:	d044      	beq.n	80060c4 <_free_r+0x90>
 800603a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800603e:	9001      	str	r0, [sp, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f1a1 0404 	sub.w	r4, r1, #4
 8006046:	bfb8      	it	lt
 8006048:	18e4      	addlt	r4, r4, r3
 800604a:	f001 f83d 	bl	80070c8 <__malloc_lock>
 800604e:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <_free_r+0x94>)
 8006050:	9801      	ldr	r0, [sp, #4]
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	b933      	cbnz	r3, 8006064 <_free_r+0x30>
 8006056:	6063      	str	r3, [r4, #4]
 8006058:	6014      	str	r4, [r2, #0]
 800605a:	b003      	add	sp, #12
 800605c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006060:	f001 b838 	b.w	80070d4 <__malloc_unlock>
 8006064:	42a3      	cmp	r3, r4
 8006066:	d908      	bls.n	800607a <_free_r+0x46>
 8006068:	6825      	ldr	r5, [r4, #0]
 800606a:	1961      	adds	r1, r4, r5
 800606c:	428b      	cmp	r3, r1
 800606e:	bf01      	itttt	eq
 8006070:	6819      	ldreq	r1, [r3, #0]
 8006072:	685b      	ldreq	r3, [r3, #4]
 8006074:	1949      	addeq	r1, r1, r5
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	e7ed      	b.n	8006056 <_free_r+0x22>
 800607a:	461a      	mov	r2, r3
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	b10b      	cbz	r3, 8006084 <_free_r+0x50>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d9fa      	bls.n	800607a <_free_r+0x46>
 8006084:	6811      	ldr	r1, [r2, #0]
 8006086:	1855      	adds	r5, r2, r1
 8006088:	42a5      	cmp	r5, r4
 800608a:	d10b      	bne.n	80060a4 <_free_r+0x70>
 800608c:	6824      	ldr	r4, [r4, #0]
 800608e:	4421      	add	r1, r4
 8006090:	1854      	adds	r4, r2, r1
 8006092:	42a3      	cmp	r3, r4
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	d1e0      	bne.n	800605a <_free_r+0x26>
 8006098:	681c      	ldr	r4, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	6053      	str	r3, [r2, #4]
 800609e:	4421      	add	r1, r4
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	e7da      	b.n	800605a <_free_r+0x26>
 80060a4:	d902      	bls.n	80060ac <_free_r+0x78>
 80060a6:	230c      	movs	r3, #12
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	e7d6      	b.n	800605a <_free_r+0x26>
 80060ac:	6825      	ldr	r5, [r4, #0]
 80060ae:	1961      	adds	r1, r4, r5
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf04      	itt	eq
 80060b4:	6819      	ldreq	r1, [r3, #0]
 80060b6:	685b      	ldreq	r3, [r3, #4]
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	bf04      	itt	eq
 80060bc:	1949      	addeq	r1, r1, r5
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	6054      	str	r4, [r2, #4]
 80060c2:	e7ca      	b.n	800605a <_free_r+0x26>
 80060c4:	b003      	add	sp, #12
 80060c6:	bd30      	pop	{r4, r5, pc}
 80060c8:	20000690 	.word	0x20000690

080060cc <sbrk_aligned>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	4e0e      	ldr	r6, [pc, #56]	; (8006108 <sbrk_aligned+0x3c>)
 80060d0:	460c      	mov	r4, r1
 80060d2:	6831      	ldr	r1, [r6, #0]
 80060d4:	4605      	mov	r5, r0
 80060d6:	b911      	cbnz	r1, 80060de <sbrk_aligned+0x12>
 80060d8:	f000 fcd6 	bl	8006a88 <_sbrk_r>
 80060dc:	6030      	str	r0, [r6, #0]
 80060de:	4621      	mov	r1, r4
 80060e0:	4628      	mov	r0, r5
 80060e2:	f000 fcd1 	bl	8006a88 <_sbrk_r>
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	d00a      	beq.n	8006100 <sbrk_aligned+0x34>
 80060ea:	1cc4      	adds	r4, r0, #3
 80060ec:	f024 0403 	bic.w	r4, r4, #3
 80060f0:	42a0      	cmp	r0, r4
 80060f2:	d007      	beq.n	8006104 <sbrk_aligned+0x38>
 80060f4:	1a21      	subs	r1, r4, r0
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 fcc6 	bl	8006a88 <_sbrk_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	d101      	bne.n	8006104 <sbrk_aligned+0x38>
 8006100:	f04f 34ff 	mov.w	r4, #4294967295
 8006104:	4620      	mov	r0, r4
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	20000694 	.word	0x20000694

0800610c <_malloc_r>:
 800610c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006110:	1ccd      	adds	r5, r1, #3
 8006112:	f025 0503 	bic.w	r5, r5, #3
 8006116:	3508      	adds	r5, #8
 8006118:	2d0c      	cmp	r5, #12
 800611a:	bf38      	it	cc
 800611c:	250c      	movcc	r5, #12
 800611e:	2d00      	cmp	r5, #0
 8006120:	4607      	mov	r7, r0
 8006122:	db01      	blt.n	8006128 <_malloc_r+0x1c>
 8006124:	42a9      	cmp	r1, r5
 8006126:	d905      	bls.n	8006134 <_malloc_r+0x28>
 8006128:	230c      	movs	r3, #12
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	2600      	movs	r6, #0
 800612e:	4630      	mov	r0, r6
 8006130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006134:	4e2e      	ldr	r6, [pc, #184]	; (80061f0 <_malloc_r+0xe4>)
 8006136:	f000 ffc7 	bl	80070c8 <__malloc_lock>
 800613a:	6833      	ldr	r3, [r6, #0]
 800613c:	461c      	mov	r4, r3
 800613e:	bb34      	cbnz	r4, 800618e <_malloc_r+0x82>
 8006140:	4629      	mov	r1, r5
 8006142:	4638      	mov	r0, r7
 8006144:	f7ff ffc2 	bl	80060cc <sbrk_aligned>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	4604      	mov	r4, r0
 800614c:	d14d      	bne.n	80061ea <_malloc_r+0xde>
 800614e:	6834      	ldr	r4, [r6, #0]
 8006150:	4626      	mov	r6, r4
 8006152:	2e00      	cmp	r6, #0
 8006154:	d140      	bne.n	80061d8 <_malloc_r+0xcc>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	4631      	mov	r1, r6
 800615a:	4638      	mov	r0, r7
 800615c:	eb04 0803 	add.w	r8, r4, r3
 8006160:	f000 fc92 	bl	8006a88 <_sbrk_r>
 8006164:	4580      	cmp	r8, r0
 8006166:	d13a      	bne.n	80061de <_malloc_r+0xd2>
 8006168:	6821      	ldr	r1, [r4, #0]
 800616a:	3503      	adds	r5, #3
 800616c:	1a6d      	subs	r5, r5, r1
 800616e:	f025 0503 	bic.w	r5, r5, #3
 8006172:	3508      	adds	r5, #8
 8006174:	2d0c      	cmp	r5, #12
 8006176:	bf38      	it	cc
 8006178:	250c      	movcc	r5, #12
 800617a:	4629      	mov	r1, r5
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff ffa5 	bl	80060cc <sbrk_aligned>
 8006182:	3001      	adds	r0, #1
 8006184:	d02b      	beq.n	80061de <_malloc_r+0xd2>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	442b      	add	r3, r5
 800618a:	6023      	str	r3, [r4, #0]
 800618c:	e00e      	b.n	80061ac <_malloc_r+0xa0>
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	1b52      	subs	r2, r2, r5
 8006192:	d41e      	bmi.n	80061d2 <_malloc_r+0xc6>
 8006194:	2a0b      	cmp	r2, #11
 8006196:	d916      	bls.n	80061c6 <_malloc_r+0xba>
 8006198:	1961      	adds	r1, r4, r5
 800619a:	42a3      	cmp	r3, r4
 800619c:	6025      	str	r5, [r4, #0]
 800619e:	bf18      	it	ne
 80061a0:	6059      	strne	r1, [r3, #4]
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	bf08      	it	eq
 80061a6:	6031      	streq	r1, [r6, #0]
 80061a8:	5162      	str	r2, [r4, r5]
 80061aa:	604b      	str	r3, [r1, #4]
 80061ac:	4638      	mov	r0, r7
 80061ae:	f104 060b 	add.w	r6, r4, #11
 80061b2:	f000 ff8f 	bl	80070d4 <__malloc_unlock>
 80061b6:	f026 0607 	bic.w	r6, r6, #7
 80061ba:	1d23      	adds	r3, r4, #4
 80061bc:	1af2      	subs	r2, r6, r3
 80061be:	d0b6      	beq.n	800612e <_malloc_r+0x22>
 80061c0:	1b9b      	subs	r3, r3, r6
 80061c2:	50a3      	str	r3, [r4, r2]
 80061c4:	e7b3      	b.n	800612e <_malloc_r+0x22>
 80061c6:	6862      	ldr	r2, [r4, #4]
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	bf0c      	ite	eq
 80061cc:	6032      	streq	r2, [r6, #0]
 80061ce:	605a      	strne	r2, [r3, #4]
 80061d0:	e7ec      	b.n	80061ac <_malloc_r+0xa0>
 80061d2:	4623      	mov	r3, r4
 80061d4:	6864      	ldr	r4, [r4, #4]
 80061d6:	e7b2      	b.n	800613e <_malloc_r+0x32>
 80061d8:	4634      	mov	r4, r6
 80061da:	6876      	ldr	r6, [r6, #4]
 80061dc:	e7b9      	b.n	8006152 <_malloc_r+0x46>
 80061de:	230c      	movs	r3, #12
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	4638      	mov	r0, r7
 80061e4:	f000 ff76 	bl	80070d4 <__malloc_unlock>
 80061e8:	e7a1      	b.n	800612e <_malloc_r+0x22>
 80061ea:	6025      	str	r5, [r4, #0]
 80061ec:	e7de      	b.n	80061ac <_malloc_r+0xa0>
 80061ee:	bf00      	nop
 80061f0:	20000690 	.word	0x20000690

080061f4 <__ssputs_r>:
 80061f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	688e      	ldr	r6, [r1, #8]
 80061fa:	429e      	cmp	r6, r3
 80061fc:	4682      	mov	sl, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	4690      	mov	r8, r2
 8006202:	461f      	mov	r7, r3
 8006204:	d838      	bhi.n	8006278 <__ssputs_r+0x84>
 8006206:	898a      	ldrh	r2, [r1, #12]
 8006208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800620c:	d032      	beq.n	8006274 <__ssputs_r+0x80>
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	6909      	ldr	r1, [r1, #16]
 8006212:	eba5 0901 	sub.w	r9, r5, r1
 8006216:	6965      	ldr	r5, [r4, #20]
 8006218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800621c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006220:	3301      	adds	r3, #1
 8006222:	444b      	add	r3, r9
 8006224:	106d      	asrs	r5, r5, #1
 8006226:	429d      	cmp	r5, r3
 8006228:	bf38      	it	cc
 800622a:	461d      	movcc	r5, r3
 800622c:	0553      	lsls	r3, r2, #21
 800622e:	d531      	bpl.n	8006294 <__ssputs_r+0xa0>
 8006230:	4629      	mov	r1, r5
 8006232:	f7ff ff6b 	bl	800610c <_malloc_r>
 8006236:	4606      	mov	r6, r0
 8006238:	b950      	cbnz	r0, 8006250 <__ssputs_r+0x5c>
 800623a:	230c      	movs	r3, #12
 800623c:	f8ca 3000 	str.w	r3, [sl]
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006250:	6921      	ldr	r1, [r4, #16]
 8006252:	464a      	mov	r2, r9
 8006254:	f000 ff10 	bl	8007078 <memcpy>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	6126      	str	r6, [r4, #16]
 8006266:	6165      	str	r5, [r4, #20]
 8006268:	444e      	add	r6, r9
 800626a:	eba5 0509 	sub.w	r5, r5, r9
 800626e:	6026      	str	r6, [r4, #0]
 8006270:	60a5      	str	r5, [r4, #8]
 8006272:	463e      	mov	r6, r7
 8006274:	42be      	cmp	r6, r7
 8006276:	d900      	bls.n	800627a <__ssputs_r+0x86>
 8006278:	463e      	mov	r6, r7
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	4632      	mov	r2, r6
 800627e:	4641      	mov	r1, r8
 8006280:	f000 ff08 	bl	8007094 <memmove>
 8006284:	68a3      	ldr	r3, [r4, #8]
 8006286:	1b9b      	subs	r3, r3, r6
 8006288:	60a3      	str	r3, [r4, #8]
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	4433      	add	r3, r6
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	2000      	movs	r0, #0
 8006292:	e7db      	b.n	800624c <__ssputs_r+0x58>
 8006294:	462a      	mov	r2, r5
 8006296:	f000 ff23 	bl	80070e0 <_realloc_r>
 800629a:	4606      	mov	r6, r0
 800629c:	2800      	cmp	r0, #0
 800629e:	d1e1      	bne.n	8006264 <__ssputs_r+0x70>
 80062a0:	6921      	ldr	r1, [r4, #16]
 80062a2:	4650      	mov	r0, sl
 80062a4:	f7ff fec6 	bl	8006034 <_free_r>
 80062a8:	e7c7      	b.n	800623a <__ssputs_r+0x46>
	...

080062ac <_svfiprintf_r>:
 80062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	4698      	mov	r8, r3
 80062b2:	898b      	ldrh	r3, [r1, #12]
 80062b4:	061b      	lsls	r3, r3, #24
 80062b6:	b09d      	sub	sp, #116	; 0x74
 80062b8:	4607      	mov	r7, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	4614      	mov	r4, r2
 80062be:	d50e      	bpl.n	80062de <_svfiprintf_r+0x32>
 80062c0:	690b      	ldr	r3, [r1, #16]
 80062c2:	b963      	cbnz	r3, 80062de <_svfiprintf_r+0x32>
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	f7ff ff21 	bl	800610c <_malloc_r>
 80062ca:	6028      	str	r0, [r5, #0]
 80062cc:	6128      	str	r0, [r5, #16]
 80062ce:	b920      	cbnz	r0, 80062da <_svfiprintf_r+0x2e>
 80062d0:	230c      	movs	r3, #12
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	e0d1      	b.n	800647e <_svfiprintf_r+0x1d2>
 80062da:	2340      	movs	r3, #64	; 0x40
 80062dc:	616b      	str	r3, [r5, #20]
 80062de:	2300      	movs	r3, #0
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	2320      	movs	r3, #32
 80062e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ec:	2330      	movs	r3, #48	; 0x30
 80062ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006498 <_svfiprintf_r+0x1ec>
 80062f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062f6:	f04f 0901 	mov.w	r9, #1
 80062fa:	4623      	mov	r3, r4
 80062fc:	469a      	mov	sl, r3
 80062fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006302:	b10a      	cbz	r2, 8006308 <_svfiprintf_r+0x5c>
 8006304:	2a25      	cmp	r2, #37	; 0x25
 8006306:	d1f9      	bne.n	80062fc <_svfiprintf_r+0x50>
 8006308:	ebba 0b04 	subs.w	fp, sl, r4
 800630c:	d00b      	beq.n	8006326 <_svfiprintf_r+0x7a>
 800630e:	465b      	mov	r3, fp
 8006310:	4622      	mov	r2, r4
 8006312:	4629      	mov	r1, r5
 8006314:	4638      	mov	r0, r7
 8006316:	f7ff ff6d 	bl	80061f4 <__ssputs_r>
 800631a:	3001      	adds	r0, #1
 800631c:	f000 80aa 	beq.w	8006474 <_svfiprintf_r+0x1c8>
 8006320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006322:	445a      	add	r2, fp
 8006324:	9209      	str	r2, [sp, #36]	; 0x24
 8006326:	f89a 3000 	ldrb.w	r3, [sl]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a2 	beq.w	8006474 <_svfiprintf_r+0x1c8>
 8006330:	2300      	movs	r3, #0
 8006332:	f04f 32ff 	mov.w	r2, #4294967295
 8006336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800633a:	f10a 0a01 	add.w	sl, sl, #1
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	9307      	str	r3, [sp, #28]
 8006342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006346:	931a      	str	r3, [sp, #104]	; 0x68
 8006348:	4654      	mov	r4, sl
 800634a:	2205      	movs	r2, #5
 800634c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006350:	4851      	ldr	r0, [pc, #324]	; (8006498 <_svfiprintf_r+0x1ec>)
 8006352:	f7f9 ff45 	bl	80001e0 <memchr>
 8006356:	9a04      	ldr	r2, [sp, #16]
 8006358:	b9d8      	cbnz	r0, 8006392 <_svfiprintf_r+0xe6>
 800635a:	06d0      	lsls	r0, r2, #27
 800635c:	bf44      	itt	mi
 800635e:	2320      	movmi	r3, #32
 8006360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006364:	0711      	lsls	r1, r2, #28
 8006366:	bf44      	itt	mi
 8006368:	232b      	movmi	r3, #43	; 0x2b
 800636a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800636e:	f89a 3000 	ldrb.w	r3, [sl]
 8006372:	2b2a      	cmp	r3, #42	; 0x2a
 8006374:	d015      	beq.n	80063a2 <_svfiprintf_r+0xf6>
 8006376:	9a07      	ldr	r2, [sp, #28]
 8006378:	4654      	mov	r4, sl
 800637a:	2000      	movs	r0, #0
 800637c:	f04f 0c0a 	mov.w	ip, #10
 8006380:	4621      	mov	r1, r4
 8006382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006386:	3b30      	subs	r3, #48	; 0x30
 8006388:	2b09      	cmp	r3, #9
 800638a:	d94e      	bls.n	800642a <_svfiprintf_r+0x17e>
 800638c:	b1b0      	cbz	r0, 80063bc <_svfiprintf_r+0x110>
 800638e:	9207      	str	r2, [sp, #28]
 8006390:	e014      	b.n	80063bc <_svfiprintf_r+0x110>
 8006392:	eba0 0308 	sub.w	r3, r0, r8
 8006396:	fa09 f303 	lsl.w	r3, r9, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	46a2      	mov	sl, r4
 80063a0:	e7d2      	b.n	8006348 <_svfiprintf_r+0x9c>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	9103      	str	r1, [sp, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfbb      	ittet	lt
 80063ae:	425b      	neglt	r3, r3
 80063b0:	f042 0202 	orrlt.w	r2, r2, #2
 80063b4:	9307      	strge	r3, [sp, #28]
 80063b6:	9307      	strlt	r3, [sp, #28]
 80063b8:	bfb8      	it	lt
 80063ba:	9204      	strlt	r2, [sp, #16]
 80063bc:	7823      	ldrb	r3, [r4, #0]
 80063be:	2b2e      	cmp	r3, #46	; 0x2e
 80063c0:	d10c      	bne.n	80063dc <_svfiprintf_r+0x130>
 80063c2:	7863      	ldrb	r3, [r4, #1]
 80063c4:	2b2a      	cmp	r3, #42	; 0x2a
 80063c6:	d135      	bne.n	8006434 <_svfiprintf_r+0x188>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	9203      	str	r2, [sp, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bfb8      	it	lt
 80063d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80063d8:	3402      	adds	r4, #2
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064a8 <_svfiprintf_r+0x1fc>
 80063e0:	7821      	ldrb	r1, [r4, #0]
 80063e2:	2203      	movs	r2, #3
 80063e4:	4650      	mov	r0, sl
 80063e6:	f7f9 fefb 	bl	80001e0 <memchr>
 80063ea:	b140      	cbz	r0, 80063fe <_svfiprintf_r+0x152>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	eba0 000a 	sub.w	r0, r0, sl
 80063f2:	fa03 f000 	lsl.w	r0, r3, r0
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	4303      	orrs	r3, r0
 80063fa:	3401      	adds	r4, #1
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006402:	4826      	ldr	r0, [pc, #152]	; (800649c <_svfiprintf_r+0x1f0>)
 8006404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006408:	2206      	movs	r2, #6
 800640a:	f7f9 fee9 	bl	80001e0 <memchr>
 800640e:	2800      	cmp	r0, #0
 8006410:	d038      	beq.n	8006484 <_svfiprintf_r+0x1d8>
 8006412:	4b23      	ldr	r3, [pc, #140]	; (80064a0 <_svfiprintf_r+0x1f4>)
 8006414:	bb1b      	cbnz	r3, 800645e <_svfiprintf_r+0x1b2>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	3307      	adds	r3, #7
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	3308      	adds	r3, #8
 8006420:	9303      	str	r3, [sp, #12]
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	4433      	add	r3, r6
 8006426:	9309      	str	r3, [sp, #36]	; 0x24
 8006428:	e767      	b.n	80062fa <_svfiprintf_r+0x4e>
 800642a:	fb0c 3202 	mla	r2, ip, r2, r3
 800642e:	460c      	mov	r4, r1
 8006430:	2001      	movs	r0, #1
 8006432:	e7a5      	b.n	8006380 <_svfiprintf_r+0xd4>
 8006434:	2300      	movs	r3, #0
 8006436:	3401      	adds	r4, #1
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	4619      	mov	r1, r3
 800643c:	f04f 0c0a 	mov.w	ip, #10
 8006440:	4620      	mov	r0, r4
 8006442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006446:	3a30      	subs	r2, #48	; 0x30
 8006448:	2a09      	cmp	r2, #9
 800644a:	d903      	bls.n	8006454 <_svfiprintf_r+0x1a8>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0c5      	beq.n	80063dc <_svfiprintf_r+0x130>
 8006450:	9105      	str	r1, [sp, #20]
 8006452:	e7c3      	b.n	80063dc <_svfiprintf_r+0x130>
 8006454:	fb0c 2101 	mla	r1, ip, r1, r2
 8006458:	4604      	mov	r4, r0
 800645a:	2301      	movs	r3, #1
 800645c:	e7f0      	b.n	8006440 <_svfiprintf_r+0x194>
 800645e:	ab03      	add	r3, sp, #12
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	462a      	mov	r2, r5
 8006464:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <_svfiprintf_r+0x1f8>)
 8006466:	a904      	add	r1, sp, #16
 8006468:	4638      	mov	r0, r7
 800646a:	f3af 8000 	nop.w
 800646e:	1c42      	adds	r2, r0, #1
 8006470:	4606      	mov	r6, r0
 8006472:	d1d6      	bne.n	8006422 <_svfiprintf_r+0x176>
 8006474:	89ab      	ldrh	r3, [r5, #12]
 8006476:	065b      	lsls	r3, r3, #25
 8006478:	f53f af2c 	bmi.w	80062d4 <_svfiprintf_r+0x28>
 800647c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800647e:	b01d      	add	sp, #116	; 0x74
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	462a      	mov	r2, r5
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <_svfiprintf_r+0x1f8>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4638      	mov	r0, r7
 8006490:	f000 f9d4 	bl	800683c <_printf_i>
 8006494:	e7eb      	b.n	800646e <_svfiprintf_r+0x1c2>
 8006496:	bf00      	nop
 8006498:	080075da 	.word	0x080075da
 800649c:	080075e4 	.word	0x080075e4
 80064a0:	00000000 	.word	0x00000000
 80064a4:	080061f5 	.word	0x080061f5
 80064a8:	080075e0 	.word	0x080075e0

080064ac <__sfputc_r>:
 80064ac:	6893      	ldr	r3, [r2, #8]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	b410      	push	{r4}
 80064b4:	6093      	str	r3, [r2, #8]
 80064b6:	da08      	bge.n	80064ca <__sfputc_r+0x1e>
 80064b8:	6994      	ldr	r4, [r2, #24]
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	db01      	blt.n	80064c2 <__sfputc_r+0x16>
 80064be:	290a      	cmp	r1, #10
 80064c0:	d103      	bne.n	80064ca <__sfputc_r+0x1e>
 80064c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c6:	f000 baef 	b.w	8006aa8 <__swbuf_r>
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	1c58      	adds	r0, r3, #1
 80064ce:	6010      	str	r0, [r2, #0]
 80064d0:	7019      	strb	r1, [r3, #0]
 80064d2:	4608      	mov	r0, r1
 80064d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d8:	4770      	bx	lr

080064da <__sfputs_r>:
 80064da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	4614      	mov	r4, r2
 80064e2:	18d5      	adds	r5, r2, r3
 80064e4:	42ac      	cmp	r4, r5
 80064e6:	d101      	bne.n	80064ec <__sfputs_r+0x12>
 80064e8:	2000      	movs	r0, #0
 80064ea:	e007      	b.n	80064fc <__sfputs_r+0x22>
 80064ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f0:	463a      	mov	r2, r7
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ffda 	bl	80064ac <__sfputc_r>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d1f3      	bne.n	80064e4 <__sfputs_r+0xa>
 80064fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006500 <_vfiprintf_r>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	460d      	mov	r5, r1
 8006506:	b09d      	sub	sp, #116	; 0x74
 8006508:	4614      	mov	r4, r2
 800650a:	4698      	mov	r8, r3
 800650c:	4606      	mov	r6, r0
 800650e:	b118      	cbz	r0, 8006518 <_vfiprintf_r+0x18>
 8006510:	6983      	ldr	r3, [r0, #24]
 8006512:	b90b      	cbnz	r3, 8006518 <_vfiprintf_r+0x18>
 8006514:	f000 fcaa 	bl	8006e6c <__sinit>
 8006518:	4b89      	ldr	r3, [pc, #548]	; (8006740 <_vfiprintf_r+0x240>)
 800651a:	429d      	cmp	r5, r3
 800651c:	d11b      	bne.n	8006556 <_vfiprintf_r+0x56>
 800651e:	6875      	ldr	r5, [r6, #4]
 8006520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006522:	07d9      	lsls	r1, r3, #31
 8006524:	d405      	bmi.n	8006532 <_vfiprintf_r+0x32>
 8006526:	89ab      	ldrh	r3, [r5, #12]
 8006528:	059a      	lsls	r2, r3, #22
 800652a:	d402      	bmi.n	8006532 <_vfiprintf_r+0x32>
 800652c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800652e:	f000 fd3b 	bl	8006fa8 <__retarget_lock_acquire_recursive>
 8006532:	89ab      	ldrh	r3, [r5, #12]
 8006534:	071b      	lsls	r3, r3, #28
 8006536:	d501      	bpl.n	800653c <_vfiprintf_r+0x3c>
 8006538:	692b      	ldr	r3, [r5, #16]
 800653a:	b9eb      	cbnz	r3, 8006578 <_vfiprintf_r+0x78>
 800653c:	4629      	mov	r1, r5
 800653e:	4630      	mov	r0, r6
 8006540:	f000 fb04 	bl	8006b4c <__swsetup_r>
 8006544:	b1c0      	cbz	r0, 8006578 <_vfiprintf_r+0x78>
 8006546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006548:	07dc      	lsls	r4, r3, #31
 800654a:	d50e      	bpl.n	800656a <_vfiprintf_r+0x6a>
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	b01d      	add	sp, #116	; 0x74
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	4b7b      	ldr	r3, [pc, #492]	; (8006744 <_vfiprintf_r+0x244>)
 8006558:	429d      	cmp	r5, r3
 800655a:	d101      	bne.n	8006560 <_vfiprintf_r+0x60>
 800655c:	68b5      	ldr	r5, [r6, #8]
 800655e:	e7df      	b.n	8006520 <_vfiprintf_r+0x20>
 8006560:	4b79      	ldr	r3, [pc, #484]	; (8006748 <_vfiprintf_r+0x248>)
 8006562:	429d      	cmp	r5, r3
 8006564:	bf08      	it	eq
 8006566:	68f5      	ldreq	r5, [r6, #12]
 8006568:	e7da      	b.n	8006520 <_vfiprintf_r+0x20>
 800656a:	89ab      	ldrh	r3, [r5, #12]
 800656c:	0598      	lsls	r0, r3, #22
 800656e:	d4ed      	bmi.n	800654c <_vfiprintf_r+0x4c>
 8006570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006572:	f000 fd1a 	bl	8006faa <__retarget_lock_release_recursive>
 8006576:	e7e9      	b.n	800654c <_vfiprintf_r+0x4c>
 8006578:	2300      	movs	r3, #0
 800657a:	9309      	str	r3, [sp, #36]	; 0x24
 800657c:	2320      	movs	r3, #32
 800657e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006582:	f8cd 800c 	str.w	r8, [sp, #12]
 8006586:	2330      	movs	r3, #48	; 0x30
 8006588:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800674c <_vfiprintf_r+0x24c>
 800658c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006590:	f04f 0901 	mov.w	r9, #1
 8006594:	4623      	mov	r3, r4
 8006596:	469a      	mov	sl, r3
 8006598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800659c:	b10a      	cbz	r2, 80065a2 <_vfiprintf_r+0xa2>
 800659e:	2a25      	cmp	r2, #37	; 0x25
 80065a0:	d1f9      	bne.n	8006596 <_vfiprintf_r+0x96>
 80065a2:	ebba 0b04 	subs.w	fp, sl, r4
 80065a6:	d00b      	beq.n	80065c0 <_vfiprintf_r+0xc0>
 80065a8:	465b      	mov	r3, fp
 80065aa:	4622      	mov	r2, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	4630      	mov	r0, r6
 80065b0:	f7ff ff93 	bl	80064da <__sfputs_r>
 80065b4:	3001      	adds	r0, #1
 80065b6:	f000 80aa 	beq.w	800670e <_vfiprintf_r+0x20e>
 80065ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065bc:	445a      	add	r2, fp
 80065be:	9209      	str	r2, [sp, #36]	; 0x24
 80065c0:	f89a 3000 	ldrb.w	r3, [sl]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80a2 	beq.w	800670e <_vfiprintf_r+0x20e>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f04f 32ff 	mov.w	r2, #4294967295
 80065d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065d4:	f10a 0a01 	add.w	sl, sl, #1
 80065d8:	9304      	str	r3, [sp, #16]
 80065da:	9307      	str	r3, [sp, #28]
 80065dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065e0:	931a      	str	r3, [sp, #104]	; 0x68
 80065e2:	4654      	mov	r4, sl
 80065e4:	2205      	movs	r2, #5
 80065e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ea:	4858      	ldr	r0, [pc, #352]	; (800674c <_vfiprintf_r+0x24c>)
 80065ec:	f7f9 fdf8 	bl	80001e0 <memchr>
 80065f0:	9a04      	ldr	r2, [sp, #16]
 80065f2:	b9d8      	cbnz	r0, 800662c <_vfiprintf_r+0x12c>
 80065f4:	06d1      	lsls	r1, r2, #27
 80065f6:	bf44      	itt	mi
 80065f8:	2320      	movmi	r3, #32
 80065fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065fe:	0713      	lsls	r3, r2, #28
 8006600:	bf44      	itt	mi
 8006602:	232b      	movmi	r3, #43	; 0x2b
 8006604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006608:	f89a 3000 	ldrb.w	r3, [sl]
 800660c:	2b2a      	cmp	r3, #42	; 0x2a
 800660e:	d015      	beq.n	800663c <_vfiprintf_r+0x13c>
 8006610:	9a07      	ldr	r2, [sp, #28]
 8006612:	4654      	mov	r4, sl
 8006614:	2000      	movs	r0, #0
 8006616:	f04f 0c0a 	mov.w	ip, #10
 800661a:	4621      	mov	r1, r4
 800661c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006620:	3b30      	subs	r3, #48	; 0x30
 8006622:	2b09      	cmp	r3, #9
 8006624:	d94e      	bls.n	80066c4 <_vfiprintf_r+0x1c4>
 8006626:	b1b0      	cbz	r0, 8006656 <_vfiprintf_r+0x156>
 8006628:	9207      	str	r2, [sp, #28]
 800662a:	e014      	b.n	8006656 <_vfiprintf_r+0x156>
 800662c:	eba0 0308 	sub.w	r3, r0, r8
 8006630:	fa09 f303 	lsl.w	r3, r9, r3
 8006634:	4313      	orrs	r3, r2
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	46a2      	mov	sl, r4
 800663a:	e7d2      	b.n	80065e2 <_vfiprintf_r+0xe2>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	1d19      	adds	r1, r3, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	9103      	str	r1, [sp, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbb      	ittet	lt
 8006648:	425b      	neglt	r3, r3
 800664a:	f042 0202 	orrlt.w	r2, r2, #2
 800664e:	9307      	strge	r3, [sp, #28]
 8006650:	9307      	strlt	r3, [sp, #28]
 8006652:	bfb8      	it	lt
 8006654:	9204      	strlt	r2, [sp, #16]
 8006656:	7823      	ldrb	r3, [r4, #0]
 8006658:	2b2e      	cmp	r3, #46	; 0x2e
 800665a:	d10c      	bne.n	8006676 <_vfiprintf_r+0x176>
 800665c:	7863      	ldrb	r3, [r4, #1]
 800665e:	2b2a      	cmp	r3, #42	; 0x2a
 8006660:	d135      	bne.n	80066ce <_vfiprintf_r+0x1ce>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	1d1a      	adds	r2, r3, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	9203      	str	r2, [sp, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	bfb8      	it	lt
 800666e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006672:	3402      	adds	r4, #2
 8006674:	9305      	str	r3, [sp, #20]
 8006676:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800675c <_vfiprintf_r+0x25c>
 800667a:	7821      	ldrb	r1, [r4, #0]
 800667c:	2203      	movs	r2, #3
 800667e:	4650      	mov	r0, sl
 8006680:	f7f9 fdae 	bl	80001e0 <memchr>
 8006684:	b140      	cbz	r0, 8006698 <_vfiprintf_r+0x198>
 8006686:	2340      	movs	r3, #64	; 0x40
 8006688:	eba0 000a 	sub.w	r0, r0, sl
 800668c:	fa03 f000 	lsl.w	r0, r3, r0
 8006690:	9b04      	ldr	r3, [sp, #16]
 8006692:	4303      	orrs	r3, r0
 8006694:	3401      	adds	r4, #1
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669c:	482c      	ldr	r0, [pc, #176]	; (8006750 <_vfiprintf_r+0x250>)
 800669e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066a2:	2206      	movs	r2, #6
 80066a4:	f7f9 fd9c 	bl	80001e0 <memchr>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d03f      	beq.n	800672c <_vfiprintf_r+0x22c>
 80066ac:	4b29      	ldr	r3, [pc, #164]	; (8006754 <_vfiprintf_r+0x254>)
 80066ae:	bb1b      	cbnz	r3, 80066f8 <_vfiprintf_r+0x1f8>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	3307      	adds	r3, #7
 80066b4:	f023 0307 	bic.w	r3, r3, #7
 80066b8:	3308      	adds	r3, #8
 80066ba:	9303      	str	r3, [sp, #12]
 80066bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066be:	443b      	add	r3, r7
 80066c0:	9309      	str	r3, [sp, #36]	; 0x24
 80066c2:	e767      	b.n	8006594 <_vfiprintf_r+0x94>
 80066c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80066c8:	460c      	mov	r4, r1
 80066ca:	2001      	movs	r0, #1
 80066cc:	e7a5      	b.n	800661a <_vfiprintf_r+0x11a>
 80066ce:	2300      	movs	r3, #0
 80066d0:	3401      	adds	r4, #1
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	4619      	mov	r1, r3
 80066d6:	f04f 0c0a 	mov.w	ip, #10
 80066da:	4620      	mov	r0, r4
 80066dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e0:	3a30      	subs	r2, #48	; 0x30
 80066e2:	2a09      	cmp	r2, #9
 80066e4:	d903      	bls.n	80066ee <_vfiprintf_r+0x1ee>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0c5      	beq.n	8006676 <_vfiprintf_r+0x176>
 80066ea:	9105      	str	r1, [sp, #20]
 80066ec:	e7c3      	b.n	8006676 <_vfiprintf_r+0x176>
 80066ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f2:	4604      	mov	r4, r0
 80066f4:	2301      	movs	r3, #1
 80066f6:	e7f0      	b.n	80066da <_vfiprintf_r+0x1da>
 80066f8:	ab03      	add	r3, sp, #12
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	462a      	mov	r2, r5
 80066fe:	4b16      	ldr	r3, [pc, #88]	; (8006758 <_vfiprintf_r+0x258>)
 8006700:	a904      	add	r1, sp, #16
 8006702:	4630      	mov	r0, r6
 8006704:	f3af 8000 	nop.w
 8006708:	4607      	mov	r7, r0
 800670a:	1c78      	adds	r0, r7, #1
 800670c:	d1d6      	bne.n	80066bc <_vfiprintf_r+0x1bc>
 800670e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006710:	07d9      	lsls	r1, r3, #31
 8006712:	d405      	bmi.n	8006720 <_vfiprintf_r+0x220>
 8006714:	89ab      	ldrh	r3, [r5, #12]
 8006716:	059a      	lsls	r2, r3, #22
 8006718:	d402      	bmi.n	8006720 <_vfiprintf_r+0x220>
 800671a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800671c:	f000 fc45 	bl	8006faa <__retarget_lock_release_recursive>
 8006720:	89ab      	ldrh	r3, [r5, #12]
 8006722:	065b      	lsls	r3, r3, #25
 8006724:	f53f af12 	bmi.w	800654c <_vfiprintf_r+0x4c>
 8006728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800672a:	e711      	b.n	8006550 <_vfiprintf_r+0x50>
 800672c:	ab03      	add	r3, sp, #12
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	462a      	mov	r2, r5
 8006732:	4b09      	ldr	r3, [pc, #36]	; (8006758 <_vfiprintf_r+0x258>)
 8006734:	a904      	add	r1, sp, #16
 8006736:	4630      	mov	r0, r6
 8006738:	f000 f880 	bl	800683c <_printf_i>
 800673c:	e7e4      	b.n	8006708 <_vfiprintf_r+0x208>
 800673e:	bf00      	nop
 8006740:	08007630 	.word	0x08007630
 8006744:	08007650 	.word	0x08007650
 8006748:	08007610 	.word	0x08007610
 800674c:	080075da 	.word	0x080075da
 8006750:	080075e4 	.word	0x080075e4
 8006754:	00000000 	.word	0x00000000
 8006758:	080064db 	.word	0x080064db
 800675c:	080075e0 	.word	0x080075e0

08006760 <_printf_common>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	4616      	mov	r6, r2
 8006766:	4699      	mov	r9, r3
 8006768:	688a      	ldr	r2, [r1, #8]
 800676a:	690b      	ldr	r3, [r1, #16]
 800676c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006770:	4293      	cmp	r3, r2
 8006772:	bfb8      	it	lt
 8006774:	4613      	movlt	r3, r2
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800677c:	4607      	mov	r7, r0
 800677e:	460c      	mov	r4, r1
 8006780:	b10a      	cbz	r2, 8006786 <_printf_common+0x26>
 8006782:	3301      	adds	r3, #1
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	0699      	lsls	r1, r3, #26
 800678a:	bf42      	ittt	mi
 800678c:	6833      	ldrmi	r3, [r6, #0]
 800678e:	3302      	addmi	r3, #2
 8006790:	6033      	strmi	r3, [r6, #0]
 8006792:	6825      	ldr	r5, [r4, #0]
 8006794:	f015 0506 	ands.w	r5, r5, #6
 8006798:	d106      	bne.n	80067a8 <_printf_common+0x48>
 800679a:	f104 0a19 	add.w	sl, r4, #25
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	6832      	ldr	r2, [r6, #0]
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dc26      	bgt.n	80067f6 <_printf_common+0x96>
 80067a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067ac:	1e13      	subs	r3, r2, #0
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	bf18      	it	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	0692      	lsls	r2, r2, #26
 80067b6:	d42b      	bmi.n	8006810 <_printf_common+0xb0>
 80067b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067bc:	4649      	mov	r1, r9
 80067be:	4638      	mov	r0, r7
 80067c0:	47c0      	blx	r8
 80067c2:	3001      	adds	r0, #1
 80067c4:	d01e      	beq.n	8006804 <_printf_common+0xa4>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	68e5      	ldr	r5, [r4, #12]
 80067ca:	6832      	ldr	r2, [r6, #0]
 80067cc:	f003 0306 	and.w	r3, r3, #6
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	bf08      	it	eq
 80067d4:	1aad      	subeq	r5, r5, r2
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	6922      	ldr	r2, [r4, #16]
 80067da:	bf0c      	ite	eq
 80067dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e0:	2500      	movne	r5, #0
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bfc4      	itt	gt
 80067e6:	1a9b      	subgt	r3, r3, r2
 80067e8:	18ed      	addgt	r5, r5, r3
 80067ea:	2600      	movs	r6, #0
 80067ec:	341a      	adds	r4, #26
 80067ee:	42b5      	cmp	r5, r6
 80067f0:	d11a      	bne.n	8006828 <_printf_common+0xc8>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e008      	b.n	8006808 <_printf_common+0xa8>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4652      	mov	r2, sl
 80067fa:	4649      	mov	r1, r9
 80067fc:	4638      	mov	r0, r7
 80067fe:	47c0      	blx	r8
 8006800:	3001      	adds	r0, #1
 8006802:	d103      	bne.n	800680c <_printf_common+0xac>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680c:	3501      	adds	r5, #1
 800680e:	e7c6      	b.n	800679e <_printf_common+0x3e>
 8006810:	18e1      	adds	r1, r4, r3
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	2030      	movs	r0, #48	; 0x30
 8006816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800681a:	4422      	add	r2, r4
 800681c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006824:	3302      	adds	r3, #2
 8006826:	e7c7      	b.n	80067b8 <_printf_common+0x58>
 8006828:	2301      	movs	r3, #1
 800682a:	4622      	mov	r2, r4
 800682c:	4649      	mov	r1, r9
 800682e:	4638      	mov	r0, r7
 8006830:	47c0      	blx	r8
 8006832:	3001      	adds	r0, #1
 8006834:	d0e6      	beq.n	8006804 <_printf_common+0xa4>
 8006836:	3601      	adds	r6, #1
 8006838:	e7d9      	b.n	80067ee <_printf_common+0x8e>
	...

0800683c <_printf_i>:
 800683c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	7e0f      	ldrb	r7, [r1, #24]
 8006842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006844:	2f78      	cmp	r7, #120	; 0x78
 8006846:	4691      	mov	r9, r2
 8006848:	4680      	mov	r8, r0
 800684a:	460c      	mov	r4, r1
 800684c:	469a      	mov	sl, r3
 800684e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006852:	d807      	bhi.n	8006864 <_printf_i+0x28>
 8006854:	2f62      	cmp	r7, #98	; 0x62
 8006856:	d80a      	bhi.n	800686e <_printf_i+0x32>
 8006858:	2f00      	cmp	r7, #0
 800685a:	f000 80d8 	beq.w	8006a0e <_printf_i+0x1d2>
 800685e:	2f58      	cmp	r7, #88	; 0x58
 8006860:	f000 80a3 	beq.w	80069aa <_printf_i+0x16e>
 8006864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800686c:	e03a      	b.n	80068e4 <_printf_i+0xa8>
 800686e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006872:	2b15      	cmp	r3, #21
 8006874:	d8f6      	bhi.n	8006864 <_printf_i+0x28>
 8006876:	a101      	add	r1, pc, #4	; (adr r1, 800687c <_printf_i+0x40>)
 8006878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068e9 	.word	0x080068e9
 8006884:	08006865 	.word	0x08006865
 8006888:	08006865 	.word	0x08006865
 800688c:	08006865 	.word	0x08006865
 8006890:	08006865 	.word	0x08006865
 8006894:	080068e9 	.word	0x080068e9
 8006898:	08006865 	.word	0x08006865
 800689c:	08006865 	.word	0x08006865
 80068a0:	08006865 	.word	0x08006865
 80068a4:	08006865 	.word	0x08006865
 80068a8:	080069f5 	.word	0x080069f5
 80068ac:	08006919 	.word	0x08006919
 80068b0:	080069d7 	.word	0x080069d7
 80068b4:	08006865 	.word	0x08006865
 80068b8:	08006865 	.word	0x08006865
 80068bc:	08006a17 	.word	0x08006a17
 80068c0:	08006865 	.word	0x08006865
 80068c4:	08006919 	.word	0x08006919
 80068c8:	08006865 	.word	0x08006865
 80068cc:	08006865 	.word	0x08006865
 80068d0:	080069df 	.word	0x080069df
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	602a      	str	r2, [r5, #0]
 80068dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0a3      	b.n	8006a30 <_printf_i+0x1f4>
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	6829      	ldr	r1, [r5, #0]
 80068ec:	0606      	lsls	r6, r0, #24
 80068ee:	f101 0304 	add.w	r3, r1, #4
 80068f2:	d50a      	bpl.n	800690a <_printf_i+0xce>
 80068f4:	680e      	ldr	r6, [r1, #0]
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	2e00      	cmp	r6, #0
 80068fa:	da03      	bge.n	8006904 <_printf_i+0xc8>
 80068fc:	232d      	movs	r3, #45	; 0x2d
 80068fe:	4276      	negs	r6, r6
 8006900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006904:	485e      	ldr	r0, [pc, #376]	; (8006a80 <_printf_i+0x244>)
 8006906:	230a      	movs	r3, #10
 8006908:	e019      	b.n	800693e <_printf_i+0x102>
 800690a:	680e      	ldr	r6, [r1, #0]
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006912:	bf18      	it	ne
 8006914:	b236      	sxthne	r6, r6
 8006916:	e7ef      	b.n	80068f8 <_printf_i+0xbc>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	6820      	ldr	r0, [r4, #0]
 800691c:	1d19      	adds	r1, r3, #4
 800691e:	6029      	str	r1, [r5, #0]
 8006920:	0601      	lsls	r1, r0, #24
 8006922:	d501      	bpl.n	8006928 <_printf_i+0xec>
 8006924:	681e      	ldr	r6, [r3, #0]
 8006926:	e002      	b.n	800692e <_printf_i+0xf2>
 8006928:	0646      	lsls	r6, r0, #25
 800692a:	d5fb      	bpl.n	8006924 <_printf_i+0xe8>
 800692c:	881e      	ldrh	r6, [r3, #0]
 800692e:	4854      	ldr	r0, [pc, #336]	; (8006a80 <_printf_i+0x244>)
 8006930:	2f6f      	cmp	r7, #111	; 0x6f
 8006932:	bf0c      	ite	eq
 8006934:	2308      	moveq	r3, #8
 8006936:	230a      	movne	r3, #10
 8006938:	2100      	movs	r1, #0
 800693a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800693e:	6865      	ldr	r5, [r4, #4]
 8006940:	60a5      	str	r5, [r4, #8]
 8006942:	2d00      	cmp	r5, #0
 8006944:	bfa2      	ittt	ge
 8006946:	6821      	ldrge	r1, [r4, #0]
 8006948:	f021 0104 	bicge.w	r1, r1, #4
 800694c:	6021      	strge	r1, [r4, #0]
 800694e:	b90e      	cbnz	r6, 8006954 <_printf_i+0x118>
 8006950:	2d00      	cmp	r5, #0
 8006952:	d04d      	beq.n	80069f0 <_printf_i+0x1b4>
 8006954:	4615      	mov	r5, r2
 8006956:	fbb6 f1f3 	udiv	r1, r6, r3
 800695a:	fb03 6711 	mls	r7, r3, r1, r6
 800695e:	5dc7      	ldrb	r7, [r0, r7]
 8006960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006964:	4637      	mov	r7, r6
 8006966:	42bb      	cmp	r3, r7
 8006968:	460e      	mov	r6, r1
 800696a:	d9f4      	bls.n	8006956 <_printf_i+0x11a>
 800696c:	2b08      	cmp	r3, #8
 800696e:	d10b      	bne.n	8006988 <_printf_i+0x14c>
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	07de      	lsls	r6, r3, #31
 8006974:	d508      	bpl.n	8006988 <_printf_i+0x14c>
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	6861      	ldr	r1, [r4, #4]
 800697a:	4299      	cmp	r1, r3
 800697c:	bfde      	ittt	le
 800697e:	2330      	movle	r3, #48	; 0x30
 8006980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006988:	1b52      	subs	r2, r2, r5
 800698a:	6122      	str	r2, [r4, #16]
 800698c:	f8cd a000 	str.w	sl, [sp]
 8006990:	464b      	mov	r3, r9
 8006992:	aa03      	add	r2, sp, #12
 8006994:	4621      	mov	r1, r4
 8006996:	4640      	mov	r0, r8
 8006998:	f7ff fee2 	bl	8006760 <_printf_common>
 800699c:	3001      	adds	r0, #1
 800699e:	d14c      	bne.n	8006a3a <_printf_i+0x1fe>
 80069a0:	f04f 30ff 	mov.w	r0, #4294967295
 80069a4:	b004      	add	sp, #16
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	4835      	ldr	r0, [pc, #212]	; (8006a80 <_printf_i+0x244>)
 80069ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069b0:	6829      	ldr	r1, [r5, #0]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80069b8:	6029      	str	r1, [r5, #0]
 80069ba:	061d      	lsls	r5, r3, #24
 80069bc:	d514      	bpl.n	80069e8 <_printf_i+0x1ac>
 80069be:	07df      	lsls	r7, r3, #31
 80069c0:	bf44      	itt	mi
 80069c2:	f043 0320 	orrmi.w	r3, r3, #32
 80069c6:	6023      	strmi	r3, [r4, #0]
 80069c8:	b91e      	cbnz	r6, 80069d2 <_printf_i+0x196>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	f023 0320 	bic.w	r3, r3, #32
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	2310      	movs	r3, #16
 80069d4:	e7b0      	b.n	8006938 <_printf_i+0xfc>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	f043 0320 	orr.w	r3, r3, #32
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	2378      	movs	r3, #120	; 0x78
 80069e0:	4828      	ldr	r0, [pc, #160]	; (8006a84 <_printf_i+0x248>)
 80069e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069e6:	e7e3      	b.n	80069b0 <_printf_i+0x174>
 80069e8:	0659      	lsls	r1, r3, #25
 80069ea:	bf48      	it	mi
 80069ec:	b2b6      	uxthmi	r6, r6
 80069ee:	e7e6      	b.n	80069be <_printf_i+0x182>
 80069f0:	4615      	mov	r5, r2
 80069f2:	e7bb      	b.n	800696c <_printf_i+0x130>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	6826      	ldr	r6, [r4, #0]
 80069f8:	6961      	ldr	r1, [r4, #20]
 80069fa:	1d18      	adds	r0, r3, #4
 80069fc:	6028      	str	r0, [r5, #0]
 80069fe:	0635      	lsls	r5, r6, #24
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	d501      	bpl.n	8006a08 <_printf_i+0x1cc>
 8006a04:	6019      	str	r1, [r3, #0]
 8006a06:	e002      	b.n	8006a0e <_printf_i+0x1d2>
 8006a08:	0670      	lsls	r0, r6, #25
 8006a0a:	d5fb      	bpl.n	8006a04 <_printf_i+0x1c8>
 8006a0c:	8019      	strh	r1, [r3, #0]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6123      	str	r3, [r4, #16]
 8006a12:	4615      	mov	r5, r2
 8006a14:	e7ba      	b.n	800698c <_printf_i+0x150>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	1d1a      	adds	r2, r3, #4
 8006a1a:	602a      	str	r2, [r5, #0]
 8006a1c:	681d      	ldr	r5, [r3, #0]
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	2100      	movs	r1, #0
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7f9 fbdc 	bl	80001e0 <memchr>
 8006a28:	b108      	cbz	r0, 8006a2e <_printf_i+0x1f2>
 8006a2a:	1b40      	subs	r0, r0, r5
 8006a2c:	6060      	str	r0, [r4, #4]
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	6123      	str	r3, [r4, #16]
 8006a32:	2300      	movs	r3, #0
 8006a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a38:	e7a8      	b.n	800698c <_printf_i+0x150>
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	462a      	mov	r2, r5
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4640      	mov	r0, r8
 8006a42:	47d0      	blx	sl
 8006a44:	3001      	adds	r0, #1
 8006a46:	d0ab      	beq.n	80069a0 <_printf_i+0x164>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	079b      	lsls	r3, r3, #30
 8006a4c:	d413      	bmi.n	8006a76 <_printf_i+0x23a>
 8006a4e:	68e0      	ldr	r0, [r4, #12]
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	4298      	cmp	r0, r3
 8006a54:	bfb8      	it	lt
 8006a56:	4618      	movlt	r0, r3
 8006a58:	e7a4      	b.n	80069a4 <_printf_i+0x168>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4640      	mov	r0, r8
 8006a62:	47d0      	blx	sl
 8006a64:	3001      	adds	r0, #1
 8006a66:	d09b      	beq.n	80069a0 <_printf_i+0x164>
 8006a68:	3501      	adds	r5, #1
 8006a6a:	68e3      	ldr	r3, [r4, #12]
 8006a6c:	9903      	ldr	r1, [sp, #12]
 8006a6e:	1a5b      	subs	r3, r3, r1
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	dcf2      	bgt.n	8006a5a <_printf_i+0x21e>
 8006a74:	e7eb      	b.n	8006a4e <_printf_i+0x212>
 8006a76:	2500      	movs	r5, #0
 8006a78:	f104 0619 	add.w	r6, r4, #25
 8006a7c:	e7f5      	b.n	8006a6a <_printf_i+0x22e>
 8006a7e:	bf00      	nop
 8006a80:	080075eb 	.word	0x080075eb
 8006a84:	080075fc 	.word	0x080075fc

08006a88 <_sbrk_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4d06      	ldr	r5, [pc, #24]	; (8006aa4 <_sbrk_r+0x1c>)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	f7fb fb44 	bl	8002120 <_sbrk>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_sbrk_r+0x1a>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_sbrk_r+0x1a>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	20000698 	.word	0x20000698

08006aa8 <__swbuf_r>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	460e      	mov	r6, r1
 8006aac:	4614      	mov	r4, r2
 8006aae:	4605      	mov	r5, r0
 8006ab0:	b118      	cbz	r0, 8006aba <__swbuf_r+0x12>
 8006ab2:	6983      	ldr	r3, [r0, #24]
 8006ab4:	b90b      	cbnz	r3, 8006aba <__swbuf_r+0x12>
 8006ab6:	f000 f9d9 	bl	8006e6c <__sinit>
 8006aba:	4b21      	ldr	r3, [pc, #132]	; (8006b40 <__swbuf_r+0x98>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d12b      	bne.n	8006b18 <__swbuf_r+0x70>
 8006ac0:	686c      	ldr	r4, [r5, #4]
 8006ac2:	69a3      	ldr	r3, [r4, #24]
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	071a      	lsls	r2, r3, #28
 8006aca:	d52f      	bpl.n	8006b2c <__swbuf_r+0x84>
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	b36b      	cbz	r3, 8006b2c <__swbuf_r+0x84>
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	1ac0      	subs	r0, r0, r3
 8006ad6:	6963      	ldr	r3, [r4, #20]
 8006ad8:	b2f6      	uxtb	r6, r6
 8006ada:	4283      	cmp	r3, r0
 8006adc:	4637      	mov	r7, r6
 8006ade:	dc04      	bgt.n	8006aea <__swbuf_r+0x42>
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 f92e 	bl	8006d44 <_fflush_r>
 8006ae8:	bb30      	cbnz	r0, 8006b38 <__swbuf_r+0x90>
 8006aea:	68a3      	ldr	r3, [r4, #8]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	60a3      	str	r3, [r4, #8]
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	701e      	strb	r6, [r3, #0]
 8006af8:	6963      	ldr	r3, [r4, #20]
 8006afa:	3001      	adds	r0, #1
 8006afc:	4283      	cmp	r3, r0
 8006afe:	d004      	beq.n	8006b0a <__swbuf_r+0x62>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	07db      	lsls	r3, r3, #31
 8006b04:	d506      	bpl.n	8006b14 <__swbuf_r+0x6c>
 8006b06:	2e0a      	cmp	r6, #10
 8006b08:	d104      	bne.n	8006b14 <__swbuf_r+0x6c>
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 f919 	bl	8006d44 <_fflush_r>
 8006b12:	b988      	cbnz	r0, 8006b38 <__swbuf_r+0x90>
 8006b14:	4638      	mov	r0, r7
 8006b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <__swbuf_r+0x9c>)
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d101      	bne.n	8006b22 <__swbuf_r+0x7a>
 8006b1e:	68ac      	ldr	r4, [r5, #8]
 8006b20:	e7cf      	b.n	8006ac2 <__swbuf_r+0x1a>
 8006b22:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <__swbuf_r+0xa0>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	bf08      	it	eq
 8006b28:	68ec      	ldreq	r4, [r5, #12]
 8006b2a:	e7ca      	b.n	8006ac2 <__swbuf_r+0x1a>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f80c 	bl	8006b4c <__swsetup_r>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d0cb      	beq.n	8006ad0 <__swbuf_r+0x28>
 8006b38:	f04f 37ff 	mov.w	r7, #4294967295
 8006b3c:	e7ea      	b.n	8006b14 <__swbuf_r+0x6c>
 8006b3e:	bf00      	nop
 8006b40:	08007630 	.word	0x08007630
 8006b44:	08007650 	.word	0x08007650
 8006b48:	08007610 	.word	0x08007610

08006b4c <__swsetup_r>:
 8006b4c:	4b32      	ldr	r3, [pc, #200]	; (8006c18 <__swsetup_r+0xcc>)
 8006b4e:	b570      	push	{r4, r5, r6, lr}
 8006b50:	681d      	ldr	r5, [r3, #0]
 8006b52:	4606      	mov	r6, r0
 8006b54:	460c      	mov	r4, r1
 8006b56:	b125      	cbz	r5, 8006b62 <__swsetup_r+0x16>
 8006b58:	69ab      	ldr	r3, [r5, #24]
 8006b5a:	b913      	cbnz	r3, 8006b62 <__swsetup_r+0x16>
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f000 f985 	bl	8006e6c <__sinit>
 8006b62:	4b2e      	ldr	r3, [pc, #184]	; (8006c1c <__swsetup_r+0xd0>)
 8006b64:	429c      	cmp	r4, r3
 8006b66:	d10f      	bne.n	8006b88 <__swsetup_r+0x3c>
 8006b68:	686c      	ldr	r4, [r5, #4]
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b70:	0719      	lsls	r1, r3, #28
 8006b72:	d42c      	bmi.n	8006bce <__swsetup_r+0x82>
 8006b74:	06dd      	lsls	r5, r3, #27
 8006b76:	d411      	bmi.n	8006b9c <__swsetup_r+0x50>
 8006b78:	2309      	movs	r3, #9
 8006b7a:	6033      	str	r3, [r6, #0]
 8006b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b80:	81a3      	strh	r3, [r4, #12]
 8006b82:	f04f 30ff 	mov.w	r0, #4294967295
 8006b86:	e03e      	b.n	8006c06 <__swsetup_r+0xba>
 8006b88:	4b25      	ldr	r3, [pc, #148]	; (8006c20 <__swsetup_r+0xd4>)
 8006b8a:	429c      	cmp	r4, r3
 8006b8c:	d101      	bne.n	8006b92 <__swsetup_r+0x46>
 8006b8e:	68ac      	ldr	r4, [r5, #8]
 8006b90:	e7eb      	b.n	8006b6a <__swsetup_r+0x1e>
 8006b92:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <__swsetup_r+0xd8>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	bf08      	it	eq
 8006b98:	68ec      	ldreq	r4, [r5, #12]
 8006b9a:	e7e6      	b.n	8006b6a <__swsetup_r+0x1e>
 8006b9c:	0758      	lsls	r0, r3, #29
 8006b9e:	d512      	bpl.n	8006bc6 <__swsetup_r+0x7a>
 8006ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba2:	b141      	cbz	r1, 8006bb6 <__swsetup_r+0x6a>
 8006ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	d002      	beq.n	8006bb2 <__swsetup_r+0x66>
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff fa41 	bl	8006034 <_free_r>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6063      	str	r3, [r4, #4]
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	f043 0308 	orr.w	r3, r3, #8
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	b94b      	cbnz	r3, 8006be6 <__swsetup_r+0x9a>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bdc:	d003      	beq.n	8006be6 <__swsetup_r+0x9a>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4630      	mov	r0, r6
 8006be2:	f000 fa09 	bl	8006ff8 <__smakebuf_r>
 8006be6:	89a0      	ldrh	r0, [r4, #12]
 8006be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bec:	f010 0301 	ands.w	r3, r0, #1
 8006bf0:	d00a      	beq.n	8006c08 <__swsetup_r+0xbc>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60a3      	str	r3, [r4, #8]
 8006bf6:	6963      	ldr	r3, [r4, #20]
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	61a3      	str	r3, [r4, #24]
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	b943      	cbnz	r3, 8006c12 <__swsetup_r+0xc6>
 8006c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c04:	d1ba      	bne.n	8006b7c <__swsetup_r+0x30>
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
 8006c08:	0781      	lsls	r1, r0, #30
 8006c0a:	bf58      	it	pl
 8006c0c:	6963      	ldrpl	r3, [r4, #20]
 8006c0e:	60a3      	str	r3, [r4, #8]
 8006c10:	e7f4      	b.n	8006bfc <__swsetup_r+0xb0>
 8006c12:	2000      	movs	r0, #0
 8006c14:	e7f7      	b.n	8006c06 <__swsetup_r+0xba>
 8006c16:	bf00      	nop
 8006c18:	2000006c 	.word	0x2000006c
 8006c1c:	08007630 	.word	0x08007630
 8006c20:	08007650 	.word	0x08007650
 8006c24:	08007610 	.word	0x08007610

08006c28 <abort>:
 8006c28:	b508      	push	{r3, lr}
 8006c2a:	2006      	movs	r0, #6
 8006c2c:	f000 fab0 	bl	8007190 <raise>
 8006c30:	2001      	movs	r0, #1
 8006c32:	f7fb f9fd 	bl	8002030 <_exit>
	...

08006c38 <__sflush_r>:
 8006c38:	898a      	ldrh	r2, [r1, #12]
 8006c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3e:	4605      	mov	r5, r0
 8006c40:	0710      	lsls	r0, r2, #28
 8006c42:	460c      	mov	r4, r1
 8006c44:	d458      	bmi.n	8006cf8 <__sflush_r+0xc0>
 8006c46:	684b      	ldr	r3, [r1, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc05      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dc02      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	d0f9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c64:	682f      	ldr	r7, [r5, #0]
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	d032      	beq.n	8006cd0 <__sflush_r+0x98>
 8006c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	075a      	lsls	r2, r3, #29
 8006c70:	d505      	bpl.n	8006c7e <__sflush_r+0x46>
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	1ac0      	subs	r0, r0, r3
 8006c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c78:	b10b      	cbz	r3, 8006c7e <__sflush_r+0x46>
 8006c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c7c:	1ac0      	subs	r0, r0, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4602      	mov	r2, r0
 8006c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c84:	6a21      	ldr	r1, [r4, #32]
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b0      	blx	r6
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	d106      	bne.n	8006c9e <__sflush_r+0x66>
 8006c90:	6829      	ldr	r1, [r5, #0]
 8006c92:	291d      	cmp	r1, #29
 8006c94:	d82c      	bhi.n	8006cf0 <__sflush_r+0xb8>
 8006c96:	4a2a      	ldr	r2, [pc, #168]	; (8006d40 <__sflush_r+0x108>)
 8006c98:	40ca      	lsrs	r2, r1
 8006c9a:	07d6      	lsls	r6, r2, #31
 8006c9c:	d528      	bpl.n	8006cf0 <__sflush_r+0xb8>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	6062      	str	r2, [r4, #4]
 8006ca2:	04d9      	lsls	r1, r3, #19
 8006ca4:	6922      	ldr	r2, [r4, #16]
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	d504      	bpl.n	8006cb4 <__sflush_r+0x7c>
 8006caa:	1c42      	adds	r2, r0, #1
 8006cac:	d101      	bne.n	8006cb2 <__sflush_r+0x7a>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	b903      	cbnz	r3, 8006cb4 <__sflush_r+0x7c>
 8006cb2:	6560      	str	r0, [r4, #84]	; 0x54
 8006cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb6:	602f      	str	r7, [r5, #0]
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d0ca      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d002      	beq.n	8006cca <__sflush_r+0x92>
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f7ff f9b5 	bl	8006034 <_free_r>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8006cce:	e7c1      	b.n	8006c54 <__sflush_r+0x1c>
 8006cd0:	6a21      	ldr	r1, [r4, #32]
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b0      	blx	r6
 8006cd8:	1c41      	adds	r1, r0, #1
 8006cda:	d1c7      	bne.n	8006c6c <__sflush_r+0x34>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c4      	beq.n	8006c6c <__sflush_r+0x34>
 8006ce2:	2b1d      	cmp	r3, #29
 8006ce4:	d001      	beq.n	8006cea <__sflush_r+0xb2>
 8006ce6:	2b16      	cmp	r3, #22
 8006ce8:	d101      	bne.n	8006cee <__sflush_r+0xb6>
 8006cea:	602f      	str	r7, [r5, #0]
 8006cec:	e7b1      	b.n	8006c52 <__sflush_r+0x1a>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	e7ad      	b.n	8006c54 <__sflush_r+0x1c>
 8006cf8:	690f      	ldr	r7, [r1, #16]
 8006cfa:	2f00      	cmp	r7, #0
 8006cfc:	d0a9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cfe:	0793      	lsls	r3, r2, #30
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	bf08      	it	eq
 8006d04:	694b      	ldreq	r3, [r1, #20]
 8006d06:	600f      	str	r7, [r1, #0]
 8006d08:	bf18      	it	ne
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	eba6 0807 	sub.w	r8, r6, r7
 8006d10:	608b      	str	r3, [r1, #8]
 8006d12:	f1b8 0f00 	cmp.w	r8, #0
 8006d16:	dd9c      	ble.n	8006c52 <__sflush_r+0x1a>
 8006d18:	6a21      	ldr	r1, [r4, #32]
 8006d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d1c:	4643      	mov	r3, r8
 8006d1e:	463a      	mov	r2, r7
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b0      	blx	r6
 8006d24:	2800      	cmp	r0, #0
 8006d26:	dc06      	bgt.n	8006d36 <__sflush_r+0xfe>
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	e78e      	b.n	8006c54 <__sflush_r+0x1c>
 8006d36:	4407      	add	r7, r0
 8006d38:	eba8 0800 	sub.w	r8, r8, r0
 8006d3c:	e7e9      	b.n	8006d12 <__sflush_r+0xda>
 8006d3e:	bf00      	nop
 8006d40:	20400001 	.word	0x20400001

08006d44 <_fflush_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b913      	cbnz	r3, 8006d54 <_fflush_r+0x10>
 8006d4e:	2500      	movs	r5, #0
 8006d50:	4628      	mov	r0, r5
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	b118      	cbz	r0, 8006d5e <_fflush_r+0x1a>
 8006d56:	6983      	ldr	r3, [r0, #24]
 8006d58:	b90b      	cbnz	r3, 8006d5e <_fflush_r+0x1a>
 8006d5a:	f000 f887 	bl	8006e6c <__sinit>
 8006d5e:	4b14      	ldr	r3, [pc, #80]	; (8006db0 <_fflush_r+0x6c>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d11b      	bne.n	8006d9c <_fflush_r+0x58>
 8006d64:	686c      	ldr	r4, [r5, #4]
 8006d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0ef      	beq.n	8006d4e <_fflush_r+0xa>
 8006d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d70:	07d0      	lsls	r0, r2, #31
 8006d72:	d404      	bmi.n	8006d7e <_fflush_r+0x3a>
 8006d74:	0599      	lsls	r1, r3, #22
 8006d76:	d402      	bmi.n	8006d7e <_fflush_r+0x3a>
 8006d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d7a:	f000 f915 	bl	8006fa8 <__retarget_lock_acquire_recursive>
 8006d7e:	4628      	mov	r0, r5
 8006d80:	4621      	mov	r1, r4
 8006d82:	f7ff ff59 	bl	8006c38 <__sflush_r>
 8006d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	d4e0      	bmi.n	8006d50 <_fflush_r+0xc>
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	059b      	lsls	r3, r3, #22
 8006d92:	d4dd      	bmi.n	8006d50 <_fflush_r+0xc>
 8006d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d96:	f000 f908 	bl	8006faa <__retarget_lock_release_recursive>
 8006d9a:	e7d9      	b.n	8006d50 <_fflush_r+0xc>
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <_fflush_r+0x70>)
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	d101      	bne.n	8006da6 <_fflush_r+0x62>
 8006da2:	68ac      	ldr	r4, [r5, #8]
 8006da4:	e7df      	b.n	8006d66 <_fflush_r+0x22>
 8006da6:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <_fflush_r+0x74>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	bf08      	it	eq
 8006dac:	68ec      	ldreq	r4, [r5, #12]
 8006dae:	e7da      	b.n	8006d66 <_fflush_r+0x22>
 8006db0:	08007630 	.word	0x08007630
 8006db4:	08007650 	.word	0x08007650
 8006db8:	08007610 	.word	0x08007610

08006dbc <std>:
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	b510      	push	{r4, lr}
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8006dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dca:	6083      	str	r3, [r0, #8]
 8006dcc:	8181      	strh	r1, [r0, #12]
 8006dce:	6643      	str	r3, [r0, #100]	; 0x64
 8006dd0:	81c2      	strh	r2, [r0, #14]
 8006dd2:	6183      	str	r3, [r0, #24]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	305c      	adds	r0, #92	; 0x5c
 8006dda:	f7ff f833 	bl	8005e44 <memset>
 8006dde:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <std+0x38>)
 8006de0:	6263      	str	r3, [r4, #36]	; 0x24
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <std+0x3c>)
 8006de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006de6:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <std+0x40>)
 8006de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <std+0x44>)
 8006dec:	6224      	str	r4, [r4, #32]
 8006dee:	6323      	str	r3, [r4, #48]	; 0x30
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	bf00      	nop
 8006df4:	080071c9 	.word	0x080071c9
 8006df8:	080071eb 	.word	0x080071eb
 8006dfc:	08007223 	.word	0x08007223
 8006e00:	08007247 	.word	0x08007247

08006e04 <_cleanup_r>:
 8006e04:	4901      	ldr	r1, [pc, #4]	; (8006e0c <_cleanup_r+0x8>)
 8006e06:	f000 b8af 	b.w	8006f68 <_fwalk_reent>
 8006e0a:	bf00      	nop
 8006e0c:	08006d45 	.word	0x08006d45

08006e10 <__sfmoreglue>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	2268      	movs	r2, #104	; 0x68
 8006e14:	1e4d      	subs	r5, r1, #1
 8006e16:	4355      	muls	r5, r2
 8006e18:	460e      	mov	r6, r1
 8006e1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e1e:	f7ff f975 	bl	800610c <_malloc_r>
 8006e22:	4604      	mov	r4, r0
 8006e24:	b140      	cbz	r0, 8006e38 <__sfmoreglue+0x28>
 8006e26:	2100      	movs	r1, #0
 8006e28:	e9c0 1600 	strd	r1, r6, [r0]
 8006e2c:	300c      	adds	r0, #12
 8006e2e:	60a0      	str	r0, [r4, #8]
 8006e30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e34:	f7ff f806 	bl	8005e44 <memset>
 8006e38:	4620      	mov	r0, r4
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}

08006e3c <__sfp_lock_acquire>:
 8006e3c:	4801      	ldr	r0, [pc, #4]	; (8006e44 <__sfp_lock_acquire+0x8>)
 8006e3e:	f000 b8b3 	b.w	8006fa8 <__retarget_lock_acquire_recursive>
 8006e42:	bf00      	nop
 8006e44:	2000069d 	.word	0x2000069d

08006e48 <__sfp_lock_release>:
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <__sfp_lock_release+0x8>)
 8006e4a:	f000 b8ae 	b.w	8006faa <__retarget_lock_release_recursive>
 8006e4e:	bf00      	nop
 8006e50:	2000069d 	.word	0x2000069d

08006e54 <__sinit_lock_acquire>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__sinit_lock_acquire+0x8>)
 8006e56:	f000 b8a7 	b.w	8006fa8 <__retarget_lock_acquire_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	2000069e 	.word	0x2000069e

08006e60 <__sinit_lock_release>:
 8006e60:	4801      	ldr	r0, [pc, #4]	; (8006e68 <__sinit_lock_release+0x8>)
 8006e62:	f000 b8a2 	b.w	8006faa <__retarget_lock_release_recursive>
 8006e66:	bf00      	nop
 8006e68:	2000069e 	.word	0x2000069e

08006e6c <__sinit>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	4604      	mov	r4, r0
 8006e70:	f7ff fff0 	bl	8006e54 <__sinit_lock_acquire>
 8006e74:	69a3      	ldr	r3, [r4, #24]
 8006e76:	b11b      	cbz	r3, 8006e80 <__sinit+0x14>
 8006e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7c:	f7ff bff0 	b.w	8006e60 <__sinit_lock_release>
 8006e80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e84:	6523      	str	r3, [r4, #80]	; 0x50
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <__sinit+0x68>)
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <__sinit+0x6c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	bf04      	itt	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	61a3      	streq	r3, [r4, #24]
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 f820 	bl	8006edc <__sfp>
 8006e9c:	6060      	str	r0, [r4, #4]
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 f81c 	bl	8006edc <__sfp>
 8006ea4:	60a0      	str	r0, [r4, #8]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 f818 	bl	8006edc <__sfp>
 8006eac:	2200      	movs	r2, #0
 8006eae:	60e0      	str	r0, [r4, #12]
 8006eb0:	2104      	movs	r1, #4
 8006eb2:	6860      	ldr	r0, [r4, #4]
 8006eb4:	f7ff ff82 	bl	8006dbc <std>
 8006eb8:	68a0      	ldr	r0, [r4, #8]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2109      	movs	r1, #9
 8006ebe:	f7ff ff7d 	bl	8006dbc <std>
 8006ec2:	68e0      	ldr	r0, [r4, #12]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	2112      	movs	r1, #18
 8006ec8:	f7ff ff78 	bl	8006dbc <std>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	61a3      	str	r3, [r4, #24]
 8006ed0:	e7d2      	b.n	8006e78 <__sinit+0xc>
 8006ed2:	bf00      	nop
 8006ed4:	08007528 	.word	0x08007528
 8006ed8:	08006e05 	.word	0x08006e05

08006edc <__sfp>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	4607      	mov	r7, r0
 8006ee0:	f7ff ffac 	bl	8006e3c <__sfp_lock_acquire>
 8006ee4:	4b1e      	ldr	r3, [pc, #120]	; (8006f60 <__sfp+0x84>)
 8006ee6:	681e      	ldr	r6, [r3, #0]
 8006ee8:	69b3      	ldr	r3, [r6, #24]
 8006eea:	b913      	cbnz	r3, 8006ef2 <__sfp+0x16>
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff ffbd 	bl	8006e6c <__sinit>
 8006ef2:	3648      	adds	r6, #72	; 0x48
 8006ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	d503      	bpl.n	8006f04 <__sfp+0x28>
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	b30b      	cbz	r3, 8006f44 <__sfp+0x68>
 8006f00:	6836      	ldr	r6, [r6, #0]
 8006f02:	e7f7      	b.n	8006ef4 <__sfp+0x18>
 8006f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f08:	b9d5      	cbnz	r5, 8006f40 <__sfp+0x64>
 8006f0a:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <__sfp+0x88>)
 8006f0c:	60e3      	str	r3, [r4, #12]
 8006f0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f12:	6665      	str	r5, [r4, #100]	; 0x64
 8006f14:	f000 f847 	bl	8006fa6 <__retarget_lock_init_recursive>
 8006f18:	f7ff ff96 	bl	8006e48 <__sfp_lock_release>
 8006f1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f24:	6025      	str	r5, [r4, #0]
 8006f26:	61a5      	str	r5, [r4, #24]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f30:	f7fe ff88 	bl	8005e44 <memset>
 8006f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f40:	3468      	adds	r4, #104	; 0x68
 8006f42:	e7d9      	b.n	8006ef8 <__sfp+0x1c>
 8006f44:	2104      	movs	r1, #4
 8006f46:	4638      	mov	r0, r7
 8006f48:	f7ff ff62 	bl	8006e10 <__sfmoreglue>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	6030      	str	r0, [r6, #0]
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d1d5      	bne.n	8006f00 <__sfp+0x24>
 8006f54:	f7ff ff78 	bl	8006e48 <__sfp_lock_release>
 8006f58:	230c      	movs	r3, #12
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	e7ee      	b.n	8006f3c <__sfp+0x60>
 8006f5e:	bf00      	nop
 8006f60:	08007528 	.word	0x08007528
 8006f64:	ffff0001 	.word	0xffff0001

08006f68 <_fwalk_reent>:
 8006f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f6c:	4606      	mov	r6, r0
 8006f6e:	4688      	mov	r8, r1
 8006f70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f74:	2700      	movs	r7, #0
 8006f76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f7a:	f1b9 0901 	subs.w	r9, r9, #1
 8006f7e:	d505      	bpl.n	8006f8c <_fwalk_reent+0x24>
 8006f80:	6824      	ldr	r4, [r4, #0]
 8006f82:	2c00      	cmp	r4, #0
 8006f84:	d1f7      	bne.n	8006f76 <_fwalk_reent+0xe>
 8006f86:	4638      	mov	r0, r7
 8006f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8c:	89ab      	ldrh	r3, [r5, #12]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d907      	bls.n	8006fa2 <_fwalk_reent+0x3a>
 8006f92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f96:	3301      	adds	r3, #1
 8006f98:	d003      	beq.n	8006fa2 <_fwalk_reent+0x3a>
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	47c0      	blx	r8
 8006fa0:	4307      	orrs	r7, r0
 8006fa2:	3568      	adds	r5, #104	; 0x68
 8006fa4:	e7e9      	b.n	8006f7a <_fwalk_reent+0x12>

08006fa6 <__retarget_lock_init_recursive>:
 8006fa6:	4770      	bx	lr

08006fa8 <__retarget_lock_acquire_recursive>:
 8006fa8:	4770      	bx	lr

08006faa <__retarget_lock_release_recursive>:
 8006faa:	4770      	bx	lr

08006fac <__swhatbuf_r>:
 8006fac:	b570      	push	{r4, r5, r6, lr}
 8006fae:	460e      	mov	r6, r1
 8006fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	b096      	sub	sp, #88	; 0x58
 8006fb8:	4614      	mov	r4, r2
 8006fba:	461d      	mov	r5, r3
 8006fbc:	da08      	bge.n	8006fd0 <__swhatbuf_r+0x24>
 8006fbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	061a      	lsls	r2, r3, #24
 8006fc8:	d410      	bmi.n	8006fec <__swhatbuf_r+0x40>
 8006fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fce:	e00e      	b.n	8006fee <__swhatbuf_r+0x42>
 8006fd0:	466a      	mov	r2, sp
 8006fd2:	f000 f95f 	bl	8007294 <_fstat_r>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	dbf1      	blt.n	8006fbe <__swhatbuf_r+0x12>
 8006fda:	9a01      	ldr	r2, [sp, #4]
 8006fdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fe0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fe4:	425a      	negs	r2, r3
 8006fe6:	415a      	adcs	r2, r3
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	e7ee      	b.n	8006fca <__swhatbuf_r+0x1e>
 8006fec:	2340      	movs	r3, #64	; 0x40
 8006fee:	2000      	movs	r0, #0
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	b016      	add	sp, #88	; 0x58
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ff8 <__smakebuf_r>:
 8006ff8:	898b      	ldrh	r3, [r1, #12]
 8006ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ffc:	079d      	lsls	r5, r3, #30
 8006ffe:	4606      	mov	r6, r0
 8007000:	460c      	mov	r4, r1
 8007002:	d507      	bpl.n	8007014 <__smakebuf_r+0x1c>
 8007004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	6123      	str	r3, [r4, #16]
 800700c:	2301      	movs	r3, #1
 800700e:	6163      	str	r3, [r4, #20]
 8007010:	b002      	add	sp, #8
 8007012:	bd70      	pop	{r4, r5, r6, pc}
 8007014:	ab01      	add	r3, sp, #4
 8007016:	466a      	mov	r2, sp
 8007018:	f7ff ffc8 	bl	8006fac <__swhatbuf_r>
 800701c:	9900      	ldr	r1, [sp, #0]
 800701e:	4605      	mov	r5, r0
 8007020:	4630      	mov	r0, r6
 8007022:	f7ff f873 	bl	800610c <_malloc_r>
 8007026:	b948      	cbnz	r0, 800703c <__smakebuf_r+0x44>
 8007028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800702c:	059a      	lsls	r2, r3, #22
 800702e:	d4ef      	bmi.n	8007010 <__smakebuf_r+0x18>
 8007030:	f023 0303 	bic.w	r3, r3, #3
 8007034:	f043 0302 	orr.w	r3, r3, #2
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	e7e3      	b.n	8007004 <__smakebuf_r+0xc>
 800703c:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <__smakebuf_r+0x7c>)
 800703e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	6020      	str	r0, [r4, #0]
 8007044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	9b00      	ldr	r3, [sp, #0]
 800704c:	6163      	str	r3, [r4, #20]
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	6120      	str	r0, [r4, #16]
 8007052:	b15b      	cbz	r3, 800706c <__smakebuf_r+0x74>
 8007054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007058:	4630      	mov	r0, r6
 800705a:	f000 f92d 	bl	80072b8 <_isatty_r>
 800705e:	b128      	cbz	r0, 800706c <__smakebuf_r+0x74>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	f023 0303 	bic.w	r3, r3, #3
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	89a0      	ldrh	r0, [r4, #12]
 800706e:	4305      	orrs	r5, r0
 8007070:	81a5      	strh	r5, [r4, #12]
 8007072:	e7cd      	b.n	8007010 <__smakebuf_r+0x18>
 8007074:	08006e05 	.word	0x08006e05

08007078 <memcpy>:
 8007078:	440a      	add	r2, r1
 800707a:	4291      	cmp	r1, r2
 800707c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007080:	d100      	bne.n	8007084 <memcpy+0xc>
 8007082:	4770      	bx	lr
 8007084:	b510      	push	{r4, lr}
 8007086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708e:	4291      	cmp	r1, r2
 8007090:	d1f9      	bne.n	8007086 <memcpy+0xe>
 8007092:	bd10      	pop	{r4, pc}

08007094 <memmove>:
 8007094:	4288      	cmp	r0, r1
 8007096:	b510      	push	{r4, lr}
 8007098:	eb01 0402 	add.w	r4, r1, r2
 800709c:	d902      	bls.n	80070a4 <memmove+0x10>
 800709e:	4284      	cmp	r4, r0
 80070a0:	4623      	mov	r3, r4
 80070a2:	d807      	bhi.n	80070b4 <memmove+0x20>
 80070a4:	1e43      	subs	r3, r0, #1
 80070a6:	42a1      	cmp	r1, r4
 80070a8:	d008      	beq.n	80070bc <memmove+0x28>
 80070aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070b2:	e7f8      	b.n	80070a6 <memmove+0x12>
 80070b4:	4402      	add	r2, r0
 80070b6:	4601      	mov	r1, r0
 80070b8:	428a      	cmp	r2, r1
 80070ba:	d100      	bne.n	80070be <memmove+0x2a>
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070c6:	e7f7      	b.n	80070b8 <memmove+0x24>

080070c8 <__malloc_lock>:
 80070c8:	4801      	ldr	r0, [pc, #4]	; (80070d0 <__malloc_lock+0x8>)
 80070ca:	f7ff bf6d 	b.w	8006fa8 <__retarget_lock_acquire_recursive>
 80070ce:	bf00      	nop
 80070d0:	2000069c 	.word	0x2000069c

080070d4 <__malloc_unlock>:
 80070d4:	4801      	ldr	r0, [pc, #4]	; (80070dc <__malloc_unlock+0x8>)
 80070d6:	f7ff bf68 	b.w	8006faa <__retarget_lock_release_recursive>
 80070da:	bf00      	nop
 80070dc:	2000069c 	.word	0x2000069c

080070e0 <_realloc_r>:
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	4680      	mov	r8, r0
 80070e6:	4614      	mov	r4, r2
 80070e8:	460e      	mov	r6, r1
 80070ea:	b921      	cbnz	r1, 80070f6 <_realloc_r+0x16>
 80070ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070f0:	4611      	mov	r1, r2
 80070f2:	f7ff b80b 	b.w	800610c <_malloc_r>
 80070f6:	b92a      	cbnz	r2, 8007104 <_realloc_r+0x24>
 80070f8:	f7fe ff9c 	bl	8006034 <_free_r>
 80070fc:	4625      	mov	r5, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007104:	f000 f8fa 	bl	80072fc <_malloc_usable_size_r>
 8007108:	4284      	cmp	r4, r0
 800710a:	4607      	mov	r7, r0
 800710c:	d802      	bhi.n	8007114 <_realloc_r+0x34>
 800710e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007112:	d812      	bhi.n	800713a <_realloc_r+0x5a>
 8007114:	4621      	mov	r1, r4
 8007116:	4640      	mov	r0, r8
 8007118:	f7fe fff8 	bl	800610c <_malloc_r>
 800711c:	4605      	mov	r5, r0
 800711e:	2800      	cmp	r0, #0
 8007120:	d0ed      	beq.n	80070fe <_realloc_r+0x1e>
 8007122:	42bc      	cmp	r4, r7
 8007124:	4622      	mov	r2, r4
 8007126:	4631      	mov	r1, r6
 8007128:	bf28      	it	cs
 800712a:	463a      	movcs	r2, r7
 800712c:	f7ff ffa4 	bl	8007078 <memcpy>
 8007130:	4631      	mov	r1, r6
 8007132:	4640      	mov	r0, r8
 8007134:	f7fe ff7e 	bl	8006034 <_free_r>
 8007138:	e7e1      	b.n	80070fe <_realloc_r+0x1e>
 800713a:	4635      	mov	r5, r6
 800713c:	e7df      	b.n	80070fe <_realloc_r+0x1e>

0800713e <_raise_r>:
 800713e:	291f      	cmp	r1, #31
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	460d      	mov	r5, r1
 8007146:	d904      	bls.n	8007152 <_raise_r+0x14>
 8007148:	2316      	movs	r3, #22
 800714a:	6003      	str	r3, [r0, #0]
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007154:	b112      	cbz	r2, 800715c <_raise_r+0x1e>
 8007156:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800715a:	b94b      	cbnz	r3, 8007170 <_raise_r+0x32>
 800715c:	4620      	mov	r0, r4
 800715e:	f000 f831 	bl	80071c4 <_getpid_r>
 8007162:	462a      	mov	r2, r5
 8007164:	4601      	mov	r1, r0
 8007166:	4620      	mov	r0, r4
 8007168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800716c:	f000 b818 	b.w	80071a0 <_kill_r>
 8007170:	2b01      	cmp	r3, #1
 8007172:	d00a      	beq.n	800718a <_raise_r+0x4c>
 8007174:	1c59      	adds	r1, r3, #1
 8007176:	d103      	bne.n	8007180 <_raise_r+0x42>
 8007178:	2316      	movs	r3, #22
 800717a:	6003      	str	r3, [r0, #0]
 800717c:	2001      	movs	r0, #1
 800717e:	e7e7      	b.n	8007150 <_raise_r+0x12>
 8007180:	2400      	movs	r4, #0
 8007182:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007186:	4628      	mov	r0, r5
 8007188:	4798      	blx	r3
 800718a:	2000      	movs	r0, #0
 800718c:	e7e0      	b.n	8007150 <_raise_r+0x12>
	...

08007190 <raise>:
 8007190:	4b02      	ldr	r3, [pc, #8]	; (800719c <raise+0xc>)
 8007192:	4601      	mov	r1, r0
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	f7ff bfd2 	b.w	800713e <_raise_r>
 800719a:	bf00      	nop
 800719c:	2000006c 	.word	0x2000006c

080071a0 <_kill_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d07      	ldr	r5, [pc, #28]	; (80071c0 <_kill_r+0x20>)
 80071a4:	2300      	movs	r3, #0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	f7fa ff2f 	bl	8002010 <_kill>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d102      	bne.n	80071bc <_kill_r+0x1c>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b103      	cbz	r3, 80071bc <_kill_r+0x1c>
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	20000698 	.word	0x20000698

080071c4 <_getpid_r>:
 80071c4:	f7fa bf1c 	b.w	8002000 <_getpid>

080071c8 <__sread>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	460c      	mov	r4, r1
 80071cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d0:	f000 f89c 	bl	800730c <_read_r>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	bfab      	itete	ge
 80071d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071da:	89a3      	ldrhlt	r3, [r4, #12]
 80071dc:	181b      	addge	r3, r3, r0
 80071de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071e2:	bfac      	ite	ge
 80071e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071e6:	81a3      	strhlt	r3, [r4, #12]
 80071e8:	bd10      	pop	{r4, pc}

080071ea <__swrite>:
 80071ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	461f      	mov	r7, r3
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	05db      	lsls	r3, r3, #23
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	4616      	mov	r6, r2
 80071fa:	d505      	bpl.n	8007208 <__swrite+0x1e>
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	2302      	movs	r3, #2
 8007202:	2200      	movs	r2, #0
 8007204:	f000 f868 	bl	80072d8 <_lseek_r>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	4632      	mov	r2, r6
 8007216:	463b      	mov	r3, r7
 8007218:	4628      	mov	r0, r5
 800721a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721e:	f000 b817 	b.w	8007250 <_write_r>

08007222 <__sseek>:
 8007222:	b510      	push	{r4, lr}
 8007224:	460c      	mov	r4, r1
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 f855 	bl	80072d8 <_lseek_r>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	bf15      	itete	ne
 8007234:	6560      	strne	r0, [r4, #84]	; 0x54
 8007236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800723a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800723e:	81a3      	strheq	r3, [r4, #12]
 8007240:	bf18      	it	ne
 8007242:	81a3      	strhne	r3, [r4, #12]
 8007244:	bd10      	pop	{r4, pc}

08007246 <__sclose>:
 8007246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724a:	f000 b813 	b.w	8007274 <_close_r>
	...

08007250 <_write_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d07      	ldr	r5, [pc, #28]	; (8007270 <_write_r+0x20>)
 8007254:	4604      	mov	r4, r0
 8007256:	4608      	mov	r0, r1
 8007258:	4611      	mov	r1, r2
 800725a:	2200      	movs	r2, #0
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f7fa ff0d 	bl	800207e <_write>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_write_r+0x1e>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_write_r+0x1e>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	20000698 	.word	0x20000698

08007274 <_close_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d06      	ldr	r5, [pc, #24]	; (8007290 <_close_r+0x1c>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f7fa ff19 	bl	80020b6 <_close>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_close_r+0x1a>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_close_r+0x1a>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20000698 	.word	0x20000698

08007294 <_fstat_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_fstat_r+0x20>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	f7fa ff14 	bl	80020ce <_fstat>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	d102      	bne.n	80072b0 <_fstat_r+0x1c>
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	b103      	cbz	r3, 80072b0 <_fstat_r+0x1c>
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
 80072b2:	bf00      	nop
 80072b4:	20000698 	.word	0x20000698

080072b8 <_isatty_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_isatty_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7fa ff13 	bl	80020ee <_isatty>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_isatty_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_isatty_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20000698 	.word	0x20000698

080072d8 <_lseek_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4d07      	ldr	r5, [pc, #28]	; (80072f8 <_lseek_r+0x20>)
 80072dc:	4604      	mov	r4, r0
 80072de:	4608      	mov	r0, r1
 80072e0:	4611      	mov	r1, r2
 80072e2:	2200      	movs	r2, #0
 80072e4:	602a      	str	r2, [r5, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7fa ff0c 	bl	8002104 <_lseek>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_lseek_r+0x1e>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_lseek_r+0x1e>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000698 	.word	0x20000698

080072fc <_malloc_usable_size_r>:
 80072fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007300:	1f18      	subs	r0, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	bfbc      	itt	lt
 8007306:	580b      	ldrlt	r3, [r1, r0]
 8007308:	18c0      	addlt	r0, r0, r3
 800730a:	4770      	bx	lr

0800730c <_read_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d07      	ldr	r5, [pc, #28]	; (800732c <_read_r+0x20>)
 8007310:	4604      	mov	r4, r0
 8007312:	4608      	mov	r0, r1
 8007314:	4611      	mov	r1, r2
 8007316:	2200      	movs	r2, #0
 8007318:	602a      	str	r2, [r5, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	f7fa fe92 	bl	8002044 <_read>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_read_r+0x1e>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_read_r+0x1e>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	20000698 	.word	0x20000698

08007330 <_gettimeofday>:
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <_gettimeofday+0xc>)
 8007332:	2258      	movs	r2, #88	; 0x58
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	f04f 30ff 	mov.w	r0, #4294967295
 800733a:	4770      	bx	lr
 800733c:	20000698 	.word	0x20000698

08007340 <_init>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr

0800734c <_fini>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr
