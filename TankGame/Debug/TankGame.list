
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a54  08008a54  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008a54  08008a54  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a54  08008a54  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a54  08008a54  00018a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a58  08008a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00000c7c  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d54  20000d54  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bce6  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000332e  00000000  00000000  0003bdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003f120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d8  00000000  00000000  00040828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002119a  00000000  00000000  00041e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb6c  00000000  00000000  00062f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a24  00000000  00000000  0007fb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014552a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e18  00000000  00000000  0014557c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014c394  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0014c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086b0 	.word	0x080086b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	080086b0 	.word	0x080086b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000f6 	.word	0x200000f6
 800039c:	200000f8 	.word	0x200000f8
 80003a0:	200000fa 	.word	0x200000fa
 80003a4:	2000010c 	.word	0x2000010c
 80003a8:	200000fc 	.word	0x200000fc
 80003ac:	20000110 	.word	0x20000110

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 ffa7 	bl	8003404 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f002 fdf8 	bl	80030ac <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 f92e 	bl	8003728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f926 	bl	8003728 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 f91a 	bl	8003728 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f002 fdd0 	bl	80030ac <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f002 fdca 	bl	80030ac <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f002 fdc4 	bl	80030ac <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f002 fdb5 	bl	80030ac <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f002 fdaa 	bl	80030ac <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000110 	.word	0x20000110
 80005a8:	20000113 	.word	0x20000113
 80005ac:	200000f4 	.word	0x200000f4
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000f6 	.word	0x200000f6
 80005b8:	200000f8 	.word	0x200000f8
 80005bc:	200000fa 	.word	0x200000fa
 80005c0:	200000fc 	.word	0x200000fc
 80005c4:	2000010c 	.word	0x2000010c
 80005c8:	20000111 	.word	0x20000111
 80005cc:	20000112 	.word	0x20000112

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	2000010c 	.word	0x2000010c
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000114 	.word	0x20000114

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f002 fcb2 	bl	80030ac <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000113 	.word	0x20000113
 80007ac:	20000114 	.word	0x20000114

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000111 	.word	0x20000111

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff24 	bl	8003728 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 ff18 	bl	8003728 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c
 8000930:	200000f6 	.word	0x200000f6
 8000934:	200000f8 	.word	0x200000f8
 8000938:	20000110 	.word	0x20000110

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 feec 	bl	8003728 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f002 fbab 	bl	80030ac <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fee1 	bl	8003728 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f002 fba0 	bl	80030ac <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fed6 	bl	8003728 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f002 fb95 	bl	80030ac <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000010c 	.word	0x2000010c
 800098c:	200000fa 	.word	0x200000fa

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 feb3 	bl	8003728 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000010c 	.word	0x2000010c
 80009e0:	200000fc 	.word	0x200000fc

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 fe89 	bl	8003728 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }

  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000010c 	.word	0x2000010c
 8000a34:	200000fc 	.word	0x200000fc

08000a38 <HAL_GPIO_EXTI_Callback>:
const uint16_t Column_pins[] =
		{ GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]

	if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000a42:	4bbd      	ldr	r3, [pc, #756]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x300>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000a4a:	f002 fb23 	bl	8003094 <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	f200 8292 	bhi.w	8000f7a <HAL_GPIO_EXTI_Callback+0x542>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000a56:	f002 fb1d 	bl	8003094 <HAL_GetTick>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4ab6      	ldr	r2, [pc, #728]	; (8000d38 <HAL_GPIO_EXTI_Callback+0x300>)
 8000a5e:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000a64:	23ff      	movs	r3, #255	; 0xff
 8000a66:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a68:	2300      	movs	r3, #0
 8000a6a:	737b      	strb	r3, [r7, #13]
 8000a6c:	e00b      	b.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000a6e:	7b7b      	ldrb	r3, [r7, #13]
 8000a70:	4ab2      	ldr	r2, [pc, #712]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x304>)
 8000a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d101      	bne.n	8000a80 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	3301      	adds	r3, #1
 8000a84:	737b      	strb	r3, [r7, #13]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d9f0      	bls.n	8000a6e <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000a8c:	4bac      	ldr	r3, [pc, #688]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fe48 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000a98:	4ba9      	ldr	r3, [pc, #676]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fe42 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000aa4:	4ba6      	ldr	r3, [pc, #664]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fe3c 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000ab0:	4ba3      	ldr	r3, [pc, #652]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fe36 	bl	8003728 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000abc:	2300      	movs	r3, #0
 8000abe:	733b      	strb	r3, [r7, #12]
 8000ac0:	e02d      	b.n	8000b1e <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	4a9f      	ldr	r2, [pc, #636]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000aca:	7b3b      	ldrb	r3, [r7, #12]
 8000acc:	4a9e      	ldr	r2, [pc, #632]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f002 fe27 	bl	8003728 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4a9b      	ldr	r2, [pc, #620]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x314>)
 8000ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae8:	4994      	ldr	r1, [pc, #592]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x304>)
 8000aea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f002 fe01 	bl	80036f8 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_GPIO_EXTI_Callback+0xc8>

			column_number = col;
 8000afc:	7b3b      	ldrb	r3, [r7, #12]
 8000afe:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b00:	7b3b      	ldrb	r3, [r7, #12]
 8000b02:	4a90      	ldr	r2, [pc, #576]	; (8000d44 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b08:	7b3b      	ldrb	r3, [r7, #12]
 8000b0a:	4a8f      	ldr	r2, [pc, #572]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x310>)
 8000b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	f002 fe08 	bl	8003728 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	7b3b      	ldrb	r3, [r7, #12]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d9ce      	bls.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b24:	4b86      	ldr	r3, [pc, #536]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 fdfc 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000b30:	4b83      	ldr	r3, [pc, #524]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b32:	2102      	movs	r1, #2
 8000b34:	2201      	movs	r2, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fdf6 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000b3c:	4b80      	ldr	r3, [pc, #512]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b3e:	2104      	movs	r1, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fdf0 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000b48:	4b7d      	ldr	r3, [pc, #500]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x308>)
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fdea 	bl	8003728 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	f000 820f 	beq.w	8000f7e <HAL_GPIO_EXTI_Callback+0x546>
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	f000 8209 	beq.w	8000f7e <HAL_GPIO_EXTI_Callback+0x546>
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	//1 - 6 - 9 for the Right Player
	//4 -7 -12 for the left player
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	4413      	add	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	f200 81fe 	bhi.w	8000f82 <HAL_GPIO_EXTI_Callback+0x54a>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_EXTI_Callback+0x154>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000bcd 	.word	0x08000bcd
 8000b90:	08000c57 	.word	0x08000c57
 8000b94:	08000c89 	.word	0x08000c89
 8000b98:	08000cc9 	.word	0x08000cc9
 8000b9c:	08000d81 	.word	0x08000d81
 8000ba0:	08000d91 	.word	0x08000d91
 8000ba4:	08000da7 	.word	0x08000da7
 8000ba8:	08000dbd 	.word	0x08000dbd
 8000bac:	08000e0b 	.word	0x08000e0b
 8000bb0:	08000f83 	.word	0x08000f83
 8000bb4:	08000f83 	.word	0x08000f83
 8000bb8:	08000e7d 	.word	0x08000e7d
 8000bbc:	08000eed 	.word	0x08000eed
 8000bc0:	08000f0d 	.word	0x08000f0d
 8000bc4:	08000f2f 	.word	0x08000f2f
 8000bc8:	08000f83 	.word	0x08000f83
	case 1:
		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000bcc:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d113      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x1c4>
			R_Health = (R_Health + 10 - 1) % 10;
 8000bd4:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f103 0109 	add.w	r1, r3, #9
 8000bdc:	4b5e      	ldr	r3, [pc, #376]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000bde:	fb83 2301 	smull	r2, r3, r3, r1
 8000be2:	109a      	asrs	r2, r3, #2
 8000be4:	17cb      	asrs	r3, r1, #31
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	1aca      	subs	r2, r1, r3
 8000bf2:	4b58      	ldr	r3, [pc, #352]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x31c>)
 8000bf4:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000bf6:	f001 fb49 	bl	800228c <HealthSetting>
 8000bfa:	e016      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
		} else if (screen == 5) {
 8000bfc:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b05      	cmp	r3, #5
 8000c02:	d112      	bne.n	8000c2a <HAL_GPIO_EXTI_Callback+0x1f2>
			R_bullets = (R_bullets + 10 - 1) % 10;
 8000c04:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f103 0109 	add.w	r1, r3, #9
 8000c0c:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000c0e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c12:	109a      	asrs	r2, r3, #2
 8000c14:	17cb      	asrs	r3, r1, #31
 8000c16:	1ad2      	subs	r2, r2, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1aca      	subs	r2, r1, r3
 8000c22:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <HAL_GPIO_EXTI_Callback+0x324>)
 8000c24:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000c26:	f001 faf9 	bl	800221c <bulletsSetting>
		}
		if (screen == 0) {
 8000c2a:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d108      	bne.n	8000c44 <HAL_GPIO_EXTI_Callback+0x20c>
			screen = 1;
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000c38:	f000 f9da 	bl	8000ff0 <refreshAll>
			initializeObjects();
 8000c3c:	f001 f854 	bl	8001ce8 <initializeObjects>
			displayObjects();
 8000c40:	f001 fa70 	bl	8002124 <displayObjects>
		}
		if (screen == 1) {
 8000c44:	4b42      	ldr	r3, [pc, #264]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	f040 819c 	bne.w	8000f86 <HAL_GPIO_EXTI_Callback+0x54e>
			shoot(&playerR);
 8000c4e:	4844      	ldr	r0, [pc, #272]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c50:	f000 faf2 	bl	8001238 <shoot>
		}

		/* code */
		break;
 8000c54:	e197      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0x54e>
	case 2:

		if (screen == 0) {
 8000c56:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8195 	bne.w	8000f8a <HAL_GPIO_EXTI_Callback+0x552>
			screen = 2;
 8000c60:	4b3b      	ldr	r3, [pc, #236]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2014      	movs	r0, #20
 8000c6a:	f7ff fd6f 	bl	800074c <setCursor>
			print("                    ");
 8000c6e:	483d      	ldr	r0, [pc, #244]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c70:	f7ff fdb4 	bl	80007dc <print>
			setCursor(0, 1);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fd68 	bl	800074c <setCursor>
			print("                      ");
 8000c7c:	483a      	ldr	r0, [pc, #232]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000c7e:	f7ff fdad 	bl	80007dc <print>
			showAbout();
 8000c82:	f001 fa9d 	bl	80021c0 <showAbout>
		}
		/* code */
		break;
 8000c86:	e180      	b.n	8000f8a <HAL_GPIO_EXTI_Callback+0x552>
	case 3:
		HAL_UART_Transmit(&huart1, "3", 1,
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4937      	ldr	r1, [pc, #220]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x334>)
 8000c90:	4837      	ldr	r0, [pc, #220]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c92:	f005 fa65 	bl	8006160 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 8177 	bne.w	8000f8e <HAL_GPIO_EXTI_Callback+0x556>
			screen = 3;
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2014      	movs	r0, #20
 8000caa:	f7ff fd4f 	bl	800074c <setCursor>
			print("                    ");
 8000cae:	482d      	ldr	r0, [pc, #180]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000cb0:	f7ff fd94 	bl	80007dc <print>
			setCursor(0, 1);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fd48 	bl	800074c <setCursor>
			print("                      ");
 8000cbc:	482a      	ldr	r0, [pc, #168]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x330>)
 8000cbe:	f7ff fd8d 	bl	80007dc <print>
			showSetting();
 8000cc2:	f001 fa8b 	bl	80021dc <showSetting>
		}
		/* code */
		break;
 8000cc6:	e162      	b.n	8000f8e <HAL_GPIO_EXTI_Callback+0x556>
	case 4:
		if (screen == 1) {
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d102      	bne.n	8000cd6 <HAL_GPIO_EXTI_Callback+0x29e>
			shoot(&playerL);
 8000cd0:	4828      	ldr	r0, [pc, #160]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000cd2:	f000 fab1 	bl	8001238 <shoot>
			//shot(playerR.x, playerR.y + 1, currentStateR % 2);
		}

		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d113      	bne.n	8000d06 <HAL_GPIO_EXTI_Callback+0x2ce>
			L_Health = (L_Health + 10 - 1) % 10;
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f103 0109 	add.w	r1, r3, #9
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000ce8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cec:	109a      	asrs	r2, r3, #2
 8000cee:	17cb      	asrs	r3, r1, #31
 8000cf0:	1ad2      	subs	r2, r2, r3
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	1aca      	subs	r2, r1, r3
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x340>)
 8000cfe:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000d00:	f001 fac4 	bl	800228c <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 10 - 1) % 10;
			bulletsSetting();
		}

		break;
 8000d04:	e145      	b.n	8000f92 <HAL_GPIO_EXTI_Callback+0x55a>
		} else if (screen == 5) {
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x318>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b05      	cmp	r3, #5
 8000d0c:	f040 8141 	bne.w	8000f92 <HAL_GPIO_EXTI_Callback+0x55a>
			L_bullets = (L_bullets + 10 - 1) % 10;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f103 0109 	add.w	r1, r3, #9
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_GPIO_EXTI_Callback+0x320>)
 8000d1a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d1e:	109a      	asrs	r2, r3, #2
 8000d20:	17cb      	asrs	r3, r1, #31
 8000d22:	1ad2      	subs	r2, r2, r3
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	1aca      	subs	r2, r1, r3
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x344>)
 8000d30:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000d32:	f001 fa73 	bl	800221c <bulletsSetting>
		break;
 8000d36:	e12c      	b.n	8000f92 <HAL_GPIO_EXTI_Callback+0x55a>
 8000d38:	20000d38 	.word	0x20000d38
 8000d3c:	080088b4 	.word	0x080088b4
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	080088bc 	.word	0x080088bc
 8000d48:	080088cc 	.word	0x080088cc
 8000d4c:	080088a4 	.word	0x080088a4
 8000d50:	200005b0 	.word	0x200005b0
 8000d54:	200005b4 	.word	0x200005b4
 8000d58:	66666667 	.word	0x66666667
 8000d5c:	200005bc 	.word	0x200005bc
 8000d60:	20000c0c 	.word	0x20000c0c
 8000d64:	080086c8 	.word	0x080086c8
 8000d68:	080086e0 	.word	0x080086e0
 8000d6c:	080086f8 	.word	0x080086f8
 8000d70:	2000023c 	.word	0x2000023c
 8000d74:	20000c18 	.word	0x20000c18
 8000d78:	200005b8 	.word	0x200005b8
 8000d7c:	200005c0 	.word	0x200005c0
	case 5:
		HAL_UART_Transmit(&huart1, "5", 1,
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	2201      	movs	r2, #1
 8000d86:	4989      	ldr	r1, [pc, #548]	; (8000fac <HAL_GPIO_EXTI_Callback+0x574>)
 8000d88:	4889      	ldr	r0, [pc, #548]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x578>)
 8000d8a:	f005 f9e9 	bl	8006160 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000d8e:	e109      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
	case 6:
		HAL_UART_Transmit(&huart1, "6", 1,
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	2201      	movs	r2, #1
 8000d96:	4987      	ldr	r1, [pc, #540]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000d98:	4885      	ldr	r0, [pc, #532]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x578>)
 8000d9a:	f005 f9e1 	bl	8006160 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(0);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f948 	bl	8001034 <changeFoxStateR>
		break;
 8000da4:	e0fe      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
	case 7:
		HAL_UART_Transmit(&huart1, "7", 1,
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	2201      	movs	r2, #1
 8000dac:	4982      	ldr	r1, [pc, #520]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x580>)
 8000dae:	4880      	ldr	r0, [pc, #512]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x578>)
 8000db0:	f005 f9d6 	bl	8006160 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 f93d 	bl	8001034 <changeFoxStateR>
		/* code */
		break;
 8000dba:	e0f3      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
	case 8:
		//back btn
		refreshAll();
 8000dbc:	f000 f918 	bl	8000ff0 <refreshAll>
		if (screen == 4 | screen == 5) {
 8000dc0:	4b7e      	ldr	r3, [pc, #504]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	bf0c      	ite	eq
 8000dc8:	2301      	moveq	r3, #1
 8000dca:	2300      	movne	r3, #0
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b7b      	ldr	r3, [pc, #492]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2301      	moveq	r3, #1
 8000dd8:	2300      	movne	r3, #0
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_EXTI_Callback+0x3b8>
			screen = 3;
 8000de4:	4b75      	ldr	r3, [pc, #468]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000de6:	2203      	movs	r2, #3
 8000de8:	601a      	str	r2, [r3, #0]
			showSetting();
 8000dea:	f001 f9f7 	bl	80021dc <showSetting>
 8000dee:	e004      	b.n	8000dfa <HAL_GPIO_EXTI_Callback+0x3c2>
		} else {
			screen = 0;
 8000df0:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			showMain();
 8000df6:	f001 f9c1 	bl	800217c <showMain>
		}

		HAL_UART_Transmit(&huart1, "B", 1,
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	2201      	movs	r2, #1
 8000e00:	496f      	ldr	r1, [pc, #444]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x588>)
 8000e02:	486b      	ldr	r0, [pc, #428]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x578>)
 8000e04:	f005 f9ac 	bl	8006160 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000e08:	e0cc      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
	case 9:

		if (screen == 4) {
 8000e0a:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d112      	bne.n	8000e38 <HAL_GPIO_EXTI_Callback+0x400>
			R_Health = (R_Health + 1) % 10;
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1c59      	adds	r1, r3, #1
 8000e18:	4b6b      	ldr	r3, [pc, #428]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e1a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e1e:	109a      	asrs	r2, r3, #2
 8000e20:	17cb      	asrs	r3, r1, #31
 8000e22:	1ad2      	subs	r2, r2, r3
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	1aca      	subs	r2, r1, r3
 8000e2e:	4b65      	ldr	r3, [pc, #404]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000e30:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000e32:	f001 fa2b 	bl	800228c <HealthSetting>
 8000e36:	e015      	b.n	8000e64 <HAL_GPIO_EXTI_Callback+0x42c>
		} else if (screen == 5) {
 8000e38:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d111      	bne.n	8000e64 <HAL_GPIO_EXTI_Callback+0x42c>
			R_bullets = (R_bullets + 1) % 10;
 8000e40:	4b62      	ldr	r3, [pc, #392]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1c59      	adds	r1, r3, #1
 8000e46:	4b60      	ldr	r3, [pc, #384]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e48:	fb83 2301 	smull	r2, r3, r3, r1
 8000e4c:	109a      	asrs	r2, r3, #2
 8000e4e:	17cb      	asrs	r3, r1, #31
 8000e50:	1ad2      	subs	r2, r2, r3
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	1aca      	subs	r2, r1, r3
 8000e5c:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x594>)
 8000e5e:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e60:	f001 f9dc 	bl	800221c <bulletsSetting>
		}
		//right player
		if (screen == 1) {
 8000e64:	4b55      	ldr	r3, [pc, #340]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	f040 8094 	bne.w	8000f96 <HAL_GPIO_EXTI_Callback+0x55e>
			movement(&playerR, currentStateR);
 8000e6e:	4b58      	ldr	r3, [pc, #352]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x598>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	4857      	ldr	r0, [pc, #348]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x59c>)
 8000e76:	f000 fcb3 	bl	80017e0 <movement>
		}
		break;
 8000e7a:	e08c      	b.n	8000f96 <HAL_GPIO_EXTI_Callback+0x55e>
		break;
	case 11:
		/* code */
		break;
	case 12:
		if (screen == 4) {
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d112      	bne.n	8000eaa <HAL_GPIO_EXTI_Callback+0x472>
			L_Health = (L_Health + 1) % 10;
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	1c59      	adds	r1, r3, #1
 8000e8a:	4b4f      	ldr	r3, [pc, #316]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e8c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e90:	109a      	asrs	r2, r3, #2
 8000e92:	17cb      	asrs	r3, r1, #31
 8000e94:	1ad2      	subs	r2, r2, r3
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	1aca      	subs	r2, r1, r3
 8000ea0:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000ea2:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000ea4:	f001 f9f2 	bl	800228c <HealthSetting>
 8000ea8:	e015      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x49e>
		} else if (screen == 5) {
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d111      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x49e>
			L_bullets = (L_bullets + 1) % 10;
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	1c59      	adds	r1, r3, #1
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x590>)
 8000eba:	fb83 2301 	smull	r2, r3, r3, r1
 8000ebe:	109a      	asrs	r2, r3, #2
 8000ec0:	17cb      	asrs	r3, r1, #31
 8000ec2:	1ad2      	subs	r2, r2, r3
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1aca      	subs	r2, r1, r3
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000ed0:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000ed2:	f001 f9a3 	bl	800221c <bulletsSetting>
		}
		if (screen == 1) {
 8000ed6:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d15d      	bne.n	8000f9a <HAL_GPIO_EXTI_Callback+0x562>
			movement(&playerL, currentStateL);
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x5a8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	483f      	ldr	r0, [pc, #252]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x5ac>)
 8000ee6:	f000 fc7b 	bl	80017e0 <movement>
		}
		/* code */
		break;
 8000eea:	e056      	b.n	8000f9a <HAL_GPIO_EXTI_Callback+0x562>
	case 13:
		/* code */
		if (screen = 3) {
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000eee:	2203      	movs	r2, #3
 8000ef0:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f7ff fc29 	bl	800074c <setCursor>
			print("                   ");
 8000efa:	483b      	ldr	r0, [pc, #236]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000efc:	f7ff fc6e 	bl	80007dc <print>
			HealthSetting();
 8000f00:	f001 f9c4 	bl	800228c <HealthSetting>
			screen = 4;
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f0a:	e04b      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
	case 14:
		/* code */
		if (screen == 3) {
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d144      	bne.n	8000f9e <HAL_GPIO_EXTI_Callback+0x566>
			screen = 5;
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2014      	movs	r0, #20
 8000f1e:	f7ff fc15 	bl	800074c <setCursor>
			print("                   ");
 8000f22:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000f24:	f7ff fc5a 	bl	80007dc <print>
			bulletsSetting();
 8000f28:	f001 f978 	bl	800221c <bulletsSetting>
		}
		break;
 8000f2c:	e037      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0x566>
	case 15:
		if (screen == 3) {
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d109      	bne.n	8000f4a <HAL_GPIO_EXTI_Callback+0x512>
			vfx = (vfx + 1) % 2;
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	bfb8      	it	lt
 8000f44:	425b      	neglt	r3, r3
 8000f46:	4a29      	ldr	r2, [pc, #164]	; (8000fec <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000f48:	6013      	str	r3, [r2, #0]
		}
		if (screen == 4 | screen == 5) {
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf0c      	ite	eq
 8000f52:	2301      	moveq	r3, #1
 8000f54:	2300      	movne	r3, #0
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x56a>
			screen = 3;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x584>)
 8000f70:	2203      	movs	r2, #3
 8000f72:	601a      	str	r2, [r3, #0]
			showSetting();
 8000f74:	f001 f932 	bl	80021dc <showSetting>
		}
		/* code */
		break;
 8000f78:	e013      	b.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x56a>
		return;
 8000f7a:	bf00      	nop
 8000f7c:	e012      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		return; // Reject invalid scan
 8000f7e:	bf00      	nop
 8000f80:	e010      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
	case 16:
		/* code */
		break;

	default:
		break;
 8000f82:	bf00      	nop
 8000f84:	e00e      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000f86:	bf00      	nop
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000f8a:	bf00      	nop
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000f8e:	bf00      	nop
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000f92:	bf00      	nop
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000f96:	bf00      	nop
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000f9a:	bf00      	nop
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000f9e:	bf00      	nop
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x56c>
		break;
 8000fa2:	bf00      	nop
	}
}
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	080086fc 	.word	0x080086fc
 8000fb0:	2000023c 	.word	0x2000023c
 8000fb4:	08008700 	.word	0x08008700
 8000fb8:	08008704 	.word	0x08008704
 8000fbc:	200005b0 	.word	0x200005b0
 8000fc0:	08008708 	.word	0x08008708
 8000fc4:	200005b4 	.word	0x200005b4
 8000fc8:	66666667 	.word	0x66666667
 8000fcc:	200005bc 	.word	0x200005bc
 8000fd0:	20000c24 	.word	0x20000c24
 8000fd4:	20000c0c 	.word	0x20000c0c
 8000fd8:	200005b8 	.word	0x200005b8
 8000fdc:	200005c0 	.word	0x200005c0
 8000fe0:	20000c28 	.word	0x20000c28
 8000fe4:	20000c18 	.word	0x20000c18
 8000fe8:	0800870c 	.word	0x0800870c
 8000fec:	20000004 	.word	0x20000004

08000ff0 <refreshAll>:

void refreshAll(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fba8 	bl	800074c <setCursor>
	print("                   ");
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <refreshAll+0x40>)
 8000ffe:	f7ff fbed 	bl	80007dc <print>
	setCursor(0, 1);
 8001002:	2101      	movs	r1, #1
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fba1 	bl	800074c <setCursor>
	print("                   ");
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <refreshAll+0x40>)
 800100c:	f7ff fbe6 	bl	80007dc <print>
	setCursor(20, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2014      	movs	r0, #20
 8001014:	f7ff fb9a 	bl	800074c <setCursor>
	print("                   ");
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <refreshAll+0x40>)
 800101a:	f7ff fbdf 	bl	80007dc <print>
	setCursor(20, 1);
 800101e:	2101      	movs	r1, #1
 8001020:	2014      	movs	r0, #20
 8001022:	f7ff fb93 	bl	800074c <setCursor>
	print("                   ");
 8001026:	4802      	ldr	r0, [pc, #8]	; (8001030 <refreshAll+0x40>)
 8001028:	f7ff fbd8 	bl	80007dc <print>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	0800870c 	.word	0x0800870c

08001034 <changeFoxStateR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void changeFoxStateR(int Player) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b092      	sub	sp, #72	; 0x48
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	byte *currentFoxR = foxStates[currentStateR];
 800103c:	4b45      	ldr	r3, [pc, #276]	; (8001154 <changeFoxStateR+0x120>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a45      	ldr	r2, [pc, #276]	; (8001158 <changeFoxStateR+0x124>)
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
	byte *currentFoxL = foxStates[currentStateL];
 8001048:	4b44      	ldr	r3, [pc, #272]	; (800115c <changeFoxStateR+0x128>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a42      	ldr	r2, [pc, #264]	; (8001158 <changeFoxStateR+0x124>)
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	643b      	str	r3, [r7, #64]	; 0x40

	if (!Player) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d110      	bne.n	800107c <changeFoxStateR+0x48>
		createChar(7, currentFoxR);
 800105a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800105c:	2007      	movs	r0, #7
 800105e:	f7ff fbe8 	bl	8000832 <createChar>
		currentStateR = (currentStateR + 1) % 4;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <changeFoxStateR+0x120>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	425a      	negs	r2, r3
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	bf58      	it	pl
 8001074:	4253      	negpl	r3, r2
 8001076:	4a37      	ldr	r2, [pc, #220]	; (8001154 <changeFoxStateR+0x120>)
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e00f      	b.n	800109c <changeFoxStateR+0x68>
	} else {
		createChar(8, currentFoxL);
 800107c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800107e:	2008      	movs	r0, #8
 8001080:	f7ff fbd7 	bl	8000832 <createChar>
		currentStateL = (currentStateL + 1) % 4;
 8001084:	4b35      	ldr	r3, [pc, #212]	; (800115c <changeFoxStateR+0x128>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	425a      	negs	r2, r3
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	bf58      	it	pl
 8001096:	4253      	negpl	r3, r2
 8001098:	4a30      	ldr	r2, [pc, #192]	; (800115c <changeFoxStateR+0x128>)
 800109a:	6013      	str	r3, [r2, #0]
	}
	switch (currentStateR) {
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <changeFoxStateR+0x120>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d81b      	bhi.n	80010dc <changeFoxStateR+0xa8>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <changeFoxStateR+0x78>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010c5 	.word	0x080010c5
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010d5 	.word	0x080010d5
	case 0:
		playerR.direction = UP;
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <changeFoxStateR+0x12c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	721a      	strb	r2, [r3, #8]
		break;
 80010c2:	e00c      	b.n	80010de <changeFoxStateR+0xaa>
	case 1:
		playerR.direction = RIGHT;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <changeFoxStateR+0x12c>)
 80010c6:	2203      	movs	r2, #3
 80010c8:	721a      	strb	r2, [r3, #8]
		break;
 80010ca:	e008      	b.n	80010de <changeFoxStateR+0xaa>
	case 2:
		playerR.direction = LEFT;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <changeFoxStateR+0x12c>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	721a      	strb	r2, [r3, #8]
		break;
 80010d2:	e004      	b.n	80010de <changeFoxStateR+0xaa>
	case 3:
		playerR.direction = DOWN;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <changeFoxStateR+0x12c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	721a      	strb	r2, [r3, #8]
		break;
 80010da:	e000      	b.n	80010de <changeFoxStateR+0xaa>
	default:
		break;
 80010dc:	bf00      	nop
	}
	switch (currentStateL) {
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <changeFoxStateR+0x128>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d81a      	bhi.n	800111c <changeFoxStateR+0xe8>
 80010e6:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <changeFoxStateR+0xb8>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	080010fd 	.word	0x080010fd
 80010f0:	08001105 	.word	0x08001105
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001115 	.word	0x08001115
	case 0:
		playerL.direction = UP;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <changeFoxStateR+0x130>)
 80010fe:	2200      	movs	r2, #0
 8001100:	721a      	strb	r2, [r3, #8]
		break;
 8001102:	e00c      	b.n	800111e <changeFoxStateR+0xea>
	case 1:
		playerL.direction = RIGHT;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <changeFoxStateR+0x130>)
 8001106:	2203      	movs	r2, #3
 8001108:	721a      	strb	r2, [r3, #8]
		break;
 800110a:	e008      	b.n	800111e <changeFoxStateR+0xea>
	case 2:
		playerL.direction = LEFT;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <changeFoxStateR+0x130>)
 800110e:	2202      	movs	r2, #2
 8001110:	721a      	strb	r2, [r3, #8]
		break;
 8001112:	e004      	b.n	800111e <changeFoxStateR+0xea>
	case 3:
		playerL.direction = DOWN;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <changeFoxStateR+0x130>)
 8001116:	2201      	movs	r2, #1
 8001118:	721a      	strb	r2, [r3, #8]
		break;
 800111a:	e000      	b.n	800111e <changeFoxStateR+0xea>
	default:
		break;
 800111c:	bf00      	nop
	}
	char buffer[50];
	sprintf(buffer, "The current state of the fox (currentStateL) is: %d\n",
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <changeFoxStateR+0x128>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4910      	ldr	r1, [pc, #64]	; (8001168 <changeFoxStateR+0x134>)
 8001128:	4618      	mov	r0, r3
 800112a:	f006 f8b7 	bl	800729c <siprintf>
			currentStateL);
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f84c 	bl	80001d0 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	b29a      	uxth	r2, r3
 800113c:	f107 010c 	add.w	r1, r7, #12
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <changeFoxStateR+0x138>)
 8001146:	f005 f80b 	bl	8006160 <HAL_UART_Transmit>
}
 800114a:	bf00      	nop
 800114c:	3748      	adds	r7, #72	; 0x48
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000c24 	.word	0x20000c24
 8001158:	20000058 	.word	0x20000058
 800115c:	20000c28 	.word	0x20000c28
 8001160:	20000c0c 	.word	0x20000c0c
 8001164:	20000c18 	.word	0x20000c18
 8001168:	08008720 	.word	0x08008720
 800116c:	2000023c 	.word	0x2000023c

08001170 <increase>:
void increase(int isHealth, Player *player) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	if (isHealth) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d024      	beq.n	80011ca <increase+0x5a>
		HAL_UART_Transmit(&huart1, "HART", 4,
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2204      	movs	r2, #4
 8001186:	4925      	ldr	r1, [pc, #148]	; (800121c <increase+0xac>)
 8001188:	4825      	ldr	r0, [pc, #148]	; (8001220 <increase+0xb0>)
 800118a:	f004 ffe9 	bl	8006160 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (player->c == 7) {
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	7a5b      	ldrb	r3, [r3, #9]
 8001192:	2b07      	cmp	r3, #7
 8001194:	d10c      	bne.n	80011b0 <increase+0x40>
			R_Health++;
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <increase+0xb4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a21      	ldr	r2, [pc, #132]	; (8001224 <increase+0xb4>)
 800119e:	6013      	str	r3, [r2, #0]
			if (R_Health > 9) {
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <increase+0xb4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b09      	cmp	r3, #9
 80011a6:	dd34      	ble.n	8001212 <increase+0xa2>
				R_Health = 9;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <increase+0xb4>)
 80011aa:	2209      	movs	r2, #9
 80011ac:	601a      	str	r2, [r3, #0]
			if (L_bullets > 9) {
				L_bullets = 9;
			}
		}
	}
}
 80011ae:	e030      	b.n	8001212 <increase+0xa2>
			L_Health++;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <increase+0xb8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <increase+0xb8>)
 80011b8:	6013      	str	r3, [r2, #0]
			if (L_Health > 9) {
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <increase+0xb8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b09      	cmp	r3, #9
 80011c0:	dd27      	ble.n	8001212 <increase+0xa2>
				L_Health = 9;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <increase+0xb8>)
 80011c4:	2209      	movs	r2, #9
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	e023      	b.n	8001212 <increase+0xa2>
		HAL_UART_Transmit(&huart1, "BULT", 4,
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	2204      	movs	r2, #4
 80011d0:	4916      	ldr	r1, [pc, #88]	; (800122c <increase+0xbc>)
 80011d2:	4813      	ldr	r0, [pc, #76]	; (8001220 <increase+0xb0>)
 80011d4:	f004 ffc4 	bl	8006160 <HAL_UART_Transmit>
		if (player->c == 7) {
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	7a5b      	ldrb	r3, [r3, #9]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	d10c      	bne.n	80011fa <increase+0x8a>
			R_bullets++;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <increase+0xc0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <increase+0xc0>)
 80011e8:	6013      	str	r3, [r2, #0]
			if (R_bullets > 9) {
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <increase+0xc0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b09      	cmp	r3, #9
 80011f0:	dd0f      	ble.n	8001212 <increase+0xa2>
				R_bullets = 9;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <increase+0xc0>)
 80011f4:	2209      	movs	r2, #9
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	e00b      	b.n	8001212 <increase+0xa2>
			L_bullets++;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <increase+0xc4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <increase+0xc4>)
 8001202:	6013      	str	r3, [r2, #0]
			if (L_bullets > 9) {
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <increase+0xc4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	dd02      	ble.n	8001212 <increase+0xa2>
				L_bullets = 9;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <increase+0xc4>)
 800120e:	2209      	movs	r2, #9
 8001210:	601a      	str	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08008758 	.word	0x08008758
 8001220:	2000023c 	.word	0x2000023c
 8001224:	200005b4 	.word	0x200005b4
 8001228:	200005b8 	.word	0x200005b8
 800122c:	08008760 	.word	0x08008760
 8001230:	200005bc 	.word	0x200005bc
 8001234:	200005c0 	.word	0x200005c0

08001238 <shoot>:

void shoot(Player *player) {
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
//  if (hasBullet(player) == 0) {
//    return;
//  }
//  decreaseBullet(player);

	num_shooted_bullet++;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <shoot+0x8c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <shoot+0x8c>)
 8001248:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < num_shooted_bullet; i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e02d      	b.n	80012ac <shoot+0x74>
		if (!fires[i].isAlive) {
 8001250:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <shoot+0x90>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	330c      	adds	r3, #12
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d122      	bne.n	80012a6 <shoot+0x6e>
			fires[i].col = player->y;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4918      	ldr	r1, [pc, #96]	; (80012c8 <shoot+0x90>)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	440b      	add	r3, r1
 800126c:	601a      	str	r2, [r3, #0]
			fires[i].row = player->x;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4915      	ldr	r1, [pc, #84]	; (80012c8 <shoot+0x90>)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	440b      	add	r3, r1
 800127a:	3304      	adds	r3, #4
 800127c:	601a      	str	r2, [r3, #0]
			fires[i].direction = player->direction;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a19      	ldrb	r1, [r3, #8]
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <shoot+0x90>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	3308      	adds	r3, #8
 800128c:	460a      	mov	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]
			fires[i].isAlive = 1;
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <shoot+0x90>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	330c      	adds	r3, #12
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
			shootFlag = 1;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <shoot+0x94>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
			break;
 80012a4:	e008      	b.n	80012b8 <shoot+0x80>
	for (int i = 0; i < num_shooted_bullet; i++) {
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <shoot+0x8c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dbcc      	blt.n	8001250 <shoot+0x18>
		}
	}
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	200005c8 	.word	0x200005c8
 80012c8:	200005cc 	.word	0x200005cc
 80012cc:	200005c4 	.word	0x200005c4

080012d0 <shotPosition>:

void shotPosition() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
	for (int k = 0; k < num_shooted_bullet; k++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e264      	b.n	80017a6 <shotPosition+0x4d6>
		if (fires[k].isAlive) {
 80012dc:	4a93      	ldr	r2, [pc, #588]	; (800152c <shotPosition+0x25c>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	4413      	add	r3, r2
 80012e4:	330c      	adds	r3, #12
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8259 	beq.w	80017a0 <shotPosition+0x4d0>

			int col = fires[k].col;
 80012ee:	4a8f      	ldr	r2, [pc, #572]	; (800152c <shotPosition+0x25c>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60bb      	str	r3, [r7, #8]
			int row = fires[k].row;
 80012fa:	4a8c      	ldr	r2, [pc, #560]	; (800152c <shotPosition+0x25c>)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	4413      	add	r3, r2
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	607b      	str	r3, [r7, #4]

			switch (fires[k].direction) {
 8001308:	4a88      	ldr	r2, [pc, #544]	; (800152c <shotPosition+0x25c>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	3308      	adds	r3, #8
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b03      	cmp	r3, #3
 8001316:	f200 8081 	bhi.w	800141c <shotPosition+0x14c>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <shotPosition+0x50>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	080013bf 	.word	0x080013bf
 8001324:	08001349 	.word	0x08001349
 8001328:	080013a7 	.word	0x080013a7
 800132c:	08001331 	.word	0x08001331
			case RIGHT:
				fires[k].col++;
 8001330:	4a7e      	ldr	r2, [pc, #504]	; (800152c <shotPosition+0x25c>)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4413      	add	r3, r2
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	497b      	ldr	r1, [pc, #492]	; (800152c <shotPosition+0x25c>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	440b      	add	r3, r1
 8001344:	601a      	str	r2, [r3, #0]
				break;
 8001346:	e06e      	b.n	8001426 <shotPosition+0x156>
			case DOWN:
				if (row == 0) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d107      	bne.n	800135e <shotPosition+0x8e>
					fires[k].row = 1;
 800134e:	4a77      	ldr	r2, [pc, #476]	; (800152c <shotPosition+0x25c>)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	3304      	adds	r3, #4
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
				} else if (row == 1 & col < 20) {
					fires[k].row = 0;
					fires[k].col += 20;
				}
				break;
 800135c:	e060      	b.n	8001420 <shotPosition+0x150>
				} else if (row == 1 & col < 20) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b01      	cmp	r3, #1
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2da      	uxtb	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b13      	cmp	r3, #19
 800136e:	bfd4      	ite	le
 8001370:	2301      	movle	r3, #1
 8001372:	2300      	movgt	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4013      	ands	r3, r2
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d050      	beq.n	8001420 <shotPosition+0x150>
					fires[k].row = 0;
 800137e:	4a6b      	ldr	r2, [pc, #428]	; (800152c <shotPosition+0x25c>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	3304      	adds	r3, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
					fires[k].col += 20;
 800138c:	4a67      	ldr	r2, [pc, #412]	; (800152c <shotPosition+0x25c>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f103 0214 	add.w	r2, r3, #20
 800139a:	4964      	ldr	r1, [pc, #400]	; (800152c <shotPosition+0x25c>)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	440b      	add	r3, r1
 80013a2:	601a      	str	r2, [r3, #0]
				break;
 80013a4:	e03c      	b.n	8001420 <shotPosition+0x150>
			case LEFT:
				fires[k].col--;
 80013a6:	4a61      	ldr	r2, [pc, #388]	; (800152c <shotPosition+0x25c>)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1e5a      	subs	r2, r3, #1
 80013b2:	495e      	ldr	r1, [pc, #376]	; (800152c <shotPosition+0x25c>)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	440b      	add	r3, r1
 80013ba:	601a      	str	r2, [r3, #0]
				break;
 80013bc:	e033      	b.n	8001426 <shotPosition+0x156>
			case UP:
				if (row == 1) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <shotPosition+0x104>
					fires[k].row = 0;
 80013c4:	4a59      	ldr	r2, [pc, #356]	; (800152c <shotPosition+0x25c>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
				} else if (row == 0 & col >= 20) {
					fires[k].row = 1;
					fires[k].col -= 20;
				}
				break;
 80013d2:	e027      	b.n	8001424 <shotPosition+0x154>
				} else if (row == 0 & col >= 20) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf0c      	ite	eq
 80013da:	2301      	moveq	r3, #1
 80013dc:	2300      	movne	r3, #0
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b13      	cmp	r3, #19
 80013e4:	bfcc      	ite	gt
 80013e6:	2301      	movgt	r3, #1
 80013e8:	2300      	movle	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d017      	beq.n	8001424 <shotPosition+0x154>
					fires[k].row = 1;
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <shotPosition+0x25c>)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	3304      	adds	r3, #4
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
					fires[k].col -= 20;
 8001402:	4a4a      	ldr	r2, [pc, #296]	; (800152c <shotPosition+0x25c>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	4413      	add	r3, r2
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1a3 0214 	sub.w	r2, r3, #20
 8001410:	4946      	ldr	r1, [pc, #280]	; (800152c <shotPosition+0x25c>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	440b      	add	r3, r1
 8001418:	601a      	str	r2, [r3, #0]
				break;
 800141a:	e003      	b.n	8001424 <shotPosition+0x154>
			default:
				break;
 800141c:	bf00      	nop
 800141e:	e002      	b.n	8001426 <shotPosition+0x156>
				break;
 8001420:	bf00      	nop
 8001422:	e000      	b.n	8001426 <shotPosition+0x156>
				break;
 8001424:	bf00      	nop
			}

			int f = lcd[fires[k].col][fires[k].row];
 8001426:	4a41      	ldr	r2, [pc, #260]	; (800152c <shotPosition+0x25c>)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4413      	add	r3, r2
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	493e      	ldr	r1, [pc, #248]	; (800152c <shotPosition+0x25c>)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	440b      	add	r3, r1
 8001438:	3304      	adds	r3, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	493c      	ldr	r1, [pc, #240]	; (8001530 <shotPosition+0x260>)
 800143e:	2026      	movs	r0, #38	; 0x26
 8001440:	fb00 f202 	mul.w	r2, r0, r2
 8001444:	440a      	add	r2, r1
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	603b      	str	r3, [r7, #0]

			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d006      	beq.n	8001460 <shotPosition+0x190>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d003      	beq.n	8001460 <shotPosition+0x190>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b05      	cmp	r3, #5
 800145c:	f040 80b3 	bne.w	80015c6 <shotPosition+0x2f6>
				do {
					switch (fires[k].direction) {
 8001460:	4a32      	ldr	r2, [pc, #200]	; (800152c <shotPosition+0x25c>)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	3308      	adds	r3, #8
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b03      	cmp	r3, #3
 800146e:	f200 8085 	bhi.w	800157c <shotPosition+0x2ac>
 8001472:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <shotPosition+0x1a8>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	08001517 	.word	0x08001517
 800147c:	080014a1 	.word	0x080014a1
 8001480:	080014ff 	.word	0x080014ff
 8001484:	08001489 	.word	0x08001489
					case RIGHT:
						fires[k].col++;
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <shotPosition+0x25c>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	4925      	ldr	r1, [pc, #148]	; (800152c <shotPosition+0x25c>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	440b      	add	r3, r1
 800149c:	601a      	str	r2, [r3, #0]
						break;
 800149e:	e072      	b.n	8001586 <shotPosition+0x2b6>
					case DOWN:
						if (row == 0) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <shotPosition+0x1e6>
							fires[k].row = 1;
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <shotPosition+0x25c>)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	3304      	adds	r3, #4
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
						} else if (row == 1 & col < 20) {
							fires[k].row = 0;
							fires[k].col += 20;
						}
						break;
 80014b4:	e064      	b.n	8001580 <shotPosition+0x2b0>
						} else if (row == 1 & col < 20) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b13      	cmp	r3, #19
 80014c6:	bfd4      	ite	le
 80014c8:	2301      	movle	r3, #1
 80014ca:	2300      	movgt	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d054      	beq.n	8001580 <shotPosition+0x2b0>
							fires[k].row = 0;
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <shotPosition+0x25c>)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	3304      	adds	r3, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
							fires[k].col += 20;
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <shotPosition+0x25c>)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f103 0214 	add.w	r2, r3, #20
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <shotPosition+0x25c>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	440b      	add	r3, r1
 80014fa:	601a      	str	r2, [r3, #0]
						break;
 80014fc:	e040      	b.n	8001580 <shotPosition+0x2b0>
					case LEFT:
						fires[k].col--;
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <shotPosition+0x25c>)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	4413      	add	r3, r2
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <shotPosition+0x25c>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	440b      	add	r3, r1
 8001512:	601a      	str	r2, [r3, #0]
						break;
 8001514:	e037      	b.n	8001586 <shotPosition+0x2b6>
					case UP:
						if (row == 1) {
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d10b      	bne.n	8001534 <shotPosition+0x264>
							fires[k].row = 0;
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <shotPosition+0x25c>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4413      	add	r3, r2
 8001524:	3304      	adds	r3, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
						} else if (row == 0 & col >= 20) {
							fires[k].row = 1;
							fires[k].col -= 20;
						}
						break;
 800152a:	e02b      	b.n	8001584 <shotPosition+0x2b4>
 800152c:	200005cc 	.word	0x200005cc
 8001530:	20000cec 	.word	0x20000cec
						} else if (row == 0 & col >= 20) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2da      	uxtb	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b13      	cmp	r3, #19
 8001544:	bfcc      	ite	gt
 8001546:	2301      	movgt	r3, #1
 8001548:	2300      	movle	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4013      	ands	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d017      	beq.n	8001584 <shotPosition+0x2b4>
							fires[k].row = 1;
 8001554:	4a99      	ldr	r2, [pc, #612]	; (80017bc <shotPosition+0x4ec>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	3304      	adds	r3, #4
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
							fires[k].col -= 20;
 8001562:	4a96      	ldr	r2, [pc, #600]	; (80017bc <shotPosition+0x4ec>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1a3 0214 	sub.w	r2, r3, #20
 8001570:	4992      	ldr	r1, [pc, #584]	; (80017bc <shotPosition+0x4ec>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	440b      	add	r3, r1
 8001578:	601a      	str	r2, [r3, #0]
						break;
 800157a:	e003      	b.n	8001584 <shotPosition+0x2b4>
					default:
						break;
 800157c:	bf00      	nop
 800157e:	e002      	b.n	8001586 <shotPosition+0x2b6>
						break;
 8001580:	bf00      	nop
 8001582:	e000      	b.n	8001586 <shotPosition+0x2b6>
						break;
 8001584:	bf00      	nop
					}

					f = lcd[fires[k].col][fires[k].row];
 8001586:	4a8d      	ldr	r2, [pc, #564]	; (80017bc <shotPosition+0x4ec>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4413      	add	r3, r2
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	498a      	ldr	r1, [pc, #552]	; (80017bc <shotPosition+0x4ec>)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	440b      	add	r3, r1
 8001598:	3304      	adds	r3, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4988      	ldr	r1, [pc, #544]	; (80017c0 <shotPosition+0x4f0>)
 800159e:	2026      	movs	r0, #38	; 0x26
 80015a0:	fb00 f202 	mul.w	r2, r0, r2
 80015a4:	440a      	add	r2, r1
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	603b      	str	r3, [r7, #0]
				} while (f == 5 || f == 1 || f == 2);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	f43f af56 	beq.w	8001460 <shotPosition+0x190>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	f43f af52 	beq.w	8001460 <shotPosition+0x190>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	f43f af4e 	beq.w	8001460 <shotPosition+0x190>
			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 80015c4:	e09b      	b.n	80016fe <shotPosition+0x42e>
			} else if (f == 4) { //if wall
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d107      	bne.n	80015dc <shotPosition+0x30c>
				fires[k].isAlive = 0;
 80015cc:	4a7b      	ldr	r2, [pc, #492]	; (80017bc <shotPosition+0x4ec>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4413      	add	r3, r2
 80015d4:	330c      	adds	r3, #12
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e090      	b.n	80016fe <shotPosition+0x42e>
			} else if (f == 3) { //if barrier
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d132      	bne.n	8001648 <shotPosition+0x378>
				lcd[fires[k].row][fires[k].col] = ' ';
 80015e2:	4a76      	ldr	r2, [pc, #472]	; (80017bc <shotPosition+0x4ec>)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	4413      	add	r3, r2
 80015ea:	3304      	adds	r3, #4
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4973      	ldr	r1, [pc, #460]	; (80017bc <shotPosition+0x4ec>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	440b      	add	r3, r1
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4971      	ldr	r1, [pc, #452]	; (80017c0 <shotPosition+0x4f0>)
 80015fa:	2026      	movs	r0, #38	; 0x26
 80015fc:	fb00 f202 	mul.w	r2, r0, r2
 8001600:	440a      	add	r2, r1
 8001602:	4413      	add	r3, r2
 8001604:	2220      	movs	r2, #32
 8001606:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, lcd[fires[k].row][fires[k].col], 1, 100000);
 8001608:	4a6c      	ldr	r2, [pc, #432]	; (80017bc <shotPosition+0x4ec>)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	3304      	adds	r3, #4
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4969      	ldr	r1, [pc, #420]	; (80017bc <shotPosition+0x4ec>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	440b      	add	r3, r1
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4968      	ldr	r1, [pc, #416]	; (80017c0 <shotPosition+0x4f0>)
 8001620:	2026      	movs	r0, #38	; 0x26
 8001622:	fb00 f202 	mul.w	r2, r0, r2
 8001626:	440a      	add	r2, r1
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <shotPosition+0x4f4>)
 8001630:	2201      	movs	r2, #1
 8001632:	4865      	ldr	r0, [pc, #404]	; (80017c8 <shotPosition+0x4f8>)
 8001634:	f004 fd94 	bl	8006160 <HAL_UART_Transmit>
				fires[k].isAlive = 0;
 8001638:	4a60      	ldr	r2, [pc, #384]	; (80017bc <shotPosition+0x4ec>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	330c      	adds	r3, #12
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e05a      	b.n	80016fe <shotPosition+0x42e>
			} else if (fires[k].col == playerR.y && fires[k].row == playerR.x) {
 8001648:	4a5c      	ldr	r2, [pc, #368]	; (80017bc <shotPosition+0x4ec>)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <shotPosition+0x4fc>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	d111      	bne.n	800167e <shotPosition+0x3ae>
 800165a:	4a58      	ldr	r2, [pc, #352]	; (80017bc <shotPosition+0x4ec>)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	4413      	add	r3, r2
 8001662:	3304      	adds	r3, #4
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <shotPosition+0x4fc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d107      	bne.n	800167e <shotPosition+0x3ae>
				//decreaseHealth(&player[0]);
				fires[k].isAlive = 0;
 800166e:	4a53      	ldr	r2, [pc, #332]	; (80017bc <shotPosition+0x4ec>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	330c      	adds	r3, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e03f      	b.n	80016fe <shotPosition+0x42e>
			} else if (fires[k].col == playerL.y && fires[k].row == playerL.x) {
 800167e:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <shotPosition+0x4ec>)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4413      	add	r3, r2
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <shotPosition+0x500>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d111      	bne.n	80016b4 <shotPosition+0x3e4>
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <shotPosition+0x4ec>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	4413      	add	r3, r2
 8001698:	3304      	adds	r3, #4
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <shotPosition+0x500>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <shotPosition+0x3e4>
				//decreaseHealth(&playerL]);
				fires[k].isAlive = 0;
 80016a4:	4a45      	ldr	r2, [pc, #276]	; (80017bc <shotPosition+0x4ec>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	4413      	add	r3, r2
 80016ac:	330c      	adds	r3, #12
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e024      	b.n	80016fe <shotPosition+0x42e>
			} else if (fires[k].col < 0 || fires[k].col >= 40
 80016b4:	4a41      	ldr	r2, [pc, #260]	; (80017bc <shotPosition+0x4ec>)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4413      	add	r3, r2
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db16      	blt.n	80016f0 <shotPosition+0x420>
 80016c2:	4a3e      	ldr	r2, [pc, #248]	; (80017bc <shotPosition+0x4ec>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b27      	cmp	r3, #39	; 0x27
 80016ce:	dc0f      	bgt.n	80016f0 <shotPosition+0x420>
					|| fires[k].row < 0 || fires[k].row >= 2) {
 80016d0:	4a3a      	ldr	r2, [pc, #232]	; (80017bc <shotPosition+0x4ec>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db07      	blt.n	80016f0 <shotPosition+0x420>
 80016e0:	4a36      	ldr	r2, [pc, #216]	; (80017bc <shotPosition+0x4ec>)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	4413      	add	r3, r2
 80016e8:	3304      	adds	r3, #4
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	dd06      	ble.n	80016fe <shotPosition+0x42e>
				fires[k].isAlive = 0;
 80016f0:	4a32      	ldr	r2, [pc, #200]	; (80017bc <shotPosition+0x4ec>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	330c      	adds	r3, #12
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
			}

			if (!(col == playerR.y && row == playerR.x)
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <shotPosition+0x4fc>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	429a      	cmp	r2, r3
 8001706:	d104      	bne.n	8001712 <shotPosition+0x442>
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <shotPosition+0x4fc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	d014      	beq.n	800173c <shotPosition+0x46c>
					&& !(col == playerL.y && row == playerR.x)) {
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <shotPosition+0x500>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	429a      	cmp	r2, r3
 800171a:	d104      	bne.n	8001726 <shotPosition+0x456>
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <shotPosition+0x4fc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d00a      	beq.n	800173c <shotPosition+0x46c>
				setCursor(col, row);
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f7ff f80f 	bl	800074c <setCursor>
				print(" ");
 800172e:	4829      	ldr	r0, [pc, #164]	; (80017d4 <shotPosition+0x504>)
 8001730:	f7ff f854 	bl	80007dc <print>
				HAL_Delay(500);
 8001734:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001738:	f001 fcb8 	bl	80030ac <HAL_Delay>
			}

			if (fires[k].isAlive) {
 800173c:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <shotPosition+0x4ec>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	330c      	adds	r3, #12
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d012      	beq.n	8001772 <shotPosition+0x4a2>
				setCursor(fires[k].col, fires[k].row);
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <shotPosition+0x4ec>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4919      	ldr	r1, [pc, #100]	; (80017bc <shotPosition+0x4ec>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	440b      	add	r3, r1
 800175e:	3304      	adds	r3, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f7fe fff1 	bl	800074c <setCursor>
				write(6);
 800176a:	2006      	movs	r0, #6
 800176c:	f7ff f898 	bl	80008a0 <write>
 8001770:	e016      	b.n	80017a0 <shotPosition+0x4d0>
			} else {
				num_shooted_bullet--;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <shotPosition+0x508>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3b01      	subs	r3, #1
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <shotPosition+0x508>)
 800177a:	6013      	str	r3, [r2, #0]
				shootFlag = 0;
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <shotPosition+0x50c>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
				fires[k].col = -1;
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <shotPosition+0x4ec>)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	601a      	str	r2, [r3, #0]
				fires[k].row = -1;
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <shotPosition+0x4ec>)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	f04f 32ff 	mov.w	r2, #4294967295
 800179e:	601a      	str	r2, [r3, #0]
	for (int k = 0; k < num_shooted_bullet; k++) {
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <shotPosition+0x508>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f6ff ad95 	blt.w	80012dc <shotPosition+0xc>
			}
		}

	}
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200005cc 	.word	0x200005cc
 80017c0:	20000cec 	.word	0x20000cec
 80017c4:	000186a0 	.word	0x000186a0
 80017c8:	2000023c 	.word	0x2000023c
 80017cc:	20000c0c 	.word	0x20000c0c
 80017d0:	20000c18 	.word	0x20000c18
 80017d4:	08008768 	.word	0x08008768
 80017d8:	200005c8 	.word	0x200005c8
 80017dc:	200005c4 	.word	0x200005c4

080017e0 <movement>:
void movement(Player *player, int currentState) {
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
//
//	sprintf(buffer, "Player X: %d, Player Y: %d", player->x, player->y); // Convert integers to string
//
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//	HAL_MAX_DELAY); // Transmit string over UART
	int oldX = player->x;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
	int oldY = player->y;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60bb      	str	r3, [r7, #8]
	switch (currentState) {
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	f200 8247 	bhi.w	8001c8c <movement+0x4ac>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <movement+0x24>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	080018f9 	.word	0x080018f9
 800180c:	08001a61 	.word	0x08001a61
 8001810:	08001bb9 	.word	0x08001bb9
	case 0:	//top

		if (player->x == 1 && lcd[0][player->y] != 4
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d124      	bne.n	8001866 <movement+0x86>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a8b      	ldr	r2, [pc, #556]	; (8001a50 <movement+0x270>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	2b04      	cmp	r3, #4
 8001826:	d01e      	beq.n	8001866 <movement+0x86>
				&& lcd[0][player->y] != 3) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a88      	ldr	r2, [pc, #544]	; (8001a50 <movement+0x270>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d018      	beq.n	8001866 <movement+0x86>
			//catching heart and bullet
			if (lcd[0][player->y] == 1) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a85      	ldr	r2, [pc, #532]	; (8001a50 <movement+0x270>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d104      	bne.n	800184a <movement+0x6a>
				increase(1, player);
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff fc94 	bl	8001170 <increase>
 8001848:	e009      	b.n	800185e <movement+0x7e>
			} else if (lcd[0][player->y] == 5) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a80      	ldr	r2, [pc, #512]	; (8001a50 <movement+0x270>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d103      	bne.n	800185e <movement+0x7e>
				increase(0, player);
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fc89 	bl	8001170 <increase>
			}
			player->x = 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e047      	b.n	80018f6 <movement+0x116>
		} else if (player->x == 0 && player->y >= 20) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d13a      	bne.n	80018e4 <movement+0x104>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b13      	cmp	r3, #19
 8001874:	dd36      	ble.n	80018e4 <movement+0x104>
			if (lcd[1][(player->y) - 20] != 4
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	3b14      	subs	r3, #20
 800187c:	4a74      	ldr	r2, [pc, #464]	; (8001a50 <movement+0x270>)
 800187e:	4413      	add	r3, r2
 8001880:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001884:	2b04      	cmp	r3, #4
 8001886:	d035      	beq.n	80018f4 <movement+0x114>
					&& lcd[1][(player->y) - 20] != 3) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	3b14      	subs	r3, #20
 800188e:	4a70      	ldr	r2, [pc, #448]	; (8001a50 <movement+0x270>)
 8001890:	4413      	add	r3, r2
 8001892:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001896:	2b03      	cmp	r3, #3
 8001898:	d02c      	beq.n	80018f4 <movement+0x114>
				//catching heart and bullet
				if (lcd[1][(player->y) - 20] == 1) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	3b14      	subs	r3, #20
 80018a0:	4a6b      	ldr	r2, [pc, #428]	; (8001a50 <movement+0x270>)
 80018a2:	4413      	add	r3, r2
 80018a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d104      	bne.n	80018b6 <movement+0xd6>
					increase(1, player);
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fc5e 	bl	8001170 <increase>
 80018b4:	e00c      	b.n	80018d0 <movement+0xf0>
				} else if (lcd[1][(player->y) - 20] == 5) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	3b14      	subs	r3, #20
 80018bc:	4a64      	ldr	r2, [pc, #400]	; (8001a50 <movement+0x270>)
 80018be:	4413      	add	r3, r2
 80018c0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d103      	bne.n	80018d0 <movement+0xf0>
					increase(0, player);
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fc50 	bl	8001170 <increase>
				}
				player->x = 1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
				player->y = (player->y) - 20;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f1a3 0214 	sub.w	r2, r3, #20
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	605a      	str	r2, [r3, #4]
			if (lcd[1][(player->y) - 20] != 4
 80018e2:	e007      	b.n	80018f4 <movement+0x114>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT TOP", 8,
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	2208      	movs	r2, #8
 80018ea:	495a      	ldr	r1, [pc, #360]	; (8001a54 <movement+0x274>)
 80018ec:	485a      	ldr	r0, [pc, #360]	; (8001a58 <movement+0x278>)
 80018ee:	f004 fc37 	bl	8006160 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 80018f2:	e1cb      	b.n	8001c8c <movement+0x4ac>
			if (lcd[1][(player->y) - 20] != 4
 80018f4:	bf00      	nop
		break;
 80018f6:	e1c9      	b.n	8001c8c <movement+0x4ac>
	case 1:	//right

		if (player->y >= 0 && player->y < 19) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db4c      	blt.n	800199a <movement+0x1ba>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b12      	cmp	r3, #18
 8001906:	dc48      	bgt.n	800199a <movement+0x1ba>
			if (lcd[player->x][(player->y) + 1] != 3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	3301      	adds	r3, #1
 8001912:	494f      	ldr	r1, [pc, #316]	; (8001a50 <movement+0x270>)
 8001914:	2026      	movs	r0, #38	; 0x26
 8001916:	fb00 f202 	mul.w	r2, r0, r2
 800191a:	440a      	add	r2, r1
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b03      	cmp	r3, #3
 8001922:	f000 8091 	beq.w	8001a48 <movement+0x268>
					&& lcd[player->x][(player->y) + 1] != 4) {
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	4947      	ldr	r1, [pc, #284]	; (8001a50 <movement+0x270>)
 8001932:	2026      	movs	r0, #38	; 0x26
 8001934:	fb00 f202 	mul.w	r2, r0, r2
 8001938:	440a      	add	r2, r1
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b04      	cmp	r3, #4
 8001940:	f000 8082 	beq.w	8001a48 <movement+0x268>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	3301      	adds	r3, #1
 800194e:	4940      	ldr	r1, [pc, #256]	; (8001a50 <movement+0x270>)
 8001950:	2026      	movs	r0, #38	; 0x26
 8001952:	fb00 f202 	mul.w	r2, r0, r2
 8001956:	440a      	add	r2, r1
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d104      	bne.n	800196a <movement+0x18a>
					increase(1, player);
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	2001      	movs	r0, #1
 8001964:	f7ff fc04 	bl	8001170 <increase>
 8001968:	e011      	b.n	800198e <movement+0x1ae>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	3301      	adds	r3, #1
 8001974:	4936      	ldr	r1, [pc, #216]	; (8001a50 <movement+0x270>)
 8001976:	2026      	movs	r0, #38	; 0x26
 8001978:	fb00 f202 	mul.w	r2, r0, r2
 800197c:	440a      	add	r2, r1
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b05      	cmp	r3, #5
 8001984:	d103      	bne.n	800198e <movement+0x1ae>
					increase(0, player);
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff fbf1 	bl	8001170 <increase>
				}
				player->y = (player->y) + 1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 8001998:	e056      	b.n	8001a48 <movement+0x268>
			}
		} else if (player->y < 39 && player->y >= 20) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b26      	cmp	r3, #38	; 0x26
 80019a0:	dc4a      	bgt.n	8001a38 <movement+0x258>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b13      	cmp	r3, #19
 80019a8:	dd46      	ble.n	8001a38 <movement+0x258>
			if (lcd[player->x][(player->y) + 1] != 3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4926      	ldr	r1, [pc, #152]	; (8001a50 <movement+0x270>)
 80019b6:	2026      	movs	r0, #38	; 0x26
 80019b8:	fb00 f202 	mul.w	r2, r0, r2
 80019bc:	440a      	add	r2, r1
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d042      	beq.n	8001a4c <movement+0x26c>
					&& lcd[player->x][(player->y) + 1] != 4) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	491f      	ldr	r1, [pc, #124]	; (8001a50 <movement+0x270>)
 80019d2:	2026      	movs	r0, #38	; 0x26
 80019d4:	fb00 f202 	mul.w	r2, r0, r2
 80019d8:	440a      	add	r2, r1
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d034      	beq.n	8001a4c <movement+0x26c>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4918      	ldr	r1, [pc, #96]	; (8001a50 <movement+0x270>)
 80019ee:	2026      	movs	r0, #38	; 0x26
 80019f0:	fb00 f202 	mul.w	r2, r0, r2
 80019f4:	440a      	add	r2, r1
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d104      	bne.n	8001a08 <movement+0x228>
					increase(1, player);
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fbb5 	bl	8001170 <increase>
 8001a06:	e011      	b.n	8001a2c <movement+0x24c>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	3301      	adds	r3, #1
 8001a12:	490f      	ldr	r1, [pc, #60]	; (8001a50 <movement+0x270>)
 8001a14:	2026      	movs	r0, #38	; 0x26
 8001a16:	fb00 f202 	mul.w	r2, r0, r2
 8001a1a:	440a      	add	r2, r1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d103      	bne.n	8001a2c <movement+0x24c>
					increase(0, player);
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fba2 	bl	8001170 <increase>
				}
				player->y = (player->y) + 1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 8001a36:	e009      	b.n	8001a4c <movement+0x26c>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT RIGHt", 10,
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4907      	ldr	r1, [pc, #28]	; (8001a5c <movement+0x27c>)
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <movement+0x278>)
 8001a42:	f004 fb8d 	bl	8006160 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001a46:	e121      	b.n	8001c8c <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001a48:	bf00      	nop
 8001a4a:	e11f      	b.n	8001c8c <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001a4c:	bf00      	nop
		break;
 8001a4e:	e11d      	b.n	8001c8c <movement+0x4ac>
 8001a50:	20000cec 	.word	0x20000cec
 8001a54:	0800876c 	.word	0x0800876c
 8001a58:	2000023c 	.word	0x2000023c
 8001a5c:	08008778 	.word	0x08008778

	case 2:	//left

		if (player->y > 0 && player->y <= 19) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	dd4c      	ble.n	8001b02 <movement+0x322>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b13      	cmp	r3, #19
 8001a6e:	dc48      	bgt.n	8001b02 <movement+0x322>
			if (lcd[player->x][(player->y) - 1] != 3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4997      	ldr	r1, [pc, #604]	; (8001cd8 <movement+0x4f8>)
 8001a7c:	2026      	movs	r0, #38	; 0x26
 8001a7e:	fb00 f202 	mul.w	r2, r0, r2
 8001a82:	440a      	add	r2, r1
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	f000 8091 	beq.w	8001bb0 <movement+0x3d0>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	498f      	ldr	r1, [pc, #572]	; (8001cd8 <movement+0x4f8>)
 8001a9a:	2026      	movs	r0, #38	; 0x26
 8001a9c:	fb00 f202 	mul.w	r2, r0, r2
 8001aa0:	440a      	add	r2, r1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	f000 8082 	beq.w	8001bb0 <movement+0x3d0>
				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	4988      	ldr	r1, [pc, #544]	; (8001cd8 <movement+0x4f8>)
 8001ab8:	2026      	movs	r0, #38	; 0x26
 8001aba:	fb00 f202 	mul.w	r2, r0, r2
 8001abe:	440a      	add	r2, r1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d104      	bne.n	8001ad2 <movement+0x2f2>
					increase(1, player);
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fb50 	bl	8001170 <increase>
 8001ad0:	e011      	b.n	8001af6 <movement+0x316>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	497e      	ldr	r1, [pc, #504]	; (8001cd8 <movement+0x4f8>)
 8001ade:	2026      	movs	r0, #38	; 0x26
 8001ae0:	fb00 f202 	mul.w	r2, r0, r2
 8001ae4:	440a      	add	r2, r1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d103      	bne.n	8001af6 <movement+0x316>
					increase(0, player);
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fb3d 	bl	8001170 <increase>
				}

				player->y = (player->y) - 1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	1e5a      	subs	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001b00:	e056      	b.n	8001bb0 <movement+0x3d0>
			}
		} else if (player->y <= 39 && player->y > 20) {
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b27      	cmp	r3, #39	; 0x27
 8001b08:	dc4a      	bgt.n	8001ba0 <movement+0x3c0>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b14      	cmp	r3, #20
 8001b10:	dd46      	ble.n	8001ba0 <movement+0x3c0>
			if (lcd[player->x][(player->y) - 1] != 3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	496e      	ldr	r1, [pc, #440]	; (8001cd8 <movement+0x4f8>)
 8001b1e:	2026      	movs	r0, #38	; 0x26
 8001b20:	fb00 f202 	mul.w	r2, r0, r2
 8001b24:	440a      	add	r2, r1
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d042      	beq.n	8001bb4 <movement+0x3d4>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	4967      	ldr	r1, [pc, #412]	; (8001cd8 <movement+0x4f8>)
 8001b3a:	2026      	movs	r0, #38	; 0x26
 8001b3c:	fb00 f202 	mul.w	r2, r0, r2
 8001b40:	440a      	add	r2, r1
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d034      	beq.n	8001bb4 <movement+0x3d4>

				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4960      	ldr	r1, [pc, #384]	; (8001cd8 <movement+0x4f8>)
 8001b56:	2026      	movs	r0, #38	; 0x26
 8001b58:	fb00 f202 	mul.w	r2, r0, r2
 8001b5c:	440a      	add	r2, r1
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d104      	bne.n	8001b70 <movement+0x390>
					increase(1, player);
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff fb01 	bl	8001170 <increase>
 8001b6e:	e011      	b.n	8001b94 <movement+0x3b4>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	4957      	ldr	r1, [pc, #348]	; (8001cd8 <movement+0x4f8>)
 8001b7c:	2026      	movs	r0, #38	; 0x26
 8001b7e:	fb00 f202 	mul.w	r2, r0, r2
 8001b82:	440a      	add	r2, r1
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d103      	bne.n	8001b94 <movement+0x3b4>
					increase(0, player);
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff faee 	bl	8001170 <increase>
				}

				player->y = (player->y) - 1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001b9e:	e009      	b.n	8001bb4 <movement+0x3d4>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT LEFT", 9,
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	2209      	movs	r2, #9
 8001ba6:	494d      	ldr	r1, [pc, #308]	; (8001cdc <movement+0x4fc>)
 8001ba8:	484d      	ldr	r0, [pc, #308]	; (8001ce0 <movement+0x500>)
 8001baa:	f004 fad9 	bl	8006160 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001bae:	e06d      	b.n	8001c8c <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001bb0:	bf00      	nop
 8001bb2:	e06b      	b.n	8001c8c <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001bb4:	bf00      	nop
		break;
 8001bb6:	e069      	b.n	8001c8c <movement+0x4ac>
		break;
	case 3:	//bot
		if (player->x == 0 && lcd[1][player->y] != 4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d12c      	bne.n	8001c1a <movement+0x43a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a44      	ldr	r2, [pc, #272]	; (8001cd8 <movement+0x4f8>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d024      	beq.n	8001c1a <movement+0x43a>
				&& lcd[1][player->y] != 3) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <movement+0x4f8>)
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d01c      	beq.n	8001c1a <movement+0x43a>
			//catching heart and bullet
			if (lcd[1][player->y] == 1) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a3c      	ldr	r2, [pc, #240]	; (8001cd8 <movement+0x4f8>)
 8001be6:	4413      	add	r3, r2
 8001be8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d104      	bne.n	8001bfa <movement+0x41a>
				increase(1, player);
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fabc 	bl	8001170 <increase>
 8001bf8:	e00b      	b.n	8001c12 <movement+0x432>
			} else if (lcd[1][player->y] == 5) {
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a36      	ldr	r2, [pc, #216]	; (8001cd8 <movement+0x4f8>)
 8001c00:	4413      	add	r3, r2
 8001c02:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d103      	bne.n	8001c12 <movement+0x432>
				increase(0, player);
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff faaf 	bl	8001170 <increase>
			}

			player->x = 1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e037      	b.n	8001c8a <movement+0x4aa>
		} else if (player->x == 1 && player->y < 20) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d12b      	bne.n	8001c7a <movement+0x49a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b13      	cmp	r3, #19
 8001c28:	dc27      	bgt.n	8001c7a <movement+0x49a>
			if (lcd[0][(player->y) + 20] != 4) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	3314      	adds	r3, #20
 8001c30:	4a29      	ldr	r2, [pc, #164]	; (8001cd8 <movement+0x4f8>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d028      	beq.n	8001c8a <movement+0x4aa>
				//catching heart and bullet
				if (lcd[0][(player->y) + 20] == 1) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	3314      	adds	r3, #20
 8001c3e:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <movement+0x4f8>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d104      	bne.n	8001c50 <movement+0x470>
					increase(1, player);
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff fa91 	bl	8001170 <increase>
 8001c4e:	e00a      	b.n	8001c66 <movement+0x486>
				} else if (lcd[0][(player->y) + 20] == 5) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	3314      	adds	r3, #20
 8001c56:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <movement+0x4f8>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d103      	bne.n	8001c66 <movement+0x486>
					increase(0, player);
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fa85 	bl	8001170 <increase>
				}
				player->x = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
				player->y = (player->y) + 20;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f103 0214 	add.w	r2, r3, #20
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]
			if (lcd[0][(player->y) + 20] != 4) {
 8001c78:	e007      	b.n	8001c8a <movement+0x4aa>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT BOT", 8,
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	2208      	movs	r2, #8
 8001c80:	4918      	ldr	r1, [pc, #96]	; (8001ce4 <movement+0x504>)
 8001c82:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <movement+0x500>)
 8001c84:	f004 fa6c 	bl	8006160 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001c88:	e7ff      	b.n	8001c8a <movement+0x4aa>
 8001c8a:	bf00      	nop
	}

	lcd[player->x][player->y] = player->c;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	7a4c      	ldrb	r4, [r1, #9]
 8001c98:	490f      	ldr	r1, [pc, #60]	; (8001cd8 <movement+0x4f8>)
 8001c9a:	2026      	movs	r0, #38	; 0x26
 8001c9c:	fb00 f202 	mul.w	r2, r0, r2
 8001ca0:	440a      	add	r2, r1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4622      	mov	r2, r4
 8001ca6:	701a      	strb	r2, [r3, #0]

	// Clear the old position on the LCD
	setCursor(oldY, oldX);
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	68b8      	ldr	r0, [r7, #8]
 8001cac:	f7fe fd4e 	bl	800074c <setCursor>
	write(' ');
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	f7fe fdf5 	bl	80008a0 <write>

	// Write the player's character at the new position on the LCD
	setCursor(player->y, player->x);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f7fe fd43 	bl	800074c <setCursor>
	write(player->c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7a5b      	ldrb	r3, [r3, #9]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fde8 	bl	80008a0 <write>

}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	20000cec 	.word	0x20000cec
 8001cdc:	08008784 	.word	0x08008784
 8001ce0:	2000023c 	.word	0x2000023c
 8001ce4:	08008790 	.word	0x08008790

08001ce8 <initializeObjects>:

void initializeObjects() {
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
	playerR.x = 1;
 8001cee:	4ba8      	ldr	r3, [pc, #672]	; (8001f90 <initializeObjects+0x2a8>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
	playerR.y = 19;
 8001cf4:	4ba6      	ldr	r3, [pc, #664]	; (8001f90 <initializeObjects+0x2a8>)
 8001cf6:	2213      	movs	r2, #19
 8001cf8:	605a      	str	r2, [r3, #4]
	playerR.c = 7;
 8001cfa:	4ba5      	ldr	r3, [pc, #660]	; (8001f90 <initializeObjects+0x2a8>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	725a      	strb	r2, [r3, #9]
	playerL.c = 8;
 8001d00:	4ba4      	ldr	r3, [pc, #656]	; (8001f94 <initializeObjects+0x2ac>)
 8001d02:	2208      	movs	r2, #8
 8001d04:	725a      	strb	r2, [r3, #9]
	playerL.x = 1;
 8001d06:	4ba3      	ldr	r3, [pc, #652]	; (8001f94 <initializeObjects+0x2ac>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
	playerL.y = 0;
 8001d0c:	4ba1      	ldr	r3, [pc, #644]	; (8001f94 <initializeObjects+0x2ac>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	e015      	b.n	8001d44 <initializeObjects+0x5c>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
 8001d1c:	e00c      	b.n	8001d38 <initializeObjects+0x50>
			lcd[i][j] = ' ';  // Empty cell
 8001d1e:	4a9e      	ldr	r2, [pc, #632]	; (8001f98 <initializeObjects+0x2b0>)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	2126      	movs	r1, #38	; 0x26
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	441a      	add	r2, r3
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	2220      	movs	r2, #32
 8001d30:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	3301      	adds	r3, #1
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	2b25      	cmp	r3, #37	; 0x25
 8001d3c:	ddef      	ble.n	8001d1e <initializeObjects+0x36>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	dde6      	ble.n	8001d18 <initializeObjects+0x30>
		}
	}

	//hearts
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e036      	b.n	8001dbe <initializeObjects+0xd6>
		hearts[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001d50:	f005 fa66 	bl	8007220 <rand>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b91      	ldr	r3, [pc, #580]	; (8001f9c <initializeObjects+0x2b4>)
 8001d58:	fb83 1302 	smull	r1, r3, r3, r2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	1119      	asrs	r1, r3, #4
 8001d60:	17d3      	asrs	r3, r2, #31
 8001d62:	1ac9      	subs	r1, r1, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a5b      	subs	r3, r3, r1
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	1ad1      	subs	r1, r2, r3
 8001d6e:	3103      	adds	r1, #3
 8001d70:	488b      	ldr	r0, [pc, #556]	; (8001fa0 <initializeObjects+0x2b8>)
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4403      	add	r3, r0
 8001d7e:	6019      	str	r1, [r3, #0]
		hearts[i].y = rand() % 2;       // Random number between 0 and 1
 8001d80:	f005 fa4e 	bl	8007220 <rand>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	bfb8      	it	lt
 8001d8e:	425b      	neglt	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	4883      	ldr	r0, [pc, #524]	; (8001fa0 <initializeObjects+0x2b8>)
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4403      	add	r3, r0
 8001da0:	3304      	adds	r3, #4
 8001da2:	6019      	str	r1, [r3, #0]
		hearts[i].c = 1;
 8001da4:	497e      	ldr	r1, [pc, #504]	; (8001fa0 <initializeObjects+0x2b8>)
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3308      	adds	r3, #8
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	ddc5      	ble.n	8001d50 <initializeObjects+0x68>
	}

	//  mistery boxes
	for (int i = 0; i < NUM_BOXES; i++) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e036      	b.n	8001e38 <initializeObjects+0x150>
		boxes[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001dca:	f005 fa29 	bl	8007220 <rand>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b72      	ldr	r3, [pc, #456]	; (8001f9c <initializeObjects+0x2b4>)
 8001dd2:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	1119      	asrs	r1, r3, #4
 8001dda:	17d3      	asrs	r3, r2, #31
 8001ddc:	1ac9      	subs	r1, r1, r3
 8001dde:	460b      	mov	r3, r1
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	1a5b      	subs	r3, r3, r1
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	1ad1      	subs	r1, r2, r3
 8001de8:	3103      	adds	r1, #3
 8001dea:	486e      	ldr	r0, [pc, #440]	; (8001fa4 <initializeObjects+0x2bc>)
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4403      	add	r3, r0
 8001df8:	6019      	str	r1, [r3, #0]
		boxes[i].y = rand() % 2;       // Random number between 0 and 1
 8001dfa:	f005 fa11 	bl	8007220 <rand>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	bfb8      	it	lt
 8001e08:	425b      	neglt	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4865      	ldr	r0, [pc, #404]	; (8001fa4 <initializeObjects+0x2bc>)
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4403      	add	r3, r0
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	6019      	str	r1, [r3, #0]
		boxes[i].c = 2;
 8001e1e:	4961      	ldr	r1, [pc, #388]	; (8001fa4 <initializeObjects+0x2bc>)
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	ddc5      	ble.n	8001dca <initializeObjects+0xe2>
	}

	//bullets
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e036      	b.n	8001eb2 <initializeObjects+0x1ca>
		bullets[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001e44:	f005 f9ec 	bl	8007220 <rand>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <initializeObjects+0x2b4>)
 8001e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e50:	4413      	add	r3, r2
 8001e52:	1119      	asrs	r1, r3, #4
 8001e54:	17d3      	asrs	r3, r2, #31
 8001e56:	1ac9      	subs	r1, r1, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a5b      	subs	r3, r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	1ad1      	subs	r1, r2, r3
 8001e62:	3103      	adds	r1, #3
 8001e64:	4850      	ldr	r0, [pc, #320]	; (8001fa8 <initializeObjects+0x2c0>)
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4403      	add	r3, r0
 8001e72:	6019      	str	r1, [r3, #0]
		bullets[i].y = rand() % 2;       // Random number between 0 and 1
 8001e74:	f005 f9d4 	bl	8007220 <rand>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	bfb8      	it	lt
 8001e82:	425b      	neglt	r3, r3
 8001e84:	4619      	mov	r1, r3
 8001e86:	4848      	ldr	r0, [pc, #288]	; (8001fa8 <initializeObjects+0x2c0>)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4403      	add	r3, r0
 8001e94:	3304      	adds	r3, #4
 8001e96:	6019      	str	r1, [r3, #0]
		bullets[i].c = 5;
 8001e98:	4943      	ldr	r1, [pc, #268]	; (8001fa8 <initializeObjects+0x2c0>)
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	2205      	movs	r2, #5
 8001eaa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	ddc5      	ble.n	8001e44 <initializeObjects+0x15c>
	}
	//obstacles
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	e036      	b.n	8001f2c <initializeObjects+0x244>
		obstacles[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001ebe:	f005 f9af 	bl	8007220 <rand>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <initializeObjects+0x2b4>)
 8001ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8001eca:	4413      	add	r3, r2
 8001ecc:	1119      	asrs	r1, r3, #4
 8001ece:	17d3      	asrs	r3, r2, #31
 8001ed0:	1ac9      	subs	r1, r1, r3
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	1a5b      	subs	r3, r3, r1
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	1ad1      	subs	r1, r2, r3
 8001edc:	3103      	adds	r1, #3
 8001ede:	4833      	ldr	r0, [pc, #204]	; (8001fac <initializeObjects+0x2c4>)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4403      	add	r3, r0
 8001eec:	6019      	str	r1, [r3, #0]
		obstacles[i].y = rand() % 2;       // Random number between 0 and 1
 8001eee:	f005 f997 	bl	8007220 <rand>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	bfb8      	it	lt
 8001efc:	425b      	neglt	r3, r3
 8001efe:	4619      	mov	r1, r3
 8001f00:	482a      	ldr	r0, [pc, #168]	; (8001fac <initializeObjects+0x2c4>)
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4403      	add	r3, r0
 8001f0e:	3304      	adds	r3, #4
 8001f10:	6019      	str	r1, [r3, #0]
		obstacles[i].c = 4;
 8001f12:	4926      	ldr	r1, [pc, #152]	; (8001fac <initializeObjects+0x2c4>)
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	3308      	adds	r3, #8
 8001f22:	2204      	movs	r2, #4
 8001f24:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	ddc5      	ble.n	8001ebe <initializeObjects+0x1d6>
	}
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e024      	b.n	8001f82 <initializeObjects+0x29a>
		lcd[hearts[i].y][hearts[i].x] = hearts[i].c;
 8001f38:	4919      	ldr	r1, [pc, #100]	; (8001fa0 <initializeObjects+0x2b8>)
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3304      	adds	r3, #4
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	4915      	ldr	r1, [pc, #84]	; (8001fa0 <initializeObjects+0x2b8>)
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	4c11      	ldr	r4, [pc, #68]	; (8001fa0 <initializeObjects+0x2b8>)
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4423      	add	r3, r4
 8001f68:	3308      	adds	r3, #8
 8001f6a:	781c      	ldrb	r4, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <initializeObjects+0x2b0>)
 8001f6e:	2326      	movs	r3, #38	; 0x26
 8001f70:	fb00 f303 	mul.w	r3, r0, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	4622      	mov	r2, r4
 8001f7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	ddd7      	ble.n	8001f38 <initializeObjects+0x250>
	}
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	e035      	b.n	8001ffa <initializeObjects+0x312>
 8001f8e:	bf00      	nop
 8001f90:	20000c0c 	.word	0x20000c0c
 8001f94:	20000c18 	.word	0x20000c18
 8001f98:	20000cec 	.word	0x20000cec
 8001f9c:	92492493 	.word	0x92492493
 8001fa0:	20000c2c 	.word	0x20000c2c
 8001fa4:	20000c50 	.word	0x20000c50
 8001fa8:	20000c68 	.word	0x20000c68
 8001fac:	20000ca4 	.word	0x20000ca4
		lcd[bullets[i].y][bullets[i].x] = bullets[i].c;
 8001fb0:	4956      	ldr	r1, [pc, #344]	; (800210c <initializeObjects+0x424>)
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	4952      	ldr	r1, [pc, #328]	; (800210c <initializeObjects+0x424>)
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	4c4e      	ldr	r4, [pc, #312]	; (800210c <initializeObjects+0x424>)
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4423      	add	r3, r4
 8001fe0:	3308      	adds	r3, #8
 8001fe2:	781c      	ldrb	r4, [r3, #0]
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <initializeObjects+0x428>)
 8001fe6:	2326      	movs	r3, #38	; 0x26
 8001fe8:	fb00 f303 	mul.w	r3, r0, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	ddd7      	ble.n	8001fb0 <initializeObjects+0x2c8>
	}
	for (int i = 0; i < NUM_BOXES; i++) {
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e024      	b.n	8002050 <initializeObjects+0x368>
		lcd[boxes[i].y][boxes[i].x] = boxes[i].c;
 8002006:	4943      	ldr	r1, [pc, #268]	; (8002114 <initializeObjects+0x42c>)
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3304      	adds	r3, #4
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	493e      	ldr	r1, [pc, #248]	; (8002114 <initializeObjects+0x42c>)
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	4c3a      	ldr	r4, [pc, #232]	; (8002114 <initializeObjects+0x42c>)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4423      	add	r3, r4
 8002036:	3308      	adds	r3, #8
 8002038:	781c      	ldrb	r4, [r3, #0]
 800203a:	4a35      	ldr	r2, [pc, #212]	; (8002110 <initializeObjects+0x428>)
 800203c:	2326      	movs	r3, #38	; 0x26
 800203e:	fb00 f303 	mul.w	r3, r0, r3
 8002042:	4413      	add	r3, r2
 8002044:	440b      	add	r3, r1
 8002046:	4622      	mov	r2, r4
 8002048:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3301      	adds	r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	ddd7      	ble.n	8002006 <initializeObjects+0x31e>
	}
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	e024      	b.n	80020a6 <initializeObjects+0x3be>
		lcd[obstacles[i].y][obstacles[i].x] = obstacles[i].c;
 800205c:	492e      	ldr	r1, [pc, #184]	; (8002118 <initializeObjects+0x430>)
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3304      	adds	r3, #4
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	492a      	ldr	r1, [pc, #168]	; (8002118 <initializeObjects+0x430>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	4c26      	ldr	r4, [pc, #152]	; (8002118 <initializeObjects+0x430>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4423      	add	r3, r4
 800208c:	3308      	adds	r3, #8
 800208e:	781c      	ldrb	r4, [r3, #0]
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <initializeObjects+0x428>)
 8002092:	2326      	movs	r3, #38	; 0x26
 8002094:	fb00 f303 	mul.w	r3, r0, r3
 8002098:	4413      	add	r3, r2
 800209a:	440b      	add	r3, r1
 800209c:	4622      	mov	r2, r4
 800209e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	ddd7      	ble.n	800205c <initializeObjects+0x374>
	}
	//WALLS
	lcd[1][1] = 3;
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <initializeObjects+0x428>)
 80020ae:	2203      	movs	r2, #3
 80020b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	lcd[0][22] = 3;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <initializeObjects+0x428>)
 80020b6:	2203      	movs	r2, #3
 80020b8:	759a      	strb	r2, [r3, #22]
	lcd[1][18] = 3;
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <initializeObjects+0x428>)
 80020bc:	2203      	movs	r2, #3
 80020be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd[0][37] = 3;
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <initializeObjects+0x428>)
 80020c4:	2203      	movs	r2, #3
 80020c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//[0][38] [0][39] [1][38] [1][39]  are dead
	//Wolves
	lcd[playerR.x][playerR.y] = playerR.c;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <initializeObjects+0x434>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <initializeObjects+0x434>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4912      	ldr	r1, [pc, #72]	; (800211c <initializeObjects+0x434>)
 80020d4:	7a4c      	ldrb	r4, [r1, #9]
 80020d6:	490e      	ldr	r1, [pc, #56]	; (8002110 <initializeObjects+0x428>)
 80020d8:	2026      	movs	r0, #38	; 0x26
 80020da:	fb00 f202 	mul.w	r2, r0, r2
 80020de:	440a      	add	r2, r1
 80020e0:	4413      	add	r3, r2
 80020e2:	4622      	mov	r2, r4
 80020e4:	701a      	strb	r2, [r3, #0]
	lcd[playerL.x][playerL.y] = playerL.c;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <initializeObjects+0x438>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <initializeObjects+0x438>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	490c      	ldr	r1, [pc, #48]	; (8002120 <initializeObjects+0x438>)
 80020f0:	7a4c      	ldrb	r4, [r1, #9]
 80020f2:	4907      	ldr	r1, [pc, #28]	; (8002110 <initializeObjects+0x428>)
 80020f4:	2026      	movs	r0, #38	; 0x26
 80020f6:	fb00 f202 	mul.w	r2, r0, r2
 80020fa:	440a      	add	r2, r1
 80020fc:	4413      	add	r3, r2
 80020fe:	4622      	mov	r2, r4
 8002100:	701a      	strb	r2, [r3, #0]
	//lcd[1][0]=8;
	//lcd[1][19]=7;
}
 8002102:	bf00      	nop
 8002104:	372c      	adds	r7, #44	; 0x2c
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop
 800210c:	20000c68 	.word	0x20000c68
 8002110:	20000cec 	.word	0x20000cec
 8002114:	20000c50 	.word	0x20000c50
 8002118:	20000ca4 	.word	0x20000ca4
 800211c:	20000c0c 	.word	0x20000c0c
 8002120:	20000c18 	.word	0x20000c18

08002124 <displayObjects>:

void displayObjects() {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
	// Display the objects based on the screen array
	for (int i = 0; i < LCD_HEIGHT; i++) {
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	e01b      	b.n	8002168 <displayObjects+0x44>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8002130:	2300      	movs	r3, #0
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	e012      	b.n	800215c <displayObjects+0x38>
			setCursor(j, i);
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f7fe fb07 	bl	800074c <setCursor>
			write(lcd[i][j]);
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <displayObjects+0x54>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2126      	movs	r1, #38	; 0x26
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	441a      	add	r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fba5 	bl	80008a0 <write>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b25      	cmp	r3, #37	; 0x25
 8002160:	dde9      	ble.n	8002136 <displayObjects+0x12>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3301      	adds	r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	dde0      	ble.n	8002130 <displayObjects+0xc>
		}
	}
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000cec 	.word	0x20000cec

0800217c <showMain>:

//MENU PART
void showMain(void) {
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8002180:	2100      	movs	r1, #0
 8002182:	2000      	movs	r0, #0
 8002184:	f7fe fae2 	bl	800074c <setCursor>
	print("1- Play");
 8002188:	480a      	ldr	r0, [pc, #40]	; (80021b4 <showMain+0x38>)
 800218a:	f7fe fb27 	bl	80007dc <print>
	setCursor(0, 1);
 800218e:	2101      	movs	r1, #1
 8002190:	2000      	movs	r0, #0
 8002192:	f7fe fadb 	bl	800074c <setCursor>
	print("2- About");
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <showMain+0x3c>)
 8002198:	f7fe fb20 	bl	80007dc <print>
	write(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f7fe fb7f 	bl	80008a0 <write>
	setCursor(20, 0);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2014      	movs	r0, #20
 80021a6:	f7fe fad1 	bl	800074c <setCursor>
	print("3- Setting");
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <showMain+0x40>)
 80021ac:	f7fe fb16 	bl	80007dc <print>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	0800879c 	.word	0x0800879c
 80021b8:	080087a4 	.word	0x080087a4
 80021bc:	080087b0 	.word	0x080087b0

080021c0 <showAbout>:

void showAbout(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80021c4:	2100      	movs	r1, #0
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe fac0 	bl	800074c <setCursor>
	print("Kimiya & Atiye");
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <showAbout+0x18>)
 80021ce:	f7fe fb05 	bl	80007dc <print>
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	080087bc 	.word	0x080087bc

080021dc <showSetting>:

void showSetting(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80021e0:	2100      	movs	r1, #0
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fab2 	bl	800074c <setCursor>
	print("Right vs Left");
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <showSetting+0x34>)
 80021ea:	f7fe faf7 	bl	80007dc <print>
	setCursor(0, 1);
 80021ee:	2101      	movs	r1, #1
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe faab 	bl	800074c <setCursor>
	print("0-Bullets");
 80021f6:	4807      	ldr	r0, [pc, #28]	; (8002214 <showSetting+0x38>)
 80021f8:	f7fe faf0 	bl	80007dc <print>
	setCursor(20, 0);
 80021fc:	2100      	movs	r1, #0
 80021fe:	2014      	movs	r0, #20
 8002200:	f7fe faa4 	bl	800074c <setCursor>
	print("*-Health");
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <showSetting+0x3c>)
 8002206:	f7fe fae9 	bl	80007dc <print>
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	080087cc 	.word	0x080087cc
 8002214:	080087dc 	.word	0x080087dc
 8002218:	080087e8 	.word	0x080087e8

0800221c <bulletsSetting>:

void bulletsSetting(void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 8002222:	2101      	movs	r1, #1
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe fa91 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Bullets:%d", R_bullets);
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <bulletsSetting+0x5c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4912      	ldr	r1, [pc, #72]	; (800227c <bulletsSetting+0x60>)
 8002234:	4618      	mov	r0, r3
 8002236:	f005 f831 	bl	800729c <siprintf>
	print(RBStr);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe facc 	bl	80007dc <print>
	setCursor(20, 0);
 8002244:	2100      	movs	r1, #0
 8002246:	2014      	movs	r0, #20
 8002248:	f7fe fa80 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Bullets:%d", L_bullets);
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <bulletsSetting+0x64>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	463b      	mov	r3, r7
 8002252:	490c      	ldr	r1, [pc, #48]	; (8002284 <bulletsSetting+0x68>)
 8002254:	4618      	mov	r0, r3
 8002256:	f005 f821 	bl	800729c <siprintf>
	print(LBStr);
 800225a:	463b      	mov	r3, r7
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fabd 	bl	80007dc <print>
	setCursor(20, 1);
 8002262:	2101      	movs	r1, #1
 8002264:	2014      	movs	r0, #20
 8002266:	f7fe fa71 	bl	800074c <setCursor>

	print("#-Confirm");
 800226a:	4807      	ldr	r0, [pc, #28]	; (8002288 <bulletsSetting+0x6c>)
 800226c:	f7fe fab6 	bl	80007dc <print>
}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200005bc 	.word	0x200005bc
 800227c:	080087f4 	.word	0x080087f4
 8002280:	200005c0 	.word	0x200005c0
 8002284:	08008808 	.word	0x08008808
 8002288:	08008818 	.word	0x08008818

0800228c <HealthSetting>:

void HealthSetting(void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 8002292:	2101      	movs	r1, #1
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fa59 	bl	800074c <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Health:%d", R_Health);
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HealthSetting+0x5c>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4912      	ldr	r1, [pc, #72]	; (80022ec <HealthSetting+0x60>)
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 fff9 	bl	800729c <siprintf>
	print(RBStr);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fa94 	bl	80007dc <print>
	setCursor(20, 0);
 80022b4:	2100      	movs	r1, #0
 80022b6:	2014      	movs	r0, #20
 80022b8:	f7fe fa48 	bl	800074c <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Health:%d", L_Health);
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HealthSetting+0x64>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	463b      	mov	r3, r7
 80022c2:	490c      	ldr	r1, [pc, #48]	; (80022f4 <HealthSetting+0x68>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f004 ffe9 	bl	800729c <siprintf>
	print(LBStr);
 80022ca:	463b      	mov	r3, r7
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fa85 	bl	80007dc <print>
	setCursor(20, 1);
 80022d2:	2101      	movs	r1, #1
 80022d4:	2014      	movs	r0, #20
 80022d6:	f7fe fa39 	bl	800074c <setCursor>

	print("#-Confirm");
 80022da:	4807      	ldr	r0, [pc, #28]	; (80022f8 <HealthSetting+0x6c>)
 80022dc:	f7fe fa7e 	bl	80007dc <print>
}
 80022e0:	bf00      	nop
 80022e2:	3728      	adds	r7, #40	; 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200005b4 	.word	0x200005b4
 80022ec:	08008824 	.word	0x08008824
 80022f0:	200005b8 	.word	0x200005b8
 80022f4:	08008834 	.word	0x08008834
 80022f8:	08008818 	.word	0x08008818

080022fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b099      	sub	sp, #100	; 0x64
 8002300:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002302:	f000 fe6d 	bl	8002fe0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002306:	f000 f8f9 	bl	80024fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800230a:	f000 fadf 	bl	80028cc <MX_GPIO_Init>
	MX_I2C1_Init();
 800230e:	f000 f95f 	bl	80025d0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8002312:	f000 f9f7 	bl	8002704 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8002316:	f000 fab7 	bl	8002888 <MX_USB_PCD_Init>
	MX_USART1_UART_Init();
 800231a:	f000 fa85 	bl	8002828 <MX_USART1_UART_Init>
	MX_RTC_Init();
 800231e:	f000 f997 	bl	8002650 <MX_RTC_Init>
	MX_TIM1_Init();
 8002322:	f000 fa2d 	bl	8002780 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800232c:	4860      	ldr	r0, [pc, #384]	; (80024b0 <main+0x1b4>)
 800232e:	f001 f9fb 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002338:	485d      	ldr	r0, [pc, #372]	; (80024b0 <main+0x1b4>)
 800233a:	f001 f9f5 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002344:	485a      	ldr	r0, [pc, #360]	; (80024b0 <main+0x1b4>)
 8002346:	f001 f9ef 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002350:	4857      	ldr	r0, [pc, #348]	; (80024b0 <main+0x1b4>)
 8002352:	f001 f9e9 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, "yo", 2,
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	2202      	movs	r2, #2
 800235c:	4955      	ldr	r1, [pc, #340]	; (80024b4 <main+0x1b8>)
 800235e:	4856      	ldr	r0, [pc, #344]	; (80024b8 <main+0x1bc>)
 8002360:	f003 fefe 	bl	8006160 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	srand(time(NULL));  // Initialize the random number generator
 8002364:	2000      	movs	r0, #0
 8002366:	f004 ffb9 	bl	80072dc <time>
 800236a:	4603      	mov	r3, r0
 800236c:	4618      	mov	r0, r3
 800236e:	f004 ff29 	bl	80071c4 <srand>

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
 8002372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002376:	9303      	str	r3, [sp, #12]
 8002378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237c:	9302      	str	r3, [sp, #8]
 800237e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002396:	4849      	ldr	r0, [pc, #292]	; (80024bc <main+0x1c0>)
 8002398:	f7fd ff72 	bl	8000280 <LiquidCrystal>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	byte *foxStates[4] = { leftFox, rightFox, topFox, bottomFox };
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <main+0x1c4>)
 800239e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80023a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	createChar(2, MisteryBox);
 80023a8:	4946      	ldr	r1, [pc, #280]	; (80024c4 <main+0x1c8>)
 80023aa:	2002      	movs	r0, #2
 80023ac:	f7fe fa41 	bl	8000832 <createChar>
	createChar(3, wall);
 80023b0:	4945      	ldr	r1, [pc, #276]	; (80024c8 <main+0x1cc>)
 80023b2:	2003      	movs	r0, #3
 80023b4:	f7fe fa3d 	bl	8000832 <createChar>
	createChar(4, obstacle);
 80023b8:	4944      	ldr	r1, [pc, #272]	; (80024cc <main+0x1d0>)
 80023ba:	2004      	movs	r0, #4
 80023bc:	f7fe fa39 	bl	8000832 <createChar>
	createChar(1, heart);
 80023c0:	4943      	ldr	r1, [pc, #268]	; (80024d0 <main+0x1d4>)
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7fe fa35 	bl	8000832 <createChar>
	createChar(5, bullet);
 80023c8:	4942      	ldr	r1, [pc, #264]	; (80024d4 <main+0x1d8>)
 80023ca:	2005      	movs	r0, #5
 80023cc:	f7fe fa31 	bl	8000832 <createChar>
	createChar(6, Shot);
 80023d0:	4941      	ldr	r1, [pc, #260]	; (80024d8 <main+0x1dc>)
 80023d2:	2006      	movs	r0, #6
 80023d4:	f7fe fa2d 	bl	8000832 <createChar>
	RTC_TimeTypeDef mytime;
	RTC_DateTypeDef mydate;
	mydate.Year = 02;
 80023d8:	2302      	movs	r3, #2
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	mydate.Month = 11;
 80023de:	230b      	movs	r3, #11
 80023e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mydate.Date = 17;
 80023e4:	2311      	movs	r3, #17
 80023e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80023ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ee:	2200      	movs	r2, #0
 80023f0:	4619      	mov	r1, r3
 80023f2:	483a      	ldr	r0, [pc, #232]	; (80024dc <main+0x1e0>)
 80023f4:	f003 f95f 	bl	80056b6 <HAL_RTC_SetDate>
	char timeStr[20];
	char dateStr[20];
	showMain();
 80023f8:	f7ff fec0 	bl	800217c <showMain>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (shootFlag == 1) {
 80023fc:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <main+0x1e4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <main+0x10c>
			shotPosition();
 8002404:	f7fe ff64 	bl	80012d0 <shotPosition>
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (screen == 2) {
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <main+0x1e8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d13b      	bne.n	8002488 <main+0x18c>
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002414:	2200      	movs	r2, #0
 8002416:	4619      	mov	r1, r3
 8002418:	4830      	ldr	r0, [pc, #192]	; (80024dc <main+0x1e0>)
 800241a:	f003 f8ee 	bl	80055fa <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 800241e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002422:	2200      	movs	r2, #0
 8002424:	4619      	mov	r1, r3
 8002426:	482d      	ldr	r0, [pc, #180]	; (80024dc <main+0x1e0>)
 8002428:	f003 f9c9 	bl	80057be <HAL_RTC_GetDate>
			setCursor(20, 0);
 800242c:	2100      	movs	r1, #0
 800242e:	2014      	movs	r0, #20
 8002430:	f7fe f98c 	bl	800074c <setCursor>
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8002434:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002438:	461a      	mov	r2, r3
 800243a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800243e:	4619      	mov	r1, r3
					mytime.Seconds);
 8002440:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8002444:	f107 0014 	add.w	r0, r7, #20
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	460b      	mov	r3, r1
 800244c:	4926      	ldr	r1, [pc, #152]	; (80024e8 <main+0x1ec>)
 800244e:	f004 ff25 	bl	800729c <siprintf>

			print(timeStr);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f9c0 	bl	80007dc <print>
			setCursor(20, 1);
 800245c:	2101      	movs	r1, #1
 800245e:	2014      	movs	r0, #20
 8002460:	f7fe f974 	bl	800074c <setCursor>
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8002464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002468:	461a      	mov	r2, r3
 800246a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800246e:	4619      	mov	r1, r3
					mydate.Date);
 8002470:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8002474:	4638      	mov	r0, r7
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	460b      	mov	r3, r1
 800247a:	491c      	ldr	r1, [pc, #112]	; (80024ec <main+0x1f0>)
 800247c:	f004 ff0e 	bl	800729c <siprintf>

			print(dateStr);
 8002480:	463b      	mov	r3, r7
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f9aa 	bl	80007dc <print>

		}

		if (screen == 3) {
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <main+0x1e8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d1b5      	bne.n	80023fc <main+0x100>
			setCursor(20, 1);
 8002490:	2101      	movs	r1, #1
 8002492:	2014      	movs	r0, #20
 8002494:	f7fe f95a 	bl	800074c <setCursor>
			if (vfx) {
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <main+0x1f4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <main+0x1ac>
				print("vfx on-# to turn off");
 80024a0:	4814      	ldr	r0, [pc, #80]	; (80024f4 <main+0x1f8>)
 80024a2:	f7fe f99b 	bl	80007dc <print>
 80024a6:	e7a9      	b.n	80023fc <main+0x100>
			} else {
				print("vfx off-# to turn on");
 80024a8:	4813      	ldr	r0, [pc, #76]	; (80024f8 <main+0x1fc>)
 80024aa:	f7fe f997 	bl	80007dc <print>
		if (shootFlag == 1) {
 80024ae:	e7a5      	b.n	80023fc <main+0x100>
 80024b0:	48000400 	.word	0x48000400
 80024b4:	08008844 	.word	0x08008844
 80024b8:	2000023c 	.word	0x2000023c
 80024bc:	48000c00 	.word	0x48000c00
 80024c0:	08008894 	.word	0x08008894
 80024c4:	20000018 	.word	0x20000018
 80024c8:	20000020 	.word	0x20000020
 80024cc:	20000028 	.word	0x20000028
 80024d0:	20000010 	.word	0x20000010
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000050 	.word	0x20000050
 80024dc:	2000016c 	.word	0x2000016c
 80024e0:	200005c4 	.word	0x200005c4
 80024e4:	200005b0 	.word	0x200005b0
 80024e8:	08008848 	.word	0x08008848
 80024ec:	08008854 	.word	0x08008854
 80024f0:	20000004 	.word	0x20000004
 80024f4:	08008864 	.word	0x08008864
 80024f8:	0800887c 	.word	0x0800887c

080024fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b09e      	sub	sp, #120	; 0x78
 8002500:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002502:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002506:	2228      	movs	r2, #40	; 0x28
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f004 fe52 	bl	80071b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002520:	463b      	mov	r3, r7
 8002522:	223c      	movs	r2, #60	; 0x3c
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f004 fe44 	bl	80071b4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800252c:	230b      	movs	r3, #11
 800252e:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002530:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002534:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800253a:	2301      	movs	r3, #1
 800253c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800253e:	2310      	movs	r3, #16
 8002540:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002542:	2301      	movs	r3, #1
 8002544:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002546:	2302      	movs	r3, #2
 8002548:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800254a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002554:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002556:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800255a:	4618      	mov	r0, r3
 800255c:	f001 fb0c 	bl	8003b78 <HAL_RCC_OscConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <SystemClock_Config+0x6e>
		Error_Handler();
 8002566:	f000 fa6b 	bl	8002a40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800256a:	230f      	movs	r3, #15
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800256e:	2302      	movs	r3, #2
 8002570:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800257c:	2300      	movs	r3, #0
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002580:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002584:	2101      	movs	r1, #1
 8002586:	4618      	mov	r0, r3
 8002588:	f002 fb34 	bl	8004bf4 <HAL_RCC_ClockConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0x9a>
		Error_Handler();
 8002592:	f000 fa55 	bl	8002a40 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <SystemClock_Config+0xd0>)
 8002598:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC
			| RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80025a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80025b2:	463b      	mov	r3, r7
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 fd53 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <SystemClock_Config+0xc8>
		Error_Handler();
 80025c0:	f000 fa3e 	bl	8002a40 <Error_Handler>
	}
}
 80025c4:	bf00      	nop
 80025c6:	3778      	adds	r7, #120	; 0x78
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	00031021 	.word	0x00031021

080025d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_I2C1_Init+0x74>)
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <MX_I2C1_Init+0x78>)
 80025d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <MX_I2C1_Init+0x74>)
 80025dc:	4a1b      	ldr	r2, [pc, #108]	; (800264c <MX_I2C1_Init+0x7c>)
 80025de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_I2C1_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <MX_I2C1_Init+0x74>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MX_I2C1_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_I2C1_Init+0x74>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <MX_I2C1_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_I2C1_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_I2C1_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800260a:	480e      	ldr	r0, [pc, #56]	; (8002644 <MX_I2C1_Init+0x74>)
 800260c:	f001 f8bc 	bl	8003788 <HAL_I2C_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002616:	f000 fa13 	bl	8002a40 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800261a:	2100      	movs	r1, #0
 800261c:	4809      	ldr	r0, [pc, #36]	; (8002644 <MX_I2C1_Init+0x74>)
 800261e:	f001 f942 	bl	80038a6 <HAL_I2CEx_ConfigAnalogFilter>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002628:	f000 fa0a 	bl	8002a40 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800262c:	2100      	movs	r1, #0
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_I2C1_Init+0x74>)
 8002630:	f001 f984 	bl	800393c <HAL_I2CEx_ConfigDigitalFilter>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800263a:	f000 fa01 	bl	8002a40 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000118 	.word	0x20000118
 8002648:	40005400 	.word	0x40005400
 800264c:	2000090e 	.word	0x2000090e

08002650 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8002664:	2300      	movs	r3, #0
 8002666:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8002668:	4b24      	ldr	r3, [pc, #144]	; (80026fc <MX_RTC_Init+0xac>)
 800266a:	4a25      	ldr	r2, [pc, #148]	; (8002700 <MX_RTC_Init+0xb0>)
 800266c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <MX_RTC_Init+0xac>)
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 39;
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <MX_RTC_Init+0xac>)
 8002676:	2227      	movs	r2, #39	; 0x27
 8002678:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 999;
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <MX_RTC_Init+0xac>)
 800267c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002680:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <MX_RTC_Init+0xac>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <MX_RTC_Init+0xac>)
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <MX_RTC_Init+0xac>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8002694:	4819      	ldr	r0, [pc, #100]	; (80026fc <MX_RTC_Init+0xac>)
 8002696:	f002 fe93 	bl	80053c0 <HAL_RTC_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_RTC_Init+0x54>
		Error_Handler();
 80026a0:	f000 f9ce 	bl	8002a40 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	2201      	movs	r2, #1
 80026bc:	4619      	mov	r1, r3
 80026be:	480f      	ldr	r0, [pc, #60]	; (80026fc <MX_RTC_Init+0xac>)
 80026c0:	f002 ff01 	bl	80054c6 <HAL_RTC_SetTime>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_RTC_Init+0x7e>
		Error_Handler();
 80026ca:	f000 f9b9 	bl	8002a40 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80026ce:	2301      	movs	r3, #1
 80026d0:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80026d2:	2301      	movs	r3, #1
 80026d4:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 80026da:	2300      	movs	r3, #0
 80026dc:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80026de:	463b      	mov	r3, r7
 80026e0:	2201      	movs	r2, #1
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_RTC_Init+0xac>)
 80026e6:	f002 ffe6 	bl	80056b6 <HAL_RTC_SetDate>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_RTC_Init+0xa4>
		Error_Handler();
 80026f0:	f000 f9a6 	bl	8002a40 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	2000016c 	.word	0x2000016c
 8002700:	40002800 	.word	0x40002800

08002704 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <MX_SPI1_Init+0x74>)
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <MX_SPI1_Init+0x78>)
 800270c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_SPI1_Init+0x74>)
 8002710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002714:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_SPI1_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <MX_SPI1_Init+0x74>)
 800271e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002722:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_SPI1_Init+0x74>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_SPI1_Init+0x74>)
 800272c:	2200      	movs	r2, #0
 800272e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_SPI1_Init+0x74>)
 8002732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002736:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_SPI1_Init+0x74>)
 800273a:	2208      	movs	r2, #8
 800273c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_SPI1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_SPI1_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_SPI1_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_SPI1_Init+0x74>)
 8002752:	2207      	movs	r2, #7
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <MX_SPI1_Init+0x74>)
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_SPI1_Init+0x74>)
 800275e:	2208      	movs	r2, #8
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_SPI1_Init+0x74>)
 8002764:	f003 f938 	bl	80059d8 <HAL_SPI_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800276e:	f000 f967 	bl	8002a40 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000018c 	.word	0x2000018c
 800277c:	40013000 	.word	0x40013000

08002780 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027a0:	4a20      	ldr	r2, [pc, #128]	; (8002824 <MX_TIM1_Init+0xa4>)
 80027a2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 47;
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027a6:	222f      	movs	r2, #47	; 0x2f
 80027a8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80027b6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80027ca:	4815      	ldr	r0, [pc, #84]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027cc:	f003 f9af 	bl	8005b2e <HAL_TIM_Base_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM1_Init+0x5a>
		Error_Handler();
 80027d6:	f000 f933 	bl	8002a40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027de:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	4619      	mov	r1, r3
 80027e6:	480e      	ldr	r0, [pc, #56]	; (8002820 <MX_TIM1_Init+0xa0>)
 80027e8:	f003 f9f8 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80027f2:	f000 f925 	bl	8002a40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4806      	ldr	r0, [pc, #24]	; (8002820 <MX_TIM1_Init+0xa0>)
 8002808:	f003 fbdc 	bl	8005fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8002812:	f000 f915 	bl	8002a40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200001f0 	.word	0x200001f0
 8002824:	40012c00 	.word	0x40012c00

08002828 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_USART1_UART_Init+0x58>)
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <MX_USART1_UART_Init+0x5c>)
 8002830:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <MX_USART1_UART_Init+0x58>)
 8002834:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002838:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_USART1_UART_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <MX_USART1_UART_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_USART1_UART_Init+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_USART1_UART_Init+0x58>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_USART1_UART_Init+0x58>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_USART1_UART_Init+0x58>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_USART1_UART_Init+0x58>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_USART1_UART_Init+0x58>)
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_USART1_UART_Init+0x58>)
 800286c:	f003 fc2a 	bl	80060c4 <HAL_UART_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002876:	f000 f8e3 	bl	8002a40 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000023c 	.word	0x2000023c
 8002884:	40013800 	.word	0x40013800

08002888 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <MX_USB_PCD_Init+0x3c>)
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <MX_USB_PCD_Init+0x40>)
 8002890:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_USB_PCD_Init+0x3c>)
 8002894:	2208      	movs	r2, #8
 8002896:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <MX_USB_PCD_Init+0x3c>)
 800289a:	2202      	movs	r2, #2
 800289c:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_USB_PCD_Init+0x3c>)
 80028a0:	2202      	movs	r2, #2
 80028a2:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <MX_USB_PCD_Init+0x3c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_USB_PCD_Init+0x3c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 80028b0:	4804      	ldr	r0, [pc, #16]	; (80028c4 <MX_USB_PCD_Init+0x3c>)
 80028b2:	f001 f88f 	bl	80039d4 <HAL_PCD_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 80028bc:	f000 f8c0 	bl	8002a40 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200002c4 	.word	0x200002c4
 80028c8:	40005c00 	.word	0x40005c00

080028cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08c      	sub	sp, #48	; 0x30
 80028d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <MX_GPIO_Init+0x164>)
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <MX_GPIO_Init+0x164>)
 80028e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028ec:	6153      	str	r3, [r2, #20]
 80028ee:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <MX_GPIO_Init+0x164>)
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <MX_GPIO_Init+0x164>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4a4c      	ldr	r2, [pc, #304]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002904:	6153      	str	r3, [r2, #20]
 8002906:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	4a46      	ldr	r2, [pc, #280]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800291c:	6153      	str	r3, [r2, #20]
 800291e:	4b44      	ldr	r3, [pc, #272]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <MX_GPIO_Init+0x164>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4a40      	ldr	r2, [pc, #256]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	6153      	str	r3, [r2, #20]
 8002936:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4a3a      	ldr	r2, [pc, #232]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800294c:	6153      	str	r3, [r2, #20]
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <MX_GPIO_Init+0x164>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002964:	6153      	str	r3, [r2, #20]
 8002966:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <MX_GPIO_Init+0x164>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8002972:	2200      	movs	r2, #0
 8002974:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002978:	482e      	ldr	r0, [pc, #184]	; (8002a34 <MX_GPIO_Init+0x168>)
 800297a:	f000 fed5 	bl	8003728 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800297e:	2200      	movs	r2, #0
 8002980:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8002984:	482c      	ldr	r0, [pc, #176]	; (8002a38 <MX_GPIO_Init+0x16c>)
 8002986:	f000 fecf 	bl	8003728 <HAL_GPIO_WritePin>
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 800298a:	2337      	movs	r3, #55	; 0x37
 800298c:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800298e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002992:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	4619      	mov	r1, r3
 800299e:	4825      	ldr	r0, [pc, #148]	; (8002a34 <MX_GPIO_Init+0x168>)
 80029a0:	f000 fd30 	bl	8003404 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 80029a4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80029a8:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b6:	f107 031c 	add.w	r3, r7, #28
 80029ba:	4619      	mov	r1, r3
 80029bc:	481d      	ldr	r0, [pc, #116]	; (8002a34 <MX_GPIO_Init+0x168>)
 80029be:	f000 fd21 	bl	8003404 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	4619      	mov	r1, r3
 80029d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d8:	f000 fd14 	bl	8003404 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80029dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80029e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029e8:	2302      	movs	r3, #2
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4619      	mov	r1, r3
 80029f2:	4812      	ldr	r0, [pc, #72]	; (8002a3c <MX_GPIO_Init+0x170>)
 80029f4:	f000 fd06 	bl	8003404 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 80029f8:	f647 730f 	movw	r3, #32527	; 0x7f0f
 80029fc:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	2301      	movs	r3, #1
 8002a00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4809      	ldr	r0, [pc, #36]	; (8002a38 <MX_GPIO_Init+0x16c>)
 8002a12:	f000 fcf7 	bl	8003404 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2028      	movs	r0, #40	; 0x28
 8002a1c:	f000 fc45 	bl	80032aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a20:	2028      	movs	r0, #40	; 0x28
 8002a22:	f000 fc5e 	bl	80032e2 <HAL_NVIC_EnableIRQ>

}
 8002a26:	bf00      	nop
 8002a28:	3730      	adds	r7, #48	; 0x30
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48001000 	.word	0x48001000
 8002a38:	48000c00 	.word	0x48000c00
 8002a3c:	48000400 	.word	0x48000400

08002a40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a48:	e7fe      	b.n	8002a48 <Error_Handler+0x8>
	...

08002a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_MspInit+0x44>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_MspInit+0x44>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6193      	str	r3, [r2, #24]
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_MspInit+0x44>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_MspInit+0x44>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_MspInit+0x44>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_MspInit+0x44>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002a82:	2006      	movs	r0, #6
 8002a84:	f000 fc06 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_I2C_MspInit+0x7c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d127      	bne.n	8002b06 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6153      	str	r3, [r2, #20]
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002ace:	23c0      	movs	r3, #192	; 0xc0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad2:	2312      	movs	r3, #18
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480b      	ldr	r0, [pc, #44]	; (8002b18 <HAL_I2C_MspInit+0x84>)
 8002aea:	f000 fc8b 	bl	8003404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af8:	61d3      	str	r3, [r2, #28]
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_I2C_MspInit+0x80>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40005400 	.word	0x40005400
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400

08002b1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_RTC_MspInit+0x44>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d111      	bne.n	8002b52 <HAL_RTC_MspInit+0x36>
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RTC_MspInit+0x48>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2301      	movs	r3, #1
 8002b50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40002800 	.word	0x40002800
 8002b64:	10908100 	.word	0x10908100

08002b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a17      	ldr	r2, [pc, #92]	; (8002be4 <HAL_SPI_MspInit+0x7c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d128      	bne.n	8002bdc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_SPI_MspInit+0x80>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4a16      	ldr	r2, [pc, #88]	; (8002be8 <HAL_SPI_MspInit+0x80>)
 8002b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b94:	6193      	str	r3, [r2, #24]
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_SPI_MspInit+0x80>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_SPI_MspInit+0x80>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_SPI_MspInit+0x80>)
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	6153      	str	r3, [r2, #20]
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_SPI_MspInit+0x80>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002bba:	23e0      	movs	r3, #224	; 0xe0
 8002bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bca:	2305      	movs	r3, #5
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f107 0314 	add.w	r3, r7, #20
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd8:	f000 fc14 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bdc:	bf00      	nop
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40013000 	.word	0x40013000
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_TIM_Base_MspInit+0x38>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10b      	bne.n	8002c16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_TIM_Base_MspInit+0x3c>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_TIM_Base_MspInit+0x3c>)
 8002c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c08:	6193      	str	r3, [r2, #24]
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_TIM_Base_MspInit+0x3c>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_UART_MspInit+0x8c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d12f      	bne.n	8002cae <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c58:	6193      	str	r3, [r2, #24]
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c70:	6153      	str	r3, [r2, #20]
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_UART_MspInit+0x90>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c7e:	2330      	movs	r3, #48	; 0x30
 8002c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <HAL_UART_MspInit+0x94>)
 8002c9a:	f000 fbb3 	bl	8003404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2025      	movs	r0, #37	; 0x25
 8002ca4:	f000 fb01 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ca8:	2025      	movs	r0, #37	; 0x25
 8002caa:	f000 fb1a 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	48000800 	.word	0x48000800

08002cc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_PCD_MspInit+0x80>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d129      	bne.n	8002d3a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_PCD_MspInit+0x84>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_PCD_MspInit+0x84>)
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	6153      	str	r3, [r2, #20]
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_PCD_MspInit+0x84>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002cfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002d10:	230e      	movs	r3, #14
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1e:	f000 fb71 	bl	8003404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_PCD_MspInit+0x84>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <HAL_PCD_MspInit+0x84>)
 8002d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d2c:	61d3      	str	r3, [r2, #28]
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_PCD_MspInit+0x84>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40005c00 	.word	0x40005c00
 8002d48:	40021000 	.word	0x40021000

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <NMI_Handler+0x4>

08002d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <MemManage_Handler+0x4>

08002d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d98:	f000 f968 	bl	800306c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <USART1_IRQHandler+0x10>)
 8002da6:	f003 fa65 	bl	8006274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000023c 	.word	0x2000023c

08002db4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002db8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002dbc:	f000 fccc 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002dc4:	f000 fcc8 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002dc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dcc:	f000 fcc4 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002dd0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002dd4:	f000 fcc0 	bl	8003758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return 1;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_kill>:

int _kill(int pid, int sig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002df6:	f004 f9b3 	bl	8007160 <__errno>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2216      	movs	r2, #22
 8002dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_exit>:

void _exit (int status)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ffe7 	bl	8002dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e1e:	e7fe      	b.n	8002e1e <_exit+0x12>

08002e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e00a      	b.n	8002e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e32:	f3af 8000 	nop.w
 8002e36:	4601      	mov	r1, r0
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	60ba      	str	r2, [r7, #8]
 8002e3e:	b2ca      	uxtb	r2, r1
 8002e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dbf0      	blt.n	8002e32 <_read+0x12>
  }

  return len;
 8002e50:	687b      	ldr	r3, [r7, #4]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e009      	b.n	8002e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	60ba      	str	r2, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dbf1      	blt.n	8002e6c <_write+0x12>
  }
  return len;
 8002e88:	687b      	ldr	r3, [r7, #4]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_close>:

int _close(int file)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eba:	605a      	str	r2, [r3, #4]
  return 0;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <_isatty>:

int _isatty(int file)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <_sbrk+0x5c>)
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <_sbrk+0x60>)
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <_sbrk+0x64>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <_sbrk+0x68>)
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d207      	bcs.n	8002f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f2c:	f004 f918 	bl	8007160 <__errno>
 8002f30:	4603      	mov	r3, r0
 8002f32:	220c      	movs	r2, #12
 8002f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	e009      	b.n	8002f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <_sbrk+0x64>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <_sbrk+0x64>)
 8002f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	2000a000 	.word	0x2000a000
 8002f5c:	00000400 	.word	0x00000400
 8002f60:	20000d3c 	.word	0x20000d3c
 8002f64:	20000d58 	.word	0x20000d58

08002f68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <SystemInit+0x20>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <SystemInit+0x20>)
 8002f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f90:	f7ff ffea 	bl	8002f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f96:	490d      	ldr	r1, [pc, #52]	; (8002fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <LoopForever+0xe>)
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f9c:	e002      	b.n	8002fa4 <LoopCopyDataInit>

08002f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa2:	3304      	adds	r3, #4

08002fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa8:	d3f9      	bcc.n	8002f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fac:	4c0a      	ldr	r4, [pc, #40]	; (8002fd8 <LoopForever+0x16>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb0:	e001      	b.n	8002fb6 <LoopFillZerobss>

08002fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb4:	3204      	adds	r2, #4

08002fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb8:	d3fb      	bcc.n	8002fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fba:	f004 f8d7 	bl	800716c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fbe:	f7ff f99d 	bl	80022fc <main>

08002fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fc2:	e7fe      	b.n	8002fc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fc4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fcc:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002fd0:	08008a5c 	.word	0x08008a5c
  ldr r2, =_sbss
 8002fd4:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002fd8:	20000d54 	.word	0x20000d54

08002fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC1_2_IRQHandler>
	...

08002fe0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <HAL_Init+0x28>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a07      	ldr	r2, [pc, #28]	; (8003008 <HAL_Init+0x28>)
 8002fea:	f043 0310 	orr.w	r3, r3, #16
 8002fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f000 f94f 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f000 f808 	bl	800300c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffc:	f7ff fd26 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40022000 	.word	0x40022000

0800300c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_InitTick+0x54>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_InitTick+0x58>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003022:	fbb3 f3f1 	udiv	r3, r3, r1
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f967 	bl	80032fe <HAL_SYSTICK_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00e      	b.n	8003058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0f      	cmp	r3, #15
 800303e:	d80a      	bhi.n	8003056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003040:	2200      	movs	r2, #0
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f000 f92f 	bl	80032aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <HAL_InitTick+0x5c>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000068 	.word	0x20000068
 8003064:	20000070 	.word	0x20000070
 8003068:	2000006c 	.word	0x2000006c

0800306c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_IncTick+0x20>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_IncTick+0x24>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_IncTick+0x24>)
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000070 	.word	0x20000070
 8003090:	20000d40 	.word	0x20000d40

08003094 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;  
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_GetTick+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000d40 	.word	0x20000d40

080030ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff ffee 	bl	8003094 <HAL_GetTick>
 80030b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d005      	beq.n	80030d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_Delay+0x44>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030d2:	bf00      	nop
 80030d4:	f7ff ffde 	bl	8003094 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d8f7      	bhi.n	80030d4 <HAL_Delay+0x28>
  {
  }
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000070 	.word	0x20000070

080030f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003110:	4013      	ands	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800311c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <__NVIC_SetPriorityGrouping+0x44>)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	60d3      	str	r3, [r2, #12]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <__NVIC_GetPriorityGrouping+0x18>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	0a1b      	lsrs	r3, r3, #8
 8003146:	f003 0307 	and.w	r3, r3, #7
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0b      	blt.n	8003182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <__NVIC_EnableIRQ+0x38>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db0a      	blt.n	80031be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	490c      	ldr	r1, [pc, #48]	; (80031e0 <__NVIC_SetPriority+0x4c>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	440b      	add	r3, r1
 80031b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031bc:	e00a      	b.n	80031d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4908      	ldr	r1, [pc, #32]	; (80031e4 <__NVIC_SetPriority+0x50>)
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	3b04      	subs	r3, #4
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	440b      	add	r3, r1
 80031d2:	761a      	strb	r2, [r3, #24]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f1c3 0307 	rsb	r3, r3, #7
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf28      	it	cs
 8003206:	2304      	movcs	r3, #4
 8003208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3304      	adds	r3, #4
 800320e:	2b06      	cmp	r3, #6
 8003210:	d902      	bls.n	8003218 <NVIC_EncodePriority+0x30>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3b03      	subs	r3, #3
 8003216:	e000      	b.n	800321a <NVIC_EncodePriority+0x32>
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	401a      	ands	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43d9      	mvns	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	4313      	orrs	r3, r2
         );
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff8e 	bl	8003194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff29 	bl	80030f4 <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff3e 	bl	800313c <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff8e 	bl	80031e8 <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5d 	bl	8003194 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff31 	bl	8003158 <__NVIC_EnableIRQ>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffa2 	bl	8003250 <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003324:	2b02      	cmp	r3, #2
 8003326:	d008      	beq.n	800333a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2204      	movs	r2, #4
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e020      	b.n	800337c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 020e 	bic.w	r2, r2, #14
 8003348:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	2101      	movs	r1, #1
 8003364:	fa01 f202 	lsl.w	r2, r1, r2
 8003368:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800339a:	2b02      	cmp	r3, #2
 800339c:	d005      	beq.n	80033aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2204      	movs	r2, #4
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e027      	b.n	80033fa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 020e 	bic.w	r2, r2, #14
 80033b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
    } 
  }
  return status;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003412:	e154      	b.n	80036be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8146 	beq.w	80036b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d005      	beq.n	8003444 <HAL_GPIO_Init+0x40>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d130      	bne.n	80034a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800347a:	2201      	movs	r2, #1
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f003 0201 	and.w	r2, r3, #1
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d017      	beq.n	80034e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d123      	bne.n	8003536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	08da      	lsrs	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3208      	adds	r2, #8
 80034f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	08da      	lsrs	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3208      	adds	r2, #8
 8003530:	6939      	ldr	r1, [r7, #16]
 8003532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	2203      	movs	r2, #3
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0203 	and.w	r2, r3, #3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80a0 	beq.w	80036b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003578:	4b58      	ldr	r3, [pc, #352]	; (80036dc <HAL_GPIO_Init+0x2d8>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	4a57      	ldr	r2, [pc, #348]	; (80036dc <HAL_GPIO_Init+0x2d8>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6193      	str	r3, [r2, #24]
 8003584:	4b55      	ldr	r3, [pc, #340]	; (80036dc <HAL_GPIO_Init+0x2d8>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003590:	4a53      	ldr	r2, [pc, #332]	; (80036e0 <HAL_GPIO_Init+0x2dc>)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	220f      	movs	r2, #15
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ba:	d019      	beq.n	80035f0 <HAL_GPIO_Init+0x1ec>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a49      	ldr	r2, [pc, #292]	; (80036e4 <HAL_GPIO_Init+0x2e0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_GPIO_Init+0x1e8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a48      	ldr	r2, [pc, #288]	; (80036e8 <HAL_GPIO_Init+0x2e4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00d      	beq.n	80035e8 <HAL_GPIO_Init+0x1e4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a47      	ldr	r2, [pc, #284]	; (80036ec <HAL_GPIO_Init+0x2e8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <HAL_GPIO_Init+0x1e0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a46      	ldr	r2, [pc, #280]	; (80036f0 <HAL_GPIO_Init+0x2ec>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_GPIO_Init+0x1dc>
 80035dc:	2304      	movs	r3, #4
 80035de:	e008      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035e0:	2305      	movs	r3, #5
 80035e2:	e006      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035e4:	2303      	movs	r3, #3
 80035e6:	e004      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e002      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_GPIO_Init+0x1ee>
 80035f0:	2300      	movs	r3, #0
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	f002 0203 	and.w	r2, r2, #3
 80035f8:	0092      	lsls	r2, r2, #2
 80035fa:	4093      	lsls	r3, r2
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003602:	4937      	ldr	r1, [pc, #220]	; (80036e0 <HAL_GPIO_Init+0x2dc>)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003610:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003634:	4a2f      	ldr	r2, [pc, #188]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800363a:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	43db      	mvns	r3, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4013      	ands	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800365e:	4a25      	ldr	r2, [pc, #148]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003688:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_GPIO_Init+0x2f0>)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	3301      	adds	r3, #1
 80036bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f aea3 	bne.w	8003414 <HAL_GPIO_Init+0x10>
  }
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010000 	.word	0x40010000
 80036e4:	48000400 	.word	0x48000400
 80036e8:	48000800 	.word	0x48000800
 80036ec:	48000c00 	.word	0x48000c00
 80036f0:	48001000 	.word	0x48001000
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e001      	b.n	800371a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
 8003734:	4613      	mov	r3, r2
 8003736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003744:	e002      	b.n	800374c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd f95e 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40010400 	.word	0x40010400

08003788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e081      	b.n	800389e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff f970 	bl	8002a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d107      	bne.n	8003802 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	e006      	b.n	8003810 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800380e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d104      	bne.n	8003822 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003820:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69d9      	ldr	r1, [r3, #28]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d138      	bne.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e032      	b.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2224      	movs	r2, #36	; 0x24
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d139      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800395c:	2302      	movs	r3, #2
 800395e:	e033      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800398e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d6:	b08b      	sub	sp, #44	; 0x2c
 80039d8:	af06      	add	r7, sp, #24
 80039da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0c4      	b.n	8003b70 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff f962 	bl	8002cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2203      	movs	r2, #3
 8003a04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 fb6a 	bl	80070e6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e040      	b.n	8003a9a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	3301      	adds	r3, #1
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	440b      	add	r3, r1
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	3303      	adds	r3, #3
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	3338      	adds	r3, #56	; 0x38
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	333c      	adds	r3, #60	; 0x3c
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3340      	adds	r3, #64	; 0x40
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3b9      	bcc.n	8003a18 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e044      	b.n	8003b34 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	3301      	adds	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3b5      	bcc.n	8003aaa <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	687e      	ldr	r6, [r7, #4]
 8003b46:	466d      	mov	r5, sp
 8003b48:	f106 0410 	add.w	r4, r6, #16
 8003b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	1d33      	adds	r3, r6, #4
 8003b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b58:	6838      	ldr	r0, [r7, #0]
 8003b5a:	f003 fadf 	bl	800711c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b88:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f001 b823 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 817d 	beq.w	8003eae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bb4:	4bbc      	ldr	r3, [pc, #752]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d00c      	beq.n	8003bda <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc0:	4bb9      	ldr	r3, [pc, #740]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d15c      	bne.n	8003c86 <HAL_RCC_OscConfig+0x10e>
 8003bcc:	4bb6      	ldr	r3, [pc, #728]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d155      	bne.n	8003c86 <HAL_RCC_OscConfig+0x10e>
 8003bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bde:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003bee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_OscConfig+0x94>
 8003c06:	4ba8      	ldr	r3, [pc, #672]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e015      	b.n	8003c38 <HAL_RCC_OscConfig+0xc0>
 8003c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c28:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003c34:	4b9c      	ldr	r3, [pc, #624]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003c40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c44:	fa92 f2a2 	rbit	r2, r2
 8003c48:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003c4c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003c50:	fab2 f282 	clz	r2, r2
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f042 0220 	orr.w	r2, r2, #32
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f002 021f 	and.w	r2, r2, #31
 8003c60:	2101      	movs	r1, #1
 8003c62:	fa01 f202 	lsl.w	r2, r1, r2
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 811f 	beq.w	8003eac <HAL_RCC_OscConfig+0x334>
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 8116 	bne.w	8003eac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f000 bfaf 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12e>
 8003c98:	4b83      	ldr	r3, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a82      	ldr	r2, [pc, #520]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e036      	b.n	8003d14 <HAL_RCC_OscConfig+0x19c>
 8003ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x158>
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7b      	ldr	r2, [pc, #492]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b79      	ldr	r3, [pc, #484]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a78      	ldr	r2, [pc, #480]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e021      	b.n	8003d14 <HAL_RCC_OscConfig+0x19c>
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x184>
 8003ce2:	4b71      	ldr	r3, [pc, #452]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a70      	ldr	r2, [pc, #448]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b6e      	ldr	r3, [pc, #440]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6d      	ldr	r2, [pc, #436]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0x19c>
 8003cfc:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a69      	ldr	r2, [pc, #420]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a66      	ldr	r2, [pc, #408]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d14:	4b64      	ldr	r3, [pc, #400]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f023 020f 	bic.w	r2, r3, #15
 8003d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	495f      	ldr	r1, [pc, #380]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d059      	beq.n	8003df2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7ff f9a9 	bl	8003094 <HAL_GetTick>
 8003d42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d48:	f7ff f9a4 	bl	8003094 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b64      	cmp	r3, #100	; 0x64
 8003d56:	d902      	bls.n	8003d5e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	f000 bf43 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
 8003d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003d72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_OscConfig+0x218>
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	e015      	b.n	8003dbc <HAL_RCC_OscConfig+0x244>
 8003d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003da8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003dac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003db0:	fa93 f3a3 	rbit	r3, r3
 8003db4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003db8:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dc0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003dc4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003dc8:	fa92 f2a2 	rbit	r2, r2
 8003dcc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003dd0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003dd4:	fab2 f282 	clz	r2, r2
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	f042 0220 	orr.w	r2, r2, #32
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f002 021f 	and.w	r2, r2, #31
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ab      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1d0>
 8003df0:	e05d      	b.n	8003eae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7ff f94f 	bl	8003094 <HAL_GetTick>
 8003df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7ff f94a 	bl	8003094 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b64      	cmp	r3, #100	; 0x64
 8003e0a:	d902      	bls.n	8003e12 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	f000 bee9 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
 8003e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e16:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d102      	bne.n	8003e44 <HAL_RCC_OscConfig+0x2cc>
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	e015      	b.n	8003e70 <HAL_RCC_OscConfig+0x2f8>
 8003e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e48:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e5c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e60:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_RCC_OscConfig+0x330>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e74:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003e78:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003e7c:	fa92 f2a2 	rbit	r2, r2
 8003e80:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003e84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003e88:	fab2 f282 	clz	r2, r2
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	f042 0220 	orr.w	r2, r2, #32
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	f002 021f 	and.w	r2, r2, #31
 8003e98:	2101      	movs	r1, #1
 8003e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ab      	bne.n	8003dfc <HAL_RCC_OscConfig+0x284>
 8003ea4:	e003      	b.n	8003eae <HAL_RCC_OscConfig+0x336>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 817d 	beq.w	80041be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ec4:	4ba6      	ldr	r3, [pc, #664]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ed0:	4ba3      	ldr	r3, [pc, #652]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d172      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x44a>
 8003edc:	4ba0      	ldr	r3, [pc, #640]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d16c      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x44a>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003efa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_OscConfig+0x3a0>
 8003f12:	4b93      	ldr	r3, [pc, #588]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	e013      	b.n	8003f40 <HAL_RCC_OscConfig+0x3c8>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003f3c:	4b88      	ldr	r3, [pc, #544]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2202      	movs	r2, #2
 8003f42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003f46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f4a:	fa92 f2a2 	rbit	r2, r2
 8003f4e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003f52:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003f56:	fab2 f282 	clz	r2, r2
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	f042 0220 	orr.w	r2, r2, #32
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	f002 021f 	and.w	r2, r2, #31
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCC_OscConfig+0x410>
 8003f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d002      	beq.n	8003f88 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f000 be2e 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f88:	4b75      	ldr	r3, [pc, #468]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	21f8      	movs	r1, #248	; 0xf8
 8003f9e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003fa6:	fa91 f1a1 	rbit	r1, r1
 8003faa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003fae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003fb2:	fab1 f181 	clz	r1, r1
 8003fb6:	b2c9      	uxtb	r1, r1
 8003fb8:	408b      	lsls	r3, r1
 8003fba:	4969      	ldr	r1, [pc, #420]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc0:	e0fd      	b.n	80041be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8088 	beq.w	80040e4 <HAL_RCC_OscConfig+0x56c>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003fe6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7ff f848 	bl	8003094 <HAL_GetTick>
 8004004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400a:	f7ff f843 	bl	8003094 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d902      	bls.n	8004020 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	f000 bde2 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
 8004020:	2302      	movs	r3, #2
 8004022:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004032:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <HAL_RCC_OscConfig+0x4d8>
 800404a:	4b45      	ldr	r3, [pc, #276]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	e013      	b.n	8004078 <HAL_RCC_OscConfig+0x500>
 8004050:	2302      	movs	r3, #2
 8004052:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004062:	2302      	movs	r3, #2
 8004064:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004068:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004074:	4b3a      	ldr	r3, [pc, #232]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2202      	movs	r2, #2
 800407a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800407e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004082:	fa92 f2a2 	rbit	r2, r2
 8004086:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800408a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f042 0220 	orr.w	r2, r2, #32
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	f002 021f 	and.w	r2, r2, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0af      	beq.n	800400a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	21f8      	movs	r1, #248	; 0xf8
 80040c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80040c8:	fa91 f1a1 	rbit	r1, r1
 80040cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80040d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80040d4:	fab1 f181 	clz	r1, r1
 80040d8:	b2c9      	uxtb	r1, r1
 80040da:	408b      	lsls	r3, r1
 80040dc:	4920      	ldr	r1, [pc, #128]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
 80040e2:	e06c      	b.n	80041be <HAL_RCC_OscConfig+0x646>
 80040e4:	2301      	movs	r3, #1
 80040e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80040f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004104:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fe ffc0 	bl	8003094 <HAL_GetTick>
 8004114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004118:	e00a      	b.n	8004130 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411a:	f7fe ffbb 	bl	8003094 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d902      	bls.n	8004130 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	f000 bd5a 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
 8004130:	2302      	movs	r3, #2
 8004132:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d104      	bne.n	8004164 <HAL_RCC_OscConfig+0x5ec>
 800415a:	4b01      	ldr	r3, [pc, #4]	; (8004160 <HAL_RCC_OscConfig+0x5e8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	e015      	b.n	800418c <HAL_RCC_OscConfig+0x614>
 8004160:	40021000 	.word	0x40021000
 8004164:	2302      	movs	r3, #2
 8004166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004176:	2302      	movs	r3, #2
 8004178:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800417c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004188:	4bc8      	ldr	r3, [pc, #800]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2202      	movs	r2, #2
 800418e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004192:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004196:	fa92 f2a2 	rbit	r2, r2
 800419a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800419e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80041a2:	fab2 f282 	clz	r2, r2
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	f002 021f 	and.w	r2, r2, #31
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f202 	lsl.w	r2, r1, r2
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ad      	bne.n	800411a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8110 	beq.w	80043f4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d079      	beq.n	80042d8 <HAL_RCC_OscConfig+0x760>
 80041e4:	2301      	movs	r3, #1
 80041e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	4bab      	ldr	r3, [pc, #684]	; (80044b0 <HAL_RCC_OscConfig+0x938>)
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	461a      	mov	r2, r3
 800420a:	2301      	movs	r3, #1
 800420c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420e:	f7fe ff41 	bl	8003094 <HAL_GetTick>
 8004212:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004216:	e00a      	b.n	800422e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004218:	f7fe ff3c 	bl	8003094 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d902      	bls.n	800422e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	f000 bcdb 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
 800422e:	2302      	movs	r3, #2
 8004230:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004248:	2202      	movs	r2, #2
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004250:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	fa93 f2a3 	rbit	r2, r3
 800425a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800426c:	2202      	movs	r2, #2
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	fa93 f2a3 	rbit	r2, r3
 800427e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004282:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004286:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 800428a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004294:	2102      	movs	r1, #2
 8004296:	6019      	str	r1, [r3, #0]
 8004298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f1a3 	rbit	r1, r3
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042ae:	6019      	str	r1, [r3, #0]
  return result;
 80042b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0a0      	beq.n	8004218 <HAL_RCC_OscConfig+0x6a0>
 80042d6:	e08d      	b.n	80043f4 <HAL_RCC_OscConfig+0x87c>
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	fa93 f2a3 	rbit	r2, r3
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80042fa:	601a      	str	r2, [r3, #0]
  return result;
 80042fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004300:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004304:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	4b68      	ldr	r3, [pc, #416]	; (80044b0 <HAL_RCC_OscConfig+0x938>)
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	461a      	mov	r2, r3
 8004316:	2300      	movs	r3, #0
 8004318:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fe febb 	bl	8003094 <HAL_GetTick>
 800431e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004322:	e00a      	b.n	800433a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004324:	f7fe feb6 	bl	8003094 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d902      	bls.n	800433a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	f000 bc55 	b.w	8004be4 <HAL_RCC_OscConfig+0x106c>
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004342:	2202      	movs	r2, #2
 8004344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	fa93 f2a3 	rbit	r2, r3
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004366:	2202      	movs	r2, #2
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	fa93 f2a3 	rbit	r2, r3
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800438a:	2202      	movs	r2, #2
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fa93 f2a3 	rbit	r2, r3
 800439c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 80043a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043b2:	2102      	movs	r1, #2
 80043b4:	6019      	str	r1, [r3, #0]
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	fa93 f1a3 	rbit	r1, r3
 80043c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043cc:	6019      	str	r1, [r3, #0]
  return result;
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d197      	bne.n	8004324 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 81a1 	beq.w	800474c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4a22      	ldr	r2, [pc, #136]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	61d3      	str	r3, [r2, #28]
 8004428:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004434:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004442:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444a:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_RCC_OscConfig+0x93c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11a      	bne.n	800448c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_RCC_OscConfig+0x93c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_RCC_OscConfig+0x93c>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004462:	f7fe fe17 	bl	8003094 <HAL_GetTick>
 8004466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	e009      	b.n	8004480 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446c:	f7fe fe12 	bl	8003094 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b64      	cmp	r3, #100	; 0x64
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e3b1      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_RCC_OscConfig+0x93c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0ef      	beq.n	800446c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800448c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004490:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10d      	bne.n	80044b8 <HAL_RCC_OscConfig+0x940>
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	4a02      	ldr	r2, [pc, #8]	; (80044ac <HAL_RCC_OscConfig+0x934>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6213      	str	r3, [r2, #32]
 80044a8:	e03c      	b.n	8004524 <HAL_RCC_OscConfig+0x9ac>
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000
 80044b0:	10908120 	.word	0x10908120
 80044b4:	40007000 	.word	0x40007000
 80044b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCC_OscConfig+0x96a>
 80044c8:	4bc1      	ldr	r3, [pc, #772]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	4ac0      	ldr	r2, [pc, #768]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	6213      	str	r3, [r2, #32]
 80044d4:	4bbe      	ldr	r3, [pc, #760]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	4abd      	ldr	r2, [pc, #756]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80044da:	f023 0304 	bic.w	r3, r3, #4
 80044de:	6213      	str	r3, [r2, #32]
 80044e0:	e020      	b.n	8004524 <HAL_RCC_OscConfig+0x9ac>
 80044e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x994>
 80044f2:	4bb7      	ldr	r3, [pc, #732]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4ab6      	ldr	r2, [pc, #728]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80044f8:	f043 0304 	orr.w	r3, r3, #4
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	4bb4      	ldr	r3, [pc, #720]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4ab3      	ldr	r2, [pc, #716]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x9ac>
 800450c:	4bb0      	ldr	r3, [pc, #704]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	4aaf      	ldr	r2, [pc, #700]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	6213      	str	r3, [r2, #32]
 8004518:	4bad      	ldr	r3, [pc, #692]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4aac      	ldr	r2, [pc, #688]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004528:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8081 	beq.w	8004638 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7fe fdad 	bl	8003094 <HAL_GetTick>
 800453a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe fda8 	bl	8003094 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e345      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
 8004558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004560:	2202      	movs	r2, #2
 8004562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004568:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	fa93 f2a3 	rbit	r2, r3
 8004572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004576:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004584:	2202      	movs	r2, #2
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	fa93 f2a3 	rbit	r2, r3
 8004596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800459e:	601a      	str	r2, [r3, #0]
  return result;
 80045a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d102      	bne.n	80045c4 <HAL_RCC_OscConfig+0xa4c>
 80045be:	4b84      	ldr	r3, [pc, #528]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	e013      	b.n	80045ec <HAL_RCC_OscConfig+0xa74>
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80045cc:	2202      	movs	r2, #2
 80045ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	fa93 f2a3 	rbit	r2, r3
 80045de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	4b79      	ldr	r3, [pc, #484]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80045f4:	2102      	movs	r1, #2
 80045f6:	6011      	str	r1, [r2, #0]
 80045f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	fa92 f1a2 	rbit	r1, r2
 8004606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800460a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800460e:	6011      	str	r1, [r2, #0]
  return result;
 8004610:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004614:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	fab2 f282 	clz	r2, r2
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	f002 021f 	and.w	r2, r2, #31
 800462a:	2101      	movs	r1, #1
 800462c:	fa01 f202 	lsl.w	r2, r1, r2
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d084      	beq.n	8004540 <HAL_RCC_OscConfig+0x9c8>
 8004636:	e07f      	b.n	8004738 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7fe fd2c 	bl	8003094 <HAL_GetTick>
 800463c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	e00b      	b.n	800465a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fd27 	bl	8003094 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e2c4      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
 800465a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004662:	2202      	movs	r2, #2
 8004664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	fa93 f2a3 	rbit	r2, r3
 8004674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004678:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004682:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004686:	2202      	movs	r2, #2
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fa93 f2a3 	rbit	r2, r3
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046a0:	601a      	str	r2, [r3, #0]
  return result;
 80046a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d102      	bne.n	80046c6 <HAL_RCC_OscConfig+0xb4e>
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	e013      	b.n	80046ee <HAL_RCC_OscConfig+0xb76>
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80046ce:	2202      	movs	r2, #2
 80046d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	fa93 f2a3 	rbit	r2, r3
 80046e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80046f6:	2102      	movs	r1, #2
 80046f8:	6011      	str	r1, [r2, #0]
 80046fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	fa92 f1a2 	rbit	r1, r2
 8004708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800470c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004710:	6011      	str	r1, [r2, #0]
  return result;
 8004712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004716:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	fab2 f282 	clz	r2, r2
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	f002 021f 	and.w	r2, r2, #31
 800472c:	2101      	movs	r1, #1
 800472e:	fa01 f202 	lsl.w	r2, r1, r2
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d184      	bne.n	8004642 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004738:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004740:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 8004746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8242 	beq.w	8004be2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <HAL_RCC_OscConfig+0xc58>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b08      	cmp	r3, #8
 8004768:	f000 8213 	beq.w	8004b92 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b02      	cmp	r3, #2
 800477a:	f040 8162 	bne.w	8004a42 <HAL_RCC_OscConfig+0xeca>
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004786:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800478a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	fa93 f2a3 	rbit	r2, r3
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047a2:	601a      	str	r2, [r3, #0]
  return result;
 80047a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	461a      	mov	r2, r3
 80047c0:	2300      	movs	r3, #0
 80047c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fe fc66 	bl	8003094 <HAL_GetTick>
 80047c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047cc:	e00c      	b.n	80047e8 <HAL_RCC_OscConfig+0xc70>
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fe fc5e 	bl	8003094 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1fd      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80047f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	fa93 f2a3 	rbit	r2, r3
 8004804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004808:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800480c:	601a      	str	r2, [r3, #0]
  return result;
 800480e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004812:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004816:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004818:	fab3 f383 	clz	r3, r3
 800481c:	b2db      	uxtb	r3, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d102      	bne.n	8004832 <HAL_RCC_OscConfig+0xcba>
 800482c:	4bb0      	ldr	r3, [pc, #704]	; (8004af0 <HAL_RCC_OscConfig+0xf78>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	e027      	b.n	8004882 <HAL_RCC_OscConfig+0xd0a>
 8004832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004836:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800483a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800483e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004844:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	fa93 f2a3 	rbit	r2, r3
 800484e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004852:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	fa93 f2a3 	rbit	r2, r3
 8004874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004878:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	4b9c      	ldr	r3, [pc, #624]	; (8004af0 <HAL_RCC_OscConfig+0xf78>)
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004886:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800488a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800488e:	6011      	str	r1, [r2, #0]
 8004890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004894:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	fa92 f1a2 	rbit	r1, r2
 800489e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048a6:	6011      	str	r1, [r2, #0]
  return result;
 80048a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	fab2 f282 	clz	r2, r2
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	f042 0220 	orr.w	r2, r2, #32
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	f002 021f 	and.w	r2, r2, #31
 80048c2:	2101      	movs	r1, #1
 80048c4:	fa01 f202 	lsl.w	r2, r1, r2
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d182      	bne.n	80047d4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ce:	4b88      	ldr	r3, [pc, #544]	; (8004af0 <HAL_RCC_OscConfig+0xf78>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	430b      	orrs	r3, r1
 80048f0:	497f      	ldr	r1, [pc, #508]	; (8004af0 <HAL_RCC_OscConfig+0xf78>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
 80048f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80048fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004908:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	fa93 f2a3 	rbit	r2, r3
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800491a:	601a      	str	r2, [r3, #0]
  return result;
 800491c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004920:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004924:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004930:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	461a      	mov	r2, r3
 8004938:	2301      	movs	r3, #1
 800493a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fe fbaa 	bl	8003094 <HAL_GetTick>
 8004940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004944:	e009      	b.n	800495a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004946:	f7fe fba5 	bl	8003094 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e144      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004962:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	fa93 f2a3 	rbit	r2, r3
 8004976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800497e:	601a      	str	r2, [r3, #0]
  return result;
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004988:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d102      	bne.n	80049a4 <HAL_RCC_OscConfig+0xe2c>
 800499e:	4b54      	ldr	r3, [pc, #336]	; (8004af0 <HAL_RCC_OscConfig+0xf78>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	e027      	b.n	80049f4 <HAL_RCC_OscConfig+0xe7c>
 80049a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	fa93 f2a3 	rbit	r2, r3
 80049c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80049d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	fa93 f2a3 	rbit	r2, r3
 80049e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <HAL_RCC_OscConfig+0xf78>)
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80049fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a00:	6011      	str	r1, [r2, #0]
 8004a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a06:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	fa92 f1a2 	rbit	r1, r2
 8004a10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a14:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a18:	6011      	str	r1, [r2, #0]
  return result;
 8004a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a1e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	fab2 f282 	clz	r2, r2
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	f042 0220 	orr.w	r2, r2, #32
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	f002 021f 	and.w	r2, r2, #31
 8004a34:	2101      	movs	r1, #1
 8004a36:	fa01 f202 	lsl.w	r2, r1, r2
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d082      	beq.n	8004946 <HAL_RCC_OscConfig+0xdce>
 8004a40:	e0cf      	b.n	8004be2 <HAL_RCC_OscConfig+0x106a>
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	fa93 f2a3 	rbit	r2, r3
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a66:	601a      	str	r2, [r3, #0]
  return result;
 8004a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	461a      	mov	r2, r3
 8004a84:	2300      	movs	r3, #0
 8004a86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fe fb04 	bl	8003094 <HAL_GetTick>
 8004a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a90:	e009      	b.n	8004aa6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fe faff 	bl	8003094 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e09e      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
 8004aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aaa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	fa93 f2a3 	rbit	r2, r3
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004aca:	601a      	str	r2, [r3, #0]
  return result;
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ad4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d104      	bne.n	8004af4 <HAL_RCC_OscConfig+0xf7c>
 8004aea:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <HAL_RCC_OscConfig+0xf78>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	e029      	b.n	8004b44 <HAL_RCC_OscConfig+0xfcc>
 8004af0:	40021000 	.word	0x40021000
 8004af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	fa93 f2a3 	rbit	r2, r3
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b1e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	fa93 f2a3 	rbit	r2, r3
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_RCC_OscConfig+0x1078>)
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b48:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b50:	6011      	str	r1, [r2, #0]
 8004b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b56:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	fa92 f1a2 	rbit	r1, r2
 8004b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b64:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b68:	6011      	str	r1, [r2, #0]
  return result;
 8004b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	fab2 f282 	clz	r2, r2
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	f042 0220 	orr.w	r2, r2, #32
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	f002 021f 	and.w	r2, r2, #31
 8004b84:	2101      	movs	r1, #1
 8004b86:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d180      	bne.n	8004a92 <HAL_RCC_OscConfig+0xf1a>
 8004b90:	e027      	b.n	8004be2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e01e      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_OscConfig+0x1078>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bb2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d10b      	bne.n	8004bde <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004bc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d001      	beq.n	8004be2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b09e      	sub	sp, #120	; 0x78
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e162      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b90      	ldr	r3, [pc, #576]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d910      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b8d      	ldr	r3, [pc, #564]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 0207 	bic.w	r2, r3, #7
 8004c22:	498b      	ldr	r1, [pc, #556]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b89      	ldr	r3, [pc, #548]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e14a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4b82      	ldr	r3, [pc, #520]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	497f      	ldr	r1, [pc, #508]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80dc 	beq.w	8004e20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d13c      	bne.n	8004cea <HAL_RCC_ClockConfig+0xf6>
 8004c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d102      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xa6>
 8004c94:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	e00f      	b.n	8004cba <HAL_RCC_ClockConfig+0xc6>
 8004c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cac:	663b      	str	r3, [r7, #96]	; 0x60
 8004cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb6:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cc2:	fa92 f2a2 	rbit	r2, r2
 8004cc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0220 	orr.w	r2, r2, #32
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d17b      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0f3      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d13c      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x178>
 8004cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d102      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x128>
 8004d16:	4b4f      	ldr	r3, [pc, #316]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCC_ClockConfig+0x148>
 8004d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d38:	4b46      	ldr	r3, [pc, #280]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d40:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d44:	fa92 f2a2 	rbit	r2, r2
 8004d48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4c:	fab2 f282 	clz	r2, r2
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	f042 0220 	orr.w	r2, r2, #32
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	f002 021f 	and.w	r2, r2, #31
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d13a      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0b2      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
 8004d8e:	4b31      	ldr	r3, [pc, #196]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	e00d      	b.n	8004db0 <HAL_RCC_ClockConfig+0x1bc>
 8004d94:	2302      	movs	r3, #2
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004da0:	2302      	movs	r3, #2
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2202      	movs	r2, #2
 8004db2:	61ba      	str	r2, [r7, #24]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	fa92 f2a2 	rbit	r2, r2
 8004dba:	617a      	str	r2, [r7, #20]
  return result;
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	fab2 f282 	clz	r2, r2
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	f042 0220 	orr.w	r2, r2, #32
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	f002 021f 	and.w	r2, r2, #31
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e079      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	491a      	ldr	r1, [pc, #104]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fe f950 	bl	8003094 <HAL_GetTick>
 8004df4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fe f94c 	bl	8003094 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e061      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d214      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 0207 	bic.w	r2, r3, #7
 8004e36:	4906      	ldr	r1, [pc, #24]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e040      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
 8004e50:	40022000 	.word	0x40022000
 8004e54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e64:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	491a      	ldr	r1, [pc, #104]	; (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4912      	ldr	r1, [pc, #72]	; (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e96:	f000 f829 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea4:	22f0      	movs	r2, #240	; 0xf0
 8004ea6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	fa92 f2a2 	rbit	r2, r2
 8004eae:	60fa      	str	r2, [r7, #12]
  return result;
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	fab2 f282 	clz	r2, r2
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	40d3      	lsrs	r3, r2
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <HAL_RCC_ClockConfig+0x2ec>)
 8004ebc:	5cd3      	ldrb	r3, [r2, r3]
 8004ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <HAL_RCC_ClockConfig+0x2f0>)
 8004ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ec6:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <HAL_RCC_ClockConfig+0x2f4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe f89e 	bl	800300c <HAL_InitTick>
  
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3778      	adds	r7, #120	; 0x78
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	080088d4 	.word	0x080088d4
 8004ee4:	20000068 	.word	0x20000068
 8004ee8:	2000006c 	.word	0x2000006c

08004eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b08b      	sub	sp, #44	; 0x2c
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x30>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x36>
 8004f1a:	e03c      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f1e:	623b      	str	r3, [r7, #32]
      break;
 8004f20:	e03c      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004f2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	fa92 f2a2 	rbit	r2, r2
 8004f34:	607a      	str	r2, [r7, #4]
  return result;
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	fab2 f282 	clz	r2, r2
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	40d3      	lsrs	r3, r2
 8004f40:	4a1c      	ldr	r2, [pc, #112]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	220f      	movs	r2, #15
 8004f50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	fa92 f2a2 	rbit	r2, r2
 8004f58:	60fa      	str	r2, [r7, #12]
  return result;
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	fab2 f282 	clz	r2, r2
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	40d3      	lsrs	r3, r2
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f66:	5cd3      	ldrb	r3, [r2, r3]
 8004f68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f74:	4a0e      	ldr	r2, [pc, #56]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	e004      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4a0c      	ldr	r2, [pc, #48]	; (8004fbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	623b      	str	r3, [r7, #32]
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f98:	623b      	str	r3, [r7, #32]
      break;
 8004f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	372c      	adds	r7, #44	; 0x2c
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	007a1200 	.word	0x007a1200
 8004fb4:	080088ec 	.word	0x080088ec
 8004fb8:	080088fc 	.word	0x080088fc
 8004fbc:	003d0900 	.word	0x003d0900

08004fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000068 	.word	0x20000068

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004fde:	f7ff ffef 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ff0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	fa92 f2a2 	rbit	r2, r2
 8004ff8:	603a      	str	r2, [r7, #0]
  return result;
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	fab2 f282 	clz	r2, r2
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	40d3      	lsrs	r3, r2
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005006:	5cd3      	ldrb	r3, [r2, r3]
 8005008:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000
 8005018:	080088e4 	.word	0x080088e4

0800501c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005022:	f7ff ffcd 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005026:	4601      	mov	r1, r0
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005030:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005034:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	fa92 f2a2 	rbit	r2, r2
 800503c:	603a      	str	r2, [r7, #0]
  return result;
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	fab2 f282 	clz	r2, r2
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	40d3      	lsrs	r3, r2
 8005048:	4a04      	ldr	r2, [pc, #16]	; (800505c <HAL_RCC_GetPCLK2Freq+0x40>)
 800504a:	5cd3      	ldrb	r3, [r2, r3]
 800504c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	080088e4 	.word	0x080088e4

08005060 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b092      	sub	sp, #72	; 0x48
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005070:	2300      	movs	r3, #0
 8005072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80d4 	beq.w	800522c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005084:	4b4e      	ldr	r3, [pc, #312]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10e      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b4b      	ldr	r3, [pc, #300]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	4a4a      	ldr	r2, [pc, #296]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	61d3      	str	r3, [r2, #28]
 800509c:	4b48      	ldr	r3, [pc, #288]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b45      	ldr	r3, [pc, #276]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d118      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ba:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a41      	ldr	r2, [pc, #260]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c6:	f7fd ffe5 	bl	8003094 <HAL_GetTick>
 80050ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	e008      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ce:	f7fd ffe1 	bl	8003094 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b64      	cmp	r3, #100	; 0x64
 80050da:	d901      	bls.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e169      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ec:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8084 	beq.w	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005108:	429a      	cmp	r2, r3
 800510a:	d07c      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800510c:	4b2c      	ldr	r3, [pc, #176]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800511a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	fa93 f3a3 	rbit	r3, r3
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005126:	fab3 f383 	clz	r3, r3
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	4b26      	ldr	r3, [pc, #152]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	461a      	mov	r2, r3
 8005136:	2301      	movs	r3, #1
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800513e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	fa93 f3a3 	rbit	r3, r3
 8005146:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	461a      	mov	r2, r3
 800515a:	2300      	movs	r3, #0
 800515c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800515e:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005162:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d04b      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fd ff91 	bl	8003094 <HAL_GetTick>
 8005172:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	e00a      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fd ff8d 	bl	8003094 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e113      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800518c:	2302      	movs	r3, #2
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	2302      	movs	r3, #2
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	61fb      	str	r3, [r7, #28]
  return result;
 80051a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f043 0302 	orr.w	r3, r3, #2
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d108      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80051ba:	4b01      	ldr	r3, [pc, #4]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	e00d      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40007000 	.word	0x40007000
 80051c8:	10908100 	.word	0x10908100
 80051cc:	2302      	movs	r3, #2
 80051ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	4b78      	ldr	r3, [pc, #480]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2202      	movs	r2, #2
 80051de:	613a      	str	r2, [r7, #16]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	fa92 f2a2 	rbit	r2, r2
 80051e6:	60fa      	str	r2, [r7, #12]
  return result;
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	fab2 f282 	clz	r2, r2
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	f002 021f 	and.w	r2, r2, #31
 80051fa:	2101      	movs	r1, #1
 80051fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0b7      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005206:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	496a      	ldr	r1, [pc, #424]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005214:	4313      	orrs	r3, r2
 8005216:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005218:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005220:	4b66      	ldr	r3, [pc, #408]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4a65      	ldr	r2, [pc, #404]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005238:	4b60      	ldr	r3, [pc, #384]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	f023 0203 	bic.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	495d      	ldr	r1, [pc, #372]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005256:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4956      	ldr	r1, [pc, #344]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005274:	4b51      	ldr	r3, [pc, #324]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	494e      	ldr	r1, [pc, #312]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005282:	4313      	orrs	r3, r2
 8005284:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005292:	4b4a      	ldr	r3, [pc, #296]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	f023 0210 	bic.w	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	4947      	ldr	r1, [pc, #284]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80052b0:	4b42      	ldr	r3, [pc, #264]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	493f      	ldr	r1, [pc, #252]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ce:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f023 0220 	bic.w	r2, r3, #32
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	4938      	ldr	r1, [pc, #224]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052ec:	4b33      	ldr	r3, [pc, #204]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	4930      	ldr	r1, [pc, #192]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	d008      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	4929      	ldr	r1, [pc, #164]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005318:	4313      	orrs	r3, r2
 800531a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005328:	4b24      	ldr	r3, [pc, #144]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4921      	ldr	r1, [pc, #132]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005346:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	491a      	ldr	r1, [pc, #104]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	4912      	ldr	r1, [pc, #72]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005382:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	490b      	ldr	r1, [pc, #44]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005390:	4313      	orrs	r3, r2
 8005392:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	4903      	ldr	r1, [pc, #12]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3748      	adds	r7, #72	; 0x48
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000

080053c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e073      	b.n	80054be <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	7f5b      	ldrb	r3, [r3, #29]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fd fb98 	bl	8002b1c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d055      	beq.n	80054ac <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	22ca      	movs	r2, #202	; 0xca
 8005406:	625a      	str	r2, [r3, #36]	; 0x24
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2253      	movs	r2, #83	; 0x53
 800540e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa49 	bl	80058a8 <RTC_EnterInitMode>
 8005416:	4603      	mov	r3, r0
 8005418:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d12c      	bne.n	800547a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800542e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005432:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6899      	ldr	r1, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	68d2      	ldr	r2, [r2, #12]
 800545a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6919      	ldr	r1, [r3, #16]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	041a      	lsls	r2, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fa50 	bl	8005916 <RTC_ExitInitMode>
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d110      	bne.n	80054a2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	22ff      	movs	r2, #255	; 0xff
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24
 80054aa:	e001      	b.n	80054b0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054c6:	b590      	push	{r4, r7, lr}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	7f1b      	ldrb	r3, [r3, #28]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_RTC_SetTime+0x1c>
 80054de:	2302      	movs	r3, #2
 80054e0:	e087      	b.n	80055f2 <HAL_RTC_SetTime+0x12c>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2202      	movs	r2, #2
 80054ec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d126      	bne.n	8005542 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fa27 	bl	8005960 <RTC_ByteToBcd2>
 8005512:	4603      	mov	r3, r0
 8005514:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fa20 	bl	8005960 <RTC_ByteToBcd2>
 8005520:	4603      	mov	r3, r0
 8005522:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005524:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	789b      	ldrb	r3, [r3, #2]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fa18 	bl	8005960 <RTC_ByteToBcd2>
 8005530:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005532:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	78db      	ldrb	r3, [r3, #3]
 800553a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e018      	b.n	8005574 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005562:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005568:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	78db      	ldrb	r3, [r3, #3]
 800556e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	22ca      	movs	r2, #202	; 0xca
 800557a:	625a      	str	r2, [r3, #36]	; 0x24
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2253      	movs	r2, #83	; 0x53
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f98f 	bl	80058a8 <RTC_EnterInitMode>
 800558a:	4603      	mov	r3, r0
 800558c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d120      	bne.n	80055d6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800559e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6899      	ldr	r1, [r3, #8]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f9a2 	bl	8005916 <RTC_ExitInitMode>
 80055d2:	4603      	mov	r3, r0
 80055d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80055d6:	7cfb      	ldrb	r3, [r7, #19]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	22ff      	movs	r2, #255	; 0xff
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]

  return status;
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}

080055fa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b086      	sub	sp, #24
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800562c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005630:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	0d9b      	lsrs	r3, r3, #22
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11a      	bne.n	80056ac <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f98e 	bl	800599c <RTC_Bcd2ToByte>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 f985 	bl	800599c <RTC_Bcd2ToByte>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	789b      	ldrb	r3, [r3, #2]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f97c 	bl	800599c <RTC_Bcd2ToByte>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461a      	mov	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	7f1b      	ldrb	r3, [r3, #28]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_RTC_SetDate+0x1c>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e071      	b.n	80057b6 <HAL_RTC_SetDate+0x100>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2202      	movs	r2, #2
 80056dc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10e      	bne.n	8005702 <HAL_RTC_SetDate+0x4c>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	f023 0310 	bic.w	r3, r3, #16
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	330a      	adds	r3, #10
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11c      	bne.n	8005742 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	78db      	ldrb	r3, [r3, #3]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 f927 	bl	8005960 <RTC_ByteToBcd2>
 8005712:	4603      	mov	r3, r0
 8005714:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f920 	bl	8005960 <RTC_ByteToBcd2>
 8005720:	4603      	mov	r3, r0
 8005722:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005724:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	789b      	ldrb	r3, [r3, #2]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f918 	bl	8005960 <RTC_ByteToBcd2>
 8005730:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005732:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e00e      	b.n	8005760 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	78db      	ldrb	r3, [r3, #3]
 8005746:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800574e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005754:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	22ca      	movs	r2, #202	; 0xca
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2253      	movs	r2, #83	; 0x53
 800576e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f899 	bl	80058a8 <RTC_EnterInitMode>
 8005776:	4603      	mov	r3, r0
 8005778:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10c      	bne.n	800579a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800578a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800578e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f8c0 	bl	8005916 <RTC_ExitInitMode>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	22ff      	movs	r2, #255	; 0xff
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]

  return status;
 80057b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd90      	pop	{r4, r7, pc}

080057be <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	0b5b      	lsrs	r3, r3, #13
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	b2da      	uxtb	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d11a      	bne.n	8005852 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	78db      	ldrb	r3, [r3, #3]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 f8bb 	bl	800599c <RTC_Bcd2ToByte>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 f8b2 	bl	800599c <RTC_Bcd2ToByte>
 8005838:	4603      	mov	r3, r0
 800583a:	461a      	mov	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	789b      	ldrb	r3, [r3, #2]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f8a9 	bl	800599c <RTC_Bcd2ToByte>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a0d      	ldr	r2, [pc, #52]	; (80058a4 <HAL_RTC_WaitForSynchro+0x48>)
 800586e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005870:	f7fd fc10 	bl	8003094 <HAL_GetTick>
 8005874:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005876:	e009      	b.n	800588c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005878:	f7fd fc0c 	bl	8003094 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005886:	d901      	bls.n	800588c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e007      	b.n	800589c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0ee      	beq.n	8005878 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	0001ff5f 	.word	0x0001ff5f

080058a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d122      	bne.n	800590c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058d6:	f7fd fbdd 	bl	8003094 <HAL_GetTick>
 80058da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058dc:	e00c      	b.n	80058f8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058de:	f7fd fbd9 	bl	8003094 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ec:	d904      	bls.n	80058f8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2204      	movs	r2, #4
 80058f2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <RTC_EnterInitMode+0x64>
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d1e8      	bne.n	80058de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005930:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff ff8b 	bl	800585c <HAL_RTC_WaitForSynchro>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2204      	movs	r2, #4
 8005950:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800596e:	e005      	b.n	800597c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3301      	adds	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	3b0a      	subs	r3, #10
 800597a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b09      	cmp	r3, #9
 8005980:	d8f6      	bhi.n	8005970 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	b2da      	uxtb	r2, r3
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	4313      	orrs	r3, r2
 800598e:	b2db      	uxtb	r3, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	b2db      	uxtb	r3, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e09d      	b.n	8005b26 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fa:	d009      	beq.n	8005a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	61da      	str	r2, [r3, #28]
 8005a02:	e005      	b.n	8005a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fd f89c 	bl	8002b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a50:	d902      	bls.n	8005a58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e002      	b.n	8005a5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a66:	d007      	beq.n	8005a78 <HAL_SPI_Init+0xa0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	ea42 0103 	orr.w	r1, r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	f003 0204 	and.w	r2, r3, #4
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005af4:	ea42 0103 	orr.w	r1, r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e049      	b.n	8005bd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fd f849 	bl	8002bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f000 f8ff 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b6      	b.n	8005d66 <HAL_TIM_ConfigClockSource+0x18a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c34:	d03e      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0xd8>
 8005c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3a:	f200 8087 	bhi.w	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c42:	f000 8086 	beq.w	8005d52 <HAL_TIM_ConfigClockSource+0x176>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	d87f      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d01a      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0xaa>
 8005c50:	2b70      	cmp	r3, #112	; 0x70
 8005c52:	d87b      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d050      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x11e>
 8005c58:	2b60      	cmp	r3, #96	; 0x60
 8005c5a:	d877      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d03c      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0xfe>
 8005c60:	2b50      	cmp	r3, #80	; 0x50
 8005c62:	d873      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d058      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x13e>
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d86f      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d064      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c70:	2b30      	cmp	r3, #48	; 0x30
 8005c72:	d86b      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d060      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d867      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05c      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d05a      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x15e>
 8005c84:	e062      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6899      	ldr	r1, [r3, #8]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f000 f975 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	609a      	str	r2, [r3, #8]
      break;
 8005cb2:	e04f      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6899      	ldr	r1, [r3, #8]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f000 f95e 	bl	8005f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd6:	609a      	str	r2, [r3, #8]
      break;
 8005cd8:	e03c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 f8d2 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2150      	movs	r1, #80	; 0x50
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f92b 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e02c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 f8f1 	bl	8005eee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2160      	movs	r1, #96	; 0x60
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 f91b 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005d18:	e01c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 f8b2 	bl	8005e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2140      	movs	r1, #64	; 0x40
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f90b 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005d38:	e00c      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f000 f902 	bl	8005f4e <TIM_ITRx_SetConfig>
      break;
 8005d4a:	e003      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	e000      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a3c      	ldr	r2, [pc, #240]	; (8005e74 <TIM_Base_SetConfig+0x104>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00f      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8e:	d00b      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a39      	ldr	r2, [pc, #228]	; (8005e78 <TIM_Base_SetConfig+0x108>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d007      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a38      	ldr	r2, [pc, #224]	; (8005e7c <TIM_Base_SetConfig+0x10c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_Base_SetConfig+0x38>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a37      	ldr	r2, [pc, #220]	; (8005e80 <TIM_Base_SetConfig+0x110>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d108      	bne.n	8005dba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <TIM_Base_SetConfig+0x104>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01b      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc8:	d017      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2a      	ldr	r2, [pc, #168]	; (8005e78 <TIM_Base_SetConfig+0x108>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a29      	ldr	r2, [pc, #164]	; (8005e7c <TIM_Base_SetConfig+0x10c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <TIM_Base_SetConfig+0x110>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <TIM_Base_SetConfig+0x118>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <TIM_Base_SetConfig+0x11c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a10      	ldr	r2, [pc, #64]	; (8005e74 <TIM_Base_SetConfig+0x104>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00f      	beq.n	8005e58 <TIM_Base_SetConfig+0xe8>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <TIM_Base_SetConfig+0x110>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_Base_SetConfig+0xe8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_Base_SetConfig+0xe8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a0f      	ldr	r2, [pc, #60]	; (8005e88 <TIM_Base_SetConfig+0x118>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0xe8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a0e      	ldr	r2, [pc, #56]	; (8005e8c <TIM_Base_SetConfig+0x11c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	615a      	str	r2, [r3, #20]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40013400 	.word	0x40013400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800

08005e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f023 0201 	bic.w	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 030a 	bic.w	r3, r3, #10
 8005ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	031b      	lsls	r3, r3, #12
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f043 0307 	orr.w	r3, r3, #7
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	609a      	str	r2, [r3, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	021a      	lsls	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e063      	b.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2b      	ldr	r2, [pc, #172]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a2a      	ldr	r2, [pc, #168]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d018      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d013      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00e      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a12      	ldr	r2, [pc, #72]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10c      	bne.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800607e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40013400 	.word	0x40013400
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40014000 	.word	0x40014000

080060c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e040      	b.n	8006158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc fda0 	bl	8002c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2224      	movs	r2, #36	; 0x24
 80060f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fbbc 	bl	8006880 <UART_SetConfig>
 8006108:	4603      	mov	r3, r0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e022      	b.n	8006158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fd84 	bl	8006c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800612e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800613e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fe0b 	bl	8006d6c <UART_CheckIdleState>
 8006156:	4603      	mov	r3, r0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006174:	2b20      	cmp	r3, #32
 8006176:	d178      	bne.n	800626a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_UART_Transmit+0x24>
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e071      	b.n	800626c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2221      	movs	r2, #33	; 0x21
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006196:	f7fc ff7d 	bl	8003094 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b4:	d108      	bne.n	80061c8 <HAL_UART_Transmit+0x68>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	e003      	b.n	80061d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061d0:	e030      	b.n	8006234 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	2180      	movs	r1, #128	; 0x80
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fe6d 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e03c      	b.n	800626c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	881a      	ldrh	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006204:	b292      	uxth	r2, r2
 8006206:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	3302      	adds	r3, #2
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e008      	b.n	8006222 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b292      	uxth	r2, r2
 800621a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	3301      	adds	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1c8      	bne.n	80061d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fe36 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d004      	beq.n	8006260 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e005      	b.n	800626c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b0ba      	sub	sp, #232	; 0xe8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800629a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800629e:	f640 030f 	movw	r3, #2063	; 0x80f
 80062a2:	4013      	ands	r3, r2
 80062a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d115      	bne.n	80062dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00f      	beq.n	80062dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 82ab 	beq.w	8006828 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
      }
      return;
 80062da:	e2a5      	b.n	8006828 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8117 	beq.w	8006514 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062f6:	4b85      	ldr	r3, [pc, #532]	; (800650c <HAL_UART_IRQHandler+0x298>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 810a 	beq.w	8006514 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d011      	beq.n	8006330 <HAL_UART_IRQHandler+0xbc>
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2201      	movs	r2, #1
 800631e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d011      	beq.n	8006360 <HAL_UART_IRQHandler+0xec>
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2202      	movs	r2, #2
 800634e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006356:	f043 0204 	orr.w	r2, r3, #4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d011      	beq.n	8006390 <HAL_UART_IRQHandler+0x11c>
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00b      	beq.n	8006390 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2204      	movs	r2, #4
 800637e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006386:	f043 0202 	orr.w	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d017      	beq.n	80063cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2208      	movs	r2, #8
 80063ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c2:	f043 0208 	orr.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d012      	beq.n	80063fe <HAL_UART_IRQHandler+0x18a>
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00c      	beq.n	80063fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8211 	beq.w	800682c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00d      	beq.n	8006432 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006438:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800644a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800644e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006452:	2b00      	cmp	r3, #0
 8006454:	d04f      	beq.n	80064f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fd97 	bl	8006f8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d141      	bne.n	80064ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800649a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d9      	bne.n	800646a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d013      	beq.n	80064e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <HAL_UART_IRQHandler+0x29c>)
 80064c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc ff5c 	bl	8003388 <HAL_DMA_Abort_IT>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d017      	beq.n	8006506 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e00f      	b.n	8006506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f9b4 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ec:	e00b      	b.n	8006506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9b0 	bl	8006854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	e007      	b.n	8006506 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9ac 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006504:	e192      	b.n	800682c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006506:	bf00      	nop
    return;
 8006508:	e190      	b.n	800682c <HAL_UART_IRQHandler+0x5b8>
 800650a:	bf00      	nop
 800650c:	04000120 	.word	0x04000120
 8006510:	08007053 	.word	0x08007053

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006518:	2b01      	cmp	r3, #1
 800651a:	f040 814b 	bne.w	80067b4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8144 	beq.w	80067b4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 813d 	beq.w	80067b4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2210      	movs	r2, #16
 8006540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	f040 80b5 	bne.w	80066bc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800655e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8164 	beq.w	8006830 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800656e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006572:	429a      	cmp	r2, r3
 8006574:	f080 815c 	bcs.w	8006830 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800657e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b20      	cmp	r3, #32
 800658a:	f000 8086 	beq.w	800669a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065bc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1da      	bne.n	800658e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3308      	adds	r3, #8
 80065de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006600:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006604:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800660e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e1      	bne.n	80065d8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006638:	66fa      	str	r2, [r7, #108]	; 0x6c
 800663a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800663e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e3      	bne.n	8006614 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666a:	f023 0310 	bic.w	r3, r3, #16
 800666e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800667c:	65bb      	str	r3, [r7, #88]	; 0x58
 800667e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e4      	bne.n	800665a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006694:	4618      	mov	r0, r3
 8006696:	f7fc fe3e 	bl	8003316 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f8d7 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066ba:	e0b9      	b.n	8006830 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80ab 	beq.w	8006834 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80066de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80a6 	beq.w	8006834 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800670a:	647b      	str	r3, [r7, #68]	; 0x44
 800670c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e4      	bne.n	80066e8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	623b      	str	r3, [r7, #32]
   return(result);
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006742:	633a      	str	r2, [r7, #48]	; 0x30
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e3      	bne.n	800671e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	60fb      	str	r3, [r7, #12]
   return(result);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0310 	bic.w	r3, r3, #16
 800677e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	69b9      	ldr	r1, [r7, #24]
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	617b      	str	r3, [r7, #20]
   return(result);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e4      	bne.n	800676a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f85b 	bl	8006868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b2:	e03f      	b.n	8006834 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <HAL_UART_IRQHandler+0x56a>
 80067c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fc7b 	bl	80070d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067dc:	e02d      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01c      	beq.n	8006838 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
    }
    return;
 8006806:	e017      	b.n	8006838 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d012      	beq.n	800683a <HAL_UART_IRQHandler+0x5c6>
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00c      	beq.n	800683a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fc2c 	bl	800707e <UART_EndTransmit_IT>
    return;
 8006826:	e008      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006828:	bf00      	nop
 800682a:	e006      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
    return;
 800682c:	bf00      	nop
 800682e:	e004      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006830:	bf00      	nop
 8006832:	e002      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_UART_IRQHandler+0x5c6>
    return;
 8006838:	bf00      	nop
  }

}
 800683a:	37e8      	adds	r7, #232	; 0xe8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80068ae:	f023 030c 	bic.w	r3, r3, #12
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	6979      	ldr	r1, [r7, #20]
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4aa7      	ldr	r2, [pc, #668]	; (8006b98 <UART_SetConfig+0x318>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d120      	bne.n	8006942 <UART_SetConfig+0xc2>
 8006900:	4ba6      	ldr	r3, [pc, #664]	; (8006b9c <UART_SetConfig+0x31c>)
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b03      	cmp	r3, #3
 800690a:	d817      	bhi.n	800693c <UART_SetConfig+0xbc>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x94>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	08006925 	.word	0x08006925
 8006918:	08006931 	.word	0x08006931
 800691c:	08006937 	.word	0x08006937
 8006920:	0800692b 	.word	0x0800692b
 8006924:	2301      	movs	r3, #1
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e0b5      	b.n	8006a96 <UART_SetConfig+0x216>
 800692a:	2302      	movs	r3, #2
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e0b2      	b.n	8006a96 <UART_SetConfig+0x216>
 8006930:	2304      	movs	r3, #4
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e0af      	b.n	8006a96 <UART_SetConfig+0x216>
 8006936:	2308      	movs	r3, #8
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e0ac      	b.n	8006a96 <UART_SetConfig+0x216>
 800693c:	2310      	movs	r3, #16
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e0a9      	b.n	8006a96 <UART_SetConfig+0x216>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a96      	ldr	r2, [pc, #600]	; (8006ba0 <UART_SetConfig+0x320>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d124      	bne.n	8006996 <UART_SetConfig+0x116>
 800694c:	4b93      	ldr	r3, [pc, #588]	; (8006b9c <UART_SetConfig+0x31c>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006958:	d011      	beq.n	800697e <UART_SetConfig+0xfe>
 800695a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800695e:	d817      	bhi.n	8006990 <UART_SetConfig+0x110>
 8006960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006964:	d011      	beq.n	800698a <UART_SetConfig+0x10a>
 8006966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800696a:	d811      	bhi.n	8006990 <UART_SetConfig+0x110>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <UART_SetConfig+0xf8>
 8006970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006974:	d006      	beq.n	8006984 <UART_SetConfig+0x104>
 8006976:	e00b      	b.n	8006990 <UART_SetConfig+0x110>
 8006978:	2300      	movs	r3, #0
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e08b      	b.n	8006a96 <UART_SetConfig+0x216>
 800697e:	2302      	movs	r3, #2
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e088      	b.n	8006a96 <UART_SetConfig+0x216>
 8006984:	2304      	movs	r3, #4
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e085      	b.n	8006a96 <UART_SetConfig+0x216>
 800698a:	2308      	movs	r3, #8
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e082      	b.n	8006a96 <UART_SetConfig+0x216>
 8006990:	2310      	movs	r3, #16
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e07f      	b.n	8006a96 <UART_SetConfig+0x216>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a82      	ldr	r2, [pc, #520]	; (8006ba4 <UART_SetConfig+0x324>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d124      	bne.n	80069ea <UART_SetConfig+0x16a>
 80069a0:	4b7e      	ldr	r3, [pc, #504]	; (8006b9c <UART_SetConfig+0x31c>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069ac:	d011      	beq.n	80069d2 <UART_SetConfig+0x152>
 80069ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069b2:	d817      	bhi.n	80069e4 <UART_SetConfig+0x164>
 80069b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069b8:	d011      	beq.n	80069de <UART_SetConfig+0x15e>
 80069ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069be:	d811      	bhi.n	80069e4 <UART_SetConfig+0x164>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <UART_SetConfig+0x14c>
 80069c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069c8:	d006      	beq.n	80069d8 <UART_SetConfig+0x158>
 80069ca:	e00b      	b.n	80069e4 <UART_SetConfig+0x164>
 80069cc:	2300      	movs	r3, #0
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e061      	b.n	8006a96 <UART_SetConfig+0x216>
 80069d2:	2302      	movs	r3, #2
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e05e      	b.n	8006a96 <UART_SetConfig+0x216>
 80069d8:	2304      	movs	r3, #4
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e05b      	b.n	8006a96 <UART_SetConfig+0x216>
 80069de:	2308      	movs	r3, #8
 80069e0:	77fb      	strb	r3, [r7, #31]
 80069e2:	e058      	b.n	8006a96 <UART_SetConfig+0x216>
 80069e4:	2310      	movs	r3, #16
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e055      	b.n	8006a96 <UART_SetConfig+0x216>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a6e      	ldr	r2, [pc, #440]	; (8006ba8 <UART_SetConfig+0x328>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d124      	bne.n	8006a3e <UART_SetConfig+0x1be>
 80069f4:	4b69      	ldr	r3, [pc, #420]	; (8006b9c <UART_SetConfig+0x31c>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a00:	d011      	beq.n	8006a26 <UART_SetConfig+0x1a6>
 8006a02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a06:	d817      	bhi.n	8006a38 <UART_SetConfig+0x1b8>
 8006a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a0c:	d011      	beq.n	8006a32 <UART_SetConfig+0x1b2>
 8006a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a12:	d811      	bhi.n	8006a38 <UART_SetConfig+0x1b8>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <UART_SetConfig+0x1a0>
 8006a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1c:	d006      	beq.n	8006a2c <UART_SetConfig+0x1ac>
 8006a1e:	e00b      	b.n	8006a38 <UART_SetConfig+0x1b8>
 8006a20:	2300      	movs	r3, #0
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e037      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a26:	2302      	movs	r3, #2
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e034      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e031      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a32:	2308      	movs	r3, #8
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e02e      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e02b      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a5a      	ldr	r2, [pc, #360]	; (8006bac <UART_SetConfig+0x32c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d124      	bne.n	8006a92 <UART_SetConfig+0x212>
 8006a48:	4b54      	ldr	r3, [pc, #336]	; (8006b9c <UART_SetConfig+0x31c>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006a50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a54:	d011      	beq.n	8006a7a <UART_SetConfig+0x1fa>
 8006a56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a5a:	d817      	bhi.n	8006a8c <UART_SetConfig+0x20c>
 8006a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a60:	d011      	beq.n	8006a86 <UART_SetConfig+0x206>
 8006a62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a66:	d811      	bhi.n	8006a8c <UART_SetConfig+0x20c>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <UART_SetConfig+0x1f4>
 8006a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a70:	d006      	beq.n	8006a80 <UART_SetConfig+0x200>
 8006a72:	e00b      	b.n	8006a8c <UART_SetConfig+0x20c>
 8006a74:	2300      	movs	r3, #0
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e00d      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e00a      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a80:	2304      	movs	r3, #4
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e007      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a86:	2308      	movs	r3, #8
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e004      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e001      	b.n	8006a96 <UART_SetConfig+0x216>
 8006a92:	2310      	movs	r3, #16
 8006a94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9e:	d15b      	bne.n	8006b58 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d827      	bhi.n	8006af6 <UART_SetConfig+0x276>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <UART_SetConfig+0x22c>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	08006af7 	.word	0x08006af7
 8006abc:	08006ae7 	.word	0x08006ae7
 8006ac0:	08006af7 	.word	0x08006af7
 8006ac4:	08006af7 	.word	0x08006af7
 8006ac8:	08006af7 	.word	0x08006af7
 8006acc:	08006aef 	.word	0x08006aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad0:	f7fe fa82 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8006ad4:	61b8      	str	r0, [r7, #24]
        break;
 8006ad6:	e013      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad8:	f7fe faa0 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 8006adc:	61b8      	str	r0, [r7, #24]
        break;
 8006ade:	e00f      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae0:	4b33      	ldr	r3, [pc, #204]	; (8006bb0 <UART_SetConfig+0x330>)
 8006ae2:	61bb      	str	r3, [r7, #24]
        break;
 8006ae4:	e00c      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae6:	f7fe fa01 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006aea:	61b8      	str	r0, [r7, #24]
        break;
 8006aec:	e008      	b.n	8006b00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006af2:	61bb      	str	r3, [r7, #24]
        break;
 8006af4:	e004      	b.n	8006b00 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	77bb      	strb	r3, [r7, #30]
        break;
 8006afe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8082 	beq.w	8006c0c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	005a      	lsls	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	441a      	add	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b0f      	cmp	r3, #15
 8006b22:	d916      	bls.n	8006b52 <UART_SetConfig+0x2d2>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2a:	d212      	bcs.n	8006b52 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f023 030f 	bic.w	r3, r3, #15
 8006b34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	085b      	lsrs	r3, r3, #1
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	89fb      	ldrh	r3, [r7, #14]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	89fa      	ldrh	r2, [r7, #14]
 8006b4e:	60da      	str	r2, [r3, #12]
 8006b50:	e05c      	b.n	8006c0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	77bb      	strb	r3, [r7, #30]
 8006b56:	e059      	b.n	8006c0c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b58:	7ffb      	ldrb	r3, [r7, #31]
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d835      	bhi.n	8006bca <UART_SetConfig+0x34a>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0x2e4>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b89 	.word	0x08006b89
 8006b68:	08006b91 	.word	0x08006b91
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006bcb 	.word	0x08006bcb
 8006b74:	08006bbb 	.word	0x08006bbb
 8006b78:	08006bcb 	.word	0x08006bcb
 8006b7c:	08006bcb 	.word	0x08006bcb
 8006b80:	08006bcb 	.word	0x08006bcb
 8006b84:	08006bc3 	.word	0x08006bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b88:	f7fe fa26 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8006b8c:	61b8      	str	r0, [r7, #24]
        break;
 8006b8e:	e021      	b.n	8006bd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b90:	f7fe fa44 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 8006b94:	61b8      	str	r0, [r7, #24]
        break;
 8006b96:	e01d      	b.n	8006bd4 <UART_SetConfig+0x354>
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	40004400 	.word	0x40004400
 8006ba4:	40004800 	.word	0x40004800
 8006ba8:	40004c00 	.word	0x40004c00
 8006bac:	40005000 	.word	0x40005000
 8006bb0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <UART_SetConfig+0x3a4>)
 8006bb6:	61bb      	str	r3, [r7, #24]
        break;
 8006bb8:	e00c      	b.n	8006bd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bba:	f7fe f997 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8006bbe:	61b8      	str	r0, [r7, #24]
        break;
 8006bc0:	e008      	b.n	8006bd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc6:	61bb      	str	r3, [r7, #24]
        break;
 8006bc8:	e004      	b.n	8006bd4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d018      	beq.n	8006c0c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	085a      	lsrs	r2, r3, #1
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	441a      	add	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d909      	bls.n	8006c08 <UART_SetConfig+0x388>
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfa:	d205      	bcs.n	8006c08 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	e001      	b.n	8006c0c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c18:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	007a1200 	.word	0x007a1200

08006c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01a      	beq.n	8006d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d26:	d10a      	bne.n	8006d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	605a      	str	r2, [r3, #4]
  }
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b098      	sub	sp, #96	; 0x60
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d7c:	f7fc f98a 	bl	8003094 <HAL_GetTick>
 8006d80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d12e      	bne.n	8006dee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f88c 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d021      	beq.n	8006dee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e6      	bne.n	8006daa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e062      	b.n	8006eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d149      	bne.n	8006e90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e04:	2200      	movs	r2, #0
 8006e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f856 	bl	8006ebc <UART_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d03c      	beq.n	8006e90 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	623b      	str	r3, [r7, #32]
   return(result);
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e34:	633b      	str	r3, [r7, #48]	; 0x30
 8006e36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e68:	61fa      	str	r2, [r7, #28]
 8006e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	69b9      	ldr	r1, [r7, #24]
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	617b      	str	r3, [r7, #20]
   return(result);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e011      	b.n	8006eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3758      	adds	r7, #88	; 0x58
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ecc:	e049      	b.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d045      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed6:	f7fc f8dd 	bl	8003094 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d302      	bcc.n	8006eec <UART_WaitOnFlagUntilTimeout+0x30>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e048      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d031      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d110      	bne.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2208      	movs	r2, #8
 8006f12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f838 	bl	8006f8a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e029      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3c:	d111      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 f81e 	bl	8006f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e00f      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	bf0c      	ite	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	2300      	movne	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d0a6      	beq.n	8006ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b095      	sub	sp, #84	; 0x54
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e6      	bne.n	8006f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f023 0301 	bic.w	r3, r3, #1
 8006fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e5      	bne.n	8006fc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d118      	bne.n	8007032 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	60bb      	str	r3, [r7, #8]
   return(result);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f023 0310 	bic.w	r3, r3, #16
 8007014:	647b      	str	r3, [r7, #68]	; 0x44
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6979      	ldr	r1, [r7, #20]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	613b      	str	r3, [r7, #16]
   return(result);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e6      	bne.n	8007000 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007046:	bf00      	nop
 8007048:	3754      	adds	r7, #84	; 0x54
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fbef 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b088      	sub	sp, #32
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	60bb      	str	r3, [r7, #8]
   return(result);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6979      	ldr	r1, [r7, #20]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	613b      	str	r3, [r7, #16]
   return(result);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fbbb 	bl	8006840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ca:	bf00      	nop
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070ee:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80070f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	43db      	mvns	r3, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	4013      	ands	r3, r2
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800711c:	b084      	sub	sp, #16
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	f107 0014 	add.w	r0, r7, #20
 800712a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	b004      	add	sp, #16
 800715c:	4770      	bx	lr
	...

08007160 <__errno>:
 8007160:	4b01      	ldr	r3, [pc, #4]	; (8007168 <__errno+0x8>)
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000074 	.word	0x20000074

0800716c <__libc_init_array>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4d0d      	ldr	r5, [pc, #52]	; (80071a4 <__libc_init_array+0x38>)
 8007170:	4c0d      	ldr	r4, [pc, #52]	; (80071a8 <__libc_init_array+0x3c>)
 8007172:	1b64      	subs	r4, r4, r5
 8007174:	10a4      	asrs	r4, r4, #2
 8007176:	2600      	movs	r6, #0
 8007178:	42a6      	cmp	r6, r4
 800717a:	d109      	bne.n	8007190 <__libc_init_array+0x24>
 800717c:	4d0b      	ldr	r5, [pc, #44]	; (80071ac <__libc_init_array+0x40>)
 800717e:	4c0c      	ldr	r4, [pc, #48]	; (80071b0 <__libc_init_array+0x44>)
 8007180:	f001 fa96 	bl	80086b0 <_init>
 8007184:	1b64      	subs	r4, r4, r5
 8007186:	10a4      	asrs	r4, r4, #2
 8007188:	2600      	movs	r6, #0
 800718a:	42a6      	cmp	r6, r4
 800718c:	d105      	bne.n	800719a <__libc_init_array+0x2e>
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	f855 3b04 	ldr.w	r3, [r5], #4
 8007194:	4798      	blx	r3
 8007196:	3601      	adds	r6, #1
 8007198:	e7ee      	b.n	8007178 <__libc_init_array+0xc>
 800719a:	f855 3b04 	ldr.w	r3, [r5], #4
 800719e:	4798      	blx	r3
 80071a0:	3601      	adds	r6, #1
 80071a2:	e7f2      	b.n	800718a <__libc_init_array+0x1e>
 80071a4:	08008a54 	.word	0x08008a54
 80071a8:	08008a54 	.word	0x08008a54
 80071ac:	08008a54 	.word	0x08008a54
 80071b0:	08008a58 	.word	0x08008a58

080071b4 <memset>:
 80071b4:	4402      	add	r2, r0
 80071b6:	4603      	mov	r3, r0
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d100      	bne.n	80071be <memset+0xa>
 80071bc:	4770      	bx	lr
 80071be:	f803 1b01 	strb.w	r1, [r3], #1
 80071c2:	e7f9      	b.n	80071b8 <memset+0x4>

080071c4 <srand>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <srand+0x44>)
 80071c8:	681d      	ldr	r5, [r3, #0]
 80071ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80071cc:	4604      	mov	r4, r0
 80071ce:	b9b3      	cbnz	r3, 80071fe <srand+0x3a>
 80071d0:	2018      	movs	r0, #24
 80071d2:	f000 f8df 	bl	8007394 <malloc>
 80071d6:	4602      	mov	r2, r0
 80071d8:	63a8      	str	r0, [r5, #56]	; 0x38
 80071da:	b920      	cbnz	r0, 80071e6 <srand+0x22>
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <srand+0x48>)
 80071de:	480c      	ldr	r0, [pc, #48]	; (8007210 <srand+0x4c>)
 80071e0:	2142      	movs	r1, #66	; 0x42
 80071e2:	f000 f895 	bl	8007310 <__assert_func>
 80071e6:	490b      	ldr	r1, [pc, #44]	; (8007214 <srand+0x50>)
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <srand+0x54>)
 80071ea:	e9c0 1300 	strd	r1, r3, [r0]
 80071ee:	4b0b      	ldr	r3, [pc, #44]	; (800721c <srand+0x58>)
 80071f0:	6083      	str	r3, [r0, #8]
 80071f2:	230b      	movs	r3, #11
 80071f4:	8183      	strh	r3, [r0, #12]
 80071f6:	2100      	movs	r1, #0
 80071f8:	2001      	movs	r0, #1
 80071fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80071fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007200:	2200      	movs	r2, #0
 8007202:	611c      	str	r4, [r3, #16]
 8007204:	615a      	str	r2, [r3, #20]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	20000074 	.word	0x20000074
 800720c:	08008910 	.word	0x08008910
 8007210:	08008927 	.word	0x08008927
 8007214:	abcd330e 	.word	0xabcd330e
 8007218:	e66d1234 	.word	0xe66d1234
 800721c:	0005deec 	.word	0x0005deec

08007220 <rand>:
 8007220:	4b16      	ldr	r3, [pc, #88]	; (800727c <rand+0x5c>)
 8007222:	b510      	push	{r4, lr}
 8007224:	681c      	ldr	r4, [r3, #0]
 8007226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007228:	b9b3      	cbnz	r3, 8007258 <rand+0x38>
 800722a:	2018      	movs	r0, #24
 800722c:	f000 f8b2 	bl	8007394 <malloc>
 8007230:	63a0      	str	r0, [r4, #56]	; 0x38
 8007232:	b928      	cbnz	r0, 8007240 <rand+0x20>
 8007234:	4602      	mov	r2, r0
 8007236:	4b12      	ldr	r3, [pc, #72]	; (8007280 <rand+0x60>)
 8007238:	4812      	ldr	r0, [pc, #72]	; (8007284 <rand+0x64>)
 800723a:	214e      	movs	r1, #78	; 0x4e
 800723c:	f000 f868 	bl	8007310 <__assert_func>
 8007240:	4a11      	ldr	r2, [pc, #68]	; (8007288 <rand+0x68>)
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <rand+0x6c>)
 8007244:	e9c0 2300 	strd	r2, r3, [r0]
 8007248:	4b11      	ldr	r3, [pc, #68]	; (8007290 <rand+0x70>)
 800724a:	6083      	str	r3, [r0, #8]
 800724c:	230b      	movs	r3, #11
 800724e:	8183      	strh	r3, [r0, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	2300      	movs	r3, #0
 8007254:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007258:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800725a:	4a0e      	ldr	r2, [pc, #56]	; (8007294 <rand+0x74>)
 800725c:	6920      	ldr	r0, [r4, #16]
 800725e:	6963      	ldr	r3, [r4, #20]
 8007260:	490d      	ldr	r1, [pc, #52]	; (8007298 <rand+0x78>)
 8007262:	4342      	muls	r2, r0
 8007264:	fb01 2203 	mla	r2, r1, r3, r2
 8007268:	fba0 0101 	umull	r0, r1, r0, r1
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	eb42 0001 	adc.w	r0, r2, r1
 8007272:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007276:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800727a:	bd10      	pop	{r4, pc}
 800727c:	20000074 	.word	0x20000074
 8007280:	08008910 	.word	0x08008910
 8007284:	08008927 	.word	0x08008927
 8007288:	abcd330e 	.word	0xabcd330e
 800728c:	e66d1234 	.word	0xe66d1234
 8007290:	0005deec 	.word	0x0005deec
 8007294:	5851f42d 	.word	0x5851f42d
 8007298:	4c957f2d 	.word	0x4c957f2d

0800729c <siprintf>:
 800729c:	b40e      	push	{r1, r2, r3}
 800729e:	b500      	push	{lr}
 80072a0:	b09c      	sub	sp, #112	; 0x70
 80072a2:	ab1d      	add	r3, sp, #116	; 0x74
 80072a4:	9002      	str	r0, [sp, #8]
 80072a6:	9006      	str	r0, [sp, #24]
 80072a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072ac:	4809      	ldr	r0, [pc, #36]	; (80072d4 <siprintf+0x38>)
 80072ae:	9107      	str	r1, [sp, #28]
 80072b0:	9104      	str	r1, [sp, #16]
 80072b2:	4909      	ldr	r1, [pc, #36]	; (80072d8 <siprintf+0x3c>)
 80072b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b8:	9105      	str	r1, [sp, #20]
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	a902      	add	r1, sp, #8
 80072c0:	f000 f9ac 	bl	800761c <_svfiprintf_r>
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	b01c      	add	sp, #112	; 0x70
 80072cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072d0:	b003      	add	sp, #12
 80072d2:	4770      	bx	lr
 80072d4:	20000074 	.word	0x20000074
 80072d8:	ffff0208 	.word	0xffff0208

080072dc <time>:
 80072dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <time+0x30>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	4669      	mov	r1, sp
 80072e4:	4604      	mov	r4, r0
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	f000 f842 	bl	8007370 <_gettimeofday_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	bfbe      	ittt	lt
 80072f0:	f04f 32ff 	movlt.w	r2, #4294967295
 80072f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80072fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007300:	b10c      	cbz	r4, 8007306 <time+0x2a>
 8007302:	e9c4 0100 	strd	r0, r1, [r4]
 8007306:	b004      	add	sp, #16
 8007308:	bd10      	pop	{r4, pc}
 800730a:	bf00      	nop
 800730c:	20000074 	.word	0x20000074

08007310 <__assert_func>:
 8007310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007312:	4614      	mov	r4, r2
 8007314:	461a      	mov	r2, r3
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <__assert_func+0x2c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4605      	mov	r5, r0
 800731c:	68d8      	ldr	r0, [r3, #12]
 800731e:	b14c      	cbz	r4, 8007334 <__assert_func+0x24>
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <__assert_func+0x30>)
 8007322:	9100      	str	r1, [sp, #0]
 8007324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007328:	4906      	ldr	r1, [pc, #24]	; (8007344 <__assert_func+0x34>)
 800732a:	462b      	mov	r3, r5
 800732c:	f000 f80e 	bl	800734c <fiprintf>
 8007330:	f000 fe32 	bl	8007f98 <abort>
 8007334:	4b04      	ldr	r3, [pc, #16]	; (8007348 <__assert_func+0x38>)
 8007336:	461c      	mov	r4, r3
 8007338:	e7f3      	b.n	8007322 <__assert_func+0x12>
 800733a:	bf00      	nop
 800733c:	20000074 	.word	0x20000074
 8007340:	08008982 	.word	0x08008982
 8007344:	0800898f 	.word	0x0800898f
 8007348:	080089bd 	.word	0x080089bd

0800734c <fiprintf>:
 800734c:	b40e      	push	{r1, r2, r3}
 800734e:	b503      	push	{r0, r1, lr}
 8007350:	4601      	mov	r1, r0
 8007352:	ab03      	add	r3, sp, #12
 8007354:	4805      	ldr	r0, [pc, #20]	; (800736c <fiprintf+0x20>)
 8007356:	f853 2b04 	ldr.w	r2, [r3], #4
 800735a:	6800      	ldr	r0, [r0, #0]
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	f000 fa87 	bl	8007870 <_vfiprintf_r>
 8007362:	b002      	add	sp, #8
 8007364:	f85d eb04 	ldr.w	lr, [sp], #4
 8007368:	b003      	add	sp, #12
 800736a:	4770      	bx	lr
 800736c:	20000074 	.word	0x20000074

08007370 <_gettimeofday_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d07      	ldr	r5, [pc, #28]	; (8007390 <_gettimeofday_r+0x20>)
 8007374:	2300      	movs	r3, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	4611      	mov	r1, r2
 800737c:	602b      	str	r3, [r5, #0]
 800737e:	f001 f98f 	bl	80086a0 <_gettimeofday>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d102      	bne.n	800738c <_gettimeofday_r+0x1c>
 8007386:	682b      	ldr	r3, [r5, #0]
 8007388:	b103      	cbz	r3, 800738c <_gettimeofday_r+0x1c>
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	bf00      	nop
 8007390:	20000d4c 	.word	0x20000d4c

08007394 <malloc>:
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <malloc+0xc>)
 8007396:	4601      	mov	r1, r0
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	f000 b86f 	b.w	800747c <_malloc_r>
 800739e:	bf00      	nop
 80073a0:	20000074 	.word	0x20000074

080073a4 <_free_r>:
 80073a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073a6:	2900      	cmp	r1, #0
 80073a8:	d044      	beq.n	8007434 <_free_r+0x90>
 80073aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ae:	9001      	str	r0, [sp, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f1a1 0404 	sub.w	r4, r1, #4
 80073b6:	bfb8      	it	lt
 80073b8:	18e4      	addlt	r4, r4, r3
 80073ba:	f001 f83d 	bl	8008438 <__malloc_lock>
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <_free_r+0x94>)
 80073c0:	9801      	ldr	r0, [sp, #4]
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	b933      	cbnz	r3, 80073d4 <_free_r+0x30>
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6014      	str	r4, [r2, #0]
 80073ca:	b003      	add	sp, #12
 80073cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073d0:	f001 b838 	b.w	8008444 <__malloc_unlock>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d908      	bls.n	80073ea <_free_r+0x46>
 80073d8:	6825      	ldr	r5, [r4, #0]
 80073da:	1961      	adds	r1, r4, r5
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1949      	addeq	r1, r1, r5
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	e7ed      	b.n	80073c6 <_free_r+0x22>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x50>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x46>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1855      	adds	r5, r2, r1
 80073f8:	42a5      	cmp	r5, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x70>
 80073fc:	6824      	ldr	r4, [r4, #0]
 80073fe:	4421      	add	r1, r4
 8007400:	1854      	adds	r4, r2, r1
 8007402:	42a3      	cmp	r3, r4
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1e0      	bne.n	80073ca <_free_r+0x26>
 8007408:	681c      	ldr	r4, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	6053      	str	r3, [r2, #4]
 800740e:	4421      	add	r1, r4
 8007410:	6011      	str	r1, [r2, #0]
 8007412:	e7da      	b.n	80073ca <_free_r+0x26>
 8007414:	d902      	bls.n	800741c <_free_r+0x78>
 8007416:	230c      	movs	r3, #12
 8007418:	6003      	str	r3, [r0, #0]
 800741a:	e7d6      	b.n	80073ca <_free_r+0x26>
 800741c:	6825      	ldr	r5, [r4, #0]
 800741e:	1961      	adds	r1, r4, r5
 8007420:	428b      	cmp	r3, r1
 8007422:	bf04      	itt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	bf04      	itt	eq
 800742c:	1949      	addeq	r1, r1, r5
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	6054      	str	r4, [r2, #4]
 8007432:	e7ca      	b.n	80073ca <_free_r+0x26>
 8007434:	b003      	add	sp, #12
 8007436:	bd30      	pop	{r4, r5, pc}
 8007438:	20000d44 	.word	0x20000d44

0800743c <sbrk_aligned>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4e0e      	ldr	r6, [pc, #56]	; (8007478 <sbrk_aligned+0x3c>)
 8007440:	460c      	mov	r4, r1
 8007442:	6831      	ldr	r1, [r6, #0]
 8007444:	4605      	mov	r5, r0
 8007446:	b911      	cbnz	r1, 800744e <sbrk_aligned+0x12>
 8007448:	f000 fcd6 	bl	8007df8 <_sbrk_r>
 800744c:	6030      	str	r0, [r6, #0]
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	f000 fcd1 	bl	8007df8 <_sbrk_r>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d00a      	beq.n	8007470 <sbrk_aligned+0x34>
 800745a:	1cc4      	adds	r4, r0, #3
 800745c:	f024 0403 	bic.w	r4, r4, #3
 8007460:	42a0      	cmp	r0, r4
 8007462:	d007      	beq.n	8007474 <sbrk_aligned+0x38>
 8007464:	1a21      	subs	r1, r4, r0
 8007466:	4628      	mov	r0, r5
 8007468:	f000 fcc6 	bl	8007df8 <_sbrk_r>
 800746c:	3001      	adds	r0, #1
 800746e:	d101      	bne.n	8007474 <sbrk_aligned+0x38>
 8007470:	f04f 34ff 	mov.w	r4, #4294967295
 8007474:	4620      	mov	r0, r4
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	20000d48 	.word	0x20000d48

0800747c <_malloc_r>:
 800747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	1ccd      	adds	r5, r1, #3
 8007482:	f025 0503 	bic.w	r5, r5, #3
 8007486:	3508      	adds	r5, #8
 8007488:	2d0c      	cmp	r5, #12
 800748a:	bf38      	it	cc
 800748c:	250c      	movcc	r5, #12
 800748e:	2d00      	cmp	r5, #0
 8007490:	4607      	mov	r7, r0
 8007492:	db01      	blt.n	8007498 <_malloc_r+0x1c>
 8007494:	42a9      	cmp	r1, r5
 8007496:	d905      	bls.n	80074a4 <_malloc_r+0x28>
 8007498:	230c      	movs	r3, #12
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	2600      	movs	r6, #0
 800749e:	4630      	mov	r0, r6
 80074a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a4:	4e2e      	ldr	r6, [pc, #184]	; (8007560 <_malloc_r+0xe4>)
 80074a6:	f000 ffc7 	bl	8008438 <__malloc_lock>
 80074aa:	6833      	ldr	r3, [r6, #0]
 80074ac:	461c      	mov	r4, r3
 80074ae:	bb34      	cbnz	r4, 80074fe <_malloc_r+0x82>
 80074b0:	4629      	mov	r1, r5
 80074b2:	4638      	mov	r0, r7
 80074b4:	f7ff ffc2 	bl	800743c <sbrk_aligned>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	4604      	mov	r4, r0
 80074bc:	d14d      	bne.n	800755a <_malloc_r+0xde>
 80074be:	6834      	ldr	r4, [r6, #0]
 80074c0:	4626      	mov	r6, r4
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d140      	bne.n	8007548 <_malloc_r+0xcc>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	4631      	mov	r1, r6
 80074ca:	4638      	mov	r0, r7
 80074cc:	eb04 0803 	add.w	r8, r4, r3
 80074d0:	f000 fc92 	bl	8007df8 <_sbrk_r>
 80074d4:	4580      	cmp	r8, r0
 80074d6:	d13a      	bne.n	800754e <_malloc_r+0xd2>
 80074d8:	6821      	ldr	r1, [r4, #0]
 80074da:	3503      	adds	r5, #3
 80074dc:	1a6d      	subs	r5, r5, r1
 80074de:	f025 0503 	bic.w	r5, r5, #3
 80074e2:	3508      	adds	r5, #8
 80074e4:	2d0c      	cmp	r5, #12
 80074e6:	bf38      	it	cc
 80074e8:	250c      	movcc	r5, #12
 80074ea:	4629      	mov	r1, r5
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7ff ffa5 	bl	800743c <sbrk_aligned>
 80074f2:	3001      	adds	r0, #1
 80074f4:	d02b      	beq.n	800754e <_malloc_r+0xd2>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	442b      	add	r3, r5
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	e00e      	b.n	800751c <_malloc_r+0xa0>
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	1b52      	subs	r2, r2, r5
 8007502:	d41e      	bmi.n	8007542 <_malloc_r+0xc6>
 8007504:	2a0b      	cmp	r2, #11
 8007506:	d916      	bls.n	8007536 <_malloc_r+0xba>
 8007508:	1961      	adds	r1, r4, r5
 800750a:	42a3      	cmp	r3, r4
 800750c:	6025      	str	r5, [r4, #0]
 800750e:	bf18      	it	ne
 8007510:	6059      	strne	r1, [r3, #4]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	bf08      	it	eq
 8007516:	6031      	streq	r1, [r6, #0]
 8007518:	5162      	str	r2, [r4, r5]
 800751a:	604b      	str	r3, [r1, #4]
 800751c:	4638      	mov	r0, r7
 800751e:	f104 060b 	add.w	r6, r4, #11
 8007522:	f000 ff8f 	bl	8008444 <__malloc_unlock>
 8007526:	f026 0607 	bic.w	r6, r6, #7
 800752a:	1d23      	adds	r3, r4, #4
 800752c:	1af2      	subs	r2, r6, r3
 800752e:	d0b6      	beq.n	800749e <_malloc_r+0x22>
 8007530:	1b9b      	subs	r3, r3, r6
 8007532:	50a3      	str	r3, [r4, r2]
 8007534:	e7b3      	b.n	800749e <_malloc_r+0x22>
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	42a3      	cmp	r3, r4
 800753a:	bf0c      	ite	eq
 800753c:	6032      	streq	r2, [r6, #0]
 800753e:	605a      	strne	r2, [r3, #4]
 8007540:	e7ec      	b.n	800751c <_malloc_r+0xa0>
 8007542:	4623      	mov	r3, r4
 8007544:	6864      	ldr	r4, [r4, #4]
 8007546:	e7b2      	b.n	80074ae <_malloc_r+0x32>
 8007548:	4634      	mov	r4, r6
 800754a:	6876      	ldr	r6, [r6, #4]
 800754c:	e7b9      	b.n	80074c2 <_malloc_r+0x46>
 800754e:	230c      	movs	r3, #12
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	4638      	mov	r0, r7
 8007554:	f000 ff76 	bl	8008444 <__malloc_unlock>
 8007558:	e7a1      	b.n	800749e <_malloc_r+0x22>
 800755a:	6025      	str	r5, [r4, #0]
 800755c:	e7de      	b.n	800751c <_malloc_r+0xa0>
 800755e:	bf00      	nop
 8007560:	20000d44 	.word	0x20000d44

08007564 <__ssputs_r>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	688e      	ldr	r6, [r1, #8]
 800756a:	429e      	cmp	r6, r3
 800756c:	4682      	mov	sl, r0
 800756e:	460c      	mov	r4, r1
 8007570:	4690      	mov	r8, r2
 8007572:	461f      	mov	r7, r3
 8007574:	d838      	bhi.n	80075e8 <__ssputs_r+0x84>
 8007576:	898a      	ldrh	r2, [r1, #12]
 8007578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800757c:	d032      	beq.n	80075e4 <__ssputs_r+0x80>
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	6909      	ldr	r1, [r1, #16]
 8007582:	eba5 0901 	sub.w	r9, r5, r1
 8007586:	6965      	ldr	r5, [r4, #20]
 8007588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800758c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007590:	3301      	adds	r3, #1
 8007592:	444b      	add	r3, r9
 8007594:	106d      	asrs	r5, r5, #1
 8007596:	429d      	cmp	r5, r3
 8007598:	bf38      	it	cc
 800759a:	461d      	movcc	r5, r3
 800759c:	0553      	lsls	r3, r2, #21
 800759e:	d531      	bpl.n	8007604 <__ssputs_r+0xa0>
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7ff ff6b 	bl	800747c <_malloc_r>
 80075a6:	4606      	mov	r6, r0
 80075a8:	b950      	cbnz	r0, 80075c0 <__ssputs_r+0x5c>
 80075aa:	230c      	movs	r3, #12
 80075ac:	f8ca 3000 	str.w	r3, [sl]
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c0:	6921      	ldr	r1, [r4, #16]
 80075c2:	464a      	mov	r2, r9
 80075c4:	f000 ff10 	bl	80083e8 <memcpy>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	6126      	str	r6, [r4, #16]
 80075d6:	6165      	str	r5, [r4, #20]
 80075d8:	444e      	add	r6, r9
 80075da:	eba5 0509 	sub.w	r5, r5, r9
 80075de:	6026      	str	r6, [r4, #0]
 80075e0:	60a5      	str	r5, [r4, #8]
 80075e2:	463e      	mov	r6, r7
 80075e4:	42be      	cmp	r6, r7
 80075e6:	d900      	bls.n	80075ea <__ssputs_r+0x86>
 80075e8:	463e      	mov	r6, r7
 80075ea:	6820      	ldr	r0, [r4, #0]
 80075ec:	4632      	mov	r2, r6
 80075ee:	4641      	mov	r1, r8
 80075f0:	f000 ff08 	bl	8008404 <memmove>
 80075f4:	68a3      	ldr	r3, [r4, #8]
 80075f6:	1b9b      	subs	r3, r3, r6
 80075f8:	60a3      	str	r3, [r4, #8]
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	4433      	add	r3, r6
 80075fe:	6023      	str	r3, [r4, #0]
 8007600:	2000      	movs	r0, #0
 8007602:	e7db      	b.n	80075bc <__ssputs_r+0x58>
 8007604:	462a      	mov	r2, r5
 8007606:	f000 ff23 	bl	8008450 <_realloc_r>
 800760a:	4606      	mov	r6, r0
 800760c:	2800      	cmp	r0, #0
 800760e:	d1e1      	bne.n	80075d4 <__ssputs_r+0x70>
 8007610:	6921      	ldr	r1, [r4, #16]
 8007612:	4650      	mov	r0, sl
 8007614:	f7ff fec6 	bl	80073a4 <_free_r>
 8007618:	e7c7      	b.n	80075aa <__ssputs_r+0x46>
	...

0800761c <_svfiprintf_r>:
 800761c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	4698      	mov	r8, r3
 8007622:	898b      	ldrh	r3, [r1, #12]
 8007624:	061b      	lsls	r3, r3, #24
 8007626:	b09d      	sub	sp, #116	; 0x74
 8007628:	4607      	mov	r7, r0
 800762a:	460d      	mov	r5, r1
 800762c:	4614      	mov	r4, r2
 800762e:	d50e      	bpl.n	800764e <_svfiprintf_r+0x32>
 8007630:	690b      	ldr	r3, [r1, #16]
 8007632:	b963      	cbnz	r3, 800764e <_svfiprintf_r+0x32>
 8007634:	2140      	movs	r1, #64	; 0x40
 8007636:	f7ff ff21 	bl	800747c <_malloc_r>
 800763a:	6028      	str	r0, [r5, #0]
 800763c:	6128      	str	r0, [r5, #16]
 800763e:	b920      	cbnz	r0, 800764a <_svfiprintf_r+0x2e>
 8007640:	230c      	movs	r3, #12
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	e0d1      	b.n	80077ee <_svfiprintf_r+0x1d2>
 800764a:	2340      	movs	r3, #64	; 0x40
 800764c:	616b      	str	r3, [r5, #20]
 800764e:	2300      	movs	r3, #0
 8007650:	9309      	str	r3, [sp, #36]	; 0x24
 8007652:	2320      	movs	r3, #32
 8007654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007658:	f8cd 800c 	str.w	r8, [sp, #12]
 800765c:	2330      	movs	r3, #48	; 0x30
 800765e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007808 <_svfiprintf_r+0x1ec>
 8007662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007666:	f04f 0901 	mov.w	r9, #1
 800766a:	4623      	mov	r3, r4
 800766c:	469a      	mov	sl, r3
 800766e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007672:	b10a      	cbz	r2, 8007678 <_svfiprintf_r+0x5c>
 8007674:	2a25      	cmp	r2, #37	; 0x25
 8007676:	d1f9      	bne.n	800766c <_svfiprintf_r+0x50>
 8007678:	ebba 0b04 	subs.w	fp, sl, r4
 800767c:	d00b      	beq.n	8007696 <_svfiprintf_r+0x7a>
 800767e:	465b      	mov	r3, fp
 8007680:	4622      	mov	r2, r4
 8007682:	4629      	mov	r1, r5
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ff6d 	bl	8007564 <__ssputs_r>
 800768a:	3001      	adds	r0, #1
 800768c:	f000 80aa 	beq.w	80077e4 <_svfiprintf_r+0x1c8>
 8007690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007692:	445a      	add	r2, fp
 8007694:	9209      	str	r2, [sp, #36]	; 0x24
 8007696:	f89a 3000 	ldrb.w	r3, [sl]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80a2 	beq.w	80077e4 <_svfiprintf_r+0x1c8>
 80076a0:	2300      	movs	r3, #0
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076aa:	f10a 0a01 	add.w	sl, sl, #1
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	9307      	str	r3, [sp, #28]
 80076b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b6:	931a      	str	r3, [sp, #104]	; 0x68
 80076b8:	4654      	mov	r4, sl
 80076ba:	2205      	movs	r2, #5
 80076bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c0:	4851      	ldr	r0, [pc, #324]	; (8007808 <_svfiprintf_r+0x1ec>)
 80076c2:	f7f8 fd8d 	bl	80001e0 <memchr>
 80076c6:	9a04      	ldr	r2, [sp, #16]
 80076c8:	b9d8      	cbnz	r0, 8007702 <_svfiprintf_r+0xe6>
 80076ca:	06d0      	lsls	r0, r2, #27
 80076cc:	bf44      	itt	mi
 80076ce:	2320      	movmi	r3, #32
 80076d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d4:	0711      	lsls	r1, r2, #28
 80076d6:	bf44      	itt	mi
 80076d8:	232b      	movmi	r3, #43	; 0x2b
 80076da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076de:	f89a 3000 	ldrb.w	r3, [sl]
 80076e2:	2b2a      	cmp	r3, #42	; 0x2a
 80076e4:	d015      	beq.n	8007712 <_svfiprintf_r+0xf6>
 80076e6:	9a07      	ldr	r2, [sp, #28]
 80076e8:	4654      	mov	r4, sl
 80076ea:	2000      	movs	r0, #0
 80076ec:	f04f 0c0a 	mov.w	ip, #10
 80076f0:	4621      	mov	r1, r4
 80076f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f6:	3b30      	subs	r3, #48	; 0x30
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d94e      	bls.n	800779a <_svfiprintf_r+0x17e>
 80076fc:	b1b0      	cbz	r0, 800772c <_svfiprintf_r+0x110>
 80076fe:	9207      	str	r2, [sp, #28]
 8007700:	e014      	b.n	800772c <_svfiprintf_r+0x110>
 8007702:	eba0 0308 	sub.w	r3, r0, r8
 8007706:	fa09 f303 	lsl.w	r3, r9, r3
 800770a:	4313      	orrs	r3, r2
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	46a2      	mov	sl, r4
 8007710:	e7d2      	b.n	80076b8 <_svfiprintf_r+0x9c>
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	1d19      	adds	r1, r3, #4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	9103      	str	r1, [sp, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	bfbb      	ittet	lt
 800771e:	425b      	neglt	r3, r3
 8007720:	f042 0202 	orrlt.w	r2, r2, #2
 8007724:	9307      	strge	r3, [sp, #28]
 8007726:	9307      	strlt	r3, [sp, #28]
 8007728:	bfb8      	it	lt
 800772a:	9204      	strlt	r2, [sp, #16]
 800772c:	7823      	ldrb	r3, [r4, #0]
 800772e:	2b2e      	cmp	r3, #46	; 0x2e
 8007730:	d10c      	bne.n	800774c <_svfiprintf_r+0x130>
 8007732:	7863      	ldrb	r3, [r4, #1]
 8007734:	2b2a      	cmp	r3, #42	; 0x2a
 8007736:	d135      	bne.n	80077a4 <_svfiprintf_r+0x188>
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	9203      	str	r2, [sp, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	bfb8      	it	lt
 8007744:	f04f 33ff 	movlt.w	r3, #4294967295
 8007748:	3402      	adds	r4, #2
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007818 <_svfiprintf_r+0x1fc>
 8007750:	7821      	ldrb	r1, [r4, #0]
 8007752:	2203      	movs	r2, #3
 8007754:	4650      	mov	r0, sl
 8007756:	f7f8 fd43 	bl	80001e0 <memchr>
 800775a:	b140      	cbz	r0, 800776e <_svfiprintf_r+0x152>
 800775c:	2340      	movs	r3, #64	; 0x40
 800775e:	eba0 000a 	sub.w	r0, r0, sl
 8007762:	fa03 f000 	lsl.w	r0, r3, r0
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	4303      	orrs	r3, r0
 800776a:	3401      	adds	r4, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007772:	4826      	ldr	r0, [pc, #152]	; (800780c <_svfiprintf_r+0x1f0>)
 8007774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007778:	2206      	movs	r2, #6
 800777a:	f7f8 fd31 	bl	80001e0 <memchr>
 800777e:	2800      	cmp	r0, #0
 8007780:	d038      	beq.n	80077f4 <_svfiprintf_r+0x1d8>
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <_svfiprintf_r+0x1f4>)
 8007784:	bb1b      	cbnz	r3, 80077ce <_svfiprintf_r+0x1b2>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	3308      	adds	r3, #8
 8007790:	9303      	str	r3, [sp, #12]
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	4433      	add	r3, r6
 8007796:	9309      	str	r3, [sp, #36]	; 0x24
 8007798:	e767      	b.n	800766a <_svfiprintf_r+0x4e>
 800779a:	fb0c 3202 	mla	r2, ip, r2, r3
 800779e:	460c      	mov	r4, r1
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7a5      	b.n	80076f0 <_svfiprintf_r+0xd4>
 80077a4:	2300      	movs	r3, #0
 80077a6:	3401      	adds	r4, #1
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	4619      	mov	r1, r3
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	4620      	mov	r0, r4
 80077b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b6:	3a30      	subs	r2, #48	; 0x30
 80077b8:	2a09      	cmp	r2, #9
 80077ba:	d903      	bls.n	80077c4 <_svfiprintf_r+0x1a8>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0c5      	beq.n	800774c <_svfiprintf_r+0x130>
 80077c0:	9105      	str	r1, [sp, #20]
 80077c2:	e7c3      	b.n	800774c <_svfiprintf_r+0x130>
 80077c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c8:	4604      	mov	r4, r0
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7f0      	b.n	80077b0 <_svfiprintf_r+0x194>
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	462a      	mov	r2, r5
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <_svfiprintf_r+0x1f8>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	4638      	mov	r0, r7
 80077da:	f3af 8000 	nop.w
 80077de:	1c42      	adds	r2, r0, #1
 80077e0:	4606      	mov	r6, r0
 80077e2:	d1d6      	bne.n	8007792 <_svfiprintf_r+0x176>
 80077e4:	89ab      	ldrh	r3, [r5, #12]
 80077e6:	065b      	lsls	r3, r3, #25
 80077e8:	f53f af2c 	bmi.w	8007644 <_svfiprintf_r+0x28>
 80077ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077ee:	b01d      	add	sp, #116	; 0x74
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	ab03      	add	r3, sp, #12
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	462a      	mov	r2, r5
 80077fa:	4b06      	ldr	r3, [pc, #24]	; (8007814 <_svfiprintf_r+0x1f8>)
 80077fc:	a904      	add	r1, sp, #16
 80077fe:	4638      	mov	r0, r7
 8007800:	f000 f9d4 	bl	8007bac <_printf_i>
 8007804:	e7eb      	b.n	80077de <_svfiprintf_r+0x1c2>
 8007806:	bf00      	nop
 8007808:	080089be 	.word	0x080089be
 800780c:	080089c8 	.word	0x080089c8
 8007810:	00000000 	.word	0x00000000
 8007814:	08007565 	.word	0x08007565
 8007818:	080089c4 	.word	0x080089c4

0800781c <__sfputc_r>:
 800781c:	6893      	ldr	r3, [r2, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	b410      	push	{r4}
 8007824:	6093      	str	r3, [r2, #8]
 8007826:	da08      	bge.n	800783a <__sfputc_r+0x1e>
 8007828:	6994      	ldr	r4, [r2, #24]
 800782a:	42a3      	cmp	r3, r4
 800782c:	db01      	blt.n	8007832 <__sfputc_r+0x16>
 800782e:	290a      	cmp	r1, #10
 8007830:	d103      	bne.n	800783a <__sfputc_r+0x1e>
 8007832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007836:	f000 baef 	b.w	8007e18 <__swbuf_r>
 800783a:	6813      	ldr	r3, [r2, #0]
 800783c:	1c58      	adds	r0, r3, #1
 800783e:	6010      	str	r0, [r2, #0]
 8007840:	7019      	strb	r1, [r3, #0]
 8007842:	4608      	mov	r0, r1
 8007844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007848:	4770      	bx	lr

0800784a <__sfputs_r>:
 800784a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784c:	4606      	mov	r6, r0
 800784e:	460f      	mov	r7, r1
 8007850:	4614      	mov	r4, r2
 8007852:	18d5      	adds	r5, r2, r3
 8007854:	42ac      	cmp	r4, r5
 8007856:	d101      	bne.n	800785c <__sfputs_r+0x12>
 8007858:	2000      	movs	r0, #0
 800785a:	e007      	b.n	800786c <__sfputs_r+0x22>
 800785c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007860:	463a      	mov	r2, r7
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ffda 	bl	800781c <__sfputc_r>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d1f3      	bne.n	8007854 <__sfputs_r+0xa>
 800786c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007870 <_vfiprintf_r>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	460d      	mov	r5, r1
 8007876:	b09d      	sub	sp, #116	; 0x74
 8007878:	4614      	mov	r4, r2
 800787a:	4698      	mov	r8, r3
 800787c:	4606      	mov	r6, r0
 800787e:	b118      	cbz	r0, 8007888 <_vfiprintf_r+0x18>
 8007880:	6983      	ldr	r3, [r0, #24]
 8007882:	b90b      	cbnz	r3, 8007888 <_vfiprintf_r+0x18>
 8007884:	f000 fcaa 	bl	80081dc <__sinit>
 8007888:	4b89      	ldr	r3, [pc, #548]	; (8007ab0 <_vfiprintf_r+0x240>)
 800788a:	429d      	cmp	r5, r3
 800788c:	d11b      	bne.n	80078c6 <_vfiprintf_r+0x56>
 800788e:	6875      	ldr	r5, [r6, #4]
 8007890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007892:	07d9      	lsls	r1, r3, #31
 8007894:	d405      	bmi.n	80078a2 <_vfiprintf_r+0x32>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	059a      	lsls	r2, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_vfiprintf_r+0x32>
 800789c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800789e:	f000 fd3b 	bl	8008318 <__retarget_lock_acquire_recursive>
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	071b      	lsls	r3, r3, #28
 80078a6:	d501      	bpl.n	80078ac <_vfiprintf_r+0x3c>
 80078a8:	692b      	ldr	r3, [r5, #16]
 80078aa:	b9eb      	cbnz	r3, 80078e8 <_vfiprintf_r+0x78>
 80078ac:	4629      	mov	r1, r5
 80078ae:	4630      	mov	r0, r6
 80078b0:	f000 fb04 	bl	8007ebc <__swsetup_r>
 80078b4:	b1c0      	cbz	r0, 80078e8 <_vfiprintf_r+0x78>
 80078b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078b8:	07dc      	lsls	r4, r3, #31
 80078ba:	d50e      	bpl.n	80078da <_vfiprintf_r+0x6a>
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	b01d      	add	sp, #116	; 0x74
 80078c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c6:	4b7b      	ldr	r3, [pc, #492]	; (8007ab4 <_vfiprintf_r+0x244>)
 80078c8:	429d      	cmp	r5, r3
 80078ca:	d101      	bne.n	80078d0 <_vfiprintf_r+0x60>
 80078cc:	68b5      	ldr	r5, [r6, #8]
 80078ce:	e7df      	b.n	8007890 <_vfiprintf_r+0x20>
 80078d0:	4b79      	ldr	r3, [pc, #484]	; (8007ab8 <_vfiprintf_r+0x248>)
 80078d2:	429d      	cmp	r5, r3
 80078d4:	bf08      	it	eq
 80078d6:	68f5      	ldreq	r5, [r6, #12]
 80078d8:	e7da      	b.n	8007890 <_vfiprintf_r+0x20>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	0598      	lsls	r0, r3, #22
 80078de:	d4ed      	bmi.n	80078bc <_vfiprintf_r+0x4c>
 80078e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e2:	f000 fd1a 	bl	800831a <__retarget_lock_release_recursive>
 80078e6:	e7e9      	b.n	80078bc <_vfiprintf_r+0x4c>
 80078e8:	2300      	movs	r3, #0
 80078ea:	9309      	str	r3, [sp, #36]	; 0x24
 80078ec:	2320      	movs	r3, #32
 80078ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f6:	2330      	movs	r3, #48	; 0x30
 80078f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007abc <_vfiprintf_r+0x24c>
 80078fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007900:	f04f 0901 	mov.w	r9, #1
 8007904:	4623      	mov	r3, r4
 8007906:	469a      	mov	sl, r3
 8007908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800790c:	b10a      	cbz	r2, 8007912 <_vfiprintf_r+0xa2>
 800790e:	2a25      	cmp	r2, #37	; 0x25
 8007910:	d1f9      	bne.n	8007906 <_vfiprintf_r+0x96>
 8007912:	ebba 0b04 	subs.w	fp, sl, r4
 8007916:	d00b      	beq.n	8007930 <_vfiprintf_r+0xc0>
 8007918:	465b      	mov	r3, fp
 800791a:	4622      	mov	r2, r4
 800791c:	4629      	mov	r1, r5
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff ff93 	bl	800784a <__sfputs_r>
 8007924:	3001      	adds	r0, #1
 8007926:	f000 80aa 	beq.w	8007a7e <_vfiprintf_r+0x20e>
 800792a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800792c:	445a      	add	r2, fp
 800792e:	9209      	str	r2, [sp, #36]	; 0x24
 8007930:	f89a 3000 	ldrb.w	r3, [sl]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80a2 	beq.w	8007a7e <_vfiprintf_r+0x20e>
 800793a:	2300      	movs	r3, #0
 800793c:	f04f 32ff 	mov.w	r2, #4294967295
 8007940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007944:	f10a 0a01 	add.w	sl, sl, #1
 8007948:	9304      	str	r3, [sp, #16]
 800794a:	9307      	str	r3, [sp, #28]
 800794c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007950:	931a      	str	r3, [sp, #104]	; 0x68
 8007952:	4654      	mov	r4, sl
 8007954:	2205      	movs	r2, #5
 8007956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795a:	4858      	ldr	r0, [pc, #352]	; (8007abc <_vfiprintf_r+0x24c>)
 800795c:	f7f8 fc40 	bl	80001e0 <memchr>
 8007960:	9a04      	ldr	r2, [sp, #16]
 8007962:	b9d8      	cbnz	r0, 800799c <_vfiprintf_r+0x12c>
 8007964:	06d1      	lsls	r1, r2, #27
 8007966:	bf44      	itt	mi
 8007968:	2320      	movmi	r3, #32
 800796a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800796e:	0713      	lsls	r3, r2, #28
 8007970:	bf44      	itt	mi
 8007972:	232b      	movmi	r3, #43	; 0x2b
 8007974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007978:	f89a 3000 	ldrb.w	r3, [sl]
 800797c:	2b2a      	cmp	r3, #42	; 0x2a
 800797e:	d015      	beq.n	80079ac <_vfiprintf_r+0x13c>
 8007980:	9a07      	ldr	r2, [sp, #28]
 8007982:	4654      	mov	r4, sl
 8007984:	2000      	movs	r0, #0
 8007986:	f04f 0c0a 	mov.w	ip, #10
 800798a:	4621      	mov	r1, r4
 800798c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007990:	3b30      	subs	r3, #48	; 0x30
 8007992:	2b09      	cmp	r3, #9
 8007994:	d94e      	bls.n	8007a34 <_vfiprintf_r+0x1c4>
 8007996:	b1b0      	cbz	r0, 80079c6 <_vfiprintf_r+0x156>
 8007998:	9207      	str	r2, [sp, #28]
 800799a:	e014      	b.n	80079c6 <_vfiprintf_r+0x156>
 800799c:	eba0 0308 	sub.w	r3, r0, r8
 80079a0:	fa09 f303 	lsl.w	r3, r9, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	46a2      	mov	sl, r4
 80079aa:	e7d2      	b.n	8007952 <_vfiprintf_r+0xe2>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	1d19      	adds	r1, r3, #4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	9103      	str	r1, [sp, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bfbb      	ittet	lt
 80079b8:	425b      	neglt	r3, r3
 80079ba:	f042 0202 	orrlt.w	r2, r2, #2
 80079be:	9307      	strge	r3, [sp, #28]
 80079c0:	9307      	strlt	r3, [sp, #28]
 80079c2:	bfb8      	it	lt
 80079c4:	9204      	strlt	r2, [sp, #16]
 80079c6:	7823      	ldrb	r3, [r4, #0]
 80079c8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ca:	d10c      	bne.n	80079e6 <_vfiprintf_r+0x176>
 80079cc:	7863      	ldrb	r3, [r4, #1]
 80079ce:	2b2a      	cmp	r3, #42	; 0x2a
 80079d0:	d135      	bne.n	8007a3e <_vfiprintf_r+0x1ce>
 80079d2:	9b03      	ldr	r3, [sp, #12]
 80079d4:	1d1a      	adds	r2, r3, #4
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	9203      	str	r2, [sp, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfb8      	it	lt
 80079de:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e2:	3402      	adds	r4, #2
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007acc <_vfiprintf_r+0x25c>
 80079ea:	7821      	ldrb	r1, [r4, #0]
 80079ec:	2203      	movs	r2, #3
 80079ee:	4650      	mov	r0, sl
 80079f0:	f7f8 fbf6 	bl	80001e0 <memchr>
 80079f4:	b140      	cbz	r0, 8007a08 <_vfiprintf_r+0x198>
 80079f6:	2340      	movs	r3, #64	; 0x40
 80079f8:	eba0 000a 	sub.w	r0, r0, sl
 80079fc:	fa03 f000 	lsl.w	r0, r3, r0
 8007a00:	9b04      	ldr	r3, [sp, #16]
 8007a02:	4303      	orrs	r3, r0
 8007a04:	3401      	adds	r4, #1
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a0c:	482c      	ldr	r0, [pc, #176]	; (8007ac0 <_vfiprintf_r+0x250>)
 8007a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a12:	2206      	movs	r2, #6
 8007a14:	f7f8 fbe4 	bl	80001e0 <memchr>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d03f      	beq.n	8007a9c <_vfiprintf_r+0x22c>
 8007a1c:	4b29      	ldr	r3, [pc, #164]	; (8007ac4 <_vfiprintf_r+0x254>)
 8007a1e:	bb1b      	cbnz	r3, 8007a68 <_vfiprintf_r+0x1f8>
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	3307      	adds	r3, #7
 8007a24:	f023 0307 	bic.w	r3, r3, #7
 8007a28:	3308      	adds	r3, #8
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2e:	443b      	add	r3, r7
 8007a30:	9309      	str	r3, [sp, #36]	; 0x24
 8007a32:	e767      	b.n	8007904 <_vfiprintf_r+0x94>
 8007a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a38:	460c      	mov	r4, r1
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	e7a5      	b.n	800798a <_vfiprintf_r+0x11a>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	3401      	adds	r4, #1
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	4619      	mov	r1, r3
 8007a46:	f04f 0c0a 	mov.w	ip, #10
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a50:	3a30      	subs	r2, #48	; 0x30
 8007a52:	2a09      	cmp	r2, #9
 8007a54:	d903      	bls.n	8007a5e <_vfiprintf_r+0x1ee>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0c5      	beq.n	80079e6 <_vfiprintf_r+0x176>
 8007a5a:	9105      	str	r1, [sp, #20]
 8007a5c:	e7c3      	b.n	80079e6 <_vfiprintf_r+0x176>
 8007a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a62:	4604      	mov	r4, r0
 8007a64:	2301      	movs	r3, #1
 8007a66:	e7f0      	b.n	8007a4a <_vfiprintf_r+0x1da>
 8007a68:	ab03      	add	r3, sp, #12
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	4b16      	ldr	r3, [pc, #88]	; (8007ac8 <_vfiprintf_r+0x258>)
 8007a70:	a904      	add	r1, sp, #16
 8007a72:	4630      	mov	r0, r6
 8007a74:	f3af 8000 	nop.w
 8007a78:	4607      	mov	r7, r0
 8007a7a:	1c78      	adds	r0, r7, #1
 8007a7c:	d1d6      	bne.n	8007a2c <_vfiprintf_r+0x1bc>
 8007a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a80:	07d9      	lsls	r1, r3, #31
 8007a82:	d405      	bmi.n	8007a90 <_vfiprintf_r+0x220>
 8007a84:	89ab      	ldrh	r3, [r5, #12]
 8007a86:	059a      	lsls	r2, r3, #22
 8007a88:	d402      	bmi.n	8007a90 <_vfiprintf_r+0x220>
 8007a8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8c:	f000 fc45 	bl	800831a <__retarget_lock_release_recursive>
 8007a90:	89ab      	ldrh	r3, [r5, #12]
 8007a92:	065b      	lsls	r3, r3, #25
 8007a94:	f53f af12 	bmi.w	80078bc <_vfiprintf_r+0x4c>
 8007a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a9a:	e711      	b.n	80078c0 <_vfiprintf_r+0x50>
 8007a9c:	ab03      	add	r3, sp, #12
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	462a      	mov	r2, r5
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <_vfiprintf_r+0x258>)
 8007aa4:	a904      	add	r1, sp, #16
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f000 f880 	bl	8007bac <_printf_i>
 8007aac:	e7e4      	b.n	8007a78 <_vfiprintf_r+0x208>
 8007aae:	bf00      	nop
 8007ab0:	08008a14 	.word	0x08008a14
 8007ab4:	08008a34 	.word	0x08008a34
 8007ab8:	080089f4 	.word	0x080089f4
 8007abc:	080089be 	.word	0x080089be
 8007ac0:	080089c8 	.word	0x080089c8
 8007ac4:	00000000 	.word	0x00000000
 8007ac8:	0800784b 	.word	0x0800784b
 8007acc:	080089c4 	.word	0x080089c4

08007ad0 <_printf_common>:
 8007ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	4699      	mov	r9, r3
 8007ad8:	688a      	ldr	r2, [r1, #8]
 8007ada:	690b      	ldr	r3, [r1, #16]
 8007adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	bfb8      	it	lt
 8007ae4:	4613      	movlt	r3, r2
 8007ae6:	6033      	str	r3, [r6, #0]
 8007ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aec:	4607      	mov	r7, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	b10a      	cbz	r2, 8007af6 <_printf_common+0x26>
 8007af2:	3301      	adds	r3, #1
 8007af4:	6033      	str	r3, [r6, #0]
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	0699      	lsls	r1, r3, #26
 8007afa:	bf42      	ittt	mi
 8007afc:	6833      	ldrmi	r3, [r6, #0]
 8007afe:	3302      	addmi	r3, #2
 8007b00:	6033      	strmi	r3, [r6, #0]
 8007b02:	6825      	ldr	r5, [r4, #0]
 8007b04:	f015 0506 	ands.w	r5, r5, #6
 8007b08:	d106      	bne.n	8007b18 <_printf_common+0x48>
 8007b0a:	f104 0a19 	add.w	sl, r4, #25
 8007b0e:	68e3      	ldr	r3, [r4, #12]
 8007b10:	6832      	ldr	r2, [r6, #0]
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	42ab      	cmp	r3, r5
 8007b16:	dc26      	bgt.n	8007b66 <_printf_common+0x96>
 8007b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b1c:	1e13      	subs	r3, r2, #0
 8007b1e:	6822      	ldr	r2, [r4, #0]
 8007b20:	bf18      	it	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	0692      	lsls	r2, r2, #26
 8007b26:	d42b      	bmi.n	8007b80 <_printf_common+0xb0>
 8007b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4638      	mov	r0, r7
 8007b30:	47c0      	blx	r8
 8007b32:	3001      	adds	r0, #1
 8007b34:	d01e      	beq.n	8007b74 <_printf_common+0xa4>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	68e5      	ldr	r5, [r4, #12]
 8007b3a:	6832      	ldr	r2, [r6, #0]
 8007b3c:	f003 0306 	and.w	r3, r3, #6
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	bf08      	it	eq
 8007b44:	1aad      	subeq	r5, r5, r2
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	6922      	ldr	r2, [r4, #16]
 8007b4a:	bf0c      	ite	eq
 8007b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b50:	2500      	movne	r5, #0
 8007b52:	4293      	cmp	r3, r2
 8007b54:	bfc4      	itt	gt
 8007b56:	1a9b      	subgt	r3, r3, r2
 8007b58:	18ed      	addgt	r5, r5, r3
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	341a      	adds	r4, #26
 8007b5e:	42b5      	cmp	r5, r6
 8007b60:	d11a      	bne.n	8007b98 <_printf_common+0xc8>
 8007b62:	2000      	movs	r0, #0
 8007b64:	e008      	b.n	8007b78 <_printf_common+0xa8>
 8007b66:	2301      	movs	r3, #1
 8007b68:	4652      	mov	r2, sl
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	47c0      	blx	r8
 8007b70:	3001      	adds	r0, #1
 8007b72:	d103      	bne.n	8007b7c <_printf_common+0xac>
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295
 8007b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	e7c6      	b.n	8007b0e <_printf_common+0x3e>
 8007b80:	18e1      	adds	r1, r4, r3
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	2030      	movs	r0, #48	; 0x30
 8007b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b8a:	4422      	add	r2, r4
 8007b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b94:	3302      	adds	r3, #2
 8007b96:	e7c7      	b.n	8007b28 <_printf_common+0x58>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	47c0      	blx	r8
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d0e6      	beq.n	8007b74 <_printf_common+0xa4>
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	e7d9      	b.n	8007b5e <_printf_common+0x8e>
	...

08007bac <_printf_i>:
 8007bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	7e0f      	ldrb	r7, [r1, #24]
 8007bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bb4:	2f78      	cmp	r7, #120	; 0x78
 8007bb6:	4691      	mov	r9, r2
 8007bb8:	4680      	mov	r8, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	469a      	mov	sl, r3
 8007bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bc2:	d807      	bhi.n	8007bd4 <_printf_i+0x28>
 8007bc4:	2f62      	cmp	r7, #98	; 0x62
 8007bc6:	d80a      	bhi.n	8007bde <_printf_i+0x32>
 8007bc8:	2f00      	cmp	r7, #0
 8007bca:	f000 80d8 	beq.w	8007d7e <_printf_i+0x1d2>
 8007bce:	2f58      	cmp	r7, #88	; 0x58
 8007bd0:	f000 80a3 	beq.w	8007d1a <_printf_i+0x16e>
 8007bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bdc:	e03a      	b.n	8007c54 <_printf_i+0xa8>
 8007bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007be2:	2b15      	cmp	r3, #21
 8007be4:	d8f6      	bhi.n	8007bd4 <_printf_i+0x28>
 8007be6:	a101      	add	r1, pc, #4	; (adr r1, 8007bec <_printf_i+0x40>)
 8007be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bec:	08007c45 	.word	0x08007c45
 8007bf0:	08007c59 	.word	0x08007c59
 8007bf4:	08007bd5 	.word	0x08007bd5
 8007bf8:	08007bd5 	.word	0x08007bd5
 8007bfc:	08007bd5 	.word	0x08007bd5
 8007c00:	08007bd5 	.word	0x08007bd5
 8007c04:	08007c59 	.word	0x08007c59
 8007c08:	08007bd5 	.word	0x08007bd5
 8007c0c:	08007bd5 	.word	0x08007bd5
 8007c10:	08007bd5 	.word	0x08007bd5
 8007c14:	08007bd5 	.word	0x08007bd5
 8007c18:	08007d65 	.word	0x08007d65
 8007c1c:	08007c89 	.word	0x08007c89
 8007c20:	08007d47 	.word	0x08007d47
 8007c24:	08007bd5 	.word	0x08007bd5
 8007c28:	08007bd5 	.word	0x08007bd5
 8007c2c:	08007d87 	.word	0x08007d87
 8007c30:	08007bd5 	.word	0x08007bd5
 8007c34:	08007c89 	.word	0x08007c89
 8007c38:	08007bd5 	.word	0x08007bd5
 8007c3c:	08007bd5 	.word	0x08007bd5
 8007c40:	08007d4f 	.word	0x08007d4f
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	1d1a      	adds	r2, r3, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	602a      	str	r2, [r5, #0]
 8007c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c54:	2301      	movs	r3, #1
 8007c56:	e0a3      	b.n	8007da0 <_printf_i+0x1f4>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	6829      	ldr	r1, [r5, #0]
 8007c5c:	0606      	lsls	r6, r0, #24
 8007c5e:	f101 0304 	add.w	r3, r1, #4
 8007c62:	d50a      	bpl.n	8007c7a <_printf_i+0xce>
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	da03      	bge.n	8007c74 <_printf_i+0xc8>
 8007c6c:	232d      	movs	r3, #45	; 0x2d
 8007c6e:	4276      	negs	r6, r6
 8007c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c74:	485e      	ldr	r0, [pc, #376]	; (8007df0 <_printf_i+0x244>)
 8007c76:	230a      	movs	r3, #10
 8007c78:	e019      	b.n	8007cae <_printf_i+0x102>
 8007c7a:	680e      	ldr	r6, [r1, #0]
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c82:	bf18      	it	ne
 8007c84:	b236      	sxthne	r6, r6
 8007c86:	e7ef      	b.n	8007c68 <_printf_i+0xbc>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	6820      	ldr	r0, [r4, #0]
 8007c8c:	1d19      	adds	r1, r3, #4
 8007c8e:	6029      	str	r1, [r5, #0]
 8007c90:	0601      	lsls	r1, r0, #24
 8007c92:	d501      	bpl.n	8007c98 <_printf_i+0xec>
 8007c94:	681e      	ldr	r6, [r3, #0]
 8007c96:	e002      	b.n	8007c9e <_printf_i+0xf2>
 8007c98:	0646      	lsls	r6, r0, #25
 8007c9a:	d5fb      	bpl.n	8007c94 <_printf_i+0xe8>
 8007c9c:	881e      	ldrh	r6, [r3, #0]
 8007c9e:	4854      	ldr	r0, [pc, #336]	; (8007df0 <_printf_i+0x244>)
 8007ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2308      	moveq	r3, #8
 8007ca6:	230a      	movne	r3, #10
 8007ca8:	2100      	movs	r1, #0
 8007caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cae:	6865      	ldr	r5, [r4, #4]
 8007cb0:	60a5      	str	r5, [r4, #8]
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	bfa2      	ittt	ge
 8007cb6:	6821      	ldrge	r1, [r4, #0]
 8007cb8:	f021 0104 	bicge.w	r1, r1, #4
 8007cbc:	6021      	strge	r1, [r4, #0]
 8007cbe:	b90e      	cbnz	r6, 8007cc4 <_printf_i+0x118>
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	d04d      	beq.n	8007d60 <_printf_i+0x1b4>
 8007cc4:	4615      	mov	r5, r2
 8007cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cca:	fb03 6711 	mls	r7, r3, r1, r6
 8007cce:	5dc7      	ldrb	r7, [r0, r7]
 8007cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cd4:	4637      	mov	r7, r6
 8007cd6:	42bb      	cmp	r3, r7
 8007cd8:	460e      	mov	r6, r1
 8007cda:	d9f4      	bls.n	8007cc6 <_printf_i+0x11a>
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d10b      	bne.n	8007cf8 <_printf_i+0x14c>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	07de      	lsls	r6, r3, #31
 8007ce4:	d508      	bpl.n	8007cf8 <_printf_i+0x14c>
 8007ce6:	6923      	ldr	r3, [r4, #16]
 8007ce8:	6861      	ldr	r1, [r4, #4]
 8007cea:	4299      	cmp	r1, r3
 8007cec:	bfde      	ittt	le
 8007cee:	2330      	movle	r3, #48	; 0x30
 8007cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cf8:	1b52      	subs	r2, r2, r5
 8007cfa:	6122      	str	r2, [r4, #16]
 8007cfc:	f8cd a000 	str.w	sl, [sp]
 8007d00:	464b      	mov	r3, r9
 8007d02:	aa03      	add	r2, sp, #12
 8007d04:	4621      	mov	r1, r4
 8007d06:	4640      	mov	r0, r8
 8007d08:	f7ff fee2 	bl	8007ad0 <_printf_common>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d14c      	bne.n	8007daa <_printf_i+0x1fe>
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	b004      	add	sp, #16
 8007d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1a:	4835      	ldr	r0, [pc, #212]	; (8007df0 <_printf_i+0x244>)
 8007d1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d20:	6829      	ldr	r1, [r5, #0]
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d28:	6029      	str	r1, [r5, #0]
 8007d2a:	061d      	lsls	r5, r3, #24
 8007d2c:	d514      	bpl.n	8007d58 <_printf_i+0x1ac>
 8007d2e:	07df      	lsls	r7, r3, #31
 8007d30:	bf44      	itt	mi
 8007d32:	f043 0320 	orrmi.w	r3, r3, #32
 8007d36:	6023      	strmi	r3, [r4, #0]
 8007d38:	b91e      	cbnz	r6, 8007d42 <_printf_i+0x196>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	f023 0320 	bic.w	r3, r3, #32
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	2310      	movs	r3, #16
 8007d44:	e7b0      	b.n	8007ca8 <_printf_i+0xfc>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	f043 0320 	orr.w	r3, r3, #32
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	2378      	movs	r3, #120	; 0x78
 8007d50:	4828      	ldr	r0, [pc, #160]	; (8007df4 <_printf_i+0x248>)
 8007d52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d56:	e7e3      	b.n	8007d20 <_printf_i+0x174>
 8007d58:	0659      	lsls	r1, r3, #25
 8007d5a:	bf48      	it	mi
 8007d5c:	b2b6      	uxthmi	r6, r6
 8007d5e:	e7e6      	b.n	8007d2e <_printf_i+0x182>
 8007d60:	4615      	mov	r5, r2
 8007d62:	e7bb      	b.n	8007cdc <_printf_i+0x130>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	6826      	ldr	r6, [r4, #0]
 8007d68:	6961      	ldr	r1, [r4, #20]
 8007d6a:	1d18      	adds	r0, r3, #4
 8007d6c:	6028      	str	r0, [r5, #0]
 8007d6e:	0635      	lsls	r5, r6, #24
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	d501      	bpl.n	8007d78 <_printf_i+0x1cc>
 8007d74:	6019      	str	r1, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <_printf_i+0x1d2>
 8007d78:	0670      	lsls	r0, r6, #25
 8007d7a:	d5fb      	bpl.n	8007d74 <_printf_i+0x1c8>
 8007d7c:	8019      	strh	r1, [r3, #0]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	6123      	str	r3, [r4, #16]
 8007d82:	4615      	mov	r5, r2
 8007d84:	e7ba      	b.n	8007cfc <_printf_i+0x150>
 8007d86:	682b      	ldr	r3, [r5, #0]
 8007d88:	1d1a      	adds	r2, r3, #4
 8007d8a:	602a      	str	r2, [r5, #0]
 8007d8c:	681d      	ldr	r5, [r3, #0]
 8007d8e:	6862      	ldr	r2, [r4, #4]
 8007d90:	2100      	movs	r1, #0
 8007d92:	4628      	mov	r0, r5
 8007d94:	f7f8 fa24 	bl	80001e0 <memchr>
 8007d98:	b108      	cbz	r0, 8007d9e <_printf_i+0x1f2>
 8007d9a:	1b40      	subs	r0, r0, r5
 8007d9c:	6060      	str	r0, [r4, #4]
 8007d9e:	6863      	ldr	r3, [r4, #4]
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	2300      	movs	r3, #0
 8007da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da8:	e7a8      	b.n	8007cfc <_printf_i+0x150>
 8007daa:	6923      	ldr	r3, [r4, #16]
 8007dac:	462a      	mov	r2, r5
 8007dae:	4649      	mov	r1, r9
 8007db0:	4640      	mov	r0, r8
 8007db2:	47d0      	blx	sl
 8007db4:	3001      	adds	r0, #1
 8007db6:	d0ab      	beq.n	8007d10 <_printf_i+0x164>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	079b      	lsls	r3, r3, #30
 8007dbc:	d413      	bmi.n	8007de6 <_printf_i+0x23a>
 8007dbe:	68e0      	ldr	r0, [r4, #12]
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	4298      	cmp	r0, r3
 8007dc4:	bfb8      	it	lt
 8007dc6:	4618      	movlt	r0, r3
 8007dc8:	e7a4      	b.n	8007d14 <_printf_i+0x168>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4632      	mov	r2, r6
 8007dce:	4649      	mov	r1, r9
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	47d0      	blx	sl
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d09b      	beq.n	8007d10 <_printf_i+0x164>
 8007dd8:	3501      	adds	r5, #1
 8007dda:	68e3      	ldr	r3, [r4, #12]
 8007ddc:	9903      	ldr	r1, [sp, #12]
 8007dde:	1a5b      	subs	r3, r3, r1
 8007de0:	42ab      	cmp	r3, r5
 8007de2:	dcf2      	bgt.n	8007dca <_printf_i+0x21e>
 8007de4:	e7eb      	b.n	8007dbe <_printf_i+0x212>
 8007de6:	2500      	movs	r5, #0
 8007de8:	f104 0619 	add.w	r6, r4, #25
 8007dec:	e7f5      	b.n	8007dda <_printf_i+0x22e>
 8007dee:	bf00      	nop
 8007df0:	080089cf 	.word	0x080089cf
 8007df4:	080089e0 	.word	0x080089e0

08007df8 <_sbrk_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4d06      	ldr	r5, [pc, #24]	; (8007e14 <_sbrk_r+0x1c>)
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	602b      	str	r3, [r5, #0]
 8007e04:	f7fb f87a 	bl	8002efc <_sbrk>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_sbrk_r+0x1a>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_sbrk_r+0x1a>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20000d4c 	.word	0x20000d4c

08007e18 <__swbuf_r>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	460e      	mov	r6, r1
 8007e1c:	4614      	mov	r4, r2
 8007e1e:	4605      	mov	r5, r0
 8007e20:	b118      	cbz	r0, 8007e2a <__swbuf_r+0x12>
 8007e22:	6983      	ldr	r3, [r0, #24]
 8007e24:	b90b      	cbnz	r3, 8007e2a <__swbuf_r+0x12>
 8007e26:	f000 f9d9 	bl	80081dc <__sinit>
 8007e2a:	4b21      	ldr	r3, [pc, #132]	; (8007eb0 <__swbuf_r+0x98>)
 8007e2c:	429c      	cmp	r4, r3
 8007e2e:	d12b      	bne.n	8007e88 <__swbuf_r+0x70>
 8007e30:	686c      	ldr	r4, [r5, #4]
 8007e32:	69a3      	ldr	r3, [r4, #24]
 8007e34:	60a3      	str	r3, [r4, #8]
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	071a      	lsls	r2, r3, #28
 8007e3a:	d52f      	bpl.n	8007e9c <__swbuf_r+0x84>
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	b36b      	cbz	r3, 8007e9c <__swbuf_r+0x84>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	1ac0      	subs	r0, r0, r3
 8007e46:	6963      	ldr	r3, [r4, #20]
 8007e48:	b2f6      	uxtb	r6, r6
 8007e4a:	4283      	cmp	r3, r0
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	dc04      	bgt.n	8007e5a <__swbuf_r+0x42>
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f92e 	bl	80080b4 <_fflush_r>
 8007e58:	bb30      	cbnz	r0, 8007ea8 <__swbuf_r+0x90>
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	60a3      	str	r3, [r4, #8]
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	6022      	str	r2, [r4, #0]
 8007e66:	701e      	strb	r6, [r3, #0]
 8007e68:	6963      	ldr	r3, [r4, #20]
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	4283      	cmp	r3, r0
 8007e6e:	d004      	beq.n	8007e7a <__swbuf_r+0x62>
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	07db      	lsls	r3, r3, #31
 8007e74:	d506      	bpl.n	8007e84 <__swbuf_r+0x6c>
 8007e76:	2e0a      	cmp	r6, #10
 8007e78:	d104      	bne.n	8007e84 <__swbuf_r+0x6c>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f000 f919 	bl	80080b4 <_fflush_r>
 8007e82:	b988      	cbnz	r0, 8007ea8 <__swbuf_r+0x90>
 8007e84:	4638      	mov	r0, r7
 8007e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <__swbuf_r+0x9c>)
 8007e8a:	429c      	cmp	r4, r3
 8007e8c:	d101      	bne.n	8007e92 <__swbuf_r+0x7a>
 8007e8e:	68ac      	ldr	r4, [r5, #8]
 8007e90:	e7cf      	b.n	8007e32 <__swbuf_r+0x1a>
 8007e92:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <__swbuf_r+0xa0>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	bf08      	it	eq
 8007e98:	68ec      	ldreq	r4, [r5, #12]
 8007e9a:	e7ca      	b.n	8007e32 <__swbuf_r+0x1a>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 f80c 	bl	8007ebc <__swsetup_r>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d0cb      	beq.n	8007e40 <__swbuf_r+0x28>
 8007ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8007eac:	e7ea      	b.n	8007e84 <__swbuf_r+0x6c>
 8007eae:	bf00      	nop
 8007eb0:	08008a14 	.word	0x08008a14
 8007eb4:	08008a34 	.word	0x08008a34
 8007eb8:	080089f4 	.word	0x080089f4

08007ebc <__swsetup_r>:
 8007ebc:	4b32      	ldr	r3, [pc, #200]	; (8007f88 <__swsetup_r+0xcc>)
 8007ebe:	b570      	push	{r4, r5, r6, lr}
 8007ec0:	681d      	ldr	r5, [r3, #0]
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	b125      	cbz	r5, 8007ed2 <__swsetup_r+0x16>
 8007ec8:	69ab      	ldr	r3, [r5, #24]
 8007eca:	b913      	cbnz	r3, 8007ed2 <__swsetup_r+0x16>
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 f985 	bl	80081dc <__sinit>
 8007ed2:	4b2e      	ldr	r3, [pc, #184]	; (8007f8c <__swsetup_r+0xd0>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	d10f      	bne.n	8007ef8 <__swsetup_r+0x3c>
 8007ed8:	686c      	ldr	r4, [r5, #4]
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee0:	0719      	lsls	r1, r3, #28
 8007ee2:	d42c      	bmi.n	8007f3e <__swsetup_r+0x82>
 8007ee4:	06dd      	lsls	r5, r3, #27
 8007ee6:	d411      	bmi.n	8007f0c <__swsetup_r+0x50>
 8007ee8:	2309      	movs	r3, #9
 8007eea:	6033      	str	r3, [r6, #0]
 8007eec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef0:	81a3      	strh	r3, [r4, #12]
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef6:	e03e      	b.n	8007f76 <__swsetup_r+0xba>
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <__swsetup_r+0xd4>)
 8007efa:	429c      	cmp	r4, r3
 8007efc:	d101      	bne.n	8007f02 <__swsetup_r+0x46>
 8007efe:	68ac      	ldr	r4, [r5, #8]
 8007f00:	e7eb      	b.n	8007eda <__swsetup_r+0x1e>
 8007f02:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <__swsetup_r+0xd8>)
 8007f04:	429c      	cmp	r4, r3
 8007f06:	bf08      	it	eq
 8007f08:	68ec      	ldreq	r4, [r5, #12]
 8007f0a:	e7e6      	b.n	8007eda <__swsetup_r+0x1e>
 8007f0c:	0758      	lsls	r0, r3, #29
 8007f0e:	d512      	bpl.n	8007f36 <__swsetup_r+0x7a>
 8007f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f12:	b141      	cbz	r1, 8007f26 <__swsetup_r+0x6a>
 8007f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	d002      	beq.n	8007f22 <__swsetup_r+0x66>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fa41 	bl	80073a4 <_free_r>
 8007f22:	2300      	movs	r3, #0
 8007f24:	6363      	str	r3, [r4, #52]	; 0x34
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6063      	str	r3, [r4, #4]
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f043 0308 	orr.w	r3, r3, #8
 8007f3c:	81a3      	strh	r3, [r4, #12]
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	b94b      	cbnz	r3, 8007f56 <__swsetup_r+0x9a>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f4c:	d003      	beq.n	8007f56 <__swsetup_r+0x9a>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 fa09 	bl	8008368 <__smakebuf_r>
 8007f56:	89a0      	ldrh	r0, [r4, #12]
 8007f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f5c:	f010 0301 	ands.w	r3, r0, #1
 8007f60:	d00a      	beq.n	8007f78 <__swsetup_r+0xbc>
 8007f62:	2300      	movs	r3, #0
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	6963      	ldr	r3, [r4, #20]
 8007f68:	425b      	negs	r3, r3
 8007f6a:	61a3      	str	r3, [r4, #24]
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	b943      	cbnz	r3, 8007f82 <__swsetup_r+0xc6>
 8007f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f74:	d1ba      	bne.n	8007eec <__swsetup_r+0x30>
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	0781      	lsls	r1, r0, #30
 8007f7a:	bf58      	it	pl
 8007f7c:	6963      	ldrpl	r3, [r4, #20]
 8007f7e:	60a3      	str	r3, [r4, #8]
 8007f80:	e7f4      	b.n	8007f6c <__swsetup_r+0xb0>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e7f7      	b.n	8007f76 <__swsetup_r+0xba>
 8007f86:	bf00      	nop
 8007f88:	20000074 	.word	0x20000074
 8007f8c:	08008a14 	.word	0x08008a14
 8007f90:	08008a34 	.word	0x08008a34
 8007f94:	080089f4 	.word	0x080089f4

08007f98 <abort>:
 8007f98:	b508      	push	{r3, lr}
 8007f9a:	2006      	movs	r0, #6
 8007f9c:	f000 fab0 	bl	8008500 <raise>
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	f7fa ff33 	bl	8002e0c <_exit>
	...

08007fa8 <__sflush_r>:
 8007fa8:	898a      	ldrh	r2, [r1, #12]
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	4605      	mov	r5, r0
 8007fb0:	0710      	lsls	r0, r2, #28
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	d458      	bmi.n	8008068 <__sflush_r+0xc0>
 8007fb6:	684b      	ldr	r3, [r1, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc05      	bgt.n	8007fc8 <__sflush_r+0x20>
 8007fbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dc02      	bgt.n	8007fc8 <__sflush_r+0x20>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d0f9      	beq.n	8007fc2 <__sflush_r+0x1a>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd4:	682f      	ldr	r7, [r5, #0]
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	d032      	beq.n	8008040 <__sflush_r+0x98>
 8007fda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	075a      	lsls	r2, r3, #29
 8007fe0:	d505      	bpl.n	8007fee <__sflush_r+0x46>
 8007fe2:	6863      	ldr	r3, [r4, #4]
 8007fe4:	1ac0      	subs	r0, r0, r3
 8007fe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fe8:	b10b      	cbz	r3, 8007fee <__sflush_r+0x46>
 8007fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fec:	1ac0      	subs	r0, r0, r3
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff4:	6a21      	ldr	r1, [r4, #32]
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b0      	blx	r6
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	d106      	bne.n	800800e <__sflush_r+0x66>
 8008000:	6829      	ldr	r1, [r5, #0]
 8008002:	291d      	cmp	r1, #29
 8008004:	d82c      	bhi.n	8008060 <__sflush_r+0xb8>
 8008006:	4a2a      	ldr	r2, [pc, #168]	; (80080b0 <__sflush_r+0x108>)
 8008008:	40ca      	lsrs	r2, r1
 800800a:	07d6      	lsls	r6, r2, #31
 800800c:	d528      	bpl.n	8008060 <__sflush_r+0xb8>
 800800e:	2200      	movs	r2, #0
 8008010:	6062      	str	r2, [r4, #4]
 8008012:	04d9      	lsls	r1, r3, #19
 8008014:	6922      	ldr	r2, [r4, #16]
 8008016:	6022      	str	r2, [r4, #0]
 8008018:	d504      	bpl.n	8008024 <__sflush_r+0x7c>
 800801a:	1c42      	adds	r2, r0, #1
 800801c:	d101      	bne.n	8008022 <__sflush_r+0x7a>
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	b903      	cbnz	r3, 8008024 <__sflush_r+0x7c>
 8008022:	6560      	str	r0, [r4, #84]	; 0x54
 8008024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008026:	602f      	str	r7, [r5, #0]
 8008028:	2900      	cmp	r1, #0
 800802a:	d0ca      	beq.n	8007fc2 <__sflush_r+0x1a>
 800802c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008030:	4299      	cmp	r1, r3
 8008032:	d002      	beq.n	800803a <__sflush_r+0x92>
 8008034:	4628      	mov	r0, r5
 8008036:	f7ff f9b5 	bl	80073a4 <_free_r>
 800803a:	2000      	movs	r0, #0
 800803c:	6360      	str	r0, [r4, #52]	; 0x34
 800803e:	e7c1      	b.n	8007fc4 <__sflush_r+0x1c>
 8008040:	6a21      	ldr	r1, [r4, #32]
 8008042:	2301      	movs	r3, #1
 8008044:	4628      	mov	r0, r5
 8008046:	47b0      	blx	r6
 8008048:	1c41      	adds	r1, r0, #1
 800804a:	d1c7      	bne.n	8007fdc <__sflush_r+0x34>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0c4      	beq.n	8007fdc <__sflush_r+0x34>
 8008052:	2b1d      	cmp	r3, #29
 8008054:	d001      	beq.n	800805a <__sflush_r+0xb2>
 8008056:	2b16      	cmp	r3, #22
 8008058:	d101      	bne.n	800805e <__sflush_r+0xb6>
 800805a:	602f      	str	r7, [r5, #0]
 800805c:	e7b1      	b.n	8007fc2 <__sflush_r+0x1a>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e7ad      	b.n	8007fc4 <__sflush_r+0x1c>
 8008068:	690f      	ldr	r7, [r1, #16]
 800806a:	2f00      	cmp	r7, #0
 800806c:	d0a9      	beq.n	8007fc2 <__sflush_r+0x1a>
 800806e:	0793      	lsls	r3, r2, #30
 8008070:	680e      	ldr	r6, [r1, #0]
 8008072:	bf08      	it	eq
 8008074:	694b      	ldreq	r3, [r1, #20]
 8008076:	600f      	str	r7, [r1, #0]
 8008078:	bf18      	it	ne
 800807a:	2300      	movne	r3, #0
 800807c:	eba6 0807 	sub.w	r8, r6, r7
 8008080:	608b      	str	r3, [r1, #8]
 8008082:	f1b8 0f00 	cmp.w	r8, #0
 8008086:	dd9c      	ble.n	8007fc2 <__sflush_r+0x1a>
 8008088:	6a21      	ldr	r1, [r4, #32]
 800808a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800808c:	4643      	mov	r3, r8
 800808e:	463a      	mov	r2, r7
 8008090:	4628      	mov	r0, r5
 8008092:	47b0      	blx	r6
 8008094:	2800      	cmp	r0, #0
 8008096:	dc06      	bgt.n	80080a6 <__sflush_r+0xfe>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	e78e      	b.n	8007fc4 <__sflush_r+0x1c>
 80080a6:	4407      	add	r7, r0
 80080a8:	eba8 0800 	sub.w	r8, r8, r0
 80080ac:	e7e9      	b.n	8008082 <__sflush_r+0xda>
 80080ae:	bf00      	nop
 80080b0:	20400001 	.word	0x20400001

080080b4 <_fflush_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	690b      	ldr	r3, [r1, #16]
 80080b8:	4605      	mov	r5, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	b913      	cbnz	r3, 80080c4 <_fflush_r+0x10>
 80080be:	2500      	movs	r5, #0
 80080c0:	4628      	mov	r0, r5
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	b118      	cbz	r0, 80080ce <_fflush_r+0x1a>
 80080c6:	6983      	ldr	r3, [r0, #24]
 80080c8:	b90b      	cbnz	r3, 80080ce <_fflush_r+0x1a>
 80080ca:	f000 f887 	bl	80081dc <__sinit>
 80080ce:	4b14      	ldr	r3, [pc, #80]	; (8008120 <_fflush_r+0x6c>)
 80080d0:	429c      	cmp	r4, r3
 80080d2:	d11b      	bne.n	800810c <_fflush_r+0x58>
 80080d4:	686c      	ldr	r4, [r5, #4]
 80080d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0ef      	beq.n	80080be <_fflush_r+0xa>
 80080de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080e0:	07d0      	lsls	r0, r2, #31
 80080e2:	d404      	bmi.n	80080ee <_fflush_r+0x3a>
 80080e4:	0599      	lsls	r1, r3, #22
 80080e6:	d402      	bmi.n	80080ee <_fflush_r+0x3a>
 80080e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ea:	f000 f915 	bl	8008318 <__retarget_lock_acquire_recursive>
 80080ee:	4628      	mov	r0, r5
 80080f0:	4621      	mov	r1, r4
 80080f2:	f7ff ff59 	bl	8007fa8 <__sflush_r>
 80080f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f8:	07da      	lsls	r2, r3, #31
 80080fa:	4605      	mov	r5, r0
 80080fc:	d4e0      	bmi.n	80080c0 <_fflush_r+0xc>
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	059b      	lsls	r3, r3, #22
 8008102:	d4dd      	bmi.n	80080c0 <_fflush_r+0xc>
 8008104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008106:	f000 f908 	bl	800831a <__retarget_lock_release_recursive>
 800810a:	e7d9      	b.n	80080c0 <_fflush_r+0xc>
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <_fflush_r+0x70>)
 800810e:	429c      	cmp	r4, r3
 8008110:	d101      	bne.n	8008116 <_fflush_r+0x62>
 8008112:	68ac      	ldr	r4, [r5, #8]
 8008114:	e7df      	b.n	80080d6 <_fflush_r+0x22>
 8008116:	4b04      	ldr	r3, [pc, #16]	; (8008128 <_fflush_r+0x74>)
 8008118:	429c      	cmp	r4, r3
 800811a:	bf08      	it	eq
 800811c:	68ec      	ldreq	r4, [r5, #12]
 800811e:	e7da      	b.n	80080d6 <_fflush_r+0x22>
 8008120:	08008a14 	.word	0x08008a14
 8008124:	08008a34 	.word	0x08008a34
 8008128:	080089f4 	.word	0x080089f4

0800812c <std>:
 800812c:	2300      	movs	r3, #0
 800812e:	b510      	push	{r4, lr}
 8008130:	4604      	mov	r4, r0
 8008132:	e9c0 3300 	strd	r3, r3, [r0]
 8008136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800813a:	6083      	str	r3, [r0, #8]
 800813c:	8181      	strh	r1, [r0, #12]
 800813e:	6643      	str	r3, [r0, #100]	; 0x64
 8008140:	81c2      	strh	r2, [r0, #14]
 8008142:	6183      	str	r3, [r0, #24]
 8008144:	4619      	mov	r1, r3
 8008146:	2208      	movs	r2, #8
 8008148:	305c      	adds	r0, #92	; 0x5c
 800814a:	f7ff f833 	bl	80071b4 <memset>
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <std+0x38>)
 8008150:	6263      	str	r3, [r4, #36]	; 0x24
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <std+0x3c>)
 8008154:	62a3      	str	r3, [r4, #40]	; 0x28
 8008156:	4b05      	ldr	r3, [pc, #20]	; (800816c <std+0x40>)
 8008158:	62e3      	str	r3, [r4, #44]	; 0x2c
 800815a:	4b05      	ldr	r3, [pc, #20]	; (8008170 <std+0x44>)
 800815c:	6224      	str	r4, [r4, #32]
 800815e:	6323      	str	r3, [r4, #48]	; 0x30
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	08008539 	.word	0x08008539
 8008168:	0800855b 	.word	0x0800855b
 800816c:	08008593 	.word	0x08008593
 8008170:	080085b7 	.word	0x080085b7

08008174 <_cleanup_r>:
 8008174:	4901      	ldr	r1, [pc, #4]	; (800817c <_cleanup_r+0x8>)
 8008176:	f000 b8af 	b.w	80082d8 <_fwalk_reent>
 800817a:	bf00      	nop
 800817c:	080080b5 	.word	0x080080b5

08008180 <__sfmoreglue>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	2268      	movs	r2, #104	; 0x68
 8008184:	1e4d      	subs	r5, r1, #1
 8008186:	4355      	muls	r5, r2
 8008188:	460e      	mov	r6, r1
 800818a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800818e:	f7ff f975 	bl	800747c <_malloc_r>
 8008192:	4604      	mov	r4, r0
 8008194:	b140      	cbz	r0, 80081a8 <__sfmoreglue+0x28>
 8008196:	2100      	movs	r1, #0
 8008198:	e9c0 1600 	strd	r1, r6, [r0]
 800819c:	300c      	adds	r0, #12
 800819e:	60a0      	str	r0, [r4, #8]
 80081a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081a4:	f7ff f806 	bl	80071b4 <memset>
 80081a8:	4620      	mov	r0, r4
 80081aa:	bd70      	pop	{r4, r5, r6, pc}

080081ac <__sfp_lock_acquire>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__sfp_lock_acquire+0x8>)
 80081ae:	f000 b8b3 	b.w	8008318 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	20000d51 	.word	0x20000d51

080081b8 <__sfp_lock_release>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__sfp_lock_release+0x8>)
 80081ba:	f000 b8ae 	b.w	800831a <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	20000d51 	.word	0x20000d51

080081c4 <__sinit_lock_acquire>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__sinit_lock_acquire+0x8>)
 80081c6:	f000 b8a7 	b.w	8008318 <__retarget_lock_acquire_recursive>
 80081ca:	bf00      	nop
 80081cc:	20000d52 	.word	0x20000d52

080081d0 <__sinit_lock_release>:
 80081d0:	4801      	ldr	r0, [pc, #4]	; (80081d8 <__sinit_lock_release+0x8>)
 80081d2:	f000 b8a2 	b.w	800831a <__retarget_lock_release_recursive>
 80081d6:	bf00      	nop
 80081d8:	20000d52 	.word	0x20000d52

080081dc <__sinit>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	f7ff fff0 	bl	80081c4 <__sinit_lock_acquire>
 80081e4:	69a3      	ldr	r3, [r4, #24]
 80081e6:	b11b      	cbz	r3, 80081f0 <__sinit+0x14>
 80081e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ec:	f7ff bff0 	b.w	80081d0 <__sinit_lock_release>
 80081f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081f4:	6523      	str	r3, [r4, #80]	; 0x50
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <__sinit+0x68>)
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <__sinit+0x6c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80081fe:	42a3      	cmp	r3, r4
 8008200:	bf04      	itt	eq
 8008202:	2301      	moveq	r3, #1
 8008204:	61a3      	streq	r3, [r4, #24]
 8008206:	4620      	mov	r0, r4
 8008208:	f000 f820 	bl	800824c <__sfp>
 800820c:	6060      	str	r0, [r4, #4]
 800820e:	4620      	mov	r0, r4
 8008210:	f000 f81c 	bl	800824c <__sfp>
 8008214:	60a0      	str	r0, [r4, #8]
 8008216:	4620      	mov	r0, r4
 8008218:	f000 f818 	bl	800824c <__sfp>
 800821c:	2200      	movs	r2, #0
 800821e:	60e0      	str	r0, [r4, #12]
 8008220:	2104      	movs	r1, #4
 8008222:	6860      	ldr	r0, [r4, #4]
 8008224:	f7ff ff82 	bl	800812c <std>
 8008228:	68a0      	ldr	r0, [r4, #8]
 800822a:	2201      	movs	r2, #1
 800822c:	2109      	movs	r1, #9
 800822e:	f7ff ff7d 	bl	800812c <std>
 8008232:	68e0      	ldr	r0, [r4, #12]
 8008234:	2202      	movs	r2, #2
 8008236:	2112      	movs	r1, #18
 8008238:	f7ff ff78 	bl	800812c <std>
 800823c:	2301      	movs	r3, #1
 800823e:	61a3      	str	r3, [r4, #24]
 8008240:	e7d2      	b.n	80081e8 <__sinit+0xc>
 8008242:	bf00      	nop
 8008244:	0800890c 	.word	0x0800890c
 8008248:	08008175 	.word	0x08008175

0800824c <__sfp>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	4607      	mov	r7, r0
 8008250:	f7ff ffac 	bl	80081ac <__sfp_lock_acquire>
 8008254:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <__sfp+0x84>)
 8008256:	681e      	ldr	r6, [r3, #0]
 8008258:	69b3      	ldr	r3, [r6, #24]
 800825a:	b913      	cbnz	r3, 8008262 <__sfp+0x16>
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff ffbd 	bl	80081dc <__sinit>
 8008262:	3648      	adds	r6, #72	; 0x48
 8008264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008268:	3b01      	subs	r3, #1
 800826a:	d503      	bpl.n	8008274 <__sfp+0x28>
 800826c:	6833      	ldr	r3, [r6, #0]
 800826e:	b30b      	cbz	r3, 80082b4 <__sfp+0x68>
 8008270:	6836      	ldr	r6, [r6, #0]
 8008272:	e7f7      	b.n	8008264 <__sfp+0x18>
 8008274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008278:	b9d5      	cbnz	r5, 80082b0 <__sfp+0x64>
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <__sfp+0x88>)
 800827c:	60e3      	str	r3, [r4, #12]
 800827e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008282:	6665      	str	r5, [r4, #100]	; 0x64
 8008284:	f000 f847 	bl	8008316 <__retarget_lock_init_recursive>
 8008288:	f7ff ff96 	bl	80081b8 <__sfp_lock_release>
 800828c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008290:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008294:	6025      	str	r5, [r4, #0]
 8008296:	61a5      	str	r5, [r4, #24]
 8008298:	2208      	movs	r2, #8
 800829a:	4629      	mov	r1, r5
 800829c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082a0:	f7fe ff88 	bl	80071b4 <memset>
 80082a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082ac:	4620      	mov	r0, r4
 80082ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b0:	3468      	adds	r4, #104	; 0x68
 80082b2:	e7d9      	b.n	8008268 <__sfp+0x1c>
 80082b4:	2104      	movs	r1, #4
 80082b6:	4638      	mov	r0, r7
 80082b8:	f7ff ff62 	bl	8008180 <__sfmoreglue>
 80082bc:	4604      	mov	r4, r0
 80082be:	6030      	str	r0, [r6, #0]
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1d5      	bne.n	8008270 <__sfp+0x24>
 80082c4:	f7ff ff78 	bl	80081b8 <__sfp_lock_release>
 80082c8:	230c      	movs	r3, #12
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	e7ee      	b.n	80082ac <__sfp+0x60>
 80082ce:	bf00      	nop
 80082d0:	0800890c 	.word	0x0800890c
 80082d4:	ffff0001 	.word	0xffff0001

080082d8 <_fwalk_reent>:
 80082d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082dc:	4606      	mov	r6, r0
 80082de:	4688      	mov	r8, r1
 80082e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082e4:	2700      	movs	r7, #0
 80082e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082ea:	f1b9 0901 	subs.w	r9, r9, #1
 80082ee:	d505      	bpl.n	80082fc <_fwalk_reent+0x24>
 80082f0:	6824      	ldr	r4, [r4, #0]
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	d1f7      	bne.n	80082e6 <_fwalk_reent+0xe>
 80082f6:	4638      	mov	r0, r7
 80082f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fc:	89ab      	ldrh	r3, [r5, #12]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d907      	bls.n	8008312 <_fwalk_reent+0x3a>
 8008302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008306:	3301      	adds	r3, #1
 8008308:	d003      	beq.n	8008312 <_fwalk_reent+0x3a>
 800830a:	4629      	mov	r1, r5
 800830c:	4630      	mov	r0, r6
 800830e:	47c0      	blx	r8
 8008310:	4307      	orrs	r7, r0
 8008312:	3568      	adds	r5, #104	; 0x68
 8008314:	e7e9      	b.n	80082ea <_fwalk_reent+0x12>

08008316 <__retarget_lock_init_recursive>:
 8008316:	4770      	bx	lr

08008318 <__retarget_lock_acquire_recursive>:
 8008318:	4770      	bx	lr

0800831a <__retarget_lock_release_recursive>:
 800831a:	4770      	bx	lr

0800831c <__swhatbuf_r>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	460e      	mov	r6, r1
 8008320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008324:	2900      	cmp	r1, #0
 8008326:	b096      	sub	sp, #88	; 0x58
 8008328:	4614      	mov	r4, r2
 800832a:	461d      	mov	r5, r3
 800832c:	da08      	bge.n	8008340 <__swhatbuf_r+0x24>
 800832e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	061a      	lsls	r2, r3, #24
 8008338:	d410      	bmi.n	800835c <__swhatbuf_r+0x40>
 800833a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833e:	e00e      	b.n	800835e <__swhatbuf_r+0x42>
 8008340:	466a      	mov	r2, sp
 8008342:	f000 f95f 	bl	8008604 <_fstat_r>
 8008346:	2800      	cmp	r0, #0
 8008348:	dbf1      	blt.n	800832e <__swhatbuf_r+0x12>
 800834a:	9a01      	ldr	r2, [sp, #4]
 800834c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008354:	425a      	negs	r2, r3
 8008356:	415a      	adcs	r2, r3
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	e7ee      	b.n	800833a <__swhatbuf_r+0x1e>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	2000      	movs	r0, #0
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	b016      	add	sp, #88	; 0x58
 8008364:	bd70      	pop	{r4, r5, r6, pc}
	...

08008368 <__smakebuf_r>:
 8008368:	898b      	ldrh	r3, [r1, #12]
 800836a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800836c:	079d      	lsls	r5, r3, #30
 800836e:	4606      	mov	r6, r0
 8008370:	460c      	mov	r4, r1
 8008372:	d507      	bpl.n	8008384 <__smakebuf_r+0x1c>
 8008374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	2301      	movs	r3, #1
 800837e:	6163      	str	r3, [r4, #20]
 8008380:	b002      	add	sp, #8
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	ab01      	add	r3, sp, #4
 8008386:	466a      	mov	r2, sp
 8008388:	f7ff ffc8 	bl	800831c <__swhatbuf_r>
 800838c:	9900      	ldr	r1, [sp, #0]
 800838e:	4605      	mov	r5, r0
 8008390:	4630      	mov	r0, r6
 8008392:	f7ff f873 	bl	800747c <_malloc_r>
 8008396:	b948      	cbnz	r0, 80083ac <__smakebuf_r+0x44>
 8008398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800839c:	059a      	lsls	r2, r3, #22
 800839e:	d4ef      	bmi.n	8008380 <__smakebuf_r+0x18>
 80083a0:	f023 0303 	bic.w	r3, r3, #3
 80083a4:	f043 0302 	orr.w	r3, r3, #2
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	e7e3      	b.n	8008374 <__smakebuf_r+0xc>
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <__smakebuf_r+0x7c>)
 80083ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	6020      	str	r0, [r4, #0]
 80083b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	6163      	str	r3, [r4, #20]
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	6120      	str	r0, [r4, #16]
 80083c2:	b15b      	cbz	r3, 80083dc <__smakebuf_r+0x74>
 80083c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 f92d 	bl	8008628 <_isatty_r>
 80083ce:	b128      	cbz	r0, 80083dc <__smakebuf_r+0x74>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	f023 0303 	bic.w	r3, r3, #3
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	89a0      	ldrh	r0, [r4, #12]
 80083de:	4305      	orrs	r5, r0
 80083e0:	81a5      	strh	r5, [r4, #12]
 80083e2:	e7cd      	b.n	8008380 <__smakebuf_r+0x18>
 80083e4:	08008175 	.word	0x08008175

080083e8 <memcpy>:
 80083e8:	440a      	add	r2, r1
 80083ea:	4291      	cmp	r1, r2
 80083ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80083f0:	d100      	bne.n	80083f4 <memcpy+0xc>
 80083f2:	4770      	bx	lr
 80083f4:	b510      	push	{r4, lr}
 80083f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083fe:	4291      	cmp	r1, r2
 8008400:	d1f9      	bne.n	80083f6 <memcpy+0xe>
 8008402:	bd10      	pop	{r4, pc}

08008404 <memmove>:
 8008404:	4288      	cmp	r0, r1
 8008406:	b510      	push	{r4, lr}
 8008408:	eb01 0402 	add.w	r4, r1, r2
 800840c:	d902      	bls.n	8008414 <memmove+0x10>
 800840e:	4284      	cmp	r4, r0
 8008410:	4623      	mov	r3, r4
 8008412:	d807      	bhi.n	8008424 <memmove+0x20>
 8008414:	1e43      	subs	r3, r0, #1
 8008416:	42a1      	cmp	r1, r4
 8008418:	d008      	beq.n	800842c <memmove+0x28>
 800841a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800841e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008422:	e7f8      	b.n	8008416 <memmove+0x12>
 8008424:	4402      	add	r2, r0
 8008426:	4601      	mov	r1, r0
 8008428:	428a      	cmp	r2, r1
 800842a:	d100      	bne.n	800842e <memmove+0x2a>
 800842c:	bd10      	pop	{r4, pc}
 800842e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008436:	e7f7      	b.n	8008428 <memmove+0x24>

08008438 <__malloc_lock>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__malloc_lock+0x8>)
 800843a:	f7ff bf6d 	b.w	8008318 <__retarget_lock_acquire_recursive>
 800843e:	bf00      	nop
 8008440:	20000d50 	.word	0x20000d50

08008444 <__malloc_unlock>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__malloc_unlock+0x8>)
 8008446:	f7ff bf68 	b.w	800831a <__retarget_lock_release_recursive>
 800844a:	bf00      	nop
 800844c:	20000d50 	.word	0x20000d50

08008450 <_realloc_r>:
 8008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008454:	4680      	mov	r8, r0
 8008456:	4614      	mov	r4, r2
 8008458:	460e      	mov	r6, r1
 800845a:	b921      	cbnz	r1, 8008466 <_realloc_r+0x16>
 800845c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008460:	4611      	mov	r1, r2
 8008462:	f7ff b80b 	b.w	800747c <_malloc_r>
 8008466:	b92a      	cbnz	r2, 8008474 <_realloc_r+0x24>
 8008468:	f7fe ff9c 	bl	80073a4 <_free_r>
 800846c:	4625      	mov	r5, r4
 800846e:	4628      	mov	r0, r5
 8008470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008474:	f000 f8fa 	bl	800866c <_malloc_usable_size_r>
 8008478:	4284      	cmp	r4, r0
 800847a:	4607      	mov	r7, r0
 800847c:	d802      	bhi.n	8008484 <_realloc_r+0x34>
 800847e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008482:	d812      	bhi.n	80084aa <_realloc_r+0x5a>
 8008484:	4621      	mov	r1, r4
 8008486:	4640      	mov	r0, r8
 8008488:	f7fe fff8 	bl	800747c <_malloc_r>
 800848c:	4605      	mov	r5, r0
 800848e:	2800      	cmp	r0, #0
 8008490:	d0ed      	beq.n	800846e <_realloc_r+0x1e>
 8008492:	42bc      	cmp	r4, r7
 8008494:	4622      	mov	r2, r4
 8008496:	4631      	mov	r1, r6
 8008498:	bf28      	it	cs
 800849a:	463a      	movcs	r2, r7
 800849c:	f7ff ffa4 	bl	80083e8 <memcpy>
 80084a0:	4631      	mov	r1, r6
 80084a2:	4640      	mov	r0, r8
 80084a4:	f7fe ff7e 	bl	80073a4 <_free_r>
 80084a8:	e7e1      	b.n	800846e <_realloc_r+0x1e>
 80084aa:	4635      	mov	r5, r6
 80084ac:	e7df      	b.n	800846e <_realloc_r+0x1e>

080084ae <_raise_r>:
 80084ae:	291f      	cmp	r1, #31
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4604      	mov	r4, r0
 80084b4:	460d      	mov	r5, r1
 80084b6:	d904      	bls.n	80084c2 <_raise_r+0x14>
 80084b8:	2316      	movs	r3, #22
 80084ba:	6003      	str	r3, [r0, #0]
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	bd38      	pop	{r3, r4, r5, pc}
 80084c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084c4:	b112      	cbz	r2, 80084cc <_raise_r+0x1e>
 80084c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084ca:	b94b      	cbnz	r3, 80084e0 <_raise_r+0x32>
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 f831 	bl	8008534 <_getpid_r>
 80084d2:	462a      	mov	r2, r5
 80084d4:	4601      	mov	r1, r0
 80084d6:	4620      	mov	r0, r4
 80084d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084dc:	f000 b818 	b.w	8008510 <_kill_r>
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d00a      	beq.n	80084fa <_raise_r+0x4c>
 80084e4:	1c59      	adds	r1, r3, #1
 80084e6:	d103      	bne.n	80084f0 <_raise_r+0x42>
 80084e8:	2316      	movs	r3, #22
 80084ea:	6003      	str	r3, [r0, #0]
 80084ec:	2001      	movs	r0, #1
 80084ee:	e7e7      	b.n	80084c0 <_raise_r+0x12>
 80084f0:	2400      	movs	r4, #0
 80084f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084f6:	4628      	mov	r0, r5
 80084f8:	4798      	blx	r3
 80084fa:	2000      	movs	r0, #0
 80084fc:	e7e0      	b.n	80084c0 <_raise_r+0x12>
	...

08008500 <raise>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <raise+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f7ff bfd2 	b.w	80084ae <_raise_r>
 800850a:	bf00      	nop
 800850c:	20000074 	.word	0x20000074

08008510 <_kill_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d07      	ldr	r5, [pc, #28]	; (8008530 <_kill_r+0x20>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	f7fa fc65 	bl	8002dec <_kill>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d102      	bne.n	800852c <_kill_r+0x1c>
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b103      	cbz	r3, 800852c <_kill_r+0x1c>
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	20000d4c 	.word	0x20000d4c

08008534 <_getpid_r>:
 8008534:	f7fa bc52 	b.w	8002ddc <_getpid>

08008538 <__sread>:
 8008538:	b510      	push	{r4, lr}
 800853a:	460c      	mov	r4, r1
 800853c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008540:	f000 f89c 	bl	800867c <_read_r>
 8008544:	2800      	cmp	r0, #0
 8008546:	bfab      	itete	ge
 8008548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800854a:	89a3      	ldrhlt	r3, [r4, #12]
 800854c:	181b      	addge	r3, r3, r0
 800854e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008552:	bfac      	ite	ge
 8008554:	6563      	strge	r3, [r4, #84]	; 0x54
 8008556:	81a3      	strhlt	r3, [r4, #12]
 8008558:	bd10      	pop	{r4, pc}

0800855a <__swrite>:
 800855a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855e:	461f      	mov	r7, r3
 8008560:	898b      	ldrh	r3, [r1, #12]
 8008562:	05db      	lsls	r3, r3, #23
 8008564:	4605      	mov	r5, r0
 8008566:	460c      	mov	r4, r1
 8008568:	4616      	mov	r6, r2
 800856a:	d505      	bpl.n	8008578 <__swrite+0x1e>
 800856c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008570:	2302      	movs	r3, #2
 8008572:	2200      	movs	r2, #0
 8008574:	f000 f868 	bl	8008648 <_lseek_r>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800857e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	4632      	mov	r2, r6
 8008586:	463b      	mov	r3, r7
 8008588:	4628      	mov	r0, r5
 800858a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800858e:	f000 b817 	b.w	80085c0 <_write_r>

08008592 <__sseek>:
 8008592:	b510      	push	{r4, lr}
 8008594:	460c      	mov	r4, r1
 8008596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859a:	f000 f855 	bl	8008648 <_lseek_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	bf15      	itete	ne
 80085a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ae:	81a3      	strheq	r3, [r4, #12]
 80085b0:	bf18      	it	ne
 80085b2:	81a3      	strhne	r3, [r4, #12]
 80085b4:	bd10      	pop	{r4, pc}

080085b6 <__sclose>:
 80085b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ba:	f000 b813 	b.w	80085e4 <_close_r>
	...

080085c0 <_write_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	4d07      	ldr	r5, [pc, #28]	; (80085e0 <_write_r+0x20>)
 80085c4:	4604      	mov	r4, r0
 80085c6:	4608      	mov	r0, r1
 80085c8:	4611      	mov	r1, r2
 80085ca:	2200      	movs	r2, #0
 80085cc:	602a      	str	r2, [r5, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	f7fa fc43 	bl	8002e5a <_write>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d102      	bne.n	80085de <_write_r+0x1e>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	b103      	cbz	r3, 80085de <_write_r+0x1e>
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	20000d4c 	.word	0x20000d4c

080085e4 <_close_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4d06      	ldr	r5, [pc, #24]	; (8008600 <_close_r+0x1c>)
 80085e8:	2300      	movs	r3, #0
 80085ea:	4604      	mov	r4, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	602b      	str	r3, [r5, #0]
 80085f0:	f7fa fc4f 	bl	8002e92 <_close>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_close_r+0x1a>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_close_r+0x1a>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20000d4c 	.word	0x20000d4c

08008604 <_fstat_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d07      	ldr	r5, [pc, #28]	; (8008624 <_fstat_r+0x20>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	f7fa fc4a 	bl	8002eaa <_fstat>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d102      	bne.n	8008620 <_fstat_r+0x1c>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b103      	cbz	r3, 8008620 <_fstat_r+0x1c>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	bf00      	nop
 8008624:	20000d4c 	.word	0x20000d4c

08008628 <_isatty_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d06      	ldr	r5, [pc, #24]	; (8008644 <_isatty_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7fa fc49 	bl	8002eca <_isatty>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_isatty_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_isatty_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20000d4c 	.word	0x20000d4c

08008648 <_lseek_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d07      	ldr	r5, [pc, #28]	; (8008668 <_lseek_r+0x20>)
 800864c:	4604      	mov	r4, r0
 800864e:	4608      	mov	r0, r1
 8008650:	4611      	mov	r1, r2
 8008652:	2200      	movs	r2, #0
 8008654:	602a      	str	r2, [r5, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	f7fa fc42 	bl	8002ee0 <_lseek>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_lseek_r+0x1e>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_lseek_r+0x1e>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20000d4c 	.word	0x20000d4c

0800866c <_malloc_usable_size_r>:
 800866c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008670:	1f18      	subs	r0, r3, #4
 8008672:	2b00      	cmp	r3, #0
 8008674:	bfbc      	itt	lt
 8008676:	580b      	ldrlt	r3, [r1, r0]
 8008678:	18c0      	addlt	r0, r0, r3
 800867a:	4770      	bx	lr

0800867c <_read_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	; (800869c <_read_r+0x20>)
 8008680:	4604      	mov	r4, r0
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	2200      	movs	r2, #0
 8008688:	602a      	str	r2, [r5, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f7fa fbc8 	bl	8002e20 <_read>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_read_r+0x1e>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_read_r+0x1e>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20000d4c 	.word	0x20000d4c

080086a0 <_gettimeofday>:
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <_gettimeofday+0xc>)
 80086a2:	2258      	movs	r2, #88	; 0x58
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	4770      	bx	lr
 80086ac:	20000d4c 	.word	0x20000d4c

080086b0 <_init>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	bf00      	nop
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr

080086bc <_fini>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	bf00      	nop
 80086c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c2:	bc08      	pop	{r3}
 80086c4:	469e      	mov	lr, r3
 80086c6:	4770      	bx	lr
