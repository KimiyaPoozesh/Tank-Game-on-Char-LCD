
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099dc  080099dc  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  080099dc  080099dc  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099dc  080099dc  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099dc  080099dc  000199dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080099e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f0  2**0
                  CONTENTS
 10 .bss          00000cc0  200000f0  200000f0  000200f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000db0  20000db0  000200f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3a6  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c0  00000000  00000000  0003c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0003f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001670  00000000  00000000  00041100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002141a  00000000  00000000  00042770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d662  00000000  00000000  00063b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c11  00000000  00000000  000811ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146dfd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fac  00000000  00000000  00146e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014ddfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0014de20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800962c 	.word	0x0800962c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	0800962c 	.word	0x0800962c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <playTankHitSound>:
uint16_t durations[] = {
    500, 500, 1000, 500, 500, 1000, 500, 500, 1000, 500, 500, 1000,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500
};

void playTankHitSound() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    PWM_Change_Tone(IMPACT_FREQ, 100);
 8000284:	2164      	movs	r1, #100	; 0x64
 8000286:	f44f 7048 	mov.w	r0, #800	; 0x320
 800028a:	f002 f88b 	bl	80023a4 <PWM_Change_Tone>
    HAL_Delay(IMPACT_DURATION);
 800028e:	2032      	movs	r0, #50	; 0x32
 8000290:	f003 f960 	bl	8003554 <HAL_Delay>
    PWM_Change_Tone(VIBRATION_FREQ, 100);
 8000294:	2164      	movs	r1, #100	; 0x64
 8000296:	20c8      	movs	r0, #200	; 0xc8
 8000298:	f002 f884 	bl	80023a4 <PWM_Change_Tone>
    HAL_Delay(VIBRATION_DURATION);
 800029c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80002a0:	f003 f958 	bl	8003554 <HAL_Delay>
    PWM_Change_Tone(0, 0);
 80002a4:	2100      	movs	r1, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	f002 f87c 	bl	80023a4 <PWM_Change_Tone>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <playExplosionSound>:
    }
}



void playExplosionSound() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < DURATION / 10; i++) {
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e011      	b.n	80002e0 <playExplosionSound+0x30>
        PWM_Change_Tone(HIGH_FREQ, 100);
 80002bc:	2164      	movs	r1, #100	; 0x64
 80002be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002c2:	f002 f86f 	bl	80023a4 <PWM_Change_Tone>
        HAL_Delay(5);
 80002c6:	2005      	movs	r0, #5
 80002c8:	f003 f944 	bl	8003554 <HAL_Delay>
        PWM_Change_Tone(LOW_FREQ, 100);
 80002cc:	2164      	movs	r1, #100	; 0x64
 80002ce:	2032      	movs	r0, #50	; 0x32
 80002d0:	f002 f868 	bl	80023a4 <PWM_Change_Tone>
        HAL_Delay(5);
 80002d4:	2005      	movs	r0, #5
 80002d6:	f003 f93d 	bl	8003554 <HAL_Delay>
    for (int i = 0; i < DURATION / 10; i++) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b09      	cmp	r3, #9
 80002e4:	ddea      	ble.n	80002bc <playExplosionSound+0xc>
    }
    PWM_Change_Tone(0, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	2000      	movs	r0, #0
 80002ea:	f002 f85b 	bl	80023a4 <PWM_Change_Tone>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08e      	sub	sp, #56	; 0x38
 80002fc:	af0a      	add	r7, sp, #40	; 0x28
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	4608      	mov	r0, r1
 8000302:	4611      	mov	r1, r2
 8000304:	461a      	mov	r2, r3
 8000306:	4603      	mov	r3, r0
 8000308:	817b      	strh	r3, [r7, #10]
 800030a:	460b      	mov	r3, r1
 800030c:	813b      	strh	r3, [r7, #8]
 800030e:	4613      	mov	r3, r2
 8000310:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000312:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <LiquidCrystal+0x90>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d019      	beq.n	800034e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800031a:	8939      	ldrh	r1, [r7, #8]
 800031c:	897a      	ldrh	r2, [r7, #10]
 800031e:	2300      	movs	r3, #0
 8000320:	9308      	str	r3, [sp, #32]
 8000322:	2300      	movs	r3, #0
 8000324:	9307      	str	r3, [sp, #28]
 8000326:	2300      	movs	r3, #0
 8000328:	9306      	str	r3, [sp, #24]
 800032a:	2300      	movs	r3, #0
 800032c:	9305      	str	r3, [sp, #20]
 800032e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000330:	9304      	str	r3, [sp, #16]
 8000332:	8c3b      	ldrh	r3, [r7, #32]
 8000334:	9303      	str	r3, [sp, #12]
 8000336:	8bbb      	ldrh	r3, [r7, #28]
 8000338:	9302      	str	r3, [sp, #8]
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	460b      	mov	r3, r1
 8000344:	68f9      	ldr	r1, [r7, #12]
 8000346:	2001      	movs	r0, #1
 8000348:	f000 f820 	bl	800038c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800034c:	e018      	b.n	8000380 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800034e:	8939      	ldrh	r1, [r7, #8]
 8000350:	897a      	ldrh	r2, [r7, #10]
 8000352:	2300      	movs	r3, #0
 8000354:	9308      	str	r3, [sp, #32]
 8000356:	2300      	movs	r3, #0
 8000358:	9307      	str	r3, [sp, #28]
 800035a:	2300      	movs	r3, #0
 800035c:	9306      	str	r3, [sp, #24]
 800035e:	2300      	movs	r3, #0
 8000360:	9305      	str	r3, [sp, #20]
 8000362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000364:	9304      	str	r3, [sp, #16]
 8000366:	8c3b      	ldrh	r3, [r7, #32]
 8000368:	9303      	str	r3, [sp, #12]
 800036a:	8bbb      	ldrh	r3, [r7, #28]
 800036c:	9302      	str	r3, [sp, #8]
 800036e:	8b3b      	ldrh	r3, [r7, #24]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	460b      	mov	r3, r1
 8000378:	68f9      	ldr	r1, [r7, #12]
 800037a:	2000      	movs	r0, #0
 800037c:	f000 f806 	bl	800038c <init>
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000000 	.word	0x20000000

0800038c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	60b9      	str	r1, [r7, #8]
 8000394:	4611      	mov	r1, r2
 8000396:	461a      	mov	r2, r3
 8000398:	4603      	mov	r3, r0
 800039a:	73fb      	strb	r3, [r7, #15]
 800039c:	460b      	mov	r3, r1
 800039e:	81bb      	strh	r3, [r7, #12]
 80003a0:	4613      	mov	r3, r2
 80003a2:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <init+0x84>)
 80003a6:	89bb      	ldrh	r3, [r7, #12]
 80003a8:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 80003aa:	4a1a      	ldr	r2, [pc, #104]	; (8000414 <init+0x88>)
 80003ac:	88fb      	ldrh	r3, [r7, #6]
 80003ae:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 80003b0:	4a19      	ldr	r2, [pc, #100]	; (8000418 <init+0x8c>)
 80003b2:	8b3b      	ldrh	r3, [r7, #24]
 80003b4:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 80003b6:	4a19      	ldr	r2, [pc, #100]	; (800041c <init+0x90>)
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <init+0x94>)
 80003be:	8bbb      	ldrh	r3, [r7, #28]
 80003c0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80003c2:	4a17      	ldr	r2, [pc, #92]	; (8000420 <init+0x94>)
 80003c4:	8c3b      	ldrh	r3, [r7, #32]
 80003c6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80003c8:	4a15      	ldr	r2, [pc, #84]	; (8000420 <init+0x94>)
 80003ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003cc:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 80003ce:	4a14      	ldr	r2, [pc, #80]	; (8000420 <init+0x94>)
 80003d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80003d2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80003d4:	4a12      	ldr	r2, [pc, #72]	; (8000420 <init+0x94>)
 80003d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80003d8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80003da:	4a11      	ldr	r2, [pc, #68]	; (8000420 <init+0x94>)
 80003dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80003de:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80003e0:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <init+0x94>)
 80003e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80003e4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <init+0x94>)
 80003e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80003ea:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <init+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e002      	b.n	8000400 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <init+0x98>)
 80003fc:	2210      	movs	r2, #16
 80003fe:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000400:	2102      	movs	r1, #2
 8000402:	2010      	movs	r0, #16
 8000404:	f000 f810 	bl	8000428 <begin>
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000010e 	.word	0x2000010e
 8000414:	20000110 	.word	0x20000110
 8000418:	20000112 	.word	0x20000112
 800041c:	20000124 	.word	0x20000124
 8000420:	20000114 	.word	0x20000114
 8000424:	20000128 	.word	0x20000128

08000428 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d906      	bls.n	800044c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800043e:	4b77      	ldr	r3, [pc, #476]	; (800061c <begin+0x1f4>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b74      	ldr	r3, [pc, #464]	; (800061c <begin+0x1f4>)
 800044a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800044c:	4a74      	ldr	r2, [pc, #464]	; (8000620 <begin+0x1f8>)
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000452:	79fa      	ldrb	r2, [r7, #7]
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	3340      	adds	r3, #64	; 0x40
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f988 	bl	8000770 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000460:	4b70      	ldr	r3, [pc, #448]	; (8000624 <begin+0x1fc>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d009      	beq.n	800047c <begin+0x54>
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d106      	bne.n	800047c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800046e:	4b6b      	ldr	r3, [pc, #428]	; (800061c <begin+0x1f4>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b68      	ldr	r3, [pc, #416]	; (800061c <begin+0x1f4>)
 800047a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800047c:	f000 f8e4 	bl	8000648 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000488:	4b67      	ldr	r3, [pc, #412]	; (8000628 <begin+0x200>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d01b      	beq.n	80004c8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000490:	4b66      	ldr	r3, [pc, #408]	; (800062c <begin+0x204>)
 8000492:	881a      	ldrh	r2, [r3, #0]
 8000494:	4b66      	ldr	r3, [pc, #408]	; (8000630 <begin+0x208>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b65      	ldr	r3, [pc, #404]	; (8000634 <begin+0x20c>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b64      	ldr	r3, [pc, #400]	; (8000638 <begin+0x210>)
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b62      	ldr	r3, [pc, #392]	; (8000638 <begin+0x210>)
 80004ae:	885b      	ldrh	r3, [r3, #2]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b60      	ldr	r3, [pc, #384]	; (8000638 <begin+0x210>)
 80004b6:	889b      	ldrh	r3, [r3, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b5e      	ldr	r3, [pc, #376]	; (8000638 <begin+0x210>)
 80004be:	88db      	ldrh	r3, [r3, #6]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	e02a      	b.n	800051e <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004c8:	4b58      	ldr	r3, [pc, #352]	; (800062c <begin+0x204>)
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	4b58      	ldr	r3, [pc, #352]	; (8000630 <begin+0x208>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b57      	ldr	r3, [pc, #348]	; (8000634 <begin+0x20c>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	4313      	orrs	r3, r2
 80004da:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004dc:	4b56      	ldr	r3, [pc, #344]	; (8000638 <begin+0x210>)
 80004de:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004e4:	4b54      	ldr	r3, [pc, #336]	; (8000638 <begin+0x210>)
 80004e6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004ec:	4b52      	ldr	r3, [pc, #328]	; (8000638 <begin+0x210>)
 80004ee:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004f4:	4b50      	ldr	r3, [pc, #320]	; (8000638 <begin+0x210>)
 80004f6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b4e      	ldr	r3, [pc, #312]	; (8000638 <begin+0x210>)
 80004fe:	891b      	ldrh	r3, [r3, #8]
 8000500:	4313      	orrs	r3, r2
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b4c      	ldr	r3, [pc, #304]	; (8000638 <begin+0x210>)
 8000506:	895b      	ldrh	r3, [r3, #10]
 8000508:	4313      	orrs	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b4a      	ldr	r3, [pc, #296]	; (8000638 <begin+0x210>)
 800050e:	899b      	ldrh	r3, [r3, #12]
 8000510:	4313      	orrs	r3, r2
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b48      	ldr	r3, [pc, #288]	; (8000638 <begin+0x210>)
 8000516:	89db      	ldrh	r3, [r3, #14]
 8000518:	4313      	orrs	r3, r2
 800051a:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800051c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 800051e:	4b47      	ldr	r3, [pc, #284]	; (800063c <begin+0x214>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f107 020c 	add.w	r2, r7, #12
 8000526:	4611      	mov	r1, r2
 8000528:	4618      	mov	r0, r3
 800052a:	f003 f9bf 	bl	80038ac <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 800052e:	2032      	movs	r0, #50	; 0x32
 8000530:	f003 f810 	bl	8003554 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000534:	4b41      	ldr	r3, [pc, #260]	; (800063c <begin+0x214>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a3c      	ldr	r2, [pc, #240]	; (800062c <begin+0x204>)
 800053a:	8811      	ldrh	r1, [r2, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fb46 	bl	8003bd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000544:	4b3d      	ldr	r3, [pc, #244]	; (800063c <begin+0x214>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a3a      	ldr	r2, [pc, #232]	; (8000634 <begin+0x20c>)
 800054a:	8811      	ldrh	r1, [r2, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fb3e 	bl	8003bd0 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000554:	4b36      	ldr	r3, [pc, #216]	; (8000630 <begin+0x208>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2bff      	cmp	r3, #255	; 0xff
 800055a:	d007      	beq.n	800056c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <begin+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a33      	ldr	r2, [pc, #204]	; (8000630 <begin+0x208>)
 8000562:	8811      	ldrh	r1, [r2, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fb32 	bl	8003bd0 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <begin+0x1f4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f003 0310 	and.w	r3, r3, #16
 8000574:	2b00      	cmp	r3, #0
 8000576:	d115      	bne.n	80005a4 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 fa45 	bl	8000a08 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800057e:	2005      	movs	r0, #5
 8000580:	f002 ffe8 	bl	8003554 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 fa3f 	bl	8000a08 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800058a:	2005      	movs	r0, #5
 800058c:	f002 ffe2 	bl	8003554 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 fa39 	bl	8000a08 <write4bits>
    HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f002 ffdc 	bl	8003554 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 800059c:	2002      	movs	r0, #2
 800059e:	f000 fa33 	bl	8000a08 <write4bits>
 80005a2:	e01d      	b.n	80005e0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <begin+0x1f4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9a4 	bl	80008fc <command>
    HAL_Delay(5);  // wait more than 4.1ms
 80005b4:	2005      	movs	r0, #5
 80005b6:	f002 ffcd 	bl	8003554 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <begin+0x1f4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f999 	bl	80008fc <command>
    HAL_Delay(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f002 ffc2 	bl	8003554 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <begin+0x1f4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f98e 	bl	80008fc <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <begin+0x1f4>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f986 	bl	80008fc <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <begin+0x218>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	701a      	strb	r2, [r3, #0]
  display();
 80005f6:	f000 f917 	bl	8000828 <display>

  // clear it off
  clear();
 80005fa:	f000 f8d9 	bl	80007b0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <begin+0x21c>)
 8000600:	2202      	movs	r2, #2
 8000602:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <begin+0x21c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f974 	bl	80008fc <command>

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000128 	.word	0x20000128
 8000620:	2000012b 	.word	0x2000012b
 8000624:	2000010c 	.word	0x2000010c
 8000628:	20000000 	.word	0x20000000
 800062c:	2000010e 	.word	0x2000010e
 8000630:	20000110 	.word	0x20000110
 8000634:	20000112 	.word	0x20000112
 8000638:	20000114 	.word	0x20000114
 800063c:	20000124 	.word	0x20000124
 8000640:	20000129 	.word	0x20000129
 8000644:	2000012a 	.word	0x2000012a

08000648 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <enableClock+0x10c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000656:	d10c      	bne.n	8000672 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <enableClock+0x110>)
 800065e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <enableClock+0x110>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066c:	61fb      	str	r3, [r7, #28]
 800066e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000670:	e06a      	b.n	8000748 <enableClock+0x100>
  else if(_port == GPIOB)
 8000672:	4b38      	ldr	r3, [pc, #224]	; (8000754 <enableClock+0x10c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a39      	ldr	r2, [pc, #228]	; (800075c <enableClock+0x114>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d10c      	bne.n	8000696 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a35      	ldr	r2, [pc, #212]	; (8000758 <enableClock+0x110>)
 8000682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000686:	6153      	str	r3, [r2, #20]
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <enableClock+0x110>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]
}
 8000694:	e058      	b.n	8000748 <enableClock+0x100>
  else if(_port == GPIOB)
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <enableClock+0x10c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a30      	ldr	r2, [pc, #192]	; (800075c <enableClock+0x114>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d10c      	bne.n	80006ba <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <enableClock+0x110>)
 80006a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006aa:	6153      	str	r3, [r2, #20]
 80006ac:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <enableClock+0x110>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	697b      	ldr	r3, [r7, #20]
}
 80006b8:	e046      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOC)
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <enableClock+0x10c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a28      	ldr	r2, [pc, #160]	; (8000760 <enableClock+0x118>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d10c      	bne.n	80006de <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a23      	ldr	r2, [pc, #140]	; (8000758 <enableClock+0x110>)
 80006ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <enableClock+0x110>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	693b      	ldr	r3, [r7, #16]
}
 80006dc:	e034      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOD)
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <enableClock+0x10c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <enableClock+0x11c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d10c      	bne.n	8000702 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <enableClock+0x110>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <enableClock+0x110>)
 80006ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f2:	6153      	str	r3, [r2, #20]
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <enableClock+0x110>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	e022      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOE)
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <enableClock+0x10c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <enableClock+0x120>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d10c      	bne.n	8000726 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <enableClock+0x110>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <enableClock+0x110>)
 8000712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000716:	6153      	str	r3, [r2, #20]
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <enableClock+0x110>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
}
 8000724:	e010      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOF)
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <enableClock+0x10c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <enableClock+0x124>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d10b      	bne.n	8000748 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <enableClock+0x110>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a08      	ldr	r2, [pc, #32]	; (8000758 <enableClock+0x110>)
 8000736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073a:	6153      	str	r3, [r2, #20]
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <enableClock+0x110>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	bf00      	nop
 800074a:	3724      	adds	r7, #36	; 0x24
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000124 	.word	0x20000124
 8000758:	40021000 	.word	0x40021000
 800075c:	48000400 	.word	0x48000400
 8000760:	48000800 	.word	0x48000800
 8000764:	48000c00 	.word	0x48000c00
 8000768:	48001000 	.word	0x48001000
 800076c:	48001400 	.word	0x48001400

08000770 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <setRowOffsets+0x3c>)
 8000784:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <setRowOffsets+0x3c>)
 800078c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <setRowOffsets+0x3c>)
 8000794:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <setRowOffsets+0x3c>)
 800079c:	70da      	strb	r2, [r3, #3]
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000012c 	.word	0x2000012c

080007b0 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 f8a1 	bl	80008fc <command>
  HAL_Delay(2);  // this command takes a long time!
 80007ba:	2002      	movs	r0, #2
 80007bc:	f002 feca 	bl	8003554 <HAL_Delay>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80007d4:	2304      	movs	r3, #4
 80007d6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d803      	bhi.n	80007e8 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	3b01      	subs	r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <setCursor+0x5c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d303      	bcc.n	80007fa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <setCursor+0x5c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	4a09      	ldr	r2, [pc, #36]	; (8000824 <setCursor+0x60>)
 80007fe:	5cd2      	ldrb	r2, [r2, r3]
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4413      	add	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800080c:	b25b      	sxtb	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f873 	bl	80008fc <command>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000012b 	.word	0x2000012b
 8000824:	2000012c 	.word	0x2000012c

08000828 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <display+0x28>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <display+0x28>)
 8000838:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <display+0x28>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f859 	bl	80008fc <command>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000129 	.word	0x20000129

08000854 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <print+0x12>
 8000862:	2300      	movs	r3, #0
 8000864:	e01d      	b.n	80008a2 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fcb0 	bl	80001d0 <strlen>
 8000870:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000876:	e00c      	b.n	8000892 <print+0x3e>
    if (write(*buffer++)) n++;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	617a      	str	r2, [r7, #20]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f849 	bl	8000918 <write>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d008      	beq.n	800089e <print+0x4a>
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	613a      	str	r2, [r7, #16]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1ed      	bne.n	8000878 <print+0x24>
 800089c:	e000      	b.n	80008a0 <print+0x4c>
    else break;
 800089e:	bf00      	nop
  }
  return n;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f815 	bl	80008fc <command>
  for (int i=0; i<8; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e009      	b.n	80008ec <createChar+0x42>
    write(charmap[i]);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f819 	bl	8000918 <write>
  for (int i=0; i<8; i++) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	ddf2      	ble.n	80008d8 <createChar+0x2e>
  }
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f814 	bl	8000938 <send>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <write>:

inline size_t write(uint8_t value) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2101      	movs	r1, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f806 	bl	8000938 <send>
  return 1; // assume sucess
 800092c:	2301      	movs	r3, #1
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <send+0x6c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <send+0x70>)
 800094e:	8811      	ldrh	r1, [r2, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	4618      	mov	r0, r3
 8000954:	f003 f93c 	bl	8003bd0 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <send+0x74>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	2bff      	cmp	r3, #255	; 0xff
 800095e:	d007      	beq.n	8000970 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <send+0x6c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <send+0x74>)
 8000966:	8811      	ldrh	r1, [r2, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 f930 	bl	8003bd0 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <send+0x78>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	2b00      	cmp	r3, #0
 800097a:	d004      	beq.n	8000986 <send+0x4e>
    write8bits(value);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f86c 	bl	8000a5c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000984:	e009      	b.n	800099a <send+0x62>
    write4bits(value>>4);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f000 f83b 	bl	8000a08 <write4bits>
    write4bits(value);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f837 	bl	8000a08 <write4bits>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000124 	.word	0x20000124
 80009a8:	2000010e 	.word	0x2000010e
 80009ac:	20000110 	.word	0x20000110
 80009b0:	20000128 	.word	0x20000128

080009b4 <pulseEnable>:

void pulseEnable(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <pulseEnable+0x4c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <pulseEnable+0x50>)
 80009be:	8811      	ldrh	r1, [r2, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 f904 	bl	8003bd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f002 fdc3 	bl	8003554 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <pulseEnable+0x4c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <pulseEnable+0x50>)
 80009d4:	8811      	ldrh	r1, [r2, #0]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 f8f9 	bl	8003bd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80009de:	2001      	movs	r0, #1
 80009e0:	f002 fdb8 	bl	8003554 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <pulseEnable+0x4c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <pulseEnable+0x50>)
 80009ea:	8811      	ldrh	r1, [r2, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 f8ee 	bl	8003bd0 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80009f4:	2001      	movs	r0, #1
 80009f6:	f002 fdad 	bl	8003554 <HAL_Delay>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000124 	.word	0x20000124
 8000a04:	20000112 	.word	0x20000112

08000a08 <write4bits>:

void write4bits(uint8_t value) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e013      	b.n	8000a40 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <write4bits+0x4c>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <write4bits+0x50>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	fa42 f303 	asr.w	r3, r2, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	f003 f8cb 	bl	8003bd0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	dde8      	ble.n	8000a18 <write4bits+0x10>
  }

  pulseEnable();
 8000a46:	f7ff ffb5 	bl	80009b4 <pulseEnable>
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000124 	.word	0x20000124
 8000a58:	20000114 	.word	0x20000114

08000a5c <write8bits>:

void write8bits(uint8_t value) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e013      	b.n	8000a94 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <write8bits+0x4c>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <write8bits+0x50>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	fa42 f303 	asr.w	r3, r2, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f003 f8a1 	bl	8003bd0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	dde8      	ble.n	8000a6c <write8bits+0x10>
  }

  pulseEnable();
 8000a9a:	f7ff ff8b 	bl	80009b4 <pulseEnable>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000124 	.word	0x20000124
 8000aac:	20000114 	.word	0x20000114

08000ab0 <HAL_GPIO_EXTI_Callback>:
const uint16_t Column_pins[] =
		{ GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]

	if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000aba:	4ba9      	ldr	r3, [pc, #676]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000ac2:	f002 fd3b 	bl	800353c <HAL_GetTick>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	f200 82b0 	bhi.w	800102e <HAL_GPIO_EXTI_Callback+0x57e>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000ace:	f002 fd35 	bl	800353c <HAL_GetTick>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4aa2      	ldr	r2, [pc, #648]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000ad6:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000ad8:	23ff      	movs	r3, #255	; 0xff
 8000ada:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000adc:	23ff      	movs	r3, #255	; 0xff
 8000ade:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	737b      	strb	r3, [r7, #13]
 8000ae4:	e00b      	b.n	8000afe <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000ae6:	7b7b      	ldrb	r3, [r7, #13]
 8000ae8:	4a9e      	ldr	r2, [pc, #632]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d101      	bne.n	8000af8 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	3301      	adds	r3, #1
 8000afc:	737b      	strb	r3, [r7, #13]
 8000afe:	7b7b      	ldrb	r3, [r7, #13]
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d9f0      	bls.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000b04:	4b98      	ldr	r3, [pc, #608]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f860 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000b10:	4b95      	ldr	r3, [pc, #596]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000b12:	2102      	movs	r1, #2
 8000b14:	2200      	movs	r2, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 f85a 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000b1c:	4b92      	ldr	r3, [pc, #584]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000b1e:	2104      	movs	r1, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 f854 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000b28:	4b8f      	ldr	r3, [pc, #572]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 f84e 	bl	8003bd0 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b34:	2300      	movs	r3, #0
 8000b36:	733b      	strb	r3, [r7, #12]
 8000b38:	e02d      	b.n	8000b96 <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000b3a:	7b3b      	ldrb	r3, [r7, #12]
 8000b3c:	4a8b      	ldr	r2, [pc, #556]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b42:	7b3b      	ldrb	r3, [r7, #12]
 8000b44:	4a8a      	ldr	r2, [pc, #552]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f003 f83f 	bl	8003bd0 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4a87      	ldr	r2, [pc, #540]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000b58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b60:	4980      	ldr	r1, [pc, #512]	; (8000d64 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4610      	mov	r0, r2
 8000b6a:	f003 f819 	bl	8003ba0 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_GPIO_EXTI_Callback+0xc8>

			column_number = col;
 8000b74:	7b3b      	ldrb	r3, [r7, #12]
 8000b76:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b78:	7b3b      	ldrb	r3, [r7, #12]
 8000b7a:	4a7c      	ldr	r2, [pc, #496]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000b7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	4a7b      	ldr	r2, [pc, #492]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f003 f820 	bl	8003bd0 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b90:	7b3b      	ldrb	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	733b      	strb	r3, [r7, #12]
 8000b96:	7b3b      	ldrb	r3, [r7, #12]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d9ce      	bls.n	8000b3a <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b9c:	4b72      	ldr	r3, [pc, #456]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 f814 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000ba8:	4b6f      	ldr	r3, [pc, #444]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000baa:	2102      	movs	r1, #2
 8000bac:	2201      	movs	r2, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 f80e 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000bb4:	4b6c      	ldr	r3, [pc, #432]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 f808 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000bc0:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 f802 	bl	8003bd0 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	f000 822d 	beq.w	8001032 <HAL_GPIO_EXTI_Callback+0x582>
 8000bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	f000 8227 	beq.w	8001032 <HAL_GPIO_EXTI_Callback+0x582>
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	//1 - 6 - 9 for the Right Player
	//4 -7 -12 for the left player
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	4413      	add	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000bf4:	7afb      	ldrb	r3, [r7, #11]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	f200 821c 	bhi.w	8001036 <HAL_GPIO_EXTI_Callback+0x586>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c45 	.word	0x08000c45
 8000c08:	08000cef 	.word	0x08000cef
 8000c0c:	08000d21 	.word	0x08000d21
 8000c10:	08000da5 	.word	0x08000da5
 8000c14:	08000e33 	.word	0x08000e33
 8000c18:	08000e43 	.word	0x08000e43
 8000c1c:	08000e59 	.word	0x08000e59
 8000c20:	08000e6f 	.word	0x08000e6f
 8000c24:	08000ebd 	.word	0x08000ebd
 8000c28:	08001037 	.word	0x08001037
 8000c2c:	08001037 	.word	0x08001037
 8000c30:	08000f2f 	.word	0x08000f2f
 8000c34:	08000fa1 	.word	0x08000fa1
 8000c38:	08000fc1 	.word	0x08000fc1
 8000c3c:	08000fe3 	.word	0x08000fe3
 8000c40:	08001037 	.word	0x08001037
	case 1:
		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000c44:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d113      	bne.n	8000c74 <HAL_GPIO_EXTI_Callback+0x1c4>
			R_Health = (R_Health + 10 - 1) % 10;
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f103 0109 	add.w	r1, r3, #9
 8000c54:	4b4a      	ldr	r3, [pc, #296]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c56:	fb83 2301 	smull	r2, r3, r3, r1
 8000c5a:	109a      	asrs	r2, r3, #2
 8000c5c:	17cb      	asrs	r3, r1, #31
 8000c5e:	1ad2      	subs	r2, r2, r3
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	1aca      	subs	r2, r1, r3
 8000c6a:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000c6c:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000c6e:	f001 fb51 	bl	8002314 <HealthSetting>
 8000c72:	e016      	b.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x1f2>
		} else if (screen == 5) {
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d112      	bne.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x1f2>
			R_bullets = (R_bullets + 10 - 1) % 10;
 8000c7c:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f103 0109 	add.w	r1, r3, #9
 8000c84:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000c86:	fb83 2301 	smull	r2, r3, r3, r1
 8000c8a:	109a      	asrs	r2, r3, #2
 8000c8c:	17cb      	asrs	r3, r1, #31
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	1aca      	subs	r2, r1, r3
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000c9c:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000c9e:	f001 fb01 	bl	80022a4 <bulletsSetting>
		}
		if (screen == 0) {
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d108      	bne.n	8000cbc <HAL_GPIO_EXTI_Callback+0x20c>
			screen = 1;
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000cb0:	f000 f9fc 	bl	80010ac <refreshAll>
			initializeObjects();
 8000cb4:	f001 f85c 	bl	8001d70 <initializeObjects>
			displayObjects();
 8000cb8:	f001 fa78 	bl	80021ac <displayObjects>
		}
		if (screen == 1) {
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	f040 81ba 	bne.w	800103a <HAL_GPIO_EXTI_Callback+0x58a>
			if (R_bullets > 0) {
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f340 81b5 	ble.w	800103a <HAL_GPIO_EXTI_Callback+0x58a>
				R_bullets--;
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000cd8:	6013      	str	r3, [r2, #0]
				shoot(&playerR);
 8000cda:	482b      	ldr	r0, [pc, #172]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000cdc:	f000 fade 	bl	800129c <shoot>
				HAL_UART_Transmit(&huart1, "-Bullet for right", 16, 100000);
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	492a      	ldr	r1, [pc, #168]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000ce6:	482b      	ldr	r0, [pc, #172]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000ce8:	f006 f9f6 	bl	80070d8 <HAL_UART_Transmit>
			}
		}

		/* code */
		break;
 8000cec:	e1a5      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
	case 2:

		if (screen == 0) {
 8000cee:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 81a3 	bne.w	800103e <HAL_GPIO_EXTI_Callback+0x58e>
			screen = 2;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2014      	movs	r0, #20
 8000d02:	f7ff fd5f 	bl	80007c4 <setCursor>
			print("                    ");
 8000d06:	4824      	ldr	r0, [pc, #144]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000d08:	f7ff fda4 	bl	8000854 <print>
			setCursor(0, 1);
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fd58 	bl	80007c4 <setCursor>
			print("                      ");
 8000d14:	4821      	ldr	r0, [pc, #132]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000d16:	f7ff fd9d 	bl	8000854 <print>
			showAbout();
 8000d1a:	f001 fa95 	bl	8002248 <showAbout>
		}
		/* code */
		break;
 8000d1e:	e18e      	b.n	800103e <HAL_GPIO_EXTI_Callback+0x58e>
	case 3:
		HAL_UART_Transmit(&huart1, "3", 1,
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	2201      	movs	r2, #1
 8000d26:	491e      	ldr	r1, [pc, #120]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000d28:	481a      	ldr	r0, [pc, #104]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000d2a:	f006 f9d5 	bl	80070d8 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8185 	bne.w	8001042 <HAL_GPIO_EXTI_Callback+0x592>
			screen = 3;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	601a      	str	r2, [r3, #0]
			setCursor(20, 0);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2014      	movs	r0, #20
 8000d42:	f7ff fd3f 	bl	80007c4 <setCursor>
			print("                    ");
 8000d46:	4814      	ldr	r0, [pc, #80]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000d48:	f7ff fd84 	bl	8000854 <print>
			setCursor(0, 1);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fd38 	bl	80007c4 <setCursor>
			print("                      ");
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000d56:	f7ff fd7d 	bl	8000854 <print>
			showSetting();
 8000d5a:	f001 fa83 	bl	8002264 <showSetting>
		}
		/* code */
		break;
 8000d5e:	e170      	b.n	8001042 <HAL_GPIO_EXTI_Callback+0x592>
 8000d60:	20000d94 	.word	0x20000d94
 8000d64:	0800983c 	.word	0x0800983c
 8000d68:	48000c00 	.word	0x48000c00
 8000d6c:	08009844 	.word	0x08009844
 8000d70:	08009854 	.word	0x08009854
 8000d74:	0800982c 	.word	0x0800982c
 8000d78:	20000614 	.word	0x20000614
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	66666667 	.word	0x66666667
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000c60 	.word	0x20000c60
 8000d8c:	000186a0 	.word	0x000186a0
 8000d90:	08009644 	.word	0x08009644
 8000d94:	200002a0 	.word	0x200002a0
 8000d98:	08009658 	.word	0x08009658
 8000d9c:	08009670 	.word	0x08009670
 8000da0:	08009688 	.word	0x08009688
	case 4:
		if (screen == 1) {
 8000da4:	4ba9      	ldr	r3, [pc, #676]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d111      	bne.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x320>
			if (L_bullets > 0) {
 8000dac:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	dd0d      	ble.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x320>
				L_bullets--;
 8000db4:	4ba6      	ldr	r3, [pc, #664]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	4aa5      	ldr	r2, [pc, #660]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000dbc:	6013      	str	r3, [r2, #0]
				shoot(&playerL);
 8000dbe:	48a5      	ldr	r0, [pc, #660]	; (8001054 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000dc0:	f000 fa6c 	bl	800129c <shoot>
				HAL_UART_Transmit(&huart1, "-Bullet for left", 15, 100000);
 8000dc4:	4ba4      	ldr	r3, [pc, #656]	; (8001058 <HAL_GPIO_EXTI_Callback+0x5a8>)
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	49a4      	ldr	r1, [pc, #656]	; (800105c <HAL_GPIO_EXTI_Callback+0x5ac>)
 8000dca:	48a5      	ldr	r0, [pc, #660]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000dcc:	f006 f984 	bl	80070d8 <HAL_UART_Transmit>
			}
			//shot(playerR.x, playerR.y + 1, currentStateR % 2);
		}

		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000dd0:	4b9e      	ldr	r3, [pc, #632]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d113      	bne.n	8000e00 <HAL_GPIO_EXTI_Callback+0x350>
			L_Health = (L_Health + 10 - 1) % 10;
 8000dd8:	4ba2      	ldr	r3, [pc, #648]	; (8001064 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f103 0109 	add.w	r1, r3, #9
 8000de0:	4ba1      	ldr	r3, [pc, #644]	; (8001068 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000de2:	fb83 2301 	smull	r2, r3, r3, r1
 8000de6:	109a      	asrs	r2, r3, #2
 8000de8:	17cb      	asrs	r3, r1, #31
 8000dea:	1ad2      	subs	r2, r2, r3
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	1aca      	subs	r2, r1, r3
 8000df6:	4b9b      	ldr	r3, [pc, #620]	; (8001064 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000df8:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000dfa:	f001 fa8b 	bl	8002314 <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 10 - 1) % 10;
			bulletsSetting();
		}

		break;
 8000dfe:	e122      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x596>
		} else if (screen == 5) {
 8000e00:	4b92      	ldr	r3, [pc, #584]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	f040 811e 	bne.w	8001046 <HAL_GPIO_EXTI_Callback+0x596>
			L_bullets = (L_bullets + 10 - 1) % 10;
 8000e0a:	4b91      	ldr	r3, [pc, #580]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f103 0109 	add.w	r1, r3, #9
 8000e12:	4b95      	ldr	r3, [pc, #596]	; (8001068 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000e14:	fb83 2301 	smull	r2, r3, r3, r1
 8000e18:	109a      	asrs	r2, r3, #2
 8000e1a:	17cb      	asrs	r3, r1, #31
 8000e1c:	1ad2      	subs	r2, r2, r3
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	1aca      	subs	r2, r1, r3
 8000e28:	4b89      	ldr	r3, [pc, #548]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e2a:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e2c:	f001 fa3a 	bl	80022a4 <bulletsSetting>
		break;
 8000e30:	e109      	b.n	8001046 <HAL_GPIO_EXTI_Callback+0x596>
	case 5:
		HAL_UART_Transmit(&huart1, "5", 1,
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	2201      	movs	r2, #1
 8000e38:	498c      	ldr	r1, [pc, #560]	; (800106c <HAL_GPIO_EXTI_Callback+0x5bc>)
 8000e3a:	4889      	ldr	r0, [pc, #548]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000e3c:	f006 f94c 	bl	80070d8 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000e40:	e131      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
	case 6:
		HAL_UART_Transmit(&huart1, "6", 1,
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	2201      	movs	r2, #1
 8000e48:	4989      	ldr	r1, [pc, #548]	; (8001070 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8000e4a:	4885      	ldr	r0, [pc, #532]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000e4c:	f006 f944 	bl	80070d8 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(0);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f94d 	bl	80010f0 <changeFoxStateR>
		break;
 8000e56:	e126      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
	case 7:
		HAL_UART_Transmit(&huart1, "7", 1,
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4985      	ldr	r1, [pc, #532]	; (8001074 <HAL_GPIO_EXTI_Callback+0x5c4>)
 8000e60:	487f      	ldr	r0, [pc, #508]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000e62:	f006 f939 	bl	80070d8 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 f942 	bl	80010f0 <changeFoxStateR>
		/* code */
		break;
 8000e6c:	e11b      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
	case 8:
		//back btn
		refreshAll();
 8000e6e:	f000 f91d 	bl	80010ac <refreshAll>
		if (screen == 4 | screen == 5) {
 8000e72:	4b76      	ldr	r3, [pc, #472]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf0c      	ite	eq
 8000e7a:	2301      	moveq	r3, #1
 8000e7c:	2300      	movne	r3, #0
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b72      	ldr	r3, [pc, #456]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	bf0c      	ite	eq
 8000e88:	2301      	moveq	r3, #1
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x3f2>
			screen = 3;
 8000e96:	4b6d      	ldr	r3, [pc, #436]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000e98:	2203      	movs	r2, #3
 8000e9a:	601a      	str	r2, [r3, #0]
			showSetting();
 8000e9c:	f001 f9e2 	bl	8002264 <showSetting>
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_EXTI_Callback+0x3fc>
		} else {
			screen = 0;
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
			showMain();
 8000ea8:	f001 f9ac 	bl	8002204 <showMain>
		}

		HAL_UART_Transmit(&huart1, "B", 1,
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4971      	ldr	r1, [pc, #452]	; (8001078 <HAL_GPIO_EXTI_Callback+0x5c8>)
 8000eb4:	486a      	ldr	r0, [pc, #424]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000eb6:	f006 f90f 	bl	80070d8 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000eba:	e0f4      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
	case 9:

		if (screen == 4) {
 8000ebc:	4b63      	ldr	r3, [pc, #396]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d112      	bne.n	8000eea <HAL_GPIO_EXTI_Callback+0x43a>
			R_Health = (R_Health + 1) % 10;
 8000ec4:	4b6d      	ldr	r3, [pc, #436]	; (800107c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	1c59      	adds	r1, r3, #1
 8000eca:	4b67      	ldr	r3, [pc, #412]	; (8001068 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000ecc:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed0:	109a      	asrs	r2, r3, #2
 8000ed2:	17cb      	asrs	r3, r1, #31
 8000ed4:	1ad2      	subs	r2, r2, r3
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	1aca      	subs	r2, r1, r3
 8000ee0:	4b66      	ldr	r3, [pc, #408]	; (800107c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8000ee2:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000ee4:	f001 fa16 	bl	8002314 <HealthSetting>
 8000ee8:	e015      	b.n	8000f16 <HAL_GPIO_EXTI_Callback+0x466>
		} else if (screen == 5) {
 8000eea:	4b58      	ldr	r3, [pc, #352]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	d111      	bne.n	8000f16 <HAL_GPIO_EXTI_Callback+0x466>
			R_bullets = (R_bullets + 1) % 10;
 8000ef2:	4b63      	ldr	r3, [pc, #396]	; (8001080 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	1c59      	adds	r1, r3, #1
 8000ef8:	4b5b      	ldr	r3, [pc, #364]	; (8001068 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000efa:	fb83 2301 	smull	r2, r3, r3, r1
 8000efe:	109a      	asrs	r2, r3, #2
 8000f00:	17cb      	asrs	r3, r1, #31
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	1aca      	subs	r2, r1, r3
 8000f0e:	4b5c      	ldr	r3, [pc, #368]	; (8001080 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8000f10:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000f12:	f001 f9c7 	bl	80022a4 <bulletsSetting>
		}
		//right player
		if (screen == 1) {
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	f040 80bc 	bne.w	8001098 <HAL_GPIO_EXTI_Callback+0x5e8>
			movement(&playerR, currentStateR);
 8000f20:	4b58      	ldr	r3, [pc, #352]	; (8001084 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4858      	ldr	r0, [pc, #352]	; (8001088 <HAL_GPIO_EXTI_Callback+0x5d8>)
 8000f28:	f000 fc9e 	bl	8001868 <movement>
		}
		break;
 8000f2c:	e0b4      	b.n	8001098 <HAL_GPIO_EXTI_Callback+0x5e8>
		break;
	case 11:
		/* code */
		break;
	case 12:
		if (screen == 4) {
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d112      	bne.n	8000f5c <HAL_GPIO_EXTI_Callback+0x4ac>
			L_Health = (L_Health + 1) % 10;
 8000f36:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1c59      	adds	r1, r3, #1
 8000f3c:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000f3e:	fb83 2301 	smull	r2, r3, r3, r1
 8000f42:	109a      	asrs	r2, r3, #2
 8000f44:	17cb      	asrs	r3, r1, #31
 8000f46:	1ad2      	subs	r2, r2, r3
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	1aca      	subs	r2, r1, r3
 8000f52:	4b44      	ldr	r3, [pc, #272]	; (8001064 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000f54:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000f56:	f001 f9dd 	bl	8002314 <HealthSetting>
 8000f5a:	e015      	b.n	8000f88 <HAL_GPIO_EXTI_Callback+0x4d8>
		} else if (screen == 5) {
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	d111      	bne.n	8000f88 <HAL_GPIO_EXTI_Callback+0x4d8>
			L_bullets = (L_bullets + 1) % 10;
 8000f64:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1c59      	adds	r1, r3, #1
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000f6c:	fb83 2301 	smull	r2, r3, r3, r1
 8000f70:	109a      	asrs	r2, r3, #2
 8000f72:	17cb      	asrs	r3, r1, #31
 8000f74:	1ad2      	subs	r2, r2, r3
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	1aca      	subs	r2, r1, r3
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000f82:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000f84:	f001 f98e 	bl	80022a4 <bulletsSetting>
		}
		if (screen == 1) {
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8085 	bne.w	800109c <HAL_GPIO_EXTI_Callback+0x5ec>
			movement(&playerL, currentStateL);
 8000f92:	4b3e      	ldr	r3, [pc, #248]	; (800108c <HAL_GPIO_EXTI_Callback+0x5dc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4619      	mov	r1, r3
 8000f98:	482e      	ldr	r0, [pc, #184]	; (8001054 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000f9a:	f000 fc65 	bl	8001868 <movement>
		}
		/* code */
		break;
 8000f9e:	e07d      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x5ec>
	case 13:
		/* code */
		if (screen = 3) {
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2014      	movs	r0, #20
 8000faa:	f7ff fc0b 	bl	80007c4 <setCursor>
			print("                   ");
 8000fae:	4838      	ldr	r0, [pc, #224]	; (8001090 <HAL_GPIO_EXTI_Callback+0x5e0>)
 8000fb0:	f7ff fc50 	bl	8000854 <print>
			HealthSetting();
 8000fb4:	f001 f9ae 	bl	8002314 <HealthSetting>
			screen = 4;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	601a      	str	r2, [r3, #0]
		}
		break;
 8000fbe:	e072      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
	case 14:
		/* code */
		if (screen == 3) {
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d16b      	bne.n	80010a0 <HAL_GPIO_EXTI_Callback+0x5f0>
			screen = 5;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000fca:	2205      	movs	r2, #5
 8000fcc:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2014      	movs	r0, #20
 8000fd2:	f7ff fbf7 	bl	80007c4 <setCursor>
			print("                   ");
 8000fd6:	482e      	ldr	r0, [pc, #184]	; (8001090 <HAL_GPIO_EXTI_Callback+0x5e0>)
 8000fd8:	f7ff fc3c 	bl	8000854 <print>
			bulletsSetting();
 8000fdc:	f001 f962 	bl	80022a4 <bulletsSetting>
		}
		break;
 8000fe0:	e05e      	b.n	80010a0 <HAL_GPIO_EXTI_Callback+0x5f0>
	case 15:
		if (screen == 3) {
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d109      	bne.n	8000ffe <HAL_GPIO_EXTI_Callback+0x54e>
			vfx = (vfx + 1) % 2;
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	bfb8      	it	lt
 8000ff8:	425b      	neglt	r3, r3
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8000ffc:	6013      	str	r3, [r2, #0]
		}
		if (screen == 4 | screen == 5) {
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf0c      	ite	eq
 8001006:	2301      	moveq	r3, #1
 8001008:	2300      	movne	r3, #0
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b05      	cmp	r3, #5
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d040      	beq.n	80010a4 <HAL_GPIO_EXTI_Callback+0x5f4>
			screen = 3;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8001024:	2203      	movs	r2, #3
 8001026:	601a      	str	r2, [r3, #0]
			showSetting();
 8001028:	f001 f91c 	bl	8002264 <showSetting>
		}
		/* code */
		break;
 800102c:	e03a      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x5f4>
		return;
 800102e:	bf00      	nop
 8001030:	e039      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		return; // Reject invalid scan
 8001032:	bf00      	nop
 8001034:	e037      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
	case 16:
		/* code */
		break;

	default:
		break;
 8001036:	bf00      	nop
 8001038:	e035      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		break;
 800103a:	bf00      	nop
 800103c:	e033      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		break;
 800103e:	bf00      	nop
 8001040:	e031      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		break;
 8001042:	bf00      	nop
 8001044:	e02f      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		break;
 8001046:	bf00      	nop
 8001048:	e02d      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
 800104a:	bf00      	nop
 800104c:	20000614 	.word	0x20000614
 8001050:	20000010 	.word	0x20000010
 8001054:	20000c70 	.word	0x20000c70
 8001058:	000186a0 	.word	0x000186a0
 800105c:	0800968c 	.word	0x0800968c
 8001060:	200002a0 	.word	0x200002a0
 8001064:	20000008 	.word	0x20000008
 8001068:	66666667 	.word	0x66666667
 800106c:	080096a0 	.word	0x080096a0
 8001070:	080096a4 	.word	0x080096a4
 8001074:	080096a8 	.word	0x080096a8
 8001078:	080096ac 	.word	0x080096ac
 800107c:	20000004 	.word	0x20000004
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20000c80 	.word	0x20000c80
 8001088:	20000c60 	.word	0x20000c60
 800108c:	20000c84 	.word	0x20000c84
 8001090:	080096b0 	.word	0x080096b0
 8001094:	20000014 	.word	0x20000014
		break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_EXTI_Callback+0x5f6>
		break;
 80010a4:	bf00      	nop
	}
}
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}

080010ac <refreshAll>:

void refreshAll(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80010b0:	2100      	movs	r1, #0
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fb86 	bl	80007c4 <setCursor>
	print("                   ");
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <refreshAll+0x40>)
 80010ba:	f7ff fbcb 	bl	8000854 <print>
	setCursor(0, 1);
 80010be:	2101      	movs	r1, #1
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fb7f 	bl	80007c4 <setCursor>
	print("                   ");
 80010c6:	4809      	ldr	r0, [pc, #36]	; (80010ec <refreshAll+0x40>)
 80010c8:	f7ff fbc4 	bl	8000854 <print>
	setCursor(20, 0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2014      	movs	r0, #20
 80010d0:	f7ff fb78 	bl	80007c4 <setCursor>
	print("                   ");
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <refreshAll+0x40>)
 80010d6:	f7ff fbbd 	bl	8000854 <print>
	setCursor(20, 1);
 80010da:	2101      	movs	r1, #1
 80010dc:	2014      	movs	r0, #20
 80010de:	f7ff fb71 	bl	80007c4 <setCursor>
	print("                   ");
 80010e2:	4802      	ldr	r0, [pc, #8]	; (80010ec <refreshAll+0x40>)
 80010e4:	f7ff fbb6 	bl	8000854 <print>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	080096b0 	.word	0x080096b0

080010f0 <changeFoxStateR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void changeFoxStateR(int Player) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	byte *currentFoxR = foxStates[currentStateR];
 80010f8:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <changeFoxStateR+0xf4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a3a      	ldr	r2, [pc, #232]	; (80011e8 <changeFoxStateR+0xf8>)
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	60fb      	str	r3, [r7, #12]
	byte *currentFoxL = foxStates[currentStateL];
 8001104:	4b39      	ldr	r3, [pc, #228]	; (80011ec <changeFoxStateR+0xfc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a37      	ldr	r2, [pc, #220]	; (80011e8 <changeFoxStateR+0xf8>)
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	60bb      	str	r3, [r7, #8]

	if (!Player) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d110      	bne.n	8001138 <changeFoxStateR+0x48>
		createChar(7, currentFoxR);
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	2007      	movs	r0, #7
 800111a:	f7ff fbc6 	bl	80008aa <createChar>
		currentStateR = (currentStateR + 1) % 4;
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <changeFoxStateR+0xf4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	425a      	negs	r2, r3
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	bf58      	it	pl
 8001130:	4253      	negpl	r3, r2
 8001132:	4a2c      	ldr	r2, [pc, #176]	; (80011e4 <changeFoxStateR+0xf4>)
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00f      	b.n	8001158 <changeFoxStateR+0x68>
	} else {
		createChar(8, currentFoxL);
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	2008      	movs	r0, #8
 800113c:	f7ff fbb5 	bl	80008aa <createChar>
		currentStateL = (currentStateL + 1) % 4;
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <changeFoxStateR+0xfc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	425a      	negs	r2, r3
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	f002 0203 	and.w	r2, r2, #3
 8001150:	bf58      	it	pl
 8001152:	4253      	negpl	r3, r2
 8001154:	4a25      	ldr	r2, [pc, #148]	; (80011ec <changeFoxStateR+0xfc>)
 8001156:	6013      	str	r3, [r2, #0]
	}
	switch (currentStateR) {
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <changeFoxStateR+0xf4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d81b      	bhi.n	8001198 <changeFoxStateR+0xa8>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <changeFoxStateR+0x78>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001179 	.word	0x08001179
 800116c:	08001181 	.word	0x08001181
 8001170:	08001189 	.word	0x08001189
 8001174:	08001191 	.word	0x08001191
	case 0:
		playerR.direction = UP;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <changeFoxStateR+0x100>)
 800117a:	2200      	movs	r2, #0
 800117c:	721a      	strb	r2, [r3, #8]
		break;
 800117e:	e00c      	b.n	800119a <changeFoxStateR+0xaa>
	case 1:
		playerR.direction = RIGHT;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <changeFoxStateR+0x100>)
 8001182:	2203      	movs	r2, #3
 8001184:	721a      	strb	r2, [r3, #8]
		break;
 8001186:	e008      	b.n	800119a <changeFoxStateR+0xaa>
	case 2:
		playerR.direction = LEFT;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <changeFoxStateR+0x100>)
 800118a:	2202      	movs	r2, #2
 800118c:	721a      	strb	r2, [r3, #8]
		break;
 800118e:	e004      	b.n	800119a <changeFoxStateR+0xaa>
	case 3:
		playerR.direction = DOWN;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <changeFoxStateR+0x100>)
 8001192:	2201      	movs	r2, #1
 8001194:	721a      	strb	r2, [r3, #8]
		break;
 8001196:	e000      	b.n	800119a <changeFoxStateR+0xaa>
	default:
		break;
 8001198:	bf00      	nop
	}
	switch (currentStateL) {
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <changeFoxStateR+0xfc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d81a      	bhi.n	80011d8 <changeFoxStateR+0xe8>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <changeFoxStateR+0xb8>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	080011c9 	.word	0x080011c9
 80011b4:	080011d1 	.word	0x080011d1
	case 0:
		playerL.direction = UP;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <changeFoxStateR+0x104>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	721a      	strb	r2, [r3, #8]
		break;
 80011be:	e00c      	b.n	80011da <changeFoxStateR+0xea>
	case 1:
		playerL.direction = RIGHT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <changeFoxStateR+0x104>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	721a      	strb	r2, [r3, #8]
		break;
 80011c6:	e008      	b.n	80011da <changeFoxStateR+0xea>
	case 2:
		playerL.direction = LEFT;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <changeFoxStateR+0x104>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	721a      	strb	r2, [r3, #8]
		break;
 80011ce:	e004      	b.n	80011da <changeFoxStateR+0xea>
	case 3:
		playerL.direction = DOWN;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <changeFoxStateR+0x104>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	721a      	strb	r2, [r3, #8]
		break;
 80011d6:	e000      	b.n	80011da <changeFoxStateR+0xea>
	default:
		break;
 80011d8:	bf00      	nop
	}

}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000c80 	.word	0x20000c80
 80011e8:	20000068 	.word	0x20000068
 80011ec:	20000c84 	.word	0x20000c84
 80011f0:	20000c60 	.word	0x20000c60
 80011f4:	20000c70 	.word	0x20000c70

080011f8 <increase>:
void increase(int isHealth, Player *player) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	if (isHealth) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01d      	beq.n	8001244 <increase+0x4c>
		if (player->c == 7) {
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	7a5b      	ldrb	r3, [r3, #9]
 800120c:	2b07      	cmp	r3, #7
 800120e:	d10c      	bne.n	800122a <increase+0x32>
			R_Health++;
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <increase+0x94>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a1d      	ldr	r2, [pc, #116]	; (800128c <increase+0x94>)
 8001218:	6013      	str	r3, [r2, #0]
			if (R_Health > 9) {
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <increase+0x94>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b09      	cmp	r3, #9
 8001220:	dd2d      	ble.n	800127e <increase+0x86>
				R_Health = 9;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <increase+0x94>)
 8001224:	2209      	movs	r2, #9
 8001226:	601a      	str	r2, [r3, #0]
			if (L_bullets > 9) {
				L_bullets = 9;
			}
		}
	}
}
 8001228:	e029      	b.n	800127e <increase+0x86>
			L_Health++;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <increase+0x98>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <increase+0x98>)
 8001232:	6013      	str	r3, [r2, #0]
			if (L_Health > 9) {
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <increase+0x98>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b09      	cmp	r3, #9
 800123a:	dd20      	ble.n	800127e <increase+0x86>
				L_Health = 9;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <increase+0x98>)
 800123e:	2209      	movs	r2, #9
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	e01c      	b.n	800127e <increase+0x86>
		if (player->c == 7) {
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	7a5b      	ldrb	r3, [r3, #9]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d10c      	bne.n	8001266 <increase+0x6e>
			R_bullets++;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <increase+0x9c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <increase+0x9c>)
 8001254:	6013      	str	r3, [r2, #0]
			if (R_bullets > 9) {
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <increase+0x9c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b09      	cmp	r3, #9
 800125c:	dd0f      	ble.n	800127e <increase+0x86>
				R_bullets = 9;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <increase+0x9c>)
 8001260:	2209      	movs	r2, #9
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	e00b      	b.n	800127e <increase+0x86>
			L_bullets++;
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <increase+0xa0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <increase+0xa0>)
 800126e:	6013      	str	r3, [r2, #0]
			if (L_bullets > 9) {
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <increase+0xa0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b09      	cmp	r3, #9
 8001276:	dd02      	ble.n	800127e <increase+0x86>
				L_bullets = 9;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <increase+0xa0>)
 800127a:	2209      	movs	r2, #9
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000004 	.word	0x20000004
 8001290:	20000008 	.word	0x20000008
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000010 	.word	0x20000010

0800129c <shoot>:

void shoot(Player *player) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

	if (vfx) {
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <shoot+0x94>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <shoot+0x14>
		playExplosionSound();
 80012ac:	f7ff f800 	bl	80002b0 <playExplosionSound>
	}

	num_shooted_bullet++;
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <shoot+0x98>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <shoot+0x98>)
 80012b8:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < num_shooted_bullet; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e02d      	b.n	800131c <shoot+0x80>
		if (!fires[i].isAlive) {
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <shoot+0x9c>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	330c      	adds	r3, #12
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d122      	bne.n	8001316 <shoot+0x7a>
			fires[i].col = player->y;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4918      	ldr	r1, [pc, #96]	; (8001338 <shoot+0x9c>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	440b      	add	r3, r1
 80012dc:	601a      	str	r2, [r3, #0]
			fires[i].row = player->x;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4915      	ldr	r1, [pc, #84]	; (8001338 <shoot+0x9c>)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	440b      	add	r3, r1
 80012ea:	3304      	adds	r3, #4
 80012ec:	601a      	str	r2, [r3, #0]
			fires[i].direction = player->direction;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7a19      	ldrb	r1, [r3, #8]
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <shoot+0x9c>)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	3308      	adds	r3, #8
 80012fc:	460a      	mov	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
			fires[i].isAlive = 1;
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <shoot+0x9c>)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4413      	add	r3, r2
 8001308:	330c      	adds	r3, #12
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
			shootFlag = 1;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <shoot+0xa0>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
			break;
 8001314:	e008      	b.n	8001328 <shoot+0x8c>
	for (int i = 0; i < num_shooted_bullet; i++) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <shoot+0x98>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbcc      	blt.n	80012c0 <shoot+0x24>
		}
	}
}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000014 	.word	0x20000014
 8001334:	2000061c 	.word	0x2000061c
 8001338:	20000620 	.word	0x20000620
 800133c:	20000618 	.word	0x20000618

08001340 <shotPosition>:

void shotPosition() {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
	for (int k = 0; k < num_shooted_bullet; k++) {
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e26e      	b.n	800182a <shotPosition+0x4ea>
		if (fires[k].isAlive) {
 800134c:	4a93      	ldr	r2, [pc, #588]	; (800159c <shotPosition+0x25c>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	330c      	adds	r3, #12
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 8263 	beq.w	8001824 <shotPosition+0x4e4>

			int col = fires[k].col;
 800135e:	4a8f      	ldr	r2, [pc, #572]	; (800159c <shotPosition+0x25c>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	4413      	add	r3, r2
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60bb      	str	r3, [r7, #8]
			int row = fires[k].row;
 800136a:	4a8c      	ldr	r2, [pc, #560]	; (800159c <shotPosition+0x25c>)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	607b      	str	r3, [r7, #4]

			switch (fires[k].direction) {
 8001378:	4a88      	ldr	r2, [pc, #544]	; (800159c <shotPosition+0x25c>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	3308      	adds	r3, #8
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b03      	cmp	r3, #3
 8001386:	f200 8081 	bhi.w	800148c <shotPosition+0x14c>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <shotPosition+0x50>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	0800142f 	.word	0x0800142f
 8001394:	080013b9 	.word	0x080013b9
 8001398:	08001417 	.word	0x08001417
 800139c:	080013a1 	.word	0x080013a1
			case RIGHT:
				fires[k].col++;
 80013a0:	4a7e      	ldr	r2, [pc, #504]	; (800159c <shotPosition+0x25c>)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	497b      	ldr	r1, [pc, #492]	; (800159c <shotPosition+0x25c>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	440b      	add	r3, r1
 80013b4:	601a      	str	r2, [r3, #0]
				break;
 80013b6:	e06e      	b.n	8001496 <shotPosition+0x156>
			case DOWN:
				if (row == 0) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d107      	bne.n	80013ce <shotPosition+0x8e>
					fires[k].row = 1;
 80013be:	4a77      	ldr	r2, [pc, #476]	; (800159c <shotPosition+0x25c>)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	4413      	add	r3, r2
 80013c6:	3304      	adds	r3, #4
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
				} else if (row == 1 & col < 20) {
					fires[k].row = 0;
					fires[k].col += 20;
				}
				break;
 80013cc:	e060      	b.n	8001490 <shotPosition+0x150>
				} else if (row == 1 & col < 20) {
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b13      	cmp	r3, #19
 80013de:	bfd4      	ite	le
 80013e0:	2301      	movle	r3, #1
 80013e2:	2300      	movgt	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4013      	ands	r3, r2
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d050      	beq.n	8001490 <shotPosition+0x150>
					fires[k].row = 0;
 80013ee:	4a6b      	ldr	r2, [pc, #428]	; (800159c <shotPosition+0x25c>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	3304      	adds	r3, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
					fires[k].col += 20;
 80013fc:	4a67      	ldr	r2, [pc, #412]	; (800159c <shotPosition+0x25c>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f103 0214 	add.w	r2, r3, #20
 800140a:	4964      	ldr	r1, [pc, #400]	; (800159c <shotPosition+0x25c>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	440b      	add	r3, r1
 8001412:	601a      	str	r2, [r3, #0]
				break;
 8001414:	e03c      	b.n	8001490 <shotPosition+0x150>
			case LEFT:
				fires[k].col--;
 8001416:	4a61      	ldr	r2, [pc, #388]	; (800159c <shotPosition+0x25c>)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	495e      	ldr	r1, [pc, #376]	; (800159c <shotPosition+0x25c>)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	440b      	add	r3, r1
 800142a:	601a      	str	r2, [r3, #0]
				break;
 800142c:	e033      	b.n	8001496 <shotPosition+0x156>
			case UP:
				if (row == 1) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d107      	bne.n	8001444 <shotPosition+0x104>
					fires[k].row = 0;
 8001434:	4a59      	ldr	r2, [pc, #356]	; (800159c <shotPosition+0x25c>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	3304      	adds	r3, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
				} else if (row == 0 & col >= 20) {
					fires[k].row = 1;
					fires[k].col -= 20;
				}
				break;
 8001442:	e027      	b.n	8001494 <shotPosition+0x154>
				} else if (row == 0 & col >= 20) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2da      	uxtb	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b13      	cmp	r3, #19
 8001454:	bfcc      	ite	gt
 8001456:	2301      	movgt	r3, #1
 8001458:	2300      	movle	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4013      	ands	r3, r2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d017      	beq.n	8001494 <shotPosition+0x154>
					fires[k].row = 1;
 8001464:	4a4d      	ldr	r2, [pc, #308]	; (800159c <shotPosition+0x25c>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	3304      	adds	r3, #4
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
					fires[k].col -= 20;
 8001472:	4a4a      	ldr	r2, [pc, #296]	; (800159c <shotPosition+0x25c>)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1a3 0214 	sub.w	r2, r3, #20
 8001480:	4946      	ldr	r1, [pc, #280]	; (800159c <shotPosition+0x25c>)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	440b      	add	r3, r1
 8001488:	601a      	str	r2, [r3, #0]
				break;
 800148a:	e003      	b.n	8001494 <shotPosition+0x154>
			default:
				break;
 800148c:	bf00      	nop
 800148e:	e002      	b.n	8001496 <shotPosition+0x156>
				break;
 8001490:	bf00      	nop
 8001492:	e000      	b.n	8001496 <shotPosition+0x156>
				break;
 8001494:	bf00      	nop
			}

			int f = lcd[fires[k].col][fires[k].row];
 8001496:	4a41      	ldr	r2, [pc, #260]	; (800159c <shotPosition+0x25c>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	493e      	ldr	r1, [pc, #248]	; (800159c <shotPosition+0x25c>)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	440b      	add	r3, r1
 80014a8:	3304      	adds	r3, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	493c      	ldr	r1, [pc, #240]	; (80015a0 <shotPosition+0x260>)
 80014ae:	2026      	movs	r0, #38	; 0x26
 80014b0:	fb00 f202 	mul.w	r2, r0, r2
 80014b4:	440a      	add	r2, r1
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	603b      	str	r3, [r7, #0]

			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d006      	beq.n	80014d0 <shotPosition+0x190>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d003      	beq.n	80014d0 <shotPosition+0x190>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	f040 80b3 	bne.w	8001636 <shotPosition+0x2f6>
				do {
					switch (fires[k].direction) {
 80014d0:	4a32      	ldr	r2, [pc, #200]	; (800159c <shotPosition+0x25c>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	3308      	adds	r3, #8
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	f200 8085 	bhi.w	80015ec <shotPosition+0x2ac>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <shotPosition+0x1a8>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	08001587 	.word	0x08001587
 80014ec:	08001511 	.word	0x08001511
 80014f0:	0800156f 	.word	0x0800156f
 80014f4:	080014f9 	.word	0x080014f9
					case RIGHT:
						fires[k].col++;
 80014f8:	4a28      	ldr	r2, [pc, #160]	; (800159c <shotPosition+0x25c>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	4925      	ldr	r1, [pc, #148]	; (800159c <shotPosition+0x25c>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	440b      	add	r3, r1
 800150c:	601a      	str	r2, [r3, #0]
						break;
 800150e:	e072      	b.n	80015f6 <shotPosition+0x2b6>
					case DOWN:
						if (row == 0) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <shotPosition+0x1e6>
							fires[k].row = 1;
 8001516:	4a21      	ldr	r2, [pc, #132]	; (800159c <shotPosition+0x25c>)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4413      	add	r3, r2
 800151e:	3304      	adds	r3, #4
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
						} else if (row == 1 & col < 20) {
							fires[k].row = 0;
							fires[k].col += 20;
						}
						break;
 8001524:	e064      	b.n	80015f0 <shotPosition+0x2b0>
						} else if (row == 1 & col < 20) {
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b01      	cmp	r3, #1
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2da      	uxtb	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b13      	cmp	r3, #19
 8001536:	bfd4      	ite	le
 8001538:	2301      	movle	r3, #1
 800153a:	2300      	movgt	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4013      	ands	r3, r2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d054      	beq.n	80015f0 <shotPosition+0x2b0>
							fires[k].row = 0;
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <shotPosition+0x25c>)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	3304      	adds	r3, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
							fires[k].col += 20;
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <shotPosition+0x25c>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f103 0214 	add.w	r2, r3, #20
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <shotPosition+0x25c>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	440b      	add	r3, r1
 800156a:	601a      	str	r2, [r3, #0]
						break;
 800156c:	e040      	b.n	80015f0 <shotPosition+0x2b0>
					case LEFT:
						fires[k].col--;
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <shotPosition+0x25c>)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <shotPosition+0x25c>)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	440b      	add	r3, r1
 8001582:	601a      	str	r2, [r3, #0]
						break;
 8001584:	e037      	b.n	80015f6 <shotPosition+0x2b6>
					case UP:
						if (row == 1) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d10b      	bne.n	80015a4 <shotPosition+0x264>
							fires[k].row = 0;
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <shotPosition+0x25c>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	3304      	adds	r3, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
						} else if (row == 0 & col >= 20) {
							fires[k].row = 1;
							fires[k].col -= 20;
						}
						break;
 800159a:	e02b      	b.n	80015f4 <shotPosition+0x2b4>
 800159c:	20000620 	.word	0x20000620
 80015a0:	20000d48 	.word	0x20000d48
						} else if (row == 0 & col >= 20) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf0c      	ite	eq
 80015aa:	2301      	moveq	r3, #1
 80015ac:	2300      	movne	r3, #0
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b13      	cmp	r3, #19
 80015b4:	bfcc      	ite	gt
 80015b6:	2301      	movgt	r3, #1
 80015b8:	2300      	movle	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d017      	beq.n	80015f4 <shotPosition+0x2b4>
							fires[k].row = 1;
 80015c4:	4a9e      	ldr	r2, [pc, #632]	; (8001840 <shotPosition+0x500>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	3304      	adds	r3, #4
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
							fires[k].col -= 20;
 80015d2:	4a9b      	ldr	r2, [pc, #620]	; (8001840 <shotPosition+0x500>)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1a3 0214 	sub.w	r2, r3, #20
 80015e0:	4997      	ldr	r1, [pc, #604]	; (8001840 <shotPosition+0x500>)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	440b      	add	r3, r1
 80015e8:	601a      	str	r2, [r3, #0]
						break;
 80015ea:	e003      	b.n	80015f4 <shotPosition+0x2b4>
					default:
						break;
 80015ec:	bf00      	nop
 80015ee:	e002      	b.n	80015f6 <shotPosition+0x2b6>
						break;
 80015f0:	bf00      	nop
 80015f2:	e000      	b.n	80015f6 <shotPosition+0x2b6>
						break;
 80015f4:	bf00      	nop
					}

					f = lcd[fires[k].col][fires[k].row];
 80015f6:	4a92      	ldr	r2, [pc, #584]	; (8001840 <shotPosition+0x500>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	4413      	add	r3, r2
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	498f      	ldr	r1, [pc, #572]	; (8001840 <shotPosition+0x500>)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	440b      	add	r3, r1
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	498d      	ldr	r1, [pc, #564]	; (8001844 <shotPosition+0x504>)
 800160e:	2026      	movs	r0, #38	; 0x26
 8001610:	fb00 f202 	mul.w	r2, r0, r2
 8001614:	440a      	add	r2, r1
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	603b      	str	r3, [r7, #0]
				} while (f == 5 || f == 1 || f == 2);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b05      	cmp	r3, #5
 8001620:	f43f af56 	beq.w	80014d0 <shotPosition+0x190>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	f43f af52 	beq.w	80014d0 <shotPosition+0x190>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b02      	cmp	r3, #2
 8001630:	f43f af4e 	beq.w	80014d0 <shotPosition+0x190>
			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 8001634:	e0a3      	b.n	800177e <shotPosition+0x43e>
			} else if (f == 4) { //if wall
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d107      	bne.n	800164c <shotPosition+0x30c>
				fires[k].isAlive = 0;
 800163c:	4a80      	ldr	r2, [pc, #512]	; (8001840 <shotPosition+0x500>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	330c      	adds	r3, #12
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e098      	b.n	800177e <shotPosition+0x43e>
			} else if (f == 3) { //if barrier
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d11a      	bne.n	8001688 <shotPosition+0x348>
				lcd[fires[k].row][fires[k].col] = ' ';
 8001652:	4a7b      	ldr	r2, [pc, #492]	; (8001840 <shotPosition+0x500>)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	3304      	adds	r3, #4
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4978      	ldr	r1, [pc, #480]	; (8001840 <shotPosition+0x500>)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	440b      	add	r3, r1
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4976      	ldr	r1, [pc, #472]	; (8001844 <shotPosition+0x504>)
 800166a:	2026      	movs	r0, #38	; 0x26
 800166c:	fb00 f202 	mul.w	r2, r0, r2
 8001670:	440a      	add	r2, r1
 8001672:	4413      	add	r3, r2
 8001674:	2220      	movs	r2, #32
 8001676:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Transmit(&huart1, lcd[fires[k].row][fires[k].col], 1,
//						100000);
				fires[k].isAlive = 0;
 8001678:	4a71      	ldr	r2, [pc, #452]	; (8001840 <shotPosition+0x500>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	330c      	adds	r3, #12
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e07a      	b.n	800177e <shotPosition+0x43e>
			} else if (fires[k].col == playerR.y && fires[k].row == playerR.x) {
 8001688:	4a6d      	ldr	r2, [pc, #436]	; (8001840 <shotPosition+0x500>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <shotPosition+0x508>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	d121      	bne.n	80016de <shotPosition+0x39e>
 800169a:	4a69      	ldr	r2, [pc, #420]	; (8001840 <shotPosition+0x500>)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	3304      	adds	r3, #4
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b68      	ldr	r3, [pc, #416]	; (8001848 <shotPosition+0x508>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d117      	bne.n	80016de <shotPosition+0x39e>
				//decreaseHealth playerR ;
				R_Health--;
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <shotPosition+0x50c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <shotPosition+0x50c>)
 80016b6:	6013      	str	r3, [r2, #0]
				playerL.score++;
 80016b8:	4b65      	ldr	r3, [pc, #404]	; (8001850 <shotPosition+0x510>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a64      	ldr	r2, [pc, #400]	; (8001850 <shotPosition+0x510>)
 80016c0:	60d3      	str	r3, [r2, #12]
				if (vfx) {
 80016c2:	4b64      	ldr	r3, [pc, #400]	; (8001854 <shotPosition+0x514>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <shotPosition+0x38e>
					playTankHitSound();
 80016ca:	f7fe fdd9 	bl	8000280 <playTankHitSound>
				}
				fires[k].isAlive = 0;
 80016ce:	4a5c      	ldr	r2, [pc, #368]	; (8001840 <shotPosition+0x500>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	330c      	adds	r3, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e04f      	b.n	800177e <shotPosition+0x43e>
			} else if (fires[k].col == playerL.y && fires[k].row == playerL.x) {
 80016de:	4a58      	ldr	r2, [pc, #352]	; (8001840 <shotPosition+0x500>)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <shotPosition+0x510>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d121      	bne.n	8001734 <shotPosition+0x3f4>
 80016f0:	4a53      	ldr	r2, [pc, #332]	; (8001840 <shotPosition+0x500>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	3304      	adds	r3, #4
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b54      	ldr	r3, [pc, #336]	; (8001850 <shotPosition+0x510>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d117      	bne.n	8001734 <shotPosition+0x3f4>
				//decreaseHealth(playerL);
				L_Health--;
 8001704:	4b54      	ldr	r3, [pc, #336]	; (8001858 <shotPosition+0x518>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	4a53      	ldr	r2, [pc, #332]	; (8001858 <shotPosition+0x518>)
 800170c:	6013      	str	r3, [r2, #0]
				playerR.score++;
 800170e:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <shotPosition+0x508>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	3301      	adds	r3, #1
 8001714:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <shotPosition+0x508>)
 8001716:	60d3      	str	r3, [r2, #12]
				if (vfx) {
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <shotPosition+0x514>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <shotPosition+0x3e4>
					playTankHitSound();
 8001720:	f7fe fdae 	bl	8000280 <playTankHitSound>
				}
				fires[k].isAlive = 0;
 8001724:	4a46      	ldr	r2, [pc, #280]	; (8001840 <shotPosition+0x500>)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	330c      	adds	r3, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e024      	b.n	800177e <shotPosition+0x43e>
			} else if (fires[k].col < 0 || fires[k].col >= 40
 8001734:	4a42      	ldr	r2, [pc, #264]	; (8001840 <shotPosition+0x500>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db16      	blt.n	8001770 <shotPosition+0x430>
 8001742:	4a3f      	ldr	r2, [pc, #252]	; (8001840 <shotPosition+0x500>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b27      	cmp	r3, #39	; 0x27
 800174e:	dc0f      	bgt.n	8001770 <shotPosition+0x430>
					|| fires[k].row < 0 || fires[k].row >= 2) {
 8001750:	4a3b      	ldr	r2, [pc, #236]	; (8001840 <shotPosition+0x500>)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db07      	blt.n	8001770 <shotPosition+0x430>
 8001760:	4a37      	ldr	r2, [pc, #220]	; (8001840 <shotPosition+0x500>)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4413      	add	r3, r2
 8001768:	3304      	adds	r3, #4
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	dd06      	ble.n	800177e <shotPosition+0x43e>
				fires[k].isAlive = 0;
 8001770:	4a33      	ldr	r2, [pc, #204]	; (8001840 <shotPosition+0x500>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	330c      	adds	r3, #12
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
			}

			if (!(col == playerR.x && row == playerR.y)
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <shotPosition+0x508>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	429a      	cmp	r2, r3
 8001786:	d104      	bne.n	8001792 <shotPosition+0x452>
 8001788:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <shotPosition+0x508>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d014      	beq.n	80017bc <shotPosition+0x47c>
					&& !(col == playerL.x && row == playerR.y)) {
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <shotPosition+0x510>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d104      	bne.n	80017a6 <shotPosition+0x466>
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <shotPosition+0x508>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d00a      	beq.n	80017bc <shotPosition+0x47c>
				setCursor(col, row);
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f7ff f80b 	bl	80007c4 <setCursor>
				print(" ");
 80017ae:	482b      	ldr	r0, [pc, #172]	; (800185c <shotPosition+0x51c>)
 80017b0:	f7ff f850 	bl	8000854 <print>
				HAL_Delay(500);
 80017b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017b8:	f001 fecc 	bl	8003554 <HAL_Delay>
			}

			if (fires[k].isAlive) {
 80017bc:	4a20      	ldr	r2, [pc, #128]	; (8001840 <shotPosition+0x500>)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	330c      	adds	r3, #12
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d012      	beq.n	80017f2 <shotPosition+0x4b2>
				setCursor(fires[k].col, fires[k].row);
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <shotPosition+0x500>)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	491a      	ldr	r1, [pc, #104]	; (8001840 <shotPosition+0x500>)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	3304      	adds	r3, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f7fe ffed 	bl	80007c4 <setCursor>
				write(6);
 80017ea:	2006      	movs	r0, #6
 80017ec:	f7ff f894 	bl	8000918 <write>
 80017f0:	e018      	b.n	8001824 <shotPosition+0x4e4>
			} else {
				//num_shooted_bullet--;
				shootFlag = 0;
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <shotPosition+0x520>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
				setCursor(col, row);
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	68b8      	ldr	r0, [r7, #8]
 80017fc:	f7fe ffe2 	bl	80007c4 <setCursor>
				print(" ");
 8001800:	4816      	ldr	r0, [pc, #88]	; (800185c <shotPosition+0x51c>)
 8001802:	f7ff f827 	bl	8000854 <print>
				fires[k].col = -1;
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <shotPosition+0x500>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	f04f 32ff 	mov.w	r2, #4294967295
 8001812:	601a      	str	r2, [r3, #0]
				fires[k].row = -1;
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <shotPosition+0x500>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	3304      	adds	r3, #4
 800181e:	f04f 32ff 	mov.w	r2, #4294967295
 8001822:	601a      	str	r2, [r3, #0]
	for (int k = 0; k < num_shooted_bullet; k++) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <shotPosition+0x524>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	f6ff ad8b 	blt.w	800134c <shotPosition+0xc>
			}
		}

	}
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000620 	.word	0x20000620
 8001844:	20000d48 	.word	0x20000d48
 8001848:	20000c60 	.word	0x20000c60
 800184c:	20000004 	.word	0x20000004
 8001850:	20000c70 	.word	0x20000c70
 8001854:	20000014 	.word	0x20000014
 8001858:	20000008 	.word	0x20000008
 800185c:	080096c4 	.word	0x080096c4
 8001860:	20000618 	.word	0x20000618
 8001864:	2000061c 	.word	0x2000061c

08001868 <movement>:
void movement(Player *player, int currentState) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
//
//	sprintf(buffer, "Player X: %d, Player Y: %d", player->x, player->y); // Convert integers to string
//
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//	HAL_MAX_DELAY); // Transmit string over UART
	int oldX = player->x;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]
	int oldY = player->y;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	60bb      	str	r3, [r7, #8]
	switch (currentState) {
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b03      	cmp	r3, #3
 8001882:	f200 8247 	bhi.w	8001d14 <movement+0x4ac>
 8001886:	a201      	add	r2, pc, #4	; (adr r2, 800188c <movement+0x24>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	0800189d 	.word	0x0800189d
 8001890:	08001981 	.word	0x08001981
 8001894:	08001ae9 	.word	0x08001ae9
 8001898:	08001c41 	.word	0x08001c41
	case 0:	//top

		if (player->x == 1 && lcd[0][player->y] != 4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d124      	bne.n	80018ee <movement+0x86>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a8b      	ldr	r2, [pc, #556]	; (8001ad8 <movement+0x270>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d01e      	beq.n	80018ee <movement+0x86>
				&& lcd[0][player->y] != 3) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a88      	ldr	r2, [pc, #544]	; (8001ad8 <movement+0x270>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d018      	beq.n	80018ee <movement+0x86>
			//catching heart and bullet
			if (lcd[0][player->y] == 1) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a85      	ldr	r2, [pc, #532]	; (8001ad8 <movement+0x270>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d104      	bne.n	80018d2 <movement+0x6a>
				increase(1, player);
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff fc94 	bl	80011f8 <increase>
 80018d0:	e009      	b.n	80018e6 <movement+0x7e>
			} else if (lcd[0][player->y] == 5) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a80      	ldr	r2, [pc, #512]	; (8001ad8 <movement+0x270>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d103      	bne.n	80018e6 <movement+0x7e>
				increase(0, player);
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fc89 	bl	80011f8 <increase>
			}
			player->x = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e047      	b.n	800197e <movement+0x116>
		} else if (player->x == 0 && player->y >= 20) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d13a      	bne.n	800196c <movement+0x104>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b13      	cmp	r3, #19
 80018fc:	dd36      	ble.n	800196c <movement+0x104>
			if (lcd[1][(player->y) - 20] != 4
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	3b14      	subs	r3, #20
 8001904:	4a74      	ldr	r2, [pc, #464]	; (8001ad8 <movement+0x270>)
 8001906:	4413      	add	r3, r2
 8001908:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800190c:	2b04      	cmp	r3, #4
 800190e:	d035      	beq.n	800197c <movement+0x114>
					&& lcd[1][(player->y) - 20] != 3) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	3b14      	subs	r3, #20
 8001916:	4a70      	ldr	r2, [pc, #448]	; (8001ad8 <movement+0x270>)
 8001918:	4413      	add	r3, r2
 800191a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800191e:	2b03      	cmp	r3, #3
 8001920:	d02c      	beq.n	800197c <movement+0x114>
				//catching heart and bullet
				if (lcd[1][(player->y) - 20] == 1) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	3b14      	subs	r3, #20
 8001928:	4a6b      	ldr	r2, [pc, #428]	; (8001ad8 <movement+0x270>)
 800192a:	4413      	add	r3, r2
 800192c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001930:	2b01      	cmp	r3, #1
 8001932:	d104      	bne.n	800193e <movement+0xd6>
					increase(1, player);
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	2001      	movs	r0, #1
 8001938:	f7ff fc5e 	bl	80011f8 <increase>
 800193c:	e00c      	b.n	8001958 <movement+0xf0>
				} else if (lcd[1][(player->y) - 20] == 5) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	3b14      	subs	r3, #20
 8001944:	4a64      	ldr	r2, [pc, #400]	; (8001ad8 <movement+0x270>)
 8001946:	4413      	add	r3, r2
 8001948:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800194c:	2b05      	cmp	r3, #5
 800194e:	d103      	bne.n	8001958 <movement+0xf0>
					increase(0, player);
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fc50 	bl	80011f8 <increase>
				}
				player->x = 1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
				player->y = (player->y) - 20;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f1a3 0214 	sub.w	r2, r3, #20
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	605a      	str	r2, [r3, #4]
			if (lcd[1][(player->y) - 20] != 4
 800196a:	e007      	b.n	800197c <movement+0x114>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT TOP", 8,
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	2208      	movs	r2, #8
 8001972:	495a      	ldr	r1, [pc, #360]	; (8001adc <movement+0x274>)
 8001974:	485a      	ldr	r0, [pc, #360]	; (8001ae0 <movement+0x278>)
 8001976:	f005 fbaf 	bl	80070d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 800197a:	e1cb      	b.n	8001d14 <movement+0x4ac>
			if (lcd[1][(player->y) - 20] != 4
 800197c:	bf00      	nop
		break;
 800197e:	e1c9      	b.n	8001d14 <movement+0x4ac>
	case 1:	//right

		if (player->y >= 0 && player->y < 19) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db4c      	blt.n	8001a22 <movement+0x1ba>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b12      	cmp	r3, #18
 800198e:	dc48      	bgt.n	8001a22 <movement+0x1ba>
			if (lcd[player->x][(player->y) + 1] != 3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	494f      	ldr	r1, [pc, #316]	; (8001ad8 <movement+0x270>)
 800199c:	2026      	movs	r0, #38	; 0x26
 800199e:	fb00 f202 	mul.w	r2, r0, r2
 80019a2:	440a      	add	r2, r1
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	f000 8091 	beq.w	8001ad0 <movement+0x268>
					&& lcd[player->x][(player->y) + 1] != 4) {
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	4947      	ldr	r1, [pc, #284]	; (8001ad8 <movement+0x270>)
 80019ba:	2026      	movs	r0, #38	; 0x26
 80019bc:	fb00 f202 	mul.w	r2, r0, r2
 80019c0:	440a      	add	r2, r1
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	f000 8082 	beq.w	8001ad0 <movement+0x268>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4940      	ldr	r1, [pc, #256]	; (8001ad8 <movement+0x270>)
 80019d8:	2026      	movs	r0, #38	; 0x26
 80019da:	fb00 f202 	mul.w	r2, r0, r2
 80019de:	440a      	add	r2, r1
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <movement+0x18a>
					increase(1, player);
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff fc04 	bl	80011f8 <increase>
 80019f0:	e011      	b.n	8001a16 <movement+0x1ae>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4936      	ldr	r1, [pc, #216]	; (8001ad8 <movement+0x270>)
 80019fe:	2026      	movs	r0, #38	; 0x26
 8001a00:	fb00 f202 	mul.w	r2, r0, r2
 8001a04:	440a      	add	r2, r1
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d103      	bne.n	8001a16 <movement+0x1ae>
					increase(0, player);
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fbf1 	bl	80011f8 <increase>
				}
				player->y = (player->y) + 1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 8001a20:	e056      	b.n	8001ad0 <movement+0x268>
			}
		} else if (player->y < 39 && player->y >= 20) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b26      	cmp	r3, #38	; 0x26
 8001a28:	dc4a      	bgt.n	8001ac0 <movement+0x258>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b13      	cmp	r3, #19
 8001a30:	dd46      	ble.n	8001ac0 <movement+0x258>
			if (lcd[player->x][(player->y) + 1] != 3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4926      	ldr	r1, [pc, #152]	; (8001ad8 <movement+0x270>)
 8001a3e:	2026      	movs	r0, #38	; 0x26
 8001a40:	fb00 f202 	mul.w	r2, r0, r2
 8001a44:	440a      	add	r2, r1
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d042      	beq.n	8001ad4 <movement+0x26c>
					&& lcd[player->x][(player->y) + 1] != 4) {
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	491f      	ldr	r1, [pc, #124]	; (8001ad8 <movement+0x270>)
 8001a5a:	2026      	movs	r0, #38	; 0x26
 8001a5c:	fb00 f202 	mul.w	r2, r0, r2
 8001a60:	440a      	add	r2, r1
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d034      	beq.n	8001ad4 <movement+0x26c>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4918      	ldr	r1, [pc, #96]	; (8001ad8 <movement+0x270>)
 8001a76:	2026      	movs	r0, #38	; 0x26
 8001a78:	fb00 f202 	mul.w	r2, r0, r2
 8001a7c:	440a      	add	r2, r1
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d104      	bne.n	8001a90 <movement+0x228>
					increase(1, player);
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff fbb5 	bl	80011f8 <increase>
 8001a8e:	e011      	b.n	8001ab4 <movement+0x24c>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	490f      	ldr	r1, [pc, #60]	; (8001ad8 <movement+0x270>)
 8001a9c:	2026      	movs	r0, #38	; 0x26
 8001a9e:	fb00 f202 	mul.w	r2, r0, r2
 8001aa2:	440a      	add	r2, r1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d103      	bne.n	8001ab4 <movement+0x24c>
					increase(0, player);
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fba2 	bl	80011f8 <increase>
				}
				player->y = (player->y) + 1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 8001abe:	e009      	b.n	8001ad4 <movement+0x26c>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT RIGHt", 10,
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <movement+0x27c>)
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <movement+0x278>)
 8001aca:	f005 fb05 	bl	80070d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001ace:	e121      	b.n	8001d14 <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001ad0:	bf00      	nop
 8001ad2:	e11f      	b.n	8001d14 <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001ad4:	bf00      	nop
		break;
 8001ad6:	e11d      	b.n	8001d14 <movement+0x4ac>
 8001ad8:	20000d48 	.word	0x20000d48
 8001adc:	080096c8 	.word	0x080096c8
 8001ae0:	200002a0 	.word	0x200002a0
 8001ae4:	080096d4 	.word	0x080096d4

	case 2:	//left

		if (player->y > 0 && player->y <= 19) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dd4c      	ble.n	8001b8a <movement+0x322>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b13      	cmp	r3, #19
 8001af6:	dc48      	bgt.n	8001b8a <movement+0x322>
			if (lcd[player->x][(player->y) - 1] != 3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	4997      	ldr	r1, [pc, #604]	; (8001d60 <movement+0x4f8>)
 8001b04:	2026      	movs	r0, #38	; 0x26
 8001b06:	fb00 f202 	mul.w	r2, r0, r2
 8001b0a:	440a      	add	r2, r1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	f000 8091 	beq.w	8001c38 <movement+0x3d0>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	498f      	ldr	r1, [pc, #572]	; (8001d60 <movement+0x4f8>)
 8001b22:	2026      	movs	r0, #38	; 0x26
 8001b24:	fb00 f202 	mul.w	r2, r0, r2
 8001b28:	440a      	add	r2, r1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	f000 8082 	beq.w	8001c38 <movement+0x3d0>
				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	4988      	ldr	r1, [pc, #544]	; (8001d60 <movement+0x4f8>)
 8001b40:	2026      	movs	r0, #38	; 0x26
 8001b42:	fb00 f202 	mul.w	r2, r0, r2
 8001b46:	440a      	add	r2, r1
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d104      	bne.n	8001b5a <movement+0x2f2>
					increase(1, player);
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7ff fb50 	bl	80011f8 <increase>
 8001b58:	e011      	b.n	8001b7e <movement+0x316>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	497e      	ldr	r1, [pc, #504]	; (8001d60 <movement+0x4f8>)
 8001b66:	2026      	movs	r0, #38	; 0x26
 8001b68:	fb00 f202 	mul.w	r2, r0, r2
 8001b6c:	440a      	add	r2, r1
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d103      	bne.n	8001b7e <movement+0x316>
					increase(0, player);
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fb3d 	bl	80011f8 <increase>
				}

				player->y = (player->y) - 1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001b88:	e056      	b.n	8001c38 <movement+0x3d0>
			}
		} else if (player->y <= 39 && player->y > 20) {
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b27      	cmp	r3, #39	; 0x27
 8001b90:	dc4a      	bgt.n	8001c28 <movement+0x3c0>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b14      	cmp	r3, #20
 8001b98:	dd46      	ble.n	8001c28 <movement+0x3c0>
			if (lcd[player->x][(player->y) - 1] != 3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	496e      	ldr	r1, [pc, #440]	; (8001d60 <movement+0x4f8>)
 8001ba6:	2026      	movs	r0, #38	; 0x26
 8001ba8:	fb00 f202 	mul.w	r2, r0, r2
 8001bac:	440a      	add	r2, r1
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d042      	beq.n	8001c3c <movement+0x3d4>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	4967      	ldr	r1, [pc, #412]	; (8001d60 <movement+0x4f8>)
 8001bc2:	2026      	movs	r0, #38	; 0x26
 8001bc4:	fb00 f202 	mul.w	r2, r0, r2
 8001bc8:	440a      	add	r2, r1
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d034      	beq.n	8001c3c <movement+0x3d4>

				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	4960      	ldr	r1, [pc, #384]	; (8001d60 <movement+0x4f8>)
 8001bde:	2026      	movs	r0, #38	; 0x26
 8001be0:	fb00 f202 	mul.w	r2, r0, r2
 8001be4:	440a      	add	r2, r1
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d104      	bne.n	8001bf8 <movement+0x390>
					increase(1, player);
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff fb01 	bl	80011f8 <increase>
 8001bf6:	e011      	b.n	8001c1c <movement+0x3b4>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	4957      	ldr	r1, [pc, #348]	; (8001d60 <movement+0x4f8>)
 8001c04:	2026      	movs	r0, #38	; 0x26
 8001c06:	fb00 f202 	mul.w	r2, r0, r2
 8001c0a:	440a      	add	r2, r1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d103      	bne.n	8001c1c <movement+0x3b4>
					increase(0, player);
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff faee 	bl	80011f8 <increase>
				}

				player->y = (player->y) - 1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001c26:	e009      	b.n	8001c3c <movement+0x3d4>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT LEFT", 9,
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	2209      	movs	r2, #9
 8001c2e:	494d      	ldr	r1, [pc, #308]	; (8001d64 <movement+0x4fc>)
 8001c30:	484d      	ldr	r0, [pc, #308]	; (8001d68 <movement+0x500>)
 8001c32:	f005 fa51 	bl	80070d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001c36:	e06d      	b.n	8001d14 <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001c38:	bf00      	nop
 8001c3a:	e06b      	b.n	8001d14 <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001c3c:	bf00      	nop
		break;
 8001c3e:	e069      	b.n	8001d14 <movement+0x4ac>
		break;
	case 3:	//bot
		if (player->x == 0 && lcd[1][player->y] != 4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d12c      	bne.n	8001ca2 <movement+0x43a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <movement+0x4f8>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d024      	beq.n	8001ca2 <movement+0x43a>
				&& lcd[1][player->y] != 3) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a40      	ldr	r2, [pc, #256]	; (8001d60 <movement+0x4f8>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d01c      	beq.n	8001ca2 <movement+0x43a>
			//catching heart and bullet
			if (lcd[1][player->y] == 1) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a3c      	ldr	r2, [pc, #240]	; (8001d60 <movement+0x4f8>)
 8001c6e:	4413      	add	r3, r2
 8001c70:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d104      	bne.n	8001c82 <movement+0x41a>
				increase(1, player);
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff fabc 	bl	80011f8 <increase>
 8001c80:	e00b      	b.n	8001c9a <movement+0x432>
			} else if (lcd[1][player->y] == 5) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a36      	ldr	r2, [pc, #216]	; (8001d60 <movement+0x4f8>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d103      	bne.n	8001c9a <movement+0x432>
				increase(0, player);
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff faaf 	bl	80011f8 <increase>
			}

			player->x = 1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e037      	b.n	8001d12 <movement+0x4aa>
		} else if (player->x == 1 && player->y < 20) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d12b      	bne.n	8001d02 <movement+0x49a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b13      	cmp	r3, #19
 8001cb0:	dc27      	bgt.n	8001d02 <movement+0x49a>
			if (lcd[0][(player->y) + 20] != 4) {
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <movement+0x4f8>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d028      	beq.n	8001d12 <movement+0x4aa>
				//catching heart and bullet
				if (lcd[0][(player->y) + 20] == 1) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <movement+0x4f8>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d104      	bne.n	8001cd8 <movement+0x470>
					increase(1, player);
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff fa91 	bl	80011f8 <increase>
 8001cd6:	e00a      	b.n	8001cee <movement+0x486>
				} else if (lcd[0][(player->y) + 20] == 5) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	3314      	adds	r3, #20
 8001cde:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <movement+0x4f8>)
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d103      	bne.n	8001cee <movement+0x486>
					increase(0, player);
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff fa85 	bl	80011f8 <increase>
				}
				player->x = 0;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
				player->y = (player->y) + 20;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f103 0214 	add.w	r2, r3, #20
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]
			if (lcd[0][(player->y) + 20] != 4) {
 8001d00:	e007      	b.n	8001d12 <movement+0x4aa>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT BOT", 8,
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	2208      	movs	r2, #8
 8001d08:	4918      	ldr	r1, [pc, #96]	; (8001d6c <movement+0x504>)
 8001d0a:	4817      	ldr	r0, [pc, #92]	; (8001d68 <movement+0x500>)
 8001d0c:	f005 f9e4 	bl	80070d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001d10:	e7ff      	b.n	8001d12 <movement+0x4aa>
 8001d12:	bf00      	nop
	}

	lcd[player->x][player->y] = player->c;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	7a4c      	ldrb	r4, [r1, #9]
 8001d20:	490f      	ldr	r1, [pc, #60]	; (8001d60 <movement+0x4f8>)
 8001d22:	2026      	movs	r0, #38	; 0x26
 8001d24:	fb00 f202 	mul.w	r2, r0, r2
 8001d28:	440a      	add	r2, r1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	701a      	strb	r2, [r3, #0]

	// Clear the old position on the LCD
	setCursor(oldY, oldX);
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	f7fe fd46 	bl	80007c4 <setCursor>
	write(' ');
 8001d38:	2020      	movs	r0, #32
 8001d3a:	f7fe fded 	bl	8000918 <write>

	// Write the player's character at the new position on the LCD
	setCursor(player->y, player->x);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f7fe fd3b 	bl	80007c4 <setCursor>
	write(player->c);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7a5b      	ldrb	r3, [r3, #9]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fde0 	bl	8000918 <write>

}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	20000d48 	.word	0x20000d48
 8001d64:	080096e0 	.word	0x080096e0
 8001d68:	200002a0 	.word	0x200002a0
 8001d6c:	080096ec 	.word	0x080096ec

08001d70 <initializeObjects>:

void initializeObjects() {
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b08b      	sub	sp, #44	; 0x2c
 8001d74:	af00      	add	r7, sp, #0
	playerR.x = 1;
 8001d76:	4ba8      	ldr	r3, [pc, #672]	; (8002018 <initializeObjects+0x2a8>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
	playerR.y = 19;
 8001d7c:	4ba6      	ldr	r3, [pc, #664]	; (8002018 <initializeObjects+0x2a8>)
 8001d7e:	2213      	movs	r2, #19
 8001d80:	605a      	str	r2, [r3, #4]
	playerR.c = 7;
 8001d82:	4ba5      	ldr	r3, [pc, #660]	; (8002018 <initializeObjects+0x2a8>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	725a      	strb	r2, [r3, #9]
	playerL.c = 8;
 8001d88:	4ba4      	ldr	r3, [pc, #656]	; (800201c <initializeObjects+0x2ac>)
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	725a      	strb	r2, [r3, #9]
	playerL.x = 1;
 8001d8e:	4ba3      	ldr	r3, [pc, #652]	; (800201c <initializeObjects+0x2ac>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
	playerL.y = 0;
 8001d94:	4ba1      	ldr	r3, [pc, #644]	; (800201c <initializeObjects+0x2ac>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	e015      	b.n	8001dcc <initializeObjects+0x5c>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
 8001da4:	e00c      	b.n	8001dc0 <initializeObjects+0x50>
			lcd[i][j] = ' ';  // Empty cell
 8001da6:	4a9e      	ldr	r2, [pc, #632]	; (8002020 <initializeObjects+0x2b0>)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	2126      	movs	r1, #38	; 0x26
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	441a      	add	r2, r3
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	4413      	add	r3, r2
 8001db6:	2220      	movs	r2, #32
 8001db8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	2b25      	cmp	r3, #37	; 0x25
 8001dc4:	ddef      	ble.n	8001da6 <initializeObjects+0x36>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	dde6      	ble.n	8001da0 <initializeObjects+0x30>
		}
	}

	//hearts
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e036      	b.n	8001e46 <initializeObjects+0xd6>
		hearts[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001dd8:	f006 f9de 	bl	8008198 <rand>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b91      	ldr	r3, [pc, #580]	; (8002024 <initializeObjects+0x2b4>)
 8001de0:	fb83 1302 	smull	r1, r3, r3, r2
 8001de4:	4413      	add	r3, r2
 8001de6:	1119      	asrs	r1, r3, #4
 8001de8:	17d3      	asrs	r3, r2, #31
 8001dea:	1ac9      	subs	r1, r1, r3
 8001dec:	460b      	mov	r3, r1
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	1ad1      	subs	r1, r2, r3
 8001df6:	3103      	adds	r1, #3
 8001df8:	488b      	ldr	r0, [pc, #556]	; (8002028 <initializeObjects+0x2b8>)
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4403      	add	r3, r0
 8001e06:	6019      	str	r1, [r3, #0]
		hearts[i].y = rand() % 2;       // Random number between 0 and 1
 8001e08:	f006 f9c6 	bl	8008198 <rand>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	bfb8      	it	lt
 8001e16:	425b      	neglt	r3, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4883      	ldr	r0, [pc, #524]	; (8002028 <initializeObjects+0x2b8>)
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4403      	add	r3, r0
 8001e28:	3304      	adds	r3, #4
 8001e2a:	6019      	str	r1, [r3, #0]
		hearts[i].c = 1;
 8001e2c:	497e      	ldr	r1, [pc, #504]	; (8002028 <initializeObjects+0x2b8>)
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3301      	adds	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	ddc5      	ble.n	8001dd8 <initializeObjects+0x68>
	}

	//  mistery boxes
	for (int i = 0; i < NUM_BOXES; i++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	e036      	b.n	8001ec0 <initializeObjects+0x150>
		boxes[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001e52:	f006 f9a1 	bl	8008198 <rand>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b72      	ldr	r3, [pc, #456]	; (8002024 <initializeObjects+0x2b4>)
 8001e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5e:	4413      	add	r3, r2
 8001e60:	1119      	asrs	r1, r3, #4
 8001e62:	17d3      	asrs	r3, r2, #31
 8001e64:	1ac9      	subs	r1, r1, r3
 8001e66:	460b      	mov	r3, r1
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a5b      	subs	r3, r3, r1
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	1ad1      	subs	r1, r2, r3
 8001e70:	3103      	adds	r1, #3
 8001e72:	486e      	ldr	r0, [pc, #440]	; (800202c <initializeObjects+0x2bc>)
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4403      	add	r3, r0
 8001e80:	6019      	str	r1, [r3, #0]
		boxes[i].y = rand() % 2;       // Random number between 0 and 1
 8001e82:	f006 f989 	bl	8008198 <rand>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	bfb8      	it	lt
 8001e90:	425b      	neglt	r3, r3
 8001e92:	4619      	mov	r1, r3
 8001e94:	4865      	ldr	r0, [pc, #404]	; (800202c <initializeObjects+0x2bc>)
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4403      	add	r3, r0
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	6019      	str	r1, [r3, #0]
		boxes[i].c = 2;
 8001ea6:	4961      	ldr	r1, [pc, #388]	; (800202c <initializeObjects+0x2bc>)
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	ddc5      	ble.n	8001e52 <initializeObjects+0xe2>
	}

	//bullets
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e036      	b.n	8001f3a <initializeObjects+0x1ca>
		bullets[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001ecc:	f006 f964 	bl	8008198 <rand>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b54      	ldr	r3, [pc, #336]	; (8002024 <initializeObjects+0x2b4>)
 8001ed4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ed8:	4413      	add	r3, r2
 8001eda:	1119      	asrs	r1, r3, #4
 8001edc:	17d3      	asrs	r3, r2, #31
 8001ede:	1ac9      	subs	r1, r1, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a5b      	subs	r3, r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	1ad1      	subs	r1, r2, r3
 8001eea:	3103      	adds	r1, #3
 8001eec:	4850      	ldr	r0, [pc, #320]	; (8002030 <initializeObjects+0x2c0>)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4403      	add	r3, r0
 8001efa:	6019      	str	r1, [r3, #0]
		bullets[i].y = rand() % 2;       // Random number between 0 and 1
 8001efc:	f006 f94c 	bl	8008198 <rand>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	bfb8      	it	lt
 8001f0a:	425b      	neglt	r3, r3
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4848      	ldr	r0, [pc, #288]	; (8002030 <initializeObjects+0x2c0>)
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4403      	add	r3, r0
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	6019      	str	r1, [r3, #0]
		bullets[i].c = 5;
 8001f20:	4943      	ldr	r1, [pc, #268]	; (8002030 <initializeObjects+0x2c0>)
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3308      	adds	r3, #8
 8001f30:	2205      	movs	r2, #5
 8001f32:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	3301      	adds	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	ddc5      	ble.n	8001ecc <initializeObjects+0x15c>
	}
	//obstacles
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	e036      	b.n	8001fb4 <initializeObjects+0x244>
		obstacles[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001f46:	f006 f927 	bl	8008198 <rand>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b35      	ldr	r3, [pc, #212]	; (8002024 <initializeObjects+0x2b4>)
 8001f4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001f52:	4413      	add	r3, r2
 8001f54:	1119      	asrs	r1, r3, #4
 8001f56:	17d3      	asrs	r3, r2, #31
 8001f58:	1ac9      	subs	r1, r1, r3
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a5b      	subs	r3, r3, r1
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	1ad1      	subs	r1, r2, r3
 8001f64:	3103      	adds	r1, #3
 8001f66:	4833      	ldr	r0, [pc, #204]	; (8002034 <initializeObjects+0x2c4>)
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4403      	add	r3, r0
 8001f74:	6019      	str	r1, [r3, #0]
		obstacles[i].y = rand() % 2;       // Random number between 0 and 1
 8001f76:	f006 f90f 	bl	8008198 <rand>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	bfb8      	it	lt
 8001f84:	425b      	neglt	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	482a      	ldr	r0, [pc, #168]	; (8002034 <initializeObjects+0x2c4>)
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4403      	add	r3, r0
 8001f96:	3304      	adds	r3, #4
 8001f98:	6019      	str	r1, [r3, #0]
		obstacles[i].c = 4;
 8001f9a:	4926      	ldr	r1, [pc, #152]	; (8002034 <initializeObjects+0x2c4>)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3308      	adds	r3, #8
 8001faa:	2204      	movs	r2, #4
 8001fac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	ddc5      	ble.n	8001f46 <initializeObjects+0x1d6>
	}
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e024      	b.n	800200a <initializeObjects+0x29a>
		lcd[hearts[i].y][hearts[i].x] = hearts[i].c;
 8001fc0:	4919      	ldr	r1, [pc, #100]	; (8002028 <initializeObjects+0x2b8>)
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3304      	adds	r3, #4
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	4915      	ldr	r1, [pc, #84]	; (8002028 <initializeObjects+0x2b8>)
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	4c11      	ldr	r4, [pc, #68]	; (8002028 <initializeObjects+0x2b8>)
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4423      	add	r3, r4
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	781c      	ldrb	r4, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <initializeObjects+0x2b0>)
 8001ff6:	2326      	movs	r3, #38	; 0x26
 8001ff8:	fb00 f303 	mul.w	r3, r0, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	4622      	mov	r2, r4
 8002002:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3301      	adds	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b02      	cmp	r3, #2
 800200e:	ddd7      	ble.n	8001fc0 <initializeObjects+0x250>
	}
	for (int i = 0; i < NUM_BULLETS; i++) {
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	e035      	b.n	8002082 <initializeObjects+0x312>
 8002016:	bf00      	nop
 8002018:	20000c60 	.word	0x20000c60
 800201c:	20000c70 	.word	0x20000c70
 8002020:	20000d48 	.word	0x20000d48
 8002024:	92492493 	.word	0x92492493
 8002028:	20000c88 	.word	0x20000c88
 800202c:	20000cac 	.word	0x20000cac
 8002030:	20000cc4 	.word	0x20000cc4
 8002034:	20000d00 	.word	0x20000d00
		lcd[bullets[i].y][bullets[i].x] = bullets[i].c;
 8002038:	4956      	ldr	r1, [pc, #344]	; (8002194 <initializeObjects+0x424>)
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	3304      	adds	r3, #4
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	4952      	ldr	r1, [pc, #328]	; (8002194 <initializeObjects+0x424>)
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	4c4e      	ldr	r4, [pc, #312]	; (8002194 <initializeObjects+0x424>)
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4423      	add	r3, r4
 8002068:	3308      	adds	r3, #8
 800206a:	781c      	ldrb	r4, [r3, #0]
 800206c:	4a4a      	ldr	r2, [pc, #296]	; (8002198 <initializeObjects+0x428>)
 800206e:	2326      	movs	r3, #38	; 0x26
 8002070:	fb00 f303 	mul.w	r3, r0, r3
 8002074:	4413      	add	r3, r2
 8002076:	440b      	add	r3, r1
 8002078:	4622      	mov	r2, r4
 800207a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3301      	adds	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b04      	cmp	r3, #4
 8002086:	ddd7      	ble.n	8002038 <initializeObjects+0x2c8>
	}
	for (int i = 0; i < NUM_BOXES; i++) {
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	e024      	b.n	80020d8 <initializeObjects+0x368>
		lcd[boxes[i].y][boxes[i].x] = boxes[i].c;
 800208e:	4943      	ldr	r1, [pc, #268]	; (800219c <initializeObjects+0x42c>)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3304      	adds	r3, #4
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	493e      	ldr	r1, [pc, #248]	; (800219c <initializeObjects+0x42c>)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	4c3a      	ldr	r4, [pc, #232]	; (800219c <initializeObjects+0x42c>)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4423      	add	r3, r4
 80020be:	3308      	adds	r3, #8
 80020c0:	781c      	ldrb	r4, [r3, #0]
 80020c2:	4a35      	ldr	r2, [pc, #212]	; (8002198 <initializeObjects+0x428>)
 80020c4:	2326      	movs	r3, #38	; 0x26
 80020c6:	fb00 f303 	mul.w	r3, r0, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	4622      	mov	r2, r4
 80020d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3301      	adds	r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	ddd7      	ble.n	800208e <initializeObjects+0x31e>
	}
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	e024      	b.n	800212e <initializeObjects+0x3be>
		lcd[obstacles[i].y][obstacles[i].x] = obstacles[i].c;
 80020e4:	492e      	ldr	r1, [pc, #184]	; (80021a0 <initializeObjects+0x430>)
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3304      	adds	r3, #4
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	492a      	ldr	r1, [pc, #168]	; (80021a0 <initializeObjects+0x430>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	4c26      	ldr	r4, [pc, #152]	; (80021a0 <initializeObjects+0x430>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4423      	add	r3, r4
 8002114:	3308      	adds	r3, #8
 8002116:	781c      	ldrb	r4, [r3, #0]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <initializeObjects+0x428>)
 800211a:	2326      	movs	r3, #38	; 0x26
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	4413      	add	r3, r2
 8002122:	440b      	add	r3, r1
 8002124:	4622      	mov	r2, r4
 8002126:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	3301      	adds	r3, #1
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b05      	cmp	r3, #5
 8002132:	ddd7      	ble.n	80020e4 <initializeObjects+0x374>
	}
	//WALLS
	lcd[1][1] = 3;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <initializeObjects+0x428>)
 8002136:	2203      	movs	r2, #3
 8002138:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	lcd[0][22] = 3;
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <initializeObjects+0x428>)
 800213e:	2203      	movs	r2, #3
 8002140:	759a      	strb	r2, [r3, #22]
	lcd[1][18] = 3;
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <initializeObjects+0x428>)
 8002144:	2203      	movs	r2, #3
 8002146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd[0][37] = 3;
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <initializeObjects+0x428>)
 800214c:	2203      	movs	r2, #3
 800214e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//[0][38] [0][39] [1][38] [1][39]  are dead
	//Wolves
	lcd[playerR.x][playerR.y] = playerR.c;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <initializeObjects+0x434>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <initializeObjects+0x434>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4912      	ldr	r1, [pc, #72]	; (80021a4 <initializeObjects+0x434>)
 800215c:	7a4c      	ldrb	r4, [r1, #9]
 800215e:	490e      	ldr	r1, [pc, #56]	; (8002198 <initializeObjects+0x428>)
 8002160:	2026      	movs	r0, #38	; 0x26
 8002162:	fb00 f202 	mul.w	r2, r0, r2
 8002166:	440a      	add	r2, r1
 8002168:	4413      	add	r3, r2
 800216a:	4622      	mov	r2, r4
 800216c:	701a      	strb	r2, [r3, #0]
	lcd[playerL.x][playerL.y] = playerL.c;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <initializeObjects+0x438>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <initializeObjects+0x438>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	490c      	ldr	r1, [pc, #48]	; (80021a8 <initializeObjects+0x438>)
 8002178:	7a4c      	ldrb	r4, [r1, #9]
 800217a:	4907      	ldr	r1, [pc, #28]	; (8002198 <initializeObjects+0x428>)
 800217c:	2026      	movs	r0, #38	; 0x26
 800217e:	fb00 f202 	mul.w	r2, r0, r2
 8002182:	440a      	add	r2, r1
 8002184:	4413      	add	r3, r2
 8002186:	4622      	mov	r2, r4
 8002188:	701a      	strb	r2, [r3, #0]
	//lcd[1][0]=8;
	//lcd[1][19]=7;
}
 800218a:	bf00      	nop
 800218c:	372c      	adds	r7, #44	; 0x2c
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	20000cc4 	.word	0x20000cc4
 8002198:	20000d48 	.word	0x20000d48
 800219c:	20000cac 	.word	0x20000cac
 80021a0:	20000d00 	.word	0x20000d00
 80021a4:	20000c60 	.word	0x20000c60
 80021a8:	20000c70 	.word	0x20000c70

080021ac <displayObjects>:

void displayObjects() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
	// Display the objects based on the screen array
	for (int i = 0; i < LCD_HEIGHT; i++) {
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	e01b      	b.n	80021f0 <displayObjects+0x44>
		for (int j = 0; j < LCD_WIDTH; j++) {
 80021b8:	2300      	movs	r3, #0
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	e012      	b.n	80021e4 <displayObjects+0x38>
			setCursor(j, i);
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f7fe faff 	bl	80007c4 <setCursor>
			write(lcd[i][j]);
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <displayObjects+0x54>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2126      	movs	r1, #38	; 0x26
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	441a      	add	r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fb9d 	bl	8000918 <write>
		for (int j = 0; j < LCD_WIDTH; j++) {
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b25      	cmp	r3, #37	; 0x25
 80021e8:	dde9      	ble.n	80021be <displayObjects+0x12>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3301      	adds	r3, #1
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	dde0      	ble.n	80021b8 <displayObjects+0xc>
		}
	}
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000d48 	.word	0x20000d48

08002204 <showMain>:

//MENU PART
void showMain(void) {
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8002208:	2100      	movs	r1, #0
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe fada 	bl	80007c4 <setCursor>
	print("1- Play");
 8002210:	480a      	ldr	r0, [pc, #40]	; (800223c <showMain+0x38>)
 8002212:	f7fe fb1f 	bl	8000854 <print>
	setCursor(0, 1);
 8002216:	2101      	movs	r1, #1
 8002218:	2000      	movs	r0, #0
 800221a:	f7fe fad3 	bl	80007c4 <setCursor>
	print("2- About");
 800221e:	4808      	ldr	r0, [pc, #32]	; (8002240 <showMain+0x3c>)
 8002220:	f7fe fb18 	bl	8000854 <print>
	write(1);
 8002224:	2001      	movs	r0, #1
 8002226:	f7fe fb77 	bl	8000918 <write>
	setCursor(20, 0);
 800222a:	2100      	movs	r1, #0
 800222c:	2014      	movs	r0, #20
 800222e:	f7fe fac9 	bl	80007c4 <setCursor>
	print("3- Setting");
 8002232:	4804      	ldr	r0, [pc, #16]	; (8002244 <showMain+0x40>)
 8002234:	f7fe fb0e 	bl	8000854 <print>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	080096f8 	.word	0x080096f8
 8002240:	08009700 	.word	0x08009700
 8002244:	0800970c 	.word	0x0800970c

08002248 <showAbout>:

void showAbout(void) {
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 800224c:	2100      	movs	r1, #0
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe fab8 	bl	80007c4 <setCursor>
	print("Kimiya & Atiye");
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <showAbout+0x18>)
 8002256:	f7fe fafd 	bl	8000854 <print>
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	08009718 	.word	0x08009718

08002264 <showSetting>:

void showSetting(void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8002268:	2100      	movs	r1, #0
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe faaa 	bl	80007c4 <setCursor>
	print("Right vs Left");
 8002270:	4809      	ldr	r0, [pc, #36]	; (8002298 <showSetting+0x34>)
 8002272:	f7fe faef 	bl	8000854 <print>
	setCursor(0, 1);
 8002276:	2101      	movs	r1, #1
 8002278:	2000      	movs	r0, #0
 800227a:	f7fe faa3 	bl	80007c4 <setCursor>
	print("0-Bullets");
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <showSetting+0x38>)
 8002280:	f7fe fae8 	bl	8000854 <print>
	setCursor(20, 0);
 8002284:	2100      	movs	r1, #0
 8002286:	2014      	movs	r0, #20
 8002288:	f7fe fa9c 	bl	80007c4 <setCursor>
	print("*-Health");
 800228c:	4804      	ldr	r0, [pc, #16]	; (80022a0 <showSetting+0x3c>)
 800228e:	f7fe fae1 	bl	8000854 <print>
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	08009728 	.word	0x08009728
 800229c:	08009738 	.word	0x08009738
 80022a0:	08009744 	.word	0x08009744

080022a4 <bulletsSetting>:

void bulletsSetting(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 80022aa:	2101      	movs	r1, #1
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7fe fa89 	bl	80007c4 <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Bullets:%d", R_bullets);
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <bulletsSetting+0x5c>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4912      	ldr	r1, [pc, #72]	; (8002304 <bulletsSetting+0x60>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f005 ffa9 	bl	8008214 <siprintf>
	print(RBStr);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fac4 	bl	8000854 <print>
	setCursor(20, 0);
 80022cc:	2100      	movs	r1, #0
 80022ce:	2014      	movs	r0, #20
 80022d0:	f7fe fa78 	bl	80007c4 <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Bullets:%d", L_bullets);
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <bulletsSetting+0x64>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	463b      	mov	r3, r7
 80022da:	490c      	ldr	r1, [pc, #48]	; (800230c <bulletsSetting+0x68>)
 80022dc:	4618      	mov	r0, r3
 80022de:	f005 ff99 	bl	8008214 <siprintf>
	print(LBStr);
 80022e2:	463b      	mov	r3, r7
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fab5 	bl	8000854 <print>
	setCursor(20, 1);
 80022ea:	2101      	movs	r1, #1
 80022ec:	2014      	movs	r0, #20
 80022ee:	f7fe fa69 	bl	80007c4 <setCursor>

	print("#-Confirm");
 80022f2:	4807      	ldr	r0, [pc, #28]	; (8002310 <bulletsSetting+0x6c>)
 80022f4:	f7fe faae 	bl	8000854 <print>
}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000000c 	.word	0x2000000c
 8002304:	08009750 	.word	0x08009750
 8002308:	20000010 	.word	0x20000010
 800230c:	08009764 	.word	0x08009764
 8002310:	08009774 	.word	0x08009774

08002314 <HealthSetting>:

void HealthSetting(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 800231a:	2101      	movs	r1, #1
 800231c:	2000      	movs	r0, #0
 800231e:	f7fe fa51 	bl	80007c4 <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Health:%d", R_Health);
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HealthSetting+0x5c>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4912      	ldr	r1, [pc, #72]	; (8002374 <HealthSetting+0x60>)
 800232c:	4618      	mov	r0, r3
 800232e:	f005 ff71 	bl	8008214 <siprintf>
	print(RBStr);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fa8c 	bl	8000854 <print>
	setCursor(20, 0);
 800233c:	2100      	movs	r1, #0
 800233e:	2014      	movs	r0, #20
 8002340:	f7fe fa40 	bl	80007c4 <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Health:%d", L_Health);
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HealthSetting+0x64>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	463b      	mov	r3, r7
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <HealthSetting+0x68>)
 800234c:	4618      	mov	r0, r3
 800234e:	f005 ff61 	bl	8008214 <siprintf>
	print(LBStr);
 8002352:	463b      	mov	r3, r7
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fa7d 	bl	8000854 <print>
	setCursor(20, 1);
 800235a:	2101      	movs	r1, #1
 800235c:	2014      	movs	r0, #20
 800235e:	f7fe fa31 	bl	80007c4 <setCursor>

	print("#-Confirm");
 8002362:	4807      	ldr	r0, [pc, #28]	; (8002380 <HealthSetting+0x6c>)
 8002364:	f7fe fa76 	bl	8000854 <print>
}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000004 	.word	0x20000004
 8002374:	08009780 	.word	0x08009780
 8002378:	20000008 	.word	0x20000008
 800237c:	08009790 	.word	0x08009790
 8002380:	08009774 	.word	0x08009774

08002384 <PWM_Start>:

TIM_HandleTypeDef *pwm_timer = &htim2; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel = TIM_CHANNEL_2;  // Specify configured PWM channel

void PWM_Start() {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <PWM_Start+0x18>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <PWM_Start+0x1c>)
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f003 fece 	bl	8006134 <HAL_TIM_PWM_Start>
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000078 	.word	0x20000078
 80023a0:	2000007c 	.word	0x2000007c

080023a4 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	460a      	mov	r2, r1
 80023ae:	80fb      	strh	r3, [r7, #6]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <PWM_Change_Tone+0x20>
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d937      	bls.n	8002434 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 80023c4:	4b52      	ldr	r3, [pc, #328]	; (8002510 <PWM_Change_Tone+0x16c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <PWM_Change_Tone+0x34>
 80023cc:	4b51      	ldr	r3, [pc, #324]	; (8002514 <PWM_Change_Tone+0x170>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34
 80023d6:	e097      	b.n	8002508 <PWM_Change_Tone+0x164>
 80023d8:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <PWM_Change_Tone+0x16c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d105      	bne.n	80023ec <PWM_Change_Tone+0x48>
 80023e0:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <PWM_Change_Tone+0x170>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	6393      	str	r3, [r2, #56]	; 0x38
 80023ea:	e08d      	b.n	8002508 <PWM_Change_Tone+0x164>
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <PWM_Change_Tone+0x16c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d105      	bne.n	8002400 <PWM_Change_Tone+0x5c>
 80023f4:	4b47      	ldr	r3, [pc, #284]	; (8002514 <PWM_Change_Tone+0x170>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80023fe:	e083      	b.n	8002508 <PWM_Change_Tone+0x164>
 8002400:	4b43      	ldr	r3, [pc, #268]	; (8002510 <PWM_Change_Tone+0x16c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d105      	bne.n	8002414 <PWM_Change_Tone+0x70>
 8002408:	4b42      	ldr	r3, [pc, #264]	; (8002514 <PWM_Change_Tone+0x170>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2300      	movs	r3, #0
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	e079      	b.n	8002508 <PWM_Change_Tone+0x164>
 8002414:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <PWM_Change_Tone+0x16c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b10      	cmp	r3, #16
 800241a:	d105      	bne.n	8002428 <PWM_Change_Tone+0x84>
 800241c:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <PWM_Change_Tone+0x170>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	6593      	str	r3, [r2, #88]	; 0x58
 8002426:	e06f      	b.n	8002508 <PWM_Change_Tone+0x164>
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <PWM_Change_Tone+0x170>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002432:	e069      	b.n	8002508 <PWM_Change_Tone+0x164>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8002434:	f002 ffae 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8002438:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002442:	4a35      	ldr	r2, [pc, #212]	; (8002518 <PWM_Change_Tone+0x174>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	0b9b      	lsrs	r3, r3, #14
 800244a:	b29b      	uxth	r3, r3
 800244c:	3301      	adds	r3, #1
 800244e:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 8002450:	8b7b      	ldrh	r3, [r7, #26]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8002464:	88bb      	ldrh	r3, [r7, #4]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	4a2b      	ldr	r2, [pc, #172]	; (800251c <PWM_Change_Tone+0x178>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	09db      	lsrs	r3, r3, #7
 8002474:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8002476:	8b7b      	ldrh	r3, [r7, #26]
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <PWM_Change_Tone+0x170>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <PWM_Change_Tone+0x170>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	3a01      	subs	r2, #1
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <PWM_Change_Tone+0x170>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <PWM_Change_Tone+0x16c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <PWM_Change_Tone+0x108>
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <PWM_Change_Tone+0x170>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80024aa:	e02d      	b.n	8002508 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <PWM_Change_Tone+0x16c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d105      	bne.n	80024c0 <PWM_Change_Tone+0x11c>
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <PWM_Change_Tone+0x170>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024be:	e023      	b.n	8002508 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <PWM_Change_Tone+0x16c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d105      	bne.n	80024d4 <PWM_Change_Tone+0x130>
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <PWM_Change_Tone+0x170>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80024d2:	e019      	b.n	8002508 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <PWM_Change_Tone+0x16c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d105      	bne.n	80024e8 <PWM_Change_Tone+0x144>
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <PWM_Change_Tone+0x170>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80024e6:	e00f      	b.n	8002508 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <PWM_Change_Tone+0x16c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d105      	bne.n	80024fc <PWM_Change_Tone+0x158>
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <PWM_Change_Tone+0x170>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6593      	str	r3, [r2, #88]	; 0x58
}
 80024fa:	e005      	b.n	8002508 <PWM_Change_Tone+0x164>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <PWM_Change_Tone+0x170>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002506:	e7ff      	b.n	8002508 <PWM_Change_Tone+0x164>
 8002508:	bf00      	nop
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000007c 	.word	0x2000007c
 8002514:	20000078 	.word	0x20000078
 8002518:	45e7b273 	.word	0x45e7b273
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <setScore>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//	if (htim->Instance == TIM1) {
//	}
}

void setScore(int score){
 8002520:	b580      	push	{r7, lr}
 8002522:	b090      	sub	sp, #64	; 0x40
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "\nScore: %d", score);
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	490b      	ldr	r1, [pc, #44]	; (800255c <setScore+0x3c>)
 8002530:	4618      	mov	r0, r3
 8002532:	f005 fe6f 	bl	8008214 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fe48 	bl	80001d0 <strlen>
 8002540:	4603      	mov	r3, r0
 8002542:	b29a      	uxth	r2, r3
 8002544:	f107 010c 	add.w	r1, r7, #12
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <setScore+0x40>)
 800254e:	f004 fdc3 	bl	80070d8 <HAL_UART_Transmit>
}
 8002552:	bf00      	nop
 8002554:	3740      	adds	r7, #64	; 0x40
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	080097a0 	.word	0x080097a0
 8002560:	200002a0 	.word	0x200002a0

08002564 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b09b      	sub	sp, #108	; 0x6c
 8002568:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800256a:	f000 ff8d 	bl	8003488 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800256e:	f000 f96d 	bl	800284c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002572:	f000 fbad 	bl	8002cd0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002576:	f000 f9d3 	bl	8002920 <MX_I2C1_Init>
	MX_SPI1_Init();
 800257a:	f000 fa6b 	bl	8002a54 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 800257e:	f000 fb85 	bl	8002c8c <MX_USB_PCD_Init>
	MX_USART1_UART_Init();
 8002582:	f000 fb53 	bl	8002c2c <MX_USART1_UART_Init>
	MX_RTC_Init();
 8002586:	f000 fa0b 	bl	80029a0 <MX_RTC_Init>
	MX_TIM1_Init();
 800258a:	f000 faa1 	bl	8002ad0 <MX_TIM1_Init>
	MX_TIM2_Init();
 800258e:	f000 faf3 	bl	8002b78 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002598:	4892      	ldr	r0, [pc, #584]	; (80027e4 <main+0x280>)
 800259a:	f001 fb19 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800259e:	2201      	movs	r2, #1
 80025a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a4:	488f      	ldr	r0, [pc, #572]	; (80027e4 <main+0x280>)
 80025a6:	f001 fb13 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80025aa:	2201      	movs	r2, #1
 80025ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025b0:	488c      	ldr	r0, [pc, #560]	; (80027e4 <main+0x280>)
 80025b2:	f001 fb0d 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80025b6:	2201      	movs	r2, #1
 80025b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025bc:	4889      	ldr	r0, [pc, #548]	; (80027e4 <main+0x280>)
 80025be:	f001 fb07 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, "yo", 2,
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	2202      	movs	r2, #2
 80025c8:	4987      	ldr	r1, [pc, #540]	; (80027e8 <main+0x284>)
 80025ca:	4888      	ldr	r0, [pc, #544]	; (80027ec <main+0x288>)
 80025cc:	f004 fd84 	bl	80070d8 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	srand(time(NULL));  // Initialize the random number generator
 80025d0:	2000      	movs	r0, #0
 80025d2:	f005 fe3f 	bl	8008254 <time>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4618      	mov	r0, r3
 80025da:	f005 fdaf 	bl	800813c <srand>

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
 80025de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025e2:	9303      	str	r3, [sp, #12]
 80025e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002602:	487b      	ldr	r0, [pc, #492]	; (80027f0 <main+0x28c>)
 8002604:	f7fd fe78 	bl	80002f8 <LiquidCrystal>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	byte *foxStates[4] = { leftFox, rightFox, topFox, bottomFox };
 8002608:	4b7a      	ldr	r3, [pc, #488]	; (80027f4 <main+0x290>)
 800260a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	createChar(2, MisteryBox);
 8002614:	4978      	ldr	r1, [pc, #480]	; (80027f8 <main+0x294>)
 8002616:	2002      	movs	r0, #2
 8002618:	f7fe f947 	bl	80008aa <createChar>
	createChar(3, wall);
 800261c:	4977      	ldr	r1, [pc, #476]	; (80027fc <main+0x298>)
 800261e:	2003      	movs	r0, #3
 8002620:	f7fe f943 	bl	80008aa <createChar>
	createChar(4, obstacle);
 8002624:	4976      	ldr	r1, [pc, #472]	; (8002800 <main+0x29c>)
 8002626:	2004      	movs	r0, #4
 8002628:	f7fe f93f 	bl	80008aa <createChar>
	createChar(1, heart);
 800262c:	4975      	ldr	r1, [pc, #468]	; (8002804 <main+0x2a0>)
 800262e:	2001      	movs	r0, #1
 8002630:	f7fe f93b 	bl	80008aa <createChar>
	createChar(5, bullet);
 8002634:	4974      	ldr	r1, [pc, #464]	; (8002808 <main+0x2a4>)
 8002636:	2005      	movs	r0, #5
 8002638:	f7fe f937 	bl	80008aa <createChar>
	createChar(6, Shot);
 800263c:	4973      	ldr	r1, [pc, #460]	; (800280c <main+0x2a8>)
 800263e:	2006      	movs	r0, #6
 8002640:	f7fe f933 	bl	80008aa <createChar>
	RTC_TimeTypeDef mytime;
	RTC_DateTypeDef mydate;
	mydate.Year = 02;
 8002644:	2302      	movs	r3, #2
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	mydate.Month = 11;
 800264a:	230b      	movs	r3, #11
 800264c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mydate.Date = 17;
 8002650:	2311      	movs	r3, #17
 8002652:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	PWM_Start();
 8002656:	f7ff fe95 	bl	8002384 <PWM_Start>
	//playMelodyNonBlocking();
	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 800265a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265e:	2200      	movs	r2, #0
 8002660:	4619      	mov	r1, r3
 8002662:	486b      	ldr	r0, [pc, #428]	; (8002810 <main+0x2ac>)
 8002664:	f003 fa7b 	bl	8005b5e <HAL_RTC_SetDate>
	char timeStr[20];
	char dateStr[20];
	showMain();
 8002668:	f7ff fdcc 	bl	8002204 <showMain>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (shootFlag == 1) {
 800266c:	4b69      	ldr	r3, [pc, #420]	; (8002814 <main+0x2b0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <main+0x114>
			shotPosition();
 8002674:	f7fe fe64 	bl	8001340 <shotPosition>
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (R_Health == 0) {
 8002678:	4b67      	ldr	r3, [pc, #412]	; (8002818 <main+0x2b4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d125      	bne.n	80026cc <main+0x168>
			refreshAll();
 8002680:	f7fe fd14 	bl	80010ac <refreshAll>
			HAL_UART_Transmit(&huart1, "Right WON!", 10,
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	220a      	movs	r2, #10
 800268a:	4964      	ldr	r1, [pc, #400]	; (800281c <main+0x2b8>)
 800268c:	4857      	ldr	r0, [pc, #348]	; (80027ec <main+0x288>)
 800268e:	f004 fd23 	bl	80070d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			setScore(playerL.score);
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <main+0x2bc>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff42 	bl	8002520 <setScore>
			screen = -1;
 800269c:	4b61      	ldr	r3, [pc, #388]	; (8002824 <main+0x2c0>)
 800269e:	f04f 32ff 	mov.w	r2, #4294967295
 80026a2:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 19; i++) {
 80026a4:	2300      	movs	r3, #0
 80026a6:	657b      	str	r3, [r7, #84]	; 0x54
 80026a8:	e00d      	b.n	80026c6 <main+0x162>
				setCursor(i, 1);
 80026aa:	2101      	movs	r1, #1
 80026ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026ae:	f7fe f889 	bl	80007c4 <setCursor>
				write(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7fe f930 	bl	8000918 <write>
				HAL_Delay(400);
 80026b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80026bc:	f000 ff4a 	bl	8003554 <HAL_Delay>
			for (int i = 0; i < 19; i++) {
 80026c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c2:	3301      	adds	r3, #1
 80026c4:	657b      	str	r3, [r7, #84]	; 0x54
 80026c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	ddee      	ble.n	80026aa <main+0x146>
			}
		}

		if (L_Health == 0) {
 80026cc:	4b56      	ldr	r3, [pc, #344]	; (8002828 <main+0x2c4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d125      	bne.n	8002720 <main+0x1bc>
			refreshAll();
 80026d4:	f7fe fcea 	bl	80010ac <refreshAll>
			HAL_UART_Transmit(&huart1, "LEFT WON!", 9,
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	2209      	movs	r2, #9
 80026de:	4953      	ldr	r1, [pc, #332]	; (800282c <main+0x2c8>)
 80026e0:	4842      	ldr	r0, [pc, #264]	; (80027ec <main+0x288>)
 80026e2:	f004 fcf9 	bl	80070d8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			setScore(playerR.score);
 80026e6:	4b52      	ldr	r3, [pc, #328]	; (8002830 <main+0x2cc>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff18 	bl	8002520 <setScore>
			screen = -1;
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <main+0x2c0>)
 80026f2:	f04f 32ff 	mov.w	r2, #4294967295
 80026f6:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 19; i++) {
 80026f8:	2300      	movs	r3, #0
 80026fa:	653b      	str	r3, [r7, #80]	; 0x50
 80026fc:	e00d      	b.n	800271a <main+0x1b6>
				setCursor(i, 1);
 80026fe:	2101      	movs	r1, #1
 8002700:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002702:	f7fe f85f 	bl	80007c4 <setCursor>
				write(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f7fe f906 	bl	8000918 <write>
				HAL_Delay(400);
 800270c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002710:	f000 ff20 	bl	8003554 <HAL_Delay>
			for (int i = 0; i < 19; i++) {
 8002714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002716:	3301      	adds	r3, #1
 8002718:	653b      	str	r3, [r7, #80]	; 0x50
 800271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271c:	2b12      	cmp	r3, #18
 800271e:	ddee      	ble.n	80026fe <main+0x19a>
			}
		}
		if(screen==-1){
 8002720:	4b40      	ldr	r3, [pc, #256]	; (8002824 <main+0x2c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d106      	bne.n	8002738 <main+0x1d4>
			setCursor(7, 1);
 800272a:	2101      	movs	r1, #1
 800272c:	2007      	movs	r0, #7
 800272e:	f7fe f849 	bl	80007c4 <setCursor>
			print("THE END");
 8002732:	4840      	ldr	r0, [pc, #256]	; (8002834 <main+0x2d0>)
 8002734:	f7fe f88e 	bl	8000854 <print>
		}
		if (screen == 2) {
 8002738:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <main+0x2c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d13b      	bne.n	80027b8 <main+0x254>
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8002740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	4831      	ldr	r0, [pc, #196]	; (8002810 <main+0x2ac>)
 800274a:	f003 f9aa 	bl	8005aa2 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 800274e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002752:	2200      	movs	r2, #0
 8002754:	4619      	mov	r1, r3
 8002756:	482e      	ldr	r0, [pc, #184]	; (8002810 <main+0x2ac>)
 8002758:	f003 fa85 	bl	8005c66 <HAL_RTC_GetDate>
			setCursor(20, 0);
 800275c:	2100      	movs	r1, #0
 800275e:	2014      	movs	r0, #20
 8002760:	f7fe f830 	bl	80007c4 <setCursor>
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8002764:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002768:	461a      	mov	r2, r3
 800276a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800276e:	4619      	mov	r1, r3
					mytime.Seconds);
 8002770:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8002774:	f107 0014 	add.w	r0, r7, #20
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	460b      	mov	r3, r1
 800277c:	492e      	ldr	r1, [pc, #184]	; (8002838 <main+0x2d4>)
 800277e:	f005 fd49 	bl	8008214 <siprintf>

			print(timeStr);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe f864 	bl	8000854 <print>
			setCursor(20, 1);
 800278c:	2101      	movs	r1, #1
 800278e:	2014      	movs	r0, #20
 8002790:	f7fe f818 	bl	80007c4 <setCursor>
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8002794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002798:	461a      	mov	r2, r3
 800279a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800279e:	4619      	mov	r1, r3
					mydate.Date);
 80027a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 80027a4:	4638      	mov	r0, r7
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	460b      	mov	r3, r1
 80027aa:	4924      	ldr	r1, [pc, #144]	; (800283c <main+0x2d8>)
 80027ac:	f005 fd32 	bl	8008214 <siprintf>

			print(dateStr);
 80027b0:	463b      	mov	r3, r7
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe f84e 	bl	8000854 <print>

		}

		if (screen == 3) {
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <main+0x2c0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	f47f af55 	bne.w	800266c <main+0x108>
			setCursor(20, 1);
 80027c2:	2101      	movs	r1, #1
 80027c4:	2014      	movs	r0, #20
 80027c6:	f7fd fffd 	bl	80007c4 <setCursor>
			if (vfx) {
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <main+0x2dc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <main+0x276>
				print("vfx on-# to turn off");
 80027d2:	481c      	ldr	r0, [pc, #112]	; (8002844 <main+0x2e0>)
 80027d4:	f7fe f83e 	bl	8000854 <print>
 80027d8:	e748      	b.n	800266c <main+0x108>
			} else {
				print("vfx off-# to turn on");
 80027da:	481b      	ldr	r0, [pc, #108]	; (8002848 <main+0x2e4>)
 80027dc:	f7fe f83a 	bl	8000854 <print>
		if (shootFlag == 1) {
 80027e0:	e744      	b.n	800266c <main+0x108>
 80027e2:	bf00      	nop
 80027e4:	48000400 	.word	0x48000400
 80027e8:	080097ac 	.word	0x080097ac
 80027ec:	200002a0 	.word	0x200002a0
 80027f0:	48000c00 	.word	0x48000c00
 80027f4:	0800981c 	.word	0x0800981c
 80027f8:	20000028 	.word	0x20000028
 80027fc:	20000030 	.word	0x20000030
 8002800:	20000038 	.word	0x20000038
 8002804:	20000020 	.word	0x20000020
 8002808:	20000018 	.word	0x20000018
 800280c:	20000060 	.word	0x20000060
 8002810:	20000184 	.word	0x20000184
 8002814:	20000618 	.word	0x20000618
 8002818:	20000004 	.word	0x20000004
 800281c:	080097b0 	.word	0x080097b0
 8002820:	20000c70 	.word	0x20000c70
 8002824:	20000614 	.word	0x20000614
 8002828:	20000008 	.word	0x20000008
 800282c:	080097bc 	.word	0x080097bc
 8002830:	20000c60 	.word	0x20000c60
 8002834:	080097c8 	.word	0x080097c8
 8002838:	080097d0 	.word	0x080097d0
 800283c:	080097dc 	.word	0x080097dc
 8002840:	20000014 	.word	0x20000014
 8002844:	080097ec 	.word	0x080097ec
 8002848:	08009804 	.word	0x08009804

0800284c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b09e      	sub	sp, #120	; 0x78
 8002850:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002852:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002856:	2228      	movs	r2, #40	; 0x28
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f005 fc66 	bl	800812c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002870:	463b      	mov	r3, r7
 8002872:	223c      	movs	r2, #60	; 0x3c
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f005 fc58 	bl	800812c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800287c:	230b      	movs	r3, #11
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002880:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002884:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800288a:	2301      	movs	r3, #1
 800288c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800288e:	2310      	movs	r3, #16
 8002890:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002892:	2301      	movs	r3, #1
 8002894:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002896:	2302      	movs	r3, #2
 8002898:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800289a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800289e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80028a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028a4:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fbb8 	bl	8004020 <HAL_RCC_OscConfig>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <SystemClock_Config+0x6e>
		Error_Handler();
 80028b6:	f000 fac5 	bl	8002e44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80028ba:	230f      	movs	r3, #15
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028be:	2302      	movs	r3, #2
 80028c0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028cc:	2300      	movs	r3, #0
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80028d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fbe0 	bl	800509c <HAL_RCC_ClockConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <SystemClock_Config+0x9a>
		Error_Handler();
 80028e2:	f000 faaf 	bl	8002e44 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <SystemClock_Config+0xd0>)
 80028e8:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC
			| RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80028f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028fc:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80028fe:	2300      	movs	r3, #0
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002902:	463b      	mov	r3, r7
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fdff 	bl	8005508 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <SystemClock_Config+0xc8>
		Error_Handler();
 8002910:	f000 fa98 	bl	8002e44 <Error_Handler>
	}
}
 8002914:	bf00      	nop
 8002916:	3778      	adds	r7, #120	; 0x78
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	00031021 	.word	0x00031021

08002920 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <MX_I2C1_Init+0x74>)
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <MX_I2C1_Init+0x78>)
 8002928:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <MX_I2C1_Init+0x74>)
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <MX_I2C1_Init+0x7c>)
 800292e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <MX_I2C1_Init+0x74>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <MX_I2C1_Init+0x74>)
 8002938:	2201      	movs	r2, #1
 800293a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <MX_I2C1_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MX_I2C1_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <MX_I2C1_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_I2C1_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <MX_I2C1_Init+0x74>)
 8002956:	2200      	movs	r2, #0
 8002958:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800295a:	480e      	ldr	r0, [pc, #56]	; (8002994 <MX_I2C1_Init+0x74>)
 800295c:	f001 f968 	bl	8003c30 <HAL_I2C_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002966:	f000 fa6d 	bl	8002e44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800296a:	2100      	movs	r1, #0
 800296c:	4809      	ldr	r0, [pc, #36]	; (8002994 <MX_I2C1_Init+0x74>)
 800296e:	f001 f9ee 	bl	8003d4e <HAL_I2CEx_ConfigAnalogFilter>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002978:	f000 fa64 	bl	8002e44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800297c:	2100      	movs	r1, #0
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_I2C1_Init+0x74>)
 8002980:	f001 fa30 	bl	8003de4 <HAL_I2CEx_ConfigDigitalFilter>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800298a:	f000 fa5b 	bl	8002e44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000130 	.word	0x20000130
 8002998:	40005400 	.word	0x40005400
 800299c:	2000090e 	.word	0x2000090e

080029a0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80029b8:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <MX_RTC_Init+0xac>)
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <MX_RTC_Init+0xb0>)
 80029bc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <MX_RTC_Init+0xac>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 39;
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <MX_RTC_Init+0xac>)
 80029c6:	2227      	movs	r2, #39	; 0x27
 80029c8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 999;
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <MX_RTC_Init+0xac>)
 80029cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029d0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <MX_RTC_Init+0xac>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <MX_RTC_Init+0xac>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_RTC_Init+0xac>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80029e4:	4819      	ldr	r0, [pc, #100]	; (8002a4c <MX_RTC_Init+0xac>)
 80029e6:	f002 ff3f 	bl	8005868 <HAL_RTC_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_RTC_Init+0x54>
		Error_Handler();
 80029f0:	f000 fa28 	bl	8002e44 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480f      	ldr	r0, [pc, #60]	; (8002a4c <MX_RTC_Init+0xac>)
 8002a10:	f002 ffad 	bl	800596e <HAL_RTC_SetTime>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_RTC_Init+0x7e>
		Error_Handler();
 8002a1a:	f000 fa13 	bl	8002e44 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8002a22:	2301      	movs	r3, #1
 8002a24:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8002a2e:	463b      	mov	r3, r7
 8002a30:	2201      	movs	r2, #1
 8002a32:	4619      	mov	r1, r3
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <MX_RTC_Init+0xac>)
 8002a36:	f003 f892 	bl	8005b5e <HAL_RTC_SetDate>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_RTC_Init+0xa4>
		Error_Handler();
 8002a40:	f000 fa00 	bl	8002e44 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000184 	.word	0x20000184
 8002a50:	40002800 	.word	0x40002800

08002a54 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a5a:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <MX_SPI1_Init+0x78>)
 8002a5c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a64:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a72:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a86:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002aae:	2208      	movs	r2, #8
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002ab2:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <MX_SPI1_Init+0x74>)
 8002ab4:	f003 f9e4 	bl	8005e80 <HAL_SPI_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8002abe:	f000 f9c1 	bl	8002e44 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200001a4 	.word	0x200001a4
 8002acc:	40013000 	.word	0x40013000

08002ad0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <MX_TIM1_Init+0xa4>)
 8002af2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 47;
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002af6:	222f      	movs	r2, #47	; 0x2f
 8002af8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9999;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002b02:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b06:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002b1a:	4815      	ldr	r0, [pc, #84]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002b1c:	f003 fa5b 	bl	8005fd6 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM1_Init+0x5a>
		Error_Handler();
 8002b26:	f000 f98d 	bl	8002e44 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	4619      	mov	r1, r3
 8002b36:	480e      	ldr	r0, [pc, #56]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002b38:	f003 fd10 	bl	800655c <HAL_TIM_ConfigClockSource>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM1_Init+0x76>
		Error_Handler();
 8002b42:	f000 f97f 	bl	8002e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4806      	ldr	r0, [pc, #24]	; (8002b70 <MX_TIM1_Init+0xa0>)
 8002b58:	f004 f9f0 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8002b62:	f000 f96f 	bl	8002e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000208 	.word	0x20000208
 8002b74:	40012c00 	.word	0x40012c00

08002b78 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b7e:	f107 031c 	add.w	r3, r7, #28
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002b8a:	463b      	mov	r3, r7
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
 8002b98:	615a      	str	r2, [r3, #20]
 8002b9a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002b9c:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ba2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002ba4:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002baa:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002bc4:	4818      	ldr	r0, [pc, #96]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002bc6:	f003 fa5d 	bl	8006084 <HAL_TIM_PWM_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM2_Init+0x5c>
		Error_Handler();
 8002bd0:	f000 f938 	bl	8002e44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	4619      	mov	r1, r3
 8002be2:	4811      	ldr	r0, [pc, #68]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002be4:	f004 f9aa 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM2_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8002bee:	f000 f929 	bl	8002e44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf2:	2360      	movs	r3, #96	; 0x60
 8002bf4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002c02:	463b      	mov	r3, r7
 8002c04:	2204      	movs	r2, #4
 8002c06:	4619      	mov	r1, r3
 8002c08:	4807      	ldr	r0, [pc, #28]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002c0a:	f003 fb93 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM2_Init+0xa0>
			!= HAL_OK) {
		Error_Handler();
 8002c14:	f000 f916 	bl	8002e44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002c18:	4803      	ldr	r0, [pc, #12]	; (8002c28 <MX_TIM2_Init+0xb0>)
 8002c1a:	f000 fa27 	bl	800306c <HAL_TIM_MspPostInit>

}
 8002c1e:	bf00      	nop
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000254 	.word	0x20000254

08002c2c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c32:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <MX_USART1_UART_Init+0x5c>)
 8002c34:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c3c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c52:	220c      	movs	r2, #12
 8002c54:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002c6e:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_USART1_UART_Init+0x58>)
 8002c70:	f004 f9e4 	bl	800703c <HAL_UART_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002c7a:	f000 f8e3 	bl	8002e44 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200002a0 	.word	0x200002a0
 8002c88:	40013800 	.word	0x40013800

08002c8c <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <MX_USB_PCD_Init+0x3c>)
 8002c92:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <MX_USB_PCD_Init+0x40>)
 8002c94:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MX_USB_PCD_Init+0x3c>)
 8002c98:	2208      	movs	r2, #8
 8002c9a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <MX_USB_PCD_Init+0x3c>)
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <MX_USB_PCD_Init+0x3c>)
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <MX_USB_PCD_Init+0x3c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <MX_USB_PCD_Init+0x3c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <MX_USB_PCD_Init+0x3c>)
 8002cb6:	f001 f8e1 	bl	8003e7c <HAL_PCD_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8002cc0:	f000 f8c0 	bl	8002e44 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000328 	.word	0x20000328
 8002ccc:	40005c00 	.word	0x40005c00

08002cd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	; 0x30
 8002cd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cd6:	f107 031c 	add.w	r3, r7, #28
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002ce6:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cf0:	6153      	str	r3, [r2, #20]
 8002cf2:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d08:	6153      	str	r3, [r2, #20]
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002d16:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d20:	6153      	str	r3, [r2, #20]
 8002d22:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	6153      	str	r3, [r2, #20]
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d46:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4a3a      	ldr	r2, [pc, #232]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d50:	6153      	str	r3, [r2, #20]
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d5e:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d68:	6153      	str	r3, [r2, #20]
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8002d76:	2200      	movs	r2, #0
 8002d78:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002d7c:	482e      	ldr	r0, [pc, #184]	; (8002e38 <MX_GPIO_Init+0x168>)
 8002d7e:	f000 ff27 	bl	8003bd0 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8002d82:	2200      	movs	r2, #0
 8002d84:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8002d88:	482c      	ldr	r0, [pc, #176]	; (8002e3c <MX_GPIO_Init+0x16c>)
 8002d8a:	f000 ff21 	bl	8003bd0 <HAL_GPIO_WritePin>
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 8002d8e:	2337      	movs	r3, #55	; 0x37
 8002d90:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d96:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	4619      	mov	r1, r3
 8002da2:	4825      	ldr	r0, [pc, #148]	; (8002e38 <MX_GPIO_Init+0x168>)
 8002da4:	f000 fd82 	bl	80038ac <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 8002da8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002dac:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dae:	2301      	movs	r3, #1
 8002db0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	481d      	ldr	r0, [pc, #116]	; (8002e38 <MX_GPIO_Init+0x168>)
 8002dc2:	f000 fd73 	bl	80038ac <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ddc:	f000 fd66 	bl	80038ac <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002de0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002de4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002dea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002dec:	2302      	movs	r3, #2
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	4812      	ldr	r0, [pc, #72]	; (8002e40 <MX_GPIO_Init+0x170>)
 8002df8:	f000 fd58 	bl	80038ac <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8002dfc:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8002e00:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0e:	f107 031c 	add.w	r3, r7, #28
 8002e12:	4619      	mov	r1, r3
 8002e14:	4809      	ldr	r0, [pc, #36]	; (8002e3c <MX_GPIO_Init+0x16c>)
 8002e16:	f000 fd49 	bl	80038ac <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	2028      	movs	r0, #40	; 0x28
 8002e20:	f000 fc97 	bl	8003752 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e24:	2028      	movs	r0, #40	; 0x28
 8002e26:	f000 fcb0 	bl	800378a <HAL_NVIC_EnableIRQ>

}
 8002e2a:	bf00      	nop
 8002e2c:	3730      	adds	r7, #48	; 0x30
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	48001000 	.word	0x48001000
 8002e3c:	48000c00 	.word	0x48000c00
 8002e40:	48000400 	.word	0x48000400

08002e44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e48:	b672      	cpsid	i
}
 8002e4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e4c:	e7fe      	b.n	8002e4c <Error_Handler+0x8>
	...

08002e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_MspInit+0x44>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <HAL_MspInit+0x44>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6193      	str	r3, [r2, #24]
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_MspInit+0x44>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_MspInit+0x44>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <HAL_MspInit+0x44>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e78:	61d3      	str	r3, [r2, #28]
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_MspInit+0x44>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002e86:	2006      	movs	r0, #6
 8002e88:	f000 fc58 	bl	800373c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <HAL_I2C_MspInit+0x7c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d127      	bne.n	8002f0a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_I2C_MspInit+0x80>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <HAL_I2C_MspInit+0x80>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6153      	str	r3, [r2, #20]
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_I2C_MspInit+0x80>)
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002ed2:	23c0      	movs	r3, #192	; 0xc0
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed6:	2312      	movs	r3, #18
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	480b      	ldr	r0, [pc, #44]	; (8002f1c <HAL_I2C_MspInit+0x84>)
 8002eee:	f000 fcdd 	bl	80038ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_I2C_MspInit+0x80>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <HAL_I2C_MspInit+0x80>)
 8002ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002efc:	61d3      	str	r3, [r2, #28]
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_I2C_MspInit+0x80>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40005400 	.word	0x40005400
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	48000400 	.word	0x48000400

08002f20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <HAL_RTC_MspInit+0x44>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_RTC_MspInit+0x36>
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f40:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_RTC_MspInit+0x48>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	461a      	mov	r2, r3
 8002f52:	2301      	movs	r3, #1
 8002f54:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40002800 	.word	0x40002800
 8002f68:	10908100 	.word	0x10908100

08002f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_SPI_MspInit+0x7c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d128      	bne.n	8002fe0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f98:	6193      	str	r3, [r2, #24]
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb0:	6153      	str	r3, [r2, #20]
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_SPI_MspInit+0x80>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002fbe:	23e0      	movs	r3, #224	; 0xe0
 8002fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fce:	2305      	movs	r3, #5
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fdc:	f000 fc66 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fe0:	bf00      	nop
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40013000 	.word	0x40013000
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_TIM_Base_MspInit+0x38>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10b      	bne.n	800301a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_TIM_Base_MspInit+0x3c>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_TIM_Base_MspInit+0x3c>)
 8003008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800300c:	6193      	str	r3, [r2, #24]
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_TIM_Base_MspInit+0x3c>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d10b      	bne.n	800305a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_TIM_PWM_MspInit+0x38>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_TIM_PWM_MspInit+0x38>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	61d3      	str	r3, [r2, #28]
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_TIM_PWM_MspInit+0x38>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d11c      	bne.n	80030c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_TIM_MspPostInit+0x64>)
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <HAL_TIM_MspPostInit+0x64>)
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	6153      	str	r3, [r2, #20]
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_TIM_MspPostInit+0x64>)
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030a6:	2302      	movs	r3, #2
 80030a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c4:	f000 fbf2 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030c8:	bf00      	nop
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_UART_MspInit+0x8c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d12f      	bne.n	8003156 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_UART_MspInit+0x90>)
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_UART_MspInit+0x90>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6193      	str	r3, [r2, #24]
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_UART_MspInit+0x90>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_UART_MspInit+0x90>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4a14      	ldr	r2, [pc, #80]	; (8003164 <HAL_UART_MspInit+0x90>)
 8003114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003118:	6153      	str	r3, [r2, #20]
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_UART_MspInit+0x90>)
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003126:	2330      	movs	r3, #48	; 0x30
 8003128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003132:	2303      	movs	r3, #3
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003136:	2307      	movs	r3, #7
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	4809      	ldr	r0, [pc, #36]	; (8003168 <HAL_UART_MspInit+0x94>)
 8003142:	f000 fbb3 	bl	80038ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2025      	movs	r0, #37	; 0x25
 800314c:	f000 fb01 	bl	8003752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003150:	2025      	movs	r0, #37	; 0x25
 8003152:	f000 fb1a 	bl	800378a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40013800 	.word	0x40013800
 8003164:	40021000 	.word	0x40021000
 8003168:	48000800 	.word	0x48000800

0800316c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_PCD_MspInit+0x80>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d129      	bne.n	80031e2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_PCD_MspInit+0x84>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <HAL_PCD_MspInit+0x84>)
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003198:	6153      	str	r3, [r2, #20]
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_PCD_MspInit+0x84>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80031a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80031b8:	230e      	movs	r3, #14
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c6:	f000 fb71 	bl	80038ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_PCD_MspInit+0x84>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <HAL_PCD_MspInit+0x84>)
 80031d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031d4:	61d3      	str	r3, [r2, #28]
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_PCD_MspInit+0x84>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40005c00 	.word	0x40005c00
 80031f0:	40021000 	.word	0x40021000

080031f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <NMI_Handler+0x4>

080031fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <HardFault_Handler+0x4>

08003200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <MemManage_Handler+0x4>

08003206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <BusFault_Handler+0x4>

0800320c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <UsageFault_Handler+0x4>

08003212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003240:	f000 f968 	bl	8003514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}

08003248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <USART1_IRQHandler+0x10>)
 800324e:	f003 ffcd 	bl	80071ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200002a0 	.word	0x200002a0

0800325c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003260:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003264:	f000 fccc 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003268:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800326c:	f000 fcc8 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003270:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003274:	f000 fcc4 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003278:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800327c:	f000 fcc0 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}

08003284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return 1;
 8003288:	2301      	movs	r3, #1
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <_kill>:

int _kill(int pid, int sig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800329e:	f004 ff1b 	bl	80080d8 <__errno>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2216      	movs	r2, #22
 80032a6:	601a      	str	r2, [r3, #0]
  return -1;
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_exit>:

void _exit (int status)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ffe7 	bl	8003294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032c6:	e7fe      	b.n	80032c6 <_exit+0x12>

080032c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e00a      	b.n	80032f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032da:	f3af 8000 	nop.w
 80032de:	4601      	mov	r1, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	60ba      	str	r2, [r7, #8]
 80032e6:	b2ca      	uxtb	r2, r1
 80032e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dbf0      	blt.n	80032da <_read+0x12>
  }

  return len;
 80032f8:	687b      	ldr	r3, [r7, #4]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e009      	b.n	8003328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	60ba      	str	r2, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	dbf1      	blt.n	8003314 <_write+0x12>
  }
  return len;
 8003330:	687b      	ldr	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <_close>:

int _close(int file)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003362:	605a      	str	r2, [r3, #4]
  return 0;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <_isatty>:

int _isatty(int file)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <_sbrk+0x5c>)
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <_sbrk+0x60>)
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <_sbrk+0x64>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d102      	bne.n	80033c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <_sbrk+0x64>)
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <_sbrk+0x68>)
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <_sbrk+0x64>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d207      	bcs.n	80033e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d4:	f004 fe80 	bl	80080d8 <__errno>
 80033d8:	4603      	mov	r3, r0
 80033da:	220c      	movs	r2, #12
 80033dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033de:	f04f 33ff 	mov.w	r3, #4294967295
 80033e2:	e009      	b.n	80033f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <_sbrk+0x64>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <_sbrk+0x64>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <_sbrk+0x64>)
 80033f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	2000a000 	.word	0x2000a000
 8003404:	00000400 	.word	0x00000400
 8003408:	20000d98 	.word	0x20000d98
 800340c:	20000db0 	.word	0x20000db0

08003410 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <SystemInit+0x20>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <SystemInit+0x20>)
 800341c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800346c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003438:	f7ff ffea 	bl	8003410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800343c:	480c      	ldr	r0, [pc, #48]	; (8003470 <LoopForever+0x6>)
  ldr r1, =_edata
 800343e:	490d      	ldr	r1, [pc, #52]	; (8003474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003440:	4a0d      	ldr	r2, [pc, #52]	; (8003478 <LoopForever+0xe>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003444:	e002      	b.n	800344c <LoopCopyDataInit>

08003446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800344a:	3304      	adds	r3, #4

0800344c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800344c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003450:	d3f9      	bcc.n	8003446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003454:	4c0a      	ldr	r4, [pc, #40]	; (8003480 <LoopForever+0x16>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003458:	e001      	b.n	800345e <LoopFillZerobss>

0800345a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800345a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800345c:	3204      	adds	r2, #4

0800345e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003460:	d3fb      	bcc.n	800345a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003462:	f004 fe3f 	bl	80080e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003466:	f7ff f87d 	bl	8002564 <main>

0800346a <LoopForever>:

LoopForever:
    b LoopForever
 800346a:	e7fe      	b.n	800346a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800346c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003474:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8003478:	080099e4 	.word	0x080099e4
  ldr r2, =_sbss
 800347c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003480:	20000db0 	.word	0x20000db0

08003484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003484:	e7fe      	b.n	8003484 <ADC1_2_IRQHandler>
	...

08003488 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_Init+0x28>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <HAL_Init+0x28>)
 8003492:	f043 0310 	orr.w	r3, r3, #16
 8003496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003498:	2003      	movs	r0, #3
 800349a:	f000 f94f 	bl	800373c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800349e:	2000      	movs	r0, #0
 80034a0:	f000 f808 	bl	80034b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a4:	f7ff fcd4 	bl	8002e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40022000 	.word	0x40022000

080034b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_InitTick+0x54>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_InitTick+0x58>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f967 	bl	80037a6 <HAL_SYSTICK_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e00e      	b.n	8003500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d80a      	bhi.n	80034fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e8:	2200      	movs	r2, #0
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f000 f92f 	bl	8003752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034f4:	4a06      	ldr	r2, [pc, #24]	; (8003510 <HAL_InitTick+0x5c>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000080 	.word	0x20000080
 800350c:	20000088 	.word	0x20000088
 8003510:	20000084 	.word	0x20000084

08003514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_IncTick+0x20>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_IncTick+0x24>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4413      	add	r3, r2
 8003524:	4a04      	ldr	r2, [pc, #16]	; (8003538 <HAL_IncTick+0x24>)
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000088 	.word	0x20000088
 8003538:	20000d9c 	.word	0x20000d9c

0800353c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_GetTick+0x14>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000d9c 	.word	0x20000d9c

08003554 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff ffee 	bl	800353c <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d005      	beq.n	800357a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_Delay+0x44>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800357a:	bf00      	nop
 800357c:	f7ff ffde 	bl	800353c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d8f7      	bhi.n	800357c <HAL_Delay+0x28>
  {
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000088 	.word	0x20000088

0800359c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <__NVIC_SetPriorityGrouping+0x44>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b8:	4013      	ands	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ce:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <__NVIC_SetPriorityGrouping+0x44>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	60d3      	str	r3, [r2, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <__NVIC_GetPriorityGrouping+0x18>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 0307 	and.w	r3, r3, #7
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	2b00      	cmp	r3, #0
 8003610:	db0b      	blt.n	800362a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	4907      	ldr	r1, [pc, #28]	; (8003638 <__NVIC_EnableIRQ+0x38>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2001      	movs	r0, #1
 8003622:	fa00 f202 	lsl.w	r2, r0, r2
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000e100 	.word	0xe000e100

0800363c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	6039      	str	r1, [r7, #0]
 8003646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	2b00      	cmp	r3, #0
 800364e:	db0a      	blt.n	8003666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	490c      	ldr	r1, [pc, #48]	; (8003688 <__NVIC_SetPriority+0x4c>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	0112      	lsls	r2, r2, #4
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	440b      	add	r3, r1
 8003660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003664:	e00a      	b.n	800367c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4908      	ldr	r1, [pc, #32]	; (800368c <__NVIC_SetPriority+0x50>)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	3b04      	subs	r3, #4
 8003674:	0112      	lsls	r2, r2, #4
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	440b      	add	r3, r1
 800367a:	761a      	strb	r2, [r3, #24]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000e100 	.word	0xe000e100
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	; 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f1c3 0307 	rsb	r3, r3, #7
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	bf28      	it	cs
 80036ae:	2304      	movcs	r3, #4
 80036b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d902      	bls.n	80036c0 <NVIC_EncodePriority+0x30>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3b03      	subs	r3, #3
 80036be:	e000      	b.n	80036c2 <NVIC_EncodePriority+0x32>
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	401a      	ands	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d8:	f04f 31ff 	mov.w	r1, #4294967295
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	43d9      	mvns	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	4313      	orrs	r3, r2
         );
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3b01      	subs	r3, #1
 8003704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003708:	d301      	bcc.n	800370e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370a:	2301      	movs	r3, #1
 800370c:	e00f      	b.n	800372e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370e:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <SysTick_Config+0x40>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003716:	210f      	movs	r1, #15
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	f7ff ff8e 	bl	800363c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <SysTick_Config+0x40>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <SysTick_Config+0x40>)
 8003728:	2207      	movs	r2, #7
 800372a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	e000e010 	.word	0xe000e010

0800373c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff29 	bl	800359c <__NVIC_SetPriorityGrouping>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003764:	f7ff ff3e 	bl	80035e4 <__NVIC_GetPriorityGrouping>
 8003768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7ff ff8e 	bl	8003690 <NVIC_EncodePriority>
 8003774:	4602      	mov	r2, r0
 8003776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff5d 	bl	800363c <__NVIC_SetPriority>
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff31 	bl	8003600 <__NVIC_EnableIRQ>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffa2 	bl	80036f8 <SysTick_Config>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2204      	movs	r2, #4
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e020      	b.n	8003824 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 020e 	bic.w	r2, r2, #14
 80037f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003842:	2b02      	cmp	r3, #2
 8003844:	d005      	beq.n	8003852 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e027      	b.n	80038a2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020e 	bic.w	r2, r2, #14
 8003860:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
    } 
  }
  return status;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ba:	e154      	b.n	8003b66 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	4013      	ands	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8146 	beq.w	8003b60 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d005      	beq.n	80038ec <HAL_GPIO_Init+0x40>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d130      	bne.n	800394e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003922:	2201      	movs	r2, #1
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0201 	and.w	r2, r3, #1
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b03      	cmp	r3, #3
 8003958:	d017      	beq.n	800398a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	2203      	movs	r2, #3
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4013      	ands	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d123      	bne.n	80039de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	220f      	movs	r2, #15
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	08da      	lsrs	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3208      	adds	r2, #8
 80039d8:	6939      	ldr	r1, [r7, #16]
 80039da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80a0 	beq.w	8003b60 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a20:	4b58      	ldr	r3, [pc, #352]	; (8003b84 <HAL_GPIO_Init+0x2d8>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	4a57      	ldr	r2, [pc, #348]	; (8003b84 <HAL_GPIO_Init+0x2d8>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6193      	str	r3, [r2, #24]
 8003a2c:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <HAL_GPIO_Init+0x2d8>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a38:	4a53      	ldr	r2, [pc, #332]	; (8003b88 <HAL_GPIO_Init+0x2dc>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3302      	adds	r3, #2
 8003a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	220f      	movs	r2, #15
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a62:	d019      	beq.n	8003a98 <HAL_GPIO_Init+0x1ec>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a49      	ldr	r2, [pc, #292]	; (8003b8c <HAL_GPIO_Init+0x2e0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_GPIO_Init+0x1e8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a48      	ldr	r2, [pc, #288]	; (8003b90 <HAL_GPIO_Init+0x2e4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00d      	beq.n	8003a90 <HAL_GPIO_Init+0x1e4>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a47      	ldr	r2, [pc, #284]	; (8003b94 <HAL_GPIO_Init+0x2e8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <HAL_GPIO_Init+0x1e0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a46      	ldr	r2, [pc, #280]	; (8003b98 <HAL_GPIO_Init+0x2ec>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_GPIO_Init+0x1dc>
 8003a84:	2304      	movs	r3, #4
 8003a86:	e008      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a88:	2305      	movs	r3, #5
 8003a8a:	e006      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e004      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e002      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_GPIO_Init+0x1ee>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	f002 0203 	and.w	r2, r2, #3
 8003aa0:	0092      	lsls	r2, r2, #2
 8003aa2:	4093      	lsls	r3, r2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aaa:	4937      	ldr	r1, [pc, #220]	; (8003b88 <HAL_GPIO_Init+0x2dc>)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab8:	4b38      	ldr	r3, [pc, #224]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003adc:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae2:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	43db      	mvns	r3, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b30:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b5a:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <HAL_GPIO_Init+0x2f0>)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3301      	adds	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f aea3 	bne.w	80038bc <HAL_GPIO_Init+0x10>
  }
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	48000400 	.word	0x48000400
 8003b90:	48000800 	.word	0x48000800
 8003b94:	48000c00 	.word	0x48000c00
 8003b98:	48001000 	.word	0x48001000
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	887b      	ldrh	r3, [r7, #2]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e001      	b.n	8003bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be0:	787b      	ldrb	r3, [r7, #1]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc ff46 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40010400 	.word	0x40010400

08003c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e081      	b.n	8003d46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff f91e 	bl	8002e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	e006      	b.n	8003cb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d104      	bne.n	8003cca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d138      	bne.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e032      	b.n	8003dd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2224      	movs	r2, #36	; 0x24
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003da0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d139      	bne.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e033      	b.n	8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7e:	b08b      	sub	sp, #44	; 0x2c
 8003e80:	af06      	add	r7, sp, #24
 8003e82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0c4      	b.n	8004018 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff f962 	bl	800316c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f004 f8d2 	bl	800805e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	e040      	b.n	8003f42 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	440b      	add	r3, r1
 8003efa:	3303      	adds	r3, #3
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3338      	adds	r3, #56	; 0x38
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f14:	7bfa      	ldrb	r2, [r7, #15]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	333c      	adds	r3, #60	; 0x3c
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	3340      	adds	r3, #64	; 0x40
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	7bfa      	ldrb	r2, [r7, #15]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d3b9      	bcc.n	8003ec0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e044      	b.n	8003fdc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f52:	7bfa      	ldrb	r2, [r7, #15]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	440b      	add	r3, r1
 8003f76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	440b      	add	r3, r1
 8003fa2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3b5      	bcc.n	8003f52 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	687e      	ldr	r6, [r7, #4]
 8003fee:	466d      	mov	r5, sp
 8003ff0:	f106 0410 	add.w	r4, r6, #16
 8003ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	1d33      	adds	r3, r6, #4
 8003ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004000:	6838      	ldr	r0, [r7, #0]
 8004002:	f004 f847 	bl	8008094 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004026:	af00      	add	r7, sp, #0
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004030:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f001 b823 	b.w	800508c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 817d 	beq.w	8004356 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800405c:	4bbc      	ldr	r3, [pc, #752]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b04      	cmp	r3, #4
 8004066:	d00c      	beq.n	8004082 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004068:	4bb9      	ldr	r3, [pc, #740]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d15c      	bne.n	800412e <HAL_RCC_OscConfig+0x10e>
 8004074:	4bb6      	ldr	r3, [pc, #728]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004080:	d155      	bne.n	800412e <HAL_RCC_OscConfig+0x10e>
 8004082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004086:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004096:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_OscConfig+0x94>
 80040ae:	4ba8      	ldr	r3, [pc, #672]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	e015      	b.n	80040e0 <HAL_RCC_OscConfig+0xc0>
 80040b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80040c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80040d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80040d4:	fa93 f3a3 	rbit	r3, r3
 80040d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80040dc:	4b9c      	ldr	r3, [pc, #624]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80040e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80040ec:	fa92 f2a2 	rbit	r2, r2
 80040f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80040f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80040f8:	fab2 f282 	clz	r2, r2
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	f042 0220 	orr.w	r2, r2, #32
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f002 021f 	and.w	r2, r2, #31
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 811f 	beq.w	8004354 <HAL_RCC_OscConfig+0x334>
 8004116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 8116 	bne.w	8004354 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f000 bfaf 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x12e>
 8004140:	4b83      	ldr	r3, [pc, #524]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a82      	ldr	r2, [pc, #520]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e036      	b.n	80041bc <HAL_RCC_OscConfig+0x19c>
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0x158>
 800415e:	4b7c      	ldr	r3, [pc, #496]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7b      	ldr	r2, [pc, #492]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	4b79      	ldr	r3, [pc, #484]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a78      	ldr	r2, [pc, #480]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e021      	b.n	80041bc <HAL_RCC_OscConfig+0x19c>
 8004178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x184>
 800418a:	4b71      	ldr	r3, [pc, #452]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a70      	ldr	r2, [pc, #448]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4b6e      	ldr	r3, [pc, #440]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6d      	ldr	r2, [pc, #436]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e00b      	b.n	80041bc <HAL_RCC_OscConfig+0x19c>
 80041a4:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a69      	ldr	r2, [pc, #420]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80041aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b67      	ldr	r3, [pc, #412]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a66      	ldr	r2, [pc, #408]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80041b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041bc:	4b64      	ldr	r3, [pc, #400]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f023 020f 	bic.w	r2, r3, #15
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	495f      	ldr	r1, [pc, #380]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d059      	beq.n	800429a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7ff f9a9 	bl	800353c <HAL_GetTick>
 80041ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f0:	f7ff f9a4 	bl	800353c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	; 0x64
 80041fe:	d902      	bls.n	8004206 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	f000 bf43 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
 8004206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800421a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_RCC_OscConfig+0x218>
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	e015      	b.n	8004264 <HAL_RCC_OscConfig+0x244>
 8004238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800423c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800424c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004250:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004254:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004260:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004268:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800426c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004270:	fa92 f2a2 	rbit	r2, r2
 8004274:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004278:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800427c:	fab2 f282 	clz	r2, r2
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	f042 0220 	orr.w	r2, r2, #32
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	f002 021f 	and.w	r2, r2, #31
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ab      	beq.n	80041f0 <HAL_RCC_OscConfig+0x1d0>
 8004298:	e05d      	b.n	8004356 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7ff f94f 	bl	800353c <HAL_GetTick>
 800429e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a4:	f7ff f94a 	bl	800353c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b64      	cmp	r3, #100	; 0x64
 80042b2:	d902      	bls.n	80042ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	f000 bee9 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
 80042ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80042ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_RCC_OscConfig+0x2cc>
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	e015      	b.n	8004318 <HAL_RCC_OscConfig+0x2f8>
 80042ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004304:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004308:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <HAL_RCC_OscConfig+0x330>)
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800431c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004320:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004324:	fa92 f2a2 	rbit	r2, r2
 8004328:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800432c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004330:	fab2 f282 	clz	r2, r2
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	f042 0220 	orr.w	r2, r2, #32
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	f002 021f 	and.w	r2, r2, #31
 8004340:	2101      	movs	r1, #1
 8004342:	fa01 f202 	lsl.w	r2, r1, r2
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ab      	bne.n	80042a4 <HAL_RCC_OscConfig+0x284>
 800434c:	e003      	b.n	8004356 <HAL_RCC_OscConfig+0x336>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 817d 	beq.w	8004666 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800436c:	4ba6      	ldr	r3, [pc, #664]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004378:	4ba3      	ldr	r3, [pc, #652]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d172      	bne.n	800446a <HAL_RCC_OscConfig+0x44a>
 8004384:	4ba0      	ldr	r3, [pc, #640]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d16c      	bne.n	800446a <HAL_RCC_OscConfig+0x44a>
 8004390:	2302      	movs	r3, #2
 8004392:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800439a:	fa93 f3a3 	rbit	r3, r3
 800439e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80043a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d102      	bne.n	80043c0 <HAL_RCC_OscConfig+0x3a0>
 80043ba:	4b93      	ldr	r3, [pc, #588]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	e013      	b.n	80043e8 <HAL_RCC_OscConfig+0x3c8>
 80043c0:	2302      	movs	r3, #2
 80043c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80043d2:	2302      	movs	r3, #2
 80043d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80043e4:	4b88      	ldr	r3, [pc, #544]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	2202      	movs	r2, #2
 80043ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80043ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80043f2:	fa92 f2a2 	rbit	r2, r2
 80043f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80043fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80043fe:	fab2 f282 	clz	r2, r2
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	f042 0220 	orr.w	r2, r2, #32
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	f002 021f 	and.w	r2, r2, #31
 800440e:	2101      	movs	r1, #1
 8004410:	fa01 f202 	lsl.w	r2, r1, r2
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCC_OscConfig+0x410>
 800441a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d002      	beq.n	8004430 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f000 be2e 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004430:	4b75      	ldr	r3, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	21f8      	movs	r1, #248	; 0xf8
 8004446:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800444e:	fa91 f1a1 	rbit	r1, r1
 8004452:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004456:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800445a:	fab1 f181 	clz	r1, r1
 800445e:	b2c9      	uxtb	r1, r1
 8004460:	408b      	lsls	r3, r1
 8004462:	4969      	ldr	r1, [pc, #420]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004468:	e0fd      	b.n	8004666 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8088 	beq.w	800458c <HAL_RCC_OscConfig+0x56c>
 800447c:	2301      	movs	r3, #1
 800447e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800448e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800449c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	461a      	mov	r2, r3
 80044a4:	2301      	movs	r3, #1
 80044a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7ff f848 	bl	800353c <HAL_GetTick>
 80044ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b2:	f7ff f843 	bl	800353c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	f000 bde2 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
 80044c8:	2302      	movs	r3, #2
 80044ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80044da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4d8>
 80044f2:	4b45      	ldr	r3, [pc, #276]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	e013      	b.n	8004520 <HAL_RCC_OscConfig+0x500>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004502:	fa93 f3a3 	rbit	r3, r3
 8004506:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800450a:	2302      	movs	r3, #2
 800450c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004510:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800451c:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2202      	movs	r2, #2
 8004522:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004526:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800452a:	fa92 f2a2 	rbit	r2, r2
 800452e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004532:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004536:	fab2 f282 	clz	r2, r2
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	f042 0220 	orr.w	r2, r2, #32
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	f002 021f 	and.w	r2, r2, #31
 8004546:	2101      	movs	r1, #1
 8004548:	fa01 f202 	lsl.w	r2, r1, r2
 800454c:	4013      	ands	r3, r2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0af      	beq.n	80044b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	21f8      	movs	r1, #248	; 0xf8
 8004568:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004570:	fa91 f1a1 	rbit	r1, r1
 8004574:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004578:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800457c:	fab1 f181 	clz	r1, r1
 8004580:	b2c9      	uxtb	r1, r1
 8004582:	408b      	lsls	r3, r1
 8004584:	4920      	ldr	r1, [pc, #128]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
 800458a:	e06c      	b.n	8004666 <HAL_RCC_OscConfig+0x646>
 800458c:	2301      	movs	r3, #1
 800458e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800459e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	461a      	mov	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fe ffc0 	bl	800353c <HAL_GetTick>
 80045bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c2:	f7fe ffbb 	bl	800353c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	f000 bd5a 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
 80045d8:	2302      	movs	r3, #2
 80045da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80045ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d104      	bne.n	800460c <HAL_RCC_OscConfig+0x5ec>
 8004602:	4b01      	ldr	r3, [pc, #4]	; (8004608 <HAL_RCC_OscConfig+0x5e8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	e015      	b.n	8004634 <HAL_RCC_OscConfig+0x614>
 8004608:	40021000 	.word	0x40021000
 800460c:	2302      	movs	r3, #2
 800460e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800461e:	2302      	movs	r3, #2
 8004620:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004630:	4bc8      	ldr	r3, [pc, #800]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2202      	movs	r2, #2
 8004636:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800463a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800463e:	fa92 f2a2 	rbit	r2, r2
 8004642:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004646:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800464a:	fab2 f282 	clz	r2, r2
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	f042 0220 	orr.w	r2, r2, #32
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	f002 021f 	and.w	r2, r2, #31
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f202 	lsl.w	r2, r1, r2
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ad      	bne.n	80045c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8110 	beq.w	800489c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d079      	beq.n	8004780 <HAL_RCC_OscConfig+0x760>
 800468c:	2301      	movs	r3, #1
 800468e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800469e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	4bab      	ldr	r3, [pc, #684]	; (8004958 <HAL_RCC_OscConfig+0x938>)
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	461a      	mov	r2, r3
 80046b2:	2301      	movs	r3, #1
 80046b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fe ff41 	bl	800353c <HAL_GetTick>
 80046ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe ff3c 	bl	800353c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d902      	bls.n	80046d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	f000 bcdb 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
 80046d6:	2302      	movs	r3, #2
 80046d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046e0:	fa93 f3a3 	rbit	r3, r3
 80046e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046f0:	2202      	movs	r2, #2
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	fa93 f2a3 	rbit	r2, r3
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004714:	2202      	movs	r2, #2
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fa93 f2a3 	rbit	r2, r3
 8004726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800472e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004730:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 8004732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004738:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800473c:	2102      	movs	r1, #2
 800473e:	6019      	str	r1, [r3, #0]
 8004740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004744:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	fa93 f1a3 	rbit	r1, r3
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004756:	6019      	str	r1, [r3, #0]
  return result;
 8004758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0a0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x6a0>
 800477e:	e08d      	b.n	800489c <HAL_RCC_OscConfig+0x87c>
 8004780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004784:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	fa93 f2a3 	rbit	r2, r3
 800479a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047a2:	601a      	str	r2, [r3, #0]
  return result;
 80047a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b68      	ldr	r3, [pc, #416]	; (8004958 <HAL_RCC_OscConfig+0x938>)
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	461a      	mov	r2, r3
 80047be:	2300      	movs	r3, #0
 80047c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c2:	f7fe febb 	bl	800353c <HAL_GetTick>
 80047c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fe feb6 	bl	800353c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d902      	bls.n	80047e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	f000 bc55 	b.w	800508c <HAL_RCC_OscConfig+0x106c>
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047ea:	2202      	movs	r2, #2
 80047ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	fa93 f2a3 	rbit	r2, r3
 80047fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004800:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800480e:	2202      	movs	r2, #2
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	fa93 f2a3 	rbit	r2, r3
 8004820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004832:	2202      	movs	r2, #2
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	fa93 f2a3 	rbit	r2, r3
 8004844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004848:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800484c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484e:	4b41      	ldr	r3, [pc, #260]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 8004850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004856:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800485a:	2102      	movs	r1, #2
 800485c:	6019      	str	r1, [r3, #0]
 800485e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004862:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	fa93 f1a3 	rbit	r1, r3
 800486c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004870:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004874:	6019      	str	r1, [r3, #0]
  return result;
 8004876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d197      	bne.n	80047cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 81a1 	beq.w	8004bf4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b8:	4b26      	ldr	r3, [pc, #152]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d116      	bne.n	80048f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b23      	ldr	r3, [pc, #140]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	61d3      	str	r3, [r2, #28]
 80048d0:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80048d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80048ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <HAL_RCC_OscConfig+0x93c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d11a      	bne.n	8004934 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <HAL_RCC_OscConfig+0x93c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a16      	ldr	r2, [pc, #88]	; (800495c <HAL_RCC_OscConfig+0x93c>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7fe fe17 	bl	800353c <HAL_GetTick>
 800490e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004912:	e009      	b.n	8004928 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004914:	f7fe fe12 	bl	800353c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b64      	cmp	r3, #100	; 0x64
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e3b1      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <HAL_RCC_OscConfig+0x93c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ef      	beq.n	8004914 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d10d      	bne.n	8004960 <HAL_RCC_OscConfig+0x940>
 8004944:	4b03      	ldr	r3, [pc, #12]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4a02      	ldr	r2, [pc, #8]	; (8004954 <HAL_RCC_OscConfig+0x934>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6213      	str	r3, [r2, #32]
 8004950:	e03c      	b.n	80049cc <HAL_RCC_OscConfig+0x9ac>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	10908120 	.word	0x10908120
 800495c:	40007000 	.word	0x40007000
 8004960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10c      	bne.n	800498a <HAL_RCC_OscConfig+0x96a>
 8004970:	4bc1      	ldr	r3, [pc, #772]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	4ac0      	ldr	r2, [pc, #768]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	6213      	str	r3, [r2, #32]
 800497c:	4bbe      	ldr	r3, [pc, #760]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4abd      	ldr	r2, [pc, #756]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004982:	f023 0304 	bic.w	r3, r3, #4
 8004986:	6213      	str	r3, [r2, #32]
 8004988:	e020      	b.n	80049cc <HAL_RCC_OscConfig+0x9ac>
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b05      	cmp	r3, #5
 8004998:	d10c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x994>
 800499a:	4bb7      	ldr	r3, [pc, #732]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4ab6      	ldr	r2, [pc, #728]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	6213      	str	r3, [r2, #32]
 80049a6:	4bb4      	ldr	r3, [pc, #720]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4ab3      	ldr	r2, [pc, #716]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6213      	str	r3, [r2, #32]
 80049b2:	e00b      	b.n	80049cc <HAL_RCC_OscConfig+0x9ac>
 80049b4:	4bb0      	ldr	r3, [pc, #704]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4aaf      	ldr	r2, [pc, #700]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	6213      	str	r3, [r2, #32]
 80049c0:	4bad      	ldr	r3, [pc, #692]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	4aac      	ldr	r2, [pc, #688]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 80049c6:	f023 0304 	bic.w	r3, r3, #4
 80049ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8081 	beq.w	8004ae0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fe fdad 	bl	800353c <HAL_GetTick>
 80049e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	e00b      	b.n	8004a00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e8:	f7fe fda8 	bl	800353c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e345      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
 8004a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a08:	2202      	movs	r2, #2
 8004a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	fa93 f2a3 	rbit	r2, r3
 8004a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	fa93 f2a3 	rbit	r2, r3
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a46:	601a      	str	r2, [r3, #0]
  return result;
 8004a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d102      	bne.n	8004a6c <HAL_RCC_OscConfig+0xa4c>
 8004a66:	4b84      	ldr	r3, [pc, #528]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	e013      	b.n	8004a94 <HAL_RCC_OscConfig+0xa74>
 8004a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004a74:	2202      	movs	r2, #2
 8004a76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	fa93 f2a3 	rbit	r2, r3
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	4b79      	ldr	r3, [pc, #484]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	6011      	str	r1, [r2, #0]
 8004aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004aa4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	fa92 f1a2 	rbit	r1, r2
 8004aae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ab2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ab6:	6011      	str	r1, [r2, #0]
  return result;
 8004ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004abc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	fab2 f282 	clz	r2, r2
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	f002 021f 	and.w	r2, r2, #31
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d084      	beq.n	80049e8 <HAL_RCC_OscConfig+0x9c8>
 8004ade:	e07f      	b.n	8004be0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae0:	f7fe fd2c 	bl	800353c <HAL_GetTick>
 8004ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae8:	e00b      	b.n	8004b02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aea:	f7fe fd27 	bl	800353c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e2c4      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	fa93 f2a3 	rbit	r2, r3
 8004b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004b2e:	2202      	movs	r2, #2
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	fa93 f2a3 	rbit	r2, r3
 8004b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004b48:	601a      	str	r2, [r3, #0]
  return result;
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004b52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f043 0302 	orr.w	r3, r3, #2
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d102      	bne.n	8004b6e <HAL_RCC_OscConfig+0xb4e>
 8004b68:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	e013      	b.n	8004b96 <HAL_RCC_OscConfig+0xb76>
 8004b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004b76:	2202      	movs	r2, #2
 8004b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	fa93 f2a3 	rbit	r2, r3
 8004b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004b9e:	2102      	movs	r1, #2
 8004ba0:	6011      	str	r1, [r2, #0]
 8004ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ba6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	fa92 f1a2 	rbit	r1, r2
 8004bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bb4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004bb8:	6011      	str	r1, [r2, #0]
  return result;
 8004bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bbe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	fab2 f282 	clz	r2, r2
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	f002 021f 	and.w	r2, r2, #31
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d184      	bne.n	8004aea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004be0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be8:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8242 	beq.w	800508a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <HAL_RCC_OscConfig+0xc58>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	f000 8213 	beq.w	800503a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	f040 8162 	bne.w	8004eea <HAL_RCC_OscConfig+0xeca>
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	fa93 f2a3 	rbit	r2, r3
 8004c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004c4a:	601a      	str	r2, [r3, #0]
  return result;
 8004c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004c54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c56:	fab3 f383 	clz	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fc66 	bl	800353c <HAL_GetTick>
 8004c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c74:	e00c      	b.n	8004c90 <HAL_RCC_OscConfig+0xc70>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fe fc5e 	bl	800353c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1fd      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
 8004c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	fa93 f2a3 	rbit	r2, r3
 8004cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004cb4:	601a      	str	r2, [r3, #0]
  return result;
 8004cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004cbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc0:	fab3 f383 	clz	r3, r3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d102      	bne.n	8004cda <HAL_RCC_OscConfig+0xcba>
 8004cd4:	4bb0      	ldr	r3, [pc, #704]	; (8004f98 <HAL_RCC_OscConfig+0xf78>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	e027      	b.n	8004d2a <HAL_RCC_OscConfig+0xd0a>
 8004cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f2a3 	rbit	r2, r3
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	fa93 f2a3 	rbit	r2, r3
 8004d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	4b9c      	ldr	r3, [pc, #624]	; (8004f98 <HAL_RCC_OscConfig+0xf78>)
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004d32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d36:	6011      	str	r1, [r2, #0]
 8004d38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	fa92 f1a2 	rbit	r1, r2
 8004d46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004d4e:	6011      	str	r1, [r2, #0]
  return result;
 8004d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	fab2 f282 	clz	r2, r2
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	f042 0220 	orr.w	r2, r2, #32
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	f002 021f 	and.w	r2, r2, #31
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d182      	bne.n	8004c7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d76:	4b88      	ldr	r3, [pc, #544]	; (8004f98 <HAL_RCC_OscConfig+0xf78>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	430b      	orrs	r3, r1
 8004d98:	497f      	ldr	r1, [pc, #508]	; (8004f98 <HAL_RCC_OscConfig+0xf78>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	604b      	str	r3, [r1, #4]
 8004d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004da6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	fa93 f2a3 	rbit	r2, r3
 8004dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004dc2:	601a      	str	r2, [r3, #0]
  return result;
 8004dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004dcc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	461a      	mov	r2, r3
 8004de0:	2301      	movs	r3, #1
 8004de2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fe fbaa 	bl	800353c <HAL_GetTick>
 8004de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dec:	e009      	b.n	8004e02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dee:	f7fe fba5 	bl	800353c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e144      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	fa93 f2a3 	rbit	r2, r3
 8004e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e26:	601a      	str	r2, [r3, #0]
  return result;
 8004e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d102      	bne.n	8004e4c <HAL_RCC_OscConfig+0xe2c>
 8004e46:	4b54      	ldr	r3, [pc, #336]	; (8004f98 <HAL_RCC_OscConfig+0xf78>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	e027      	b.n	8004e9c <HAL_RCC_OscConfig+0xe7c>
 8004e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	fa93 f2a3 	rbit	r2, r3
 8004e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	fa93 f2a3 	rbit	r2, r3
 8004e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <HAL_RCC_OscConfig+0xf78>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ea0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004ea4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ea8:	6011      	str	r1, [r2, #0]
 8004eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	fa92 f1a2 	rbit	r1, r2
 8004eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ebc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004ec0:	6011      	str	r1, [r2, #0]
  return result;
 8004ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ec6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	fab2 f282 	clz	r2, r2
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	f042 0220 	orr.w	r2, r2, #32
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	f002 021f 	and.w	r2, r2, #31
 8004edc:	2101      	movs	r1, #1
 8004ede:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d082      	beq.n	8004dee <HAL_RCC_OscConfig+0xdce>
 8004ee8:	e0cf      	b.n	800508a <HAL_RCC_OscConfig+0x106a>
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004ef2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	fa93 f2a3 	rbit	r2, r3
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f0e:	601a      	str	r2, [r3, #0]
  return result;
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fe fb04 	bl	800353c <HAL_GetTick>
 8004f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f38:	e009      	b.n	8004f4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fe faff 	bl	800353c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e09e      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	fa93 f2a3 	rbit	r2, r3
 8004f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004f72:	601a      	str	r2, [r3, #0]
  return result;
 8004f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004f7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f7e:	fab3 f383 	clz	r3, r3
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d104      	bne.n	8004f9c <HAL_RCC_OscConfig+0xf7c>
 8004f92:	4b01      	ldr	r3, [pc, #4]	; (8004f98 <HAL_RCC_OscConfig+0xf78>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	e029      	b.n	8004fec <HAL_RCC_OscConfig+0xfcc>
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	fa93 f2a3 	rbit	r2, r3
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	fa93 f2a3 	rbit	r2, r3
 8004fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <HAL_RCC_OscConfig+0x1078>)
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ff0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004ff4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ffe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	fa92 f1a2 	rbit	r1, r2
 8005008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800500c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005010:	6011      	str	r1, [r2, #0]
  return result;
 8005012:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005016:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	fab2 f282 	clz	r2, r2
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	f042 0220 	orr.w	r2, r2, #32
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	f002 021f 	and.w	r2, r2, #31
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f202 	lsl.w	r2, r1, r2
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d180      	bne.n	8004f3a <HAL_RCC_OscConfig+0xf1a>
 8005038:	e027      	b.n	800508a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e01e      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <HAL_RCC_OscConfig+0x1078>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005056:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800505a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800505e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	429a      	cmp	r2, r3
 800506c:	d10b      	bne.n	8005086 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800506e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005082:	429a      	cmp	r2, r3
 8005084:	d001      	beq.n	800508a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b09e      	sub	sp, #120	; 0x78
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e162      	b.n	800537a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b90      	ldr	r3, [pc, #576]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d910      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b8d      	ldr	r3, [pc, #564]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 0207 	bic.w	r2, r3, #7
 80050ca:	498b      	ldr	r1, [pc, #556]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d2:	4b89      	ldr	r3, [pc, #548]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d001      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e14a      	b.n	800537a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f0:	4b82      	ldr	r3, [pc, #520]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	497f      	ldr	r1, [pc, #508]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80dc 	beq.w	80052c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d13c      	bne.n	8005192 <HAL_RCC_ClockConfig+0xf6>
 8005118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800511c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005120:	fa93 f3a3 	rbit	r3, r3
 8005124:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005128:	fab3 f383 	clz	r3, r3
 800512c:	b2db      	uxtb	r3, r3
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d102      	bne.n	8005142 <HAL_RCC_ClockConfig+0xa6>
 800513c:	4b6f      	ldr	r3, [pc, #444]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	e00f      	b.n	8005162 <HAL_RCC_ClockConfig+0xc6>
 8005142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005146:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800514a:	fa93 f3a3 	rbit	r3, r3
 800514e:	667b      	str	r3, [r7, #100]	; 0x64
 8005150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
 8005156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005158:	fa93 f3a3 	rbit	r3, r3
 800515c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515e:	4b67      	ldr	r3, [pc, #412]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005166:	65ba      	str	r2, [r7, #88]	; 0x58
 8005168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800516a:	fa92 f2a2 	rbit	r2, r2
 800516e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005172:	fab2 f282 	clz	r2, r2
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	f042 0220 	orr.w	r2, r2, #32
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	f002 021f 	and.w	r2, r2, #31
 8005182:	2101      	movs	r1, #1
 8005184:	fa01 f202 	lsl.w	r2, r1, r2
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d17b      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0f3      	b.n	800537a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d13c      	bne.n	8005214 <HAL_RCC_ClockConfig+0x178>
 800519a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d102      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x128>
 80051be:	4b4f      	ldr	r3, [pc, #316]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	e00f      	b.n	80051e4 <HAL_RCC_ClockConfig+0x148>
 80051c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	647b      	str	r3, [r7, #68]	; 0x44
 80051d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d6:	643b      	str	r3, [r7, #64]	; 0x40
 80051d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051da:	fa93 f3a3 	rbit	r3, r3
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80051ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ec:	fa92 f2a2 	rbit	r2, r2
 80051f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80051f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f4:	fab2 f282 	clz	r2, r2
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	f042 0220 	orr.w	r2, r2, #32
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	f002 021f 	and.w	r2, r2, #31
 8005204:	2101      	movs	r1, #1
 8005206:	fa01 f202 	lsl.w	r2, r1, r2
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d13a      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0b2      	b.n	800537a <HAL_RCC_ClockConfig+0x2de>
 8005214:	2302      	movs	r3, #2
 8005216:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	fa93 f3a3 	rbit	r3, r3
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d102      	bne.n	800523c <HAL_RCC_ClockConfig+0x1a0>
 8005236:	4b31      	ldr	r3, [pc, #196]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	e00d      	b.n	8005258 <HAL_RCC_ClockConfig+0x1bc>
 800523c:	2302      	movs	r3, #2
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	fa93 f3a3 	rbit	r3, r3
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	2302      	movs	r3, #2
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	4b29      	ldr	r3, [pc, #164]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2202      	movs	r2, #2
 800525a:	61ba      	str	r2, [r7, #24]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	fa92 f2a2 	rbit	r2, r2
 8005262:	617a      	str	r2, [r7, #20]
  return result;
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	fab2 f282 	clz	r2, r2
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	f042 0220 	orr.w	r2, r2, #32
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	f002 021f 	and.w	r2, r2, #31
 8005276:	2101      	movs	r1, #1
 8005278:	fa01 f202 	lsl.w	r2, r1, r2
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e079      	b.n	800537a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f023 0203 	bic.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	491a      	ldr	r1, [pc, #104]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005298:	f7fe f950 	bl	800353c <HAL_GetTick>
 800529c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a0:	f7fe f94c 	bl	800353c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e061      	b.n	800537a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <HAL_RCC_ClockConfig+0x260>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f003 020c 	and.w	r2, r3, #12
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d1eb      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d214      	bcs.n	8005300 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 0207 	bic.w	r2, r3, #7
 80052de:	4906      	ldr	r1, [pc, #24]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <HAL_RCC_ClockConfig+0x25c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e040      	b.n	800537a <HAL_RCC_ClockConfig+0x2de>
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800530c:	4b1d      	ldr	r3, [pc, #116]	; (8005384 <HAL_RCC_ClockConfig+0x2e8>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	491a      	ldr	r1, [pc, #104]	; (8005384 <HAL_RCC_ClockConfig+0x2e8>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <HAL_RCC_ClockConfig+0x2e8>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4912      	ldr	r1, [pc, #72]	; (8005384 <HAL_RCC_ClockConfig+0x2e8>)
 800533a:	4313      	orrs	r3, r2
 800533c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800533e:	f000 f829 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005342:	4601      	mov	r1, r0
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <HAL_RCC_ClockConfig+0x2e8>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534c:	22f0      	movs	r2, #240	; 0xf0
 800534e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	fa92 f2a2 	rbit	r2, r2
 8005356:	60fa      	str	r2, [r7, #12]
  return result;
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	fab2 f282 	clz	r2, r2
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	40d3      	lsrs	r3, r2
 8005362:	4a09      	ldr	r2, [pc, #36]	; (8005388 <HAL_RCC_ClockConfig+0x2ec>)
 8005364:	5cd3      	ldrb	r3, [r2, r3]
 8005366:	fa21 f303 	lsr.w	r3, r1, r3
 800536a:	4a08      	ldr	r2, [pc, #32]	; (800538c <HAL_RCC_ClockConfig+0x2f0>)
 800536c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <HAL_RCC_ClockConfig+0x2f4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe f89e 	bl	80034b4 <HAL_InitTick>
  
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3778      	adds	r7, #120	; 0x78
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	0800985c 	.word	0x0800985c
 800538c:	20000080 	.word	0x20000080
 8005390:	20000084 	.word	0x20000084

08005394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	b08b      	sub	sp, #44	; 0x2c
 8005398:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	2300      	movs	r3, #0
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80053ae:	4b29      	ldr	r3, [pc, #164]	; (8005454 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d002      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x30>
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d003      	beq.n	80053ca <HAL_RCC_GetSysClockFreq+0x36>
 80053c2:	e03c      	b.n	800543e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053c4:	4b24      	ldr	r3, [pc, #144]	; (8005458 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053c6:	623b      	str	r3, [r7, #32]
      break;
 80053c8:	e03c      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80053d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80053d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	fa92 f2a2 	rbit	r2, r2
 80053dc:	607a      	str	r2, [r7, #4]
  return result;
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	fab2 f282 	clz	r2, r2
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	40d3      	lsrs	r3, r2
 80053e8:	4a1c      	ldr	r2, [pc, #112]	; (800545c <HAL_RCC_GetSysClockFreq+0xc8>)
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80053ee:	4b19      	ldr	r3, [pc, #100]	; (8005454 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	220f      	movs	r2, #15
 80053f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	fa92 f2a2 	rbit	r2, r2
 8005400:	60fa      	str	r2, [r7, #12]
  return result;
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	fab2 f282 	clz	r2, r2
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	40d3      	lsrs	r3, r2
 800540c:	4a14      	ldr	r2, [pc, #80]	; (8005460 <HAL_RCC_GetSysClockFreq+0xcc>)
 800540e:	5cd3      	ldrb	r3, [r2, r3]
 8005410:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800541c:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <HAL_RCC_GetSysClockFreq+0xc4>)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	fbb2 f2f3 	udiv	r2, r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
 800542c:	e004      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4a0c      	ldr	r2, [pc, #48]	; (8005464 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	623b      	str	r3, [r7, #32]
      break;
 800543c:	e002      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005440:	623b      	str	r3, [r7, #32]
      break;
 8005442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005444:	6a3b      	ldr	r3, [r7, #32]
}
 8005446:	4618      	mov	r0, r3
 8005448:	372c      	adds	r7, #44	; 0x2c
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	007a1200 	.word	0x007a1200
 800545c:	08009874 	.word	0x08009874
 8005460:	08009884 	.word	0x08009884
 8005464:	003d0900 	.word	0x003d0900

08005468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <HAL_RCC_GetHCLKFreq+0x14>)
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000080 	.word	0x20000080

08005480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005486:	f7ff ffef 	bl	8005468 <HAL_RCC_GetHCLKFreq>
 800548a:	4601      	mov	r1, r0
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005494:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005498:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	fa92 f2a2 	rbit	r2, r2
 80054a0:	603a      	str	r2, [r7, #0]
  return result;
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	fab2 f282 	clz	r2, r2
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	40d3      	lsrs	r3, r2
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021000 	.word	0x40021000
 80054c0:	0800986c 	.word	0x0800986c

080054c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80054ca:	f7ff ffcd 	bl	8005468 <HAL_RCC_GetHCLKFreq>
 80054ce:	4601      	mov	r1, r0
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80054d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80054dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	fa92 f2a2 	rbit	r2, r2
 80054e4:	603a      	str	r2, [r7, #0]
  return result;
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	fab2 f282 	clz	r2, r2
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	40d3      	lsrs	r3, r2
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <HAL_RCC_GetPCLK2Freq+0x40>)
 80054f2:	5cd3      	ldrb	r3, [r2, r3]
 80054f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40021000 	.word	0x40021000
 8005504:	0800986c 	.word	0x0800986c

08005508 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b092      	sub	sp, #72	; 0x48
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80d4 	beq.w	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800552c:	4b4e      	ldr	r3, [pc, #312]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10e      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005538:	4b4b      	ldr	r3, [pc, #300]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	4a4a      	ldr	r2, [pc, #296]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005542:	61d3      	str	r3, [r2, #28]
 8005544:	4b48      	ldr	r3, [pc, #288]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005556:	4b45      	ldr	r3, [pc, #276]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d118      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005562:	4b42      	ldr	r3, [pc, #264]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a41      	ldr	r2, [pc, #260]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556e:	f7fd ffe5 	bl	800353c <HAL_GetTick>
 8005572:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005574:	e008      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005576:	f7fd ffe1 	bl	800353c <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b64      	cmp	r3, #100	; 0x64
 8005582:	d901      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e169      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005588:	4b38      	ldr	r3, [pc, #224]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005594:	4b34      	ldr	r3, [pc, #208]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800559e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8084 	beq.w	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d07c      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055b4:	4b2c      	ldr	r3, [pc, #176]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	fa93 f3a3 	rbit	r3, r3
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	461a      	mov	r2, r3
 80055de:	2301      	movs	r3, #1
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	fa93 f3a3 	rbit	r3, r3
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055f2:	fab3 f383 	clz	r3, r3
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005606:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d04b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005616:	f7fd ff91 	bl	800353c <HAL_GetTick>
 800561a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	e00a      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fd ff8d 	bl	800353c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e113      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005634:	2302      	movs	r3, #2
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	fa93 f3a3 	rbit	r3, r3
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	2302      	movs	r3, #2
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	61fb      	str	r3, [r7, #28]
  return result;
 800564c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d108      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005662:	4b01      	ldr	r3, [pc, #4]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	e00d      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005668:	40021000 	.word	0x40021000
 800566c:	40007000 	.word	0x40007000
 8005670:	10908100 	.word	0x10908100
 8005674:	2302      	movs	r3, #2
 8005676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	fa93 f3a3 	rbit	r3, r3
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	4b78      	ldr	r3, [pc, #480]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2202      	movs	r2, #2
 8005686:	613a      	str	r2, [r7, #16]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	fa92 f2a2 	rbit	r2, r2
 800568e:	60fa      	str	r2, [r7, #12]
  return result;
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	fab2 f282 	clz	r2, r2
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	f002 021f 	and.w	r2, r2, #31
 80056a2:	2101      	movs	r1, #1
 80056a4:	fa01 f202 	lsl.w	r2, r1, r2
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0b7      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80056ae:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	496a      	ldr	r1, [pc, #424]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c8:	4b66      	ldr	r3, [pc, #408]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	4a65      	ldr	r2, [pc, #404]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e0:	4b60      	ldr	r3, [pc, #384]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	f023 0203 	bic.w	r2, r3, #3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	495d      	ldr	r1, [pc, #372]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056fe:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	4956      	ldr	r1, [pc, #344]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800571c:	4b51      	ldr	r3, [pc, #324]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	494e      	ldr	r1, [pc, #312]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800572a:	4313      	orrs	r3, r2
 800572c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800573a:	4b4a      	ldr	r3, [pc, #296]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f023 0210 	bic.w	r2, r3, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	4947      	ldr	r1, [pc, #284]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005748:	4313      	orrs	r3, r2
 800574a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005758:	4b42      	ldr	r3, [pc, #264]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	493f      	ldr	r1, [pc, #252]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005776:	4b3b      	ldr	r3, [pc, #236]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f023 0220 	bic.w	r2, r3, #32
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	4938      	ldr	r1, [pc, #224]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005784:	4313      	orrs	r3, r2
 8005786:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005794:	4b33      	ldr	r3, [pc, #204]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	4930      	ldr	r1, [pc, #192]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057b2:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	4929      	ldr	r1, [pc, #164]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057d0:	4b24      	ldr	r3, [pc, #144]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4921      	ldr	r1, [pc, #132]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	491a      	ldr	r1, [pc, #104]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d008      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800580c:	4b15      	ldr	r3, [pc, #84]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	4912      	ldr	r1, [pc, #72]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	490b      	ldr	r1, [pc, #44]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005838:	4313      	orrs	r3, r2
 800583a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	4903      	ldr	r1, [pc, #12]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005856:	4313      	orrs	r3, r2
 8005858:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3748      	adds	r7, #72	; 0x48
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40021000 	.word	0x40021000

08005868 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e073      	b.n	8005966 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	7f5b      	ldrb	r3, [r3, #29]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fd fb46 	bl	8002f20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d055      	beq.n	8005954 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	22ca      	movs	r2, #202	; 0xca
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2253      	movs	r2, #83	; 0x53
 80058b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fa49 	bl	8005d50 <RTC_EnterInitMode>
 80058be:	4603      	mov	r3, r0
 80058c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d12c      	bne.n	8005922 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058da:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6899      	ldr	r1, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68d2      	ldr	r2, [r2, #12]
 8005902:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6919      	ldr	r1, [r3, #16]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	041a      	lsls	r2, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fa50 	bl	8005dbe <RTC_ExitInitMode>
 800591e:	4603      	mov	r3, r0
 8005920:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d110      	bne.n	800594a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005936:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
 8005952:	e001      	b.n	8005958 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800596e:	b590      	push	{r4, r7, lr}
 8005970:	b087      	sub	sp, #28
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	7f1b      	ldrb	r3, [r3, #28]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_RTC_SetTime+0x1c>
 8005986:	2302      	movs	r3, #2
 8005988:	e087      	b.n	8005a9a <HAL_RTC_SetTime+0x12c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2202      	movs	r2, #2
 8005994:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d126      	bne.n	80059ea <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 fa27 	bl	8005e08 <RTC_ByteToBcd2>
 80059ba:	4603      	mov	r3, r0
 80059bc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fa20 	bl	8005e08 <RTC_ByteToBcd2>
 80059c8:	4603      	mov	r3, r0
 80059ca:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059cc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	789b      	ldrb	r3, [r3, #2]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fa18 	bl	8005e08 <RTC_ByteToBcd2>
 80059d8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059da:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	78db      	ldrb	r3, [r3, #3]
 80059e2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e018      	b.n	8005a1c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2200      	movs	r2, #0
 80059fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a0a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a10:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	78db      	ldrb	r3, [r3, #3]
 8005a16:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	22ca      	movs	r2, #202	; 0xca
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2253      	movs	r2, #83	; 0x53
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f98f 	bl	8005d50 <RTC_EnterInitMode>
 8005a32:	4603      	mov	r3, r0
 8005a34:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d120      	bne.n	8005a7e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6899      	ldr	r1, [r3, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f9a2 	bl	8005dbe <RTC_ExitInitMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	22ff      	movs	r2, #255	; 0xff
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]

  return status;
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}

08005aa2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ad4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	0a1b      	lsrs	r3, r3, #8
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	0d9b      	lsrs	r3, r3, #22
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11a      	bne.n	8005b54 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f98e 	bl	8005e44 <RTC_Bcd2ToByte>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 f985 	bl	8005e44 <RTC_Bcd2ToByte>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	789b      	ldrb	r3, [r3, #2]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f97c 	bl	8005e44 <RTC_Bcd2ToByte>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b5e:	b590      	push	{r4, r7, lr}
 8005b60:	b087      	sub	sp, #28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	7f1b      	ldrb	r3, [r3, #28]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_RTC_SetDate+0x1c>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e071      	b.n	8005c5e <HAL_RTC_SetDate+0x100>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2202      	movs	r2, #2
 8005b84:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10e      	bne.n	8005baa <HAL_RTC_SetDate+0x4c>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	f023 0310 	bic.w	r3, r3, #16
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	330a      	adds	r3, #10
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11c      	bne.n	8005bea <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f927 	bl	8005e08 <RTC_ByteToBcd2>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f920 	bl	8005e08 <RTC_ByteToBcd2>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005bcc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	789b      	ldrb	r3, [r3, #2]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f918 	bl	8005e08 <RTC_ByteToBcd2>
 8005bd8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005bda:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e00e      	b.n	8005c08 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	78db      	ldrb	r3, [r3, #3]
 8005bee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bf6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bfc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	22ca      	movs	r2, #202	; 0xca
 8005c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2253      	movs	r2, #83	; 0x53
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f899 	bl	8005d50 <RTC_EnterInitMode>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c22:	7cfb      	ldrb	r3, [r7, #19]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10c      	bne.n	8005c42 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c36:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f8c0 	bl	8005dbe <RTC_ExitInitMode>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005c42:	7cfb      	ldrb	r3, [r7, #19]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	22ff      	movs	r2, #255	; 0xff
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]

  return status;
 8005c5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd90      	pop	{r4, r7, pc}

08005c66 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c84:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	0b5b      	lsrs	r3, r3, #13
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d11a      	bne.n	8005cfa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	78db      	ldrb	r3, [r3, #3]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 f8bb 	bl	8005e44 <RTC_Bcd2ToByte>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f8b2 	bl	8005e44 <RTC_Bcd2ToByte>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	789b      	ldrb	r3, [r3, #2]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f8a9 	bl	8005e44 <RTC_Bcd2ToByte>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <HAL_RTC_WaitForSynchro+0x48>)
 8005d16:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d18:	f7fd fc10 	bl	800353c <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d1e:	e009      	b.n	8005d34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d20:	f7fd fc0c 	bl	800353c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d2e:	d901      	bls.n	8005d34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e007      	b.n	8005d44 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0ee      	beq.n	8005d20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	0001ff5f 	.word	0x0001ff5f

08005d50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d122      	bne.n	8005db4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d7c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7e:	f7fd fbdd 	bl	800353c <HAL_GetTick>
 8005d82:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d84:	e00c      	b.n	8005da0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d86:	f7fd fbd9 	bl	800353c <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d94:	d904      	bls.n	8005da0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <RTC_EnterInitMode+0x64>
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d1e8      	bne.n	8005d86 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff8b 	bl	8005d04 <HAL_RTC_WaitForSynchro>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2204      	movs	r2, #4
 8005df8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005e16:	e005      	b.n	8005e24 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	3b0a      	subs	r3, #10
 8005e22:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	d8f6      	bhi.n	8005e18 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	b2db      	uxtb	r3, r3
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	4413      	add	r3, r2
 8005e72:	b2db      	uxtb	r3, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e09d      	b.n	8005fce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d108      	bne.n	8005eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea2:	d009      	beq.n	8005eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	61da      	str	r2, [r3, #28]
 8005eaa:	e005      	b.n	8005eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fd f84a 	bl	8002f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef8:	d902      	bls.n	8005f00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e002      	b.n	8005f06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f0e:	d007      	beq.n	8005f20 <HAL_SPI_Init+0xa0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f18:	d002      	beq.n	8005f20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	ea42 0103 	orr.w	r1, r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	f003 0204 	and.w	r2, r3, #4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f9c:	ea42 0103 	orr.w	r1, r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e049      	b.n	800607c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fc fff7 	bl	8002ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f000 fb6b 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e049      	b.n	800612a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fc ffc0 	bl	8003030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f000 fb14 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <HAL_TIM_PWM_Start+0x24>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	e03c      	b.n	80061d2 <HAL_TIM_PWM_Start+0x9e>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d109      	bne.n	8006172 <HAL_TIM_PWM_Start+0x3e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e02f      	b.n	80061d2 <HAL_TIM_PWM_Start+0x9e>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b08      	cmp	r3, #8
 8006176:	d109      	bne.n	800618c <HAL_TIM_PWM_Start+0x58>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b01      	cmp	r3, #1
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e022      	b.n	80061d2 <HAL_TIM_PWM_Start+0x9e>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b0c      	cmp	r3, #12
 8006190:	d109      	bne.n	80061a6 <HAL_TIM_PWM_Start+0x72>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e015      	b.n	80061d2 <HAL_TIM_PWM_Start+0x9e>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d109      	bne.n	80061c0 <HAL_TIM_PWM_Start+0x8c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e008      	b.n	80061d2 <HAL_TIM_PWM_Start+0x9e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e097      	b.n	800630a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0xb6>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e8:	e023      	b.n	8006232 <HAL_TIM_PWM_Start+0xfe>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_PWM_Start+0xc6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f8:	e01b      	b.n	8006232 <HAL_TIM_PWM_Start+0xfe>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PWM_Start+0xd6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006208:	e013      	b.n	8006232 <HAL_TIM_PWM_Start+0xfe>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b0c      	cmp	r3, #12
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0xe6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006218:	e00b      	b.n	8006232 <HAL_TIM_PWM_Start+0xfe>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b10      	cmp	r3, #16
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0xf6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006228:	e003      	b.n	8006232 <HAL_TIM_PWM_Start+0xfe>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fe58 	bl	8006ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a33      	ldr	r2, [pc, #204]	; (8006314 <HAL_TIM_PWM_Start+0x1e0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <HAL_TIM_PWM_Start+0x13e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a32      	ldr	r2, [pc, #200]	; (8006318 <HAL_TIM_PWM_Start+0x1e4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00e      	beq.n	8006272 <HAL_TIM_PWM_Start+0x13e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a30      	ldr	r2, [pc, #192]	; (800631c <HAL_TIM_PWM_Start+0x1e8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d009      	beq.n	8006272 <HAL_TIM_PWM_Start+0x13e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2f      	ldr	r2, [pc, #188]	; (8006320 <HAL_TIM_PWM_Start+0x1ec>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d004      	beq.n	8006272 <HAL_TIM_PWM_Start+0x13e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2d      	ldr	r2, [pc, #180]	; (8006324 <HAL_TIM_PWM_Start+0x1f0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d101      	bne.n	8006276 <HAL_TIM_PWM_Start+0x142>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <HAL_TIM_PWM_Start+0x144>
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800628a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a20      	ldr	r2, [pc, #128]	; (8006314 <HAL_TIM_PWM_Start+0x1e0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d018      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x194>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629e:	d013      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x194>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_TIM_PWM_Start+0x1f4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00e      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x194>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1f      	ldr	r2, [pc, #124]	; (800632c <HAL_TIM_PWM_Start+0x1f8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d009      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x194>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a17      	ldr	r2, [pc, #92]	; (8006318 <HAL_TIM_PWM_Start+0x1e4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIM_PWM_Start+0x194>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a16      	ldr	r2, [pc, #88]	; (800631c <HAL_TIM_PWM_Start+0x1e8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d115      	bne.n	80062f4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	4b18      	ldr	r3, [pc, #96]	; (8006330 <HAL_TIM_PWM_Start+0x1fc>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b06      	cmp	r3, #6
 80062d8:	d015      	beq.n	8006306 <HAL_TIM_PWM_Start+0x1d2>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e0:	d011      	beq.n	8006306 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	e008      	b.n	8006306 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e000      	b.n	8006308 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40013400 	.word	0x40013400
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	00010007 	.word	0x00010007

08006334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634e:	2302      	movs	r3, #2
 8006350:	e0ff      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b14      	cmp	r3, #20
 800635e:	f200 80f0 	bhi.w	8006542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006543 	.word	0x08006543
 8006370:	08006543 	.word	0x08006543
 8006374:	08006543 	.word	0x08006543
 8006378:	080063fd 	.word	0x080063fd
 800637c:	08006543 	.word	0x08006543
 8006380:	08006543 	.word	0x08006543
 8006384:	08006543 	.word	0x08006543
 8006388:	0800643f 	.word	0x0800643f
 800638c:	08006543 	.word	0x08006543
 8006390:	08006543 	.word	0x08006543
 8006394:	08006543 	.word	0x08006543
 8006398:	0800647f 	.word	0x0800647f
 800639c:	08006543 	.word	0x08006543
 80063a0:	08006543 	.word	0x08006543
 80063a4:	08006543 	.word	0x08006543
 80063a8:	080064c1 	.word	0x080064c1
 80063ac:	08006543 	.word	0x08006543
 80063b0:	08006543 	.word	0x08006543
 80063b4:	08006543 	.word	0x08006543
 80063b8:	08006501 	.word	0x08006501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa24 	bl	8006810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0208 	orr.w	r2, r2, #8
 80063d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
      break;
 80063fa:	e0a5      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fa94 	bl	8006930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6999      	ldr	r1, [r3, #24]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	619a      	str	r2, [r3, #24]
      break;
 800643c:	e084      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fafd 	bl	8006a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0208 	orr.w	r2, r2, #8
 8006458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0204 	bic.w	r2, r2, #4
 8006468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69d9      	ldr	r1, [r3, #28]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	61da      	str	r2, [r3, #28]
      break;
 800647c:	e064      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fb65 	bl	8006b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	021a      	lsls	r2, r3, #8
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	61da      	str	r2, [r3, #28]
      break;
 80064be:	e043      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fbae 	bl	8006c28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064fe:	e023      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fbf2 	bl	8006cf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006540:	e002      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
      break;
 8006546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop

0800655c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIM_ConfigClockSource+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e0b6      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x18a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b4:	d03e      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0xd8>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ba:	f200 8087 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	f000 8086 	beq.w	80066d2 <HAL_TIM_ConfigClockSource+0x176>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d87f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065cc:	2b70      	cmp	r3, #112	; 0x70
 80065ce:	d01a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xaa>
 80065d0:	2b70      	cmp	r3, #112	; 0x70
 80065d2:	d87b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065d4:	2b60      	cmp	r3, #96	; 0x60
 80065d6:	d050      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x11e>
 80065d8:	2b60      	cmp	r3, #96	; 0x60
 80065da:	d877      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065dc:	2b50      	cmp	r3, #80	; 0x50
 80065de:	d03c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xfe>
 80065e0:	2b50      	cmp	r3, #80	; 0x50
 80065e2:	d873      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d058      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x13e>
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d86f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d064      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d86b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d060      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d867      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d05a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 8006604:	e062      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f000 fc4b 	bl	8006eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e04f      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f000 fc34 	bl	8006eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006656:	609a      	str	r2, [r3, #8]
      break;
 8006658:	e03c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	461a      	mov	r2, r3
 8006668:	f000 fba8 	bl	8006dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2150      	movs	r1, #80	; 0x50
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fc01 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006678:	e02c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fbc7 	bl	8006e1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2160      	movs	r1, #96	; 0x60
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fbf1 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 8006698:	e01c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fb88 	bl	8006dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fbe1 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 80066b8:	e00c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 fbd8 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3c      	ldr	r2, [pc, #240]	; (80067f4 <TIM_Base_SetConfig+0x104>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a39      	ldr	r2, [pc, #228]	; (80067f8 <TIM_Base_SetConfig+0x108>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a38      	ldr	r2, [pc, #224]	; (80067fc <TIM_Base_SetConfig+0x10c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x38>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a37      	ldr	r2, [pc, #220]	; (8006800 <TIM_Base_SetConfig+0x110>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2d      	ldr	r2, [pc, #180]	; (80067f4 <TIM_Base_SetConfig+0x104>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01b      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d017      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2a      	ldr	r2, [pc, #168]	; (80067f8 <TIM_Base_SetConfig+0x108>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a29      	ldr	r2, [pc, #164]	; (80067fc <TIM_Base_SetConfig+0x10c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00f      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a28      	ldr	r2, [pc, #160]	; (8006800 <TIM_Base_SetConfig+0x110>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a27      	ldr	r2, [pc, #156]	; (8006804 <TIM_Base_SetConfig+0x114>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <TIM_Base_SetConfig+0x118>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_Base_SetConfig+0x8a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a25      	ldr	r2, [pc, #148]	; (800680c <TIM_Base_SetConfig+0x11c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <TIM_Base_SetConfig+0x104>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00f      	beq.n	80067d8 <TIM_Base_SetConfig+0xe8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a11      	ldr	r2, [pc, #68]	; (8006800 <TIM_Base_SetConfig+0x110>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00b      	beq.n	80067d8 <TIM_Base_SetConfig+0xe8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a10      	ldr	r2, [pc, #64]	; (8006804 <TIM_Base_SetConfig+0x114>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <TIM_Base_SetConfig+0xe8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a0f      	ldr	r2, [pc, #60]	; (8006808 <TIM_Base_SetConfig+0x118>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0xe8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a0e      	ldr	r2, [pc, #56]	; (800680c <TIM_Base_SetConfig+0x11c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	615a      	str	r2, [r3, #20]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40000800 	.word	0x40000800
 8006800:	40013400 	.word	0x40013400
 8006804:	40014000 	.word	0x40014000
 8006808:	40014400 	.word	0x40014400
 800680c:	40014800 	.word	0x40014800

08006810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 0302 	bic.w	r3, r3, #2
 800685c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a2c      	ldr	r2, [pc, #176]	; (800691c <TIM_OC1_SetConfig+0x10c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00f      	beq.n	8006890 <TIM_OC1_SetConfig+0x80>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a2b      	ldr	r2, [pc, #172]	; (8006920 <TIM_OC1_SetConfig+0x110>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_OC1_SetConfig+0x80>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a2a      	ldr	r2, [pc, #168]	; (8006924 <TIM_OC1_SetConfig+0x114>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_OC1_SetConfig+0x80>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a29      	ldr	r2, [pc, #164]	; (8006928 <TIM_OC1_SetConfig+0x118>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC1_SetConfig+0x80>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a28      	ldr	r2, [pc, #160]	; (800692c <TIM_OC1_SetConfig+0x11c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10c      	bne.n	80068aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0308 	bic.w	r3, r3, #8
 8006896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 0304 	bic.w	r3, r3, #4
 80068a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a1b      	ldr	r2, [pc, #108]	; (800691c <TIM_OC1_SetConfig+0x10c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00f      	beq.n	80068d2 <TIM_OC1_SetConfig+0xc2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1a      	ldr	r2, [pc, #104]	; (8006920 <TIM_OC1_SetConfig+0x110>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00b      	beq.n	80068d2 <TIM_OC1_SetConfig+0xc2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a19      	ldr	r2, [pc, #100]	; (8006924 <TIM_OC1_SetConfig+0x114>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d007      	beq.n	80068d2 <TIM_OC1_SetConfig+0xc2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a18      	ldr	r2, [pc, #96]	; (8006928 <TIM_OC1_SetConfig+0x118>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d003      	beq.n	80068d2 <TIM_OC1_SetConfig+0xc2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a17      	ldr	r2, [pc, #92]	; (800692c <TIM_OC1_SetConfig+0x11c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d111      	bne.n	80068f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	621a      	str	r2, [r3, #32]
}
 8006910:	bf00      	nop
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40013400 	.word	0x40013400
 8006924:	40014000 	.word	0x40014000
 8006928:	40014400 	.word	0x40014400
 800692c:	40014800 	.word	0x40014800

08006930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f023 0210 	bic.w	r2, r3, #16
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f023 0320 	bic.w	r3, r3, #32
 800697e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a28      	ldr	r2, [pc, #160]	; (8006a30 <TIM_OC2_SetConfig+0x100>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC2_SetConfig+0x6c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a27      	ldr	r2, [pc, #156]	; (8006a34 <TIM_OC2_SetConfig+0x104>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d10d      	bne.n	80069b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a1d      	ldr	r2, [pc, #116]	; (8006a30 <TIM_OC2_SetConfig+0x100>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00f      	beq.n	80069e0 <TIM_OC2_SetConfig+0xb0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a1c      	ldr	r2, [pc, #112]	; (8006a34 <TIM_OC2_SetConfig+0x104>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_OC2_SetConfig+0xb0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <TIM_OC2_SetConfig+0x108>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_OC2_SetConfig+0xb0>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <TIM_OC2_SetConfig+0x10c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_OC2_SetConfig+0xb0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <TIM_OC2_SetConfig+0x110>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d113      	bne.n	8006a08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069e6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40013400 	.word	0x40013400
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800

08006a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0303 	bic.w	r3, r3, #3
 8006a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a27      	ldr	r2, [pc, #156]	; (8006b40 <TIM_OC3_SetConfig+0xfc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_OC3_SetConfig+0x6a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <TIM_OC3_SetConfig+0x100>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d10d      	bne.n	8006aca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1c      	ldr	r2, [pc, #112]	; (8006b40 <TIM_OC3_SetConfig+0xfc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00f      	beq.n	8006af2 <TIM_OC3_SetConfig+0xae>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1b      	ldr	r2, [pc, #108]	; (8006b44 <TIM_OC3_SetConfig+0x100>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_OC3_SetConfig+0xae>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <TIM_OC3_SetConfig+0x104>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_OC3_SetConfig+0xae>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <TIM_OC3_SetConfig+0x108>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC3_SetConfig+0xae>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <TIM_OC3_SetConfig+0x10c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d113      	bne.n	8006b1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	621a      	str	r2, [r3, #32]
}
 8006b34:	bf00      	nop
 8006b36:	371c      	adds	r7, #28
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40013400 	.word	0x40013400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800

08006b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	031b      	lsls	r3, r3, #12
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <TIM_OC4_SetConfig+0xc0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00f      	beq.n	8006bd8 <TIM_OC4_SetConfig+0x84>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <TIM_OC4_SetConfig+0xc4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00b      	beq.n	8006bd8 <TIM_OC4_SetConfig+0x84>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a16      	ldr	r2, [pc, #88]	; (8006c1c <TIM_OC4_SetConfig+0xc8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d007      	beq.n	8006bd8 <TIM_OC4_SetConfig+0x84>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <TIM_OC4_SetConfig+0xcc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_OC4_SetConfig+0x84>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a14      	ldr	r2, [pc, #80]	; (8006c24 <TIM_OC4_SetConfig+0xd0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d109      	bne.n	8006bec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	019b      	lsls	r3, r3, #6
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40012c00 	.word	0x40012c00
 8006c18:	40013400 	.word	0x40013400
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400
 8006c24:	40014800 	.word	0x40014800

08006c28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	041b      	lsls	r3, r3, #16
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a17      	ldr	r2, [pc, #92]	; (8006cdc <TIM_OC5_SetConfig+0xb4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00f      	beq.n	8006ca2 <TIM_OC5_SetConfig+0x7a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <TIM_OC5_SetConfig+0xb8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_OC5_SetConfig+0x7a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <TIM_OC5_SetConfig+0xbc>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d007      	beq.n	8006ca2 <TIM_OC5_SetConfig+0x7a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <TIM_OC5_SetConfig+0xc0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_OC5_SetConfig+0x7a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a13      	ldr	r2, [pc, #76]	; (8006cec <TIM_OC5_SetConfig+0xc4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d109      	bne.n	8006cb6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	621a      	str	r2, [r3, #32]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	40012c00 	.word	0x40012c00
 8006ce0:	40013400 	.word	0x40013400
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800

08006cf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	051b      	lsls	r3, r3, #20
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <TIM_OC6_SetConfig+0xb8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00f      	beq.n	8006d6c <TIM_OC6_SetConfig+0x7c>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a17      	ldr	r2, [pc, #92]	; (8006dac <TIM_OC6_SetConfig+0xbc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00b      	beq.n	8006d6c <TIM_OC6_SetConfig+0x7c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <TIM_OC6_SetConfig+0xc0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d007      	beq.n	8006d6c <TIM_OC6_SetConfig+0x7c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <TIM_OC6_SetConfig+0xc4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC6_SetConfig+0x7c>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <TIM_OC6_SetConfig+0xc8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d109      	bne.n	8006d80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40014400 	.word	0x40014400
 8006db8:	40014800 	.word	0x40014800

08006dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 030a 	bic.w	r3, r3, #10
 8006df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0210 	bic.w	r2, r3, #16
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f043 0307 	orr.w	r3, r3, #7
 8006e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	609a      	str	r2, [r3, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2201      	movs	r2, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	43db      	mvns	r3, r3
 8006f12:	401a      	ands	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1a      	ldr	r2, [r3, #32]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e063      	b.n	800701c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a2b      	ldr	r2, [pc, #172]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2a      	ldr	r2, [pc, #168]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1b      	ldr	r2, [pc, #108]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc6:	d013      	beq.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a18      	ldr	r2, [pc, #96]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a17      	ldr	r2, [pc, #92]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a12      	ldr	r2, [pc, #72]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a13      	ldr	r2, [pc, #76]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10c      	bne.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40013400 	.word	0x40013400
 8007030:	40000400 	.word	0x40000400
 8007034:	40000800 	.word	0x40000800
 8007038:	40014000 	.word	0x40014000

0800703c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e040      	b.n	80070d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fc f838 	bl	80030d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2224      	movs	r2, #36	; 0x24
 8007068:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fbbc 	bl	80077f8 <UART_SetConfig>
 8007080:	4603      	mov	r3, r0
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e022      	b.n	80070d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fd84 	bl	8007ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fe0b 	bl	8007ce4 <UART_CheckIdleState>
 80070ce:	4603      	mov	r3, r0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4613      	mov	r3, r2
 80070e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d178      	bne.n	80071e2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_UART_Transmit+0x24>
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e071      	b.n	80071e4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2221      	movs	r2, #33	; 0x21
 800710c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800710e:	f7fc fa15 	bl	800353c <HAL_GetTick>
 8007112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712c:	d108      	bne.n	8007140 <HAL_UART_Transmit+0x68>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	e003      	b.n	8007148 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007144:	2300      	movs	r3, #0
 8007146:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007148:	e030      	b.n	80071ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2200      	movs	r2, #0
 8007152:	2180      	movs	r1, #128	; 0x80
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fe6d 	bl	8007e34 <UART_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e03c      	b.n	80071e4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717c:	b292      	uxth	r2, r2
 800717e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	3302      	adds	r3, #2
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	e008      	b.n	800719a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	b292      	uxth	r2, r2
 8007192:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	3301      	adds	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1c8      	bne.n	800714a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	2140      	movs	r1, #64	; 0x40
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fe36 	bl	8007e34 <UART_WaitOnFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e005      	b.n	80071e4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e000      	b.n	80071e4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
  }
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b0ba      	sub	sp, #232	; 0xe8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007216:	f640 030f 	movw	r3, #2063	; 0x80f
 800721a:	4013      	ands	r3, r2
 800721c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00f      	beq.n	8007254 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 82ab 	beq.w	80077a0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
      }
      return;
 8007252:	e2a5      	b.n	80077a0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8117 	beq.w	800748c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800725e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800726a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800726e:	4b85      	ldr	r3, [pc, #532]	; (8007484 <HAL_UART_IRQHandler+0x298>)
 8007270:	4013      	ands	r3, r2
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 810a 	beq.w	800748c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d011      	beq.n	80072a8 <HAL_UART_IRQHandler+0xbc>
 8007284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2201      	movs	r2, #1
 8007296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729e:	f043 0201 	orr.w	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d011      	beq.n	80072d8 <HAL_UART_IRQHandler+0xec>
 80072b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2202      	movs	r2, #2
 80072c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ce:	f043 0204 	orr.w	r2, r3, #4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d011      	beq.n	8007308 <HAL_UART_IRQHandler+0x11c>
 80072e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2204      	movs	r2, #4
 80072f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fe:	f043 0202 	orr.w	r2, r3, #2
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d017      	beq.n	8007344 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007324:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2208      	movs	r2, #8
 8007332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800733a:	f043 0208 	orr.w	r2, r3, #8
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734c:	2b00      	cmp	r3, #0
 800734e:	d012      	beq.n	8007376 <HAL_UART_IRQHandler+0x18a>
 8007350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736c:	f043 0220 	orr.w	r2, r3, #32
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8211 	beq.w	80077a4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800738e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d005      	beq.n	80073ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d04f      	beq.n	800746e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fd97 	bl	8007f02 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d141      	bne.n	8007466 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800740e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800741a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1d9      	bne.n	80073e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007432:	2b00      	cmp	r3, #0
 8007434:	d013      	beq.n	800745e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <HAL_UART_IRQHandler+0x29c>)
 800743c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007442:	4618      	mov	r0, r3
 8007444:	f7fc f9f4 	bl	8003830 <HAL_DMA_Abort_IT>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d017      	beq.n	800747e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	e00f      	b.n	800747e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f9b4 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007464:	e00b      	b.n	800747e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9b0 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	e007      	b.n	800747e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f9ac 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800747c:	e192      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747e:	bf00      	nop
    return;
 8007480:	e190      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
 8007482:	bf00      	nop
 8007484:	04000120 	.word	0x04000120
 8007488:	08007fcb 	.word	0x08007fcb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 814b 	bne.w	800772c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 8144 	beq.w	800772c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 813d 	beq.w	800772c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2210      	movs	r2, #16
 80074b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	f040 80b5 	bne.w	8007634 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 8164 	beq.w	80077a8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ea:	429a      	cmp	r2, r3
 80074ec:	f080 815c 	bcs.w	80077a8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	2b20      	cmp	r3, #32
 8007502:	f000 8086 	beq.w	8007612 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800751a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800751e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007522:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007534:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800753c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1da      	bne.n	8007506 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3308      	adds	r3, #8
 8007570:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007574:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007578:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800757c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e1      	bne.n	8007550 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3308      	adds	r3, #8
 8007592:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800759c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800759e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e3      	bne.n	800758c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e4      	bne.n	80075d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760c:	4618      	mov	r0, r3
 800760e:	f7fc f8d6 	bl	80037be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2202      	movs	r2, #2
 8007616:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007624:	b29b      	uxth	r3, r3
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	b29b      	uxth	r3, r3
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f8d7 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007632:	e0b9      	b.n	80077a8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007640:	b29b      	uxth	r3, r3
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80ab 	beq.w	80077ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80a6 	beq.w	80077ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007682:	647b      	str	r3, [r7, #68]	; 0x44
 8007684:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e4      	bne.n	8007660 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	623b      	str	r3, [r7, #32]
   return(result);
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076ba:	633a      	str	r2, [r7, #48]	; 0x30
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e3      	bne.n	8007696 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0310 	bic.w	r3, r3, #16
 80076f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	69b9      	ldr	r1, [r7, #24]
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	617b      	str	r3, [r7, #20]
   return(result);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e4      	bne.n	80076e2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800771e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f85b 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800772a:	e03f      	b.n	80077ac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800772c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <HAL_UART_IRQHandler+0x56a>
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800774c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fc7b 	bl	800804a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007754:	e02d      	b.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00e      	beq.n	8007780 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776a:	2b00      	cmp	r3, #0
 800776c:	d008      	beq.n	8007780 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01c      	beq.n	80077b0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
    }
    return;
 800777e:	e017      	b.n	80077b0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d012      	beq.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc2c 	bl	8007ff6 <UART_EndTransmit_IT>
    return;
 800779e:	e008      	b.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80077a0:	bf00      	nop
 80077a2:	e006      	b.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80077a4:	bf00      	nop
 80077a6:	e004      	b.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80077a8:	bf00      	nop
 80077aa:	e002      	b.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80077b0:	bf00      	nop
  }

}
 80077b2:	37e8      	adds	r7, #232	; 0xe8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007826:	f023 030c 	bic.w	r3, r3, #12
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	6979      	ldr	r1, [r7, #20]
 8007830:	430b      	orrs	r3, r1
 8007832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	430a      	orrs	r2, r1
 800786c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4aa7      	ldr	r2, [pc, #668]	; (8007b10 <UART_SetConfig+0x318>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d120      	bne.n	80078ba <UART_SetConfig+0xc2>
 8007878:	4ba6      	ldr	r3, [pc, #664]	; (8007b14 <UART_SetConfig+0x31c>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b03      	cmp	r3, #3
 8007882:	d817      	bhi.n	80078b4 <UART_SetConfig+0xbc>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0x94>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078a9 	.word	0x080078a9
 8007894:	080078af 	.word	0x080078af
 8007898:	080078a3 	.word	0x080078a3
 800789c:	2301      	movs	r3, #1
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e0b5      	b.n	8007a0e <UART_SetConfig+0x216>
 80078a2:	2302      	movs	r3, #2
 80078a4:	77fb      	strb	r3, [r7, #31]
 80078a6:	e0b2      	b.n	8007a0e <UART_SetConfig+0x216>
 80078a8:	2304      	movs	r3, #4
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e0af      	b.n	8007a0e <UART_SetConfig+0x216>
 80078ae:	2308      	movs	r3, #8
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e0ac      	b.n	8007a0e <UART_SetConfig+0x216>
 80078b4:	2310      	movs	r3, #16
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e0a9      	b.n	8007a0e <UART_SetConfig+0x216>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a96      	ldr	r2, [pc, #600]	; (8007b18 <UART_SetConfig+0x320>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d124      	bne.n	800790e <UART_SetConfig+0x116>
 80078c4:	4b93      	ldr	r3, [pc, #588]	; (8007b14 <UART_SetConfig+0x31c>)
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078d0:	d011      	beq.n	80078f6 <UART_SetConfig+0xfe>
 80078d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078d6:	d817      	bhi.n	8007908 <UART_SetConfig+0x110>
 80078d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078dc:	d011      	beq.n	8007902 <UART_SetConfig+0x10a>
 80078de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e2:	d811      	bhi.n	8007908 <UART_SetConfig+0x110>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <UART_SetConfig+0xf8>
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ec:	d006      	beq.n	80078fc <UART_SetConfig+0x104>
 80078ee:	e00b      	b.n	8007908 <UART_SetConfig+0x110>
 80078f0:	2300      	movs	r3, #0
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e08b      	b.n	8007a0e <UART_SetConfig+0x216>
 80078f6:	2302      	movs	r3, #2
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e088      	b.n	8007a0e <UART_SetConfig+0x216>
 80078fc:	2304      	movs	r3, #4
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e085      	b.n	8007a0e <UART_SetConfig+0x216>
 8007902:	2308      	movs	r3, #8
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e082      	b.n	8007a0e <UART_SetConfig+0x216>
 8007908:	2310      	movs	r3, #16
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	e07f      	b.n	8007a0e <UART_SetConfig+0x216>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a82      	ldr	r2, [pc, #520]	; (8007b1c <UART_SetConfig+0x324>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d124      	bne.n	8007962 <UART_SetConfig+0x16a>
 8007918:	4b7e      	ldr	r3, [pc, #504]	; (8007b14 <UART_SetConfig+0x31c>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007920:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007924:	d011      	beq.n	800794a <UART_SetConfig+0x152>
 8007926:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800792a:	d817      	bhi.n	800795c <UART_SetConfig+0x164>
 800792c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007930:	d011      	beq.n	8007956 <UART_SetConfig+0x15e>
 8007932:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007936:	d811      	bhi.n	800795c <UART_SetConfig+0x164>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <UART_SetConfig+0x14c>
 800793c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007940:	d006      	beq.n	8007950 <UART_SetConfig+0x158>
 8007942:	e00b      	b.n	800795c <UART_SetConfig+0x164>
 8007944:	2300      	movs	r3, #0
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e061      	b.n	8007a0e <UART_SetConfig+0x216>
 800794a:	2302      	movs	r3, #2
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e05e      	b.n	8007a0e <UART_SetConfig+0x216>
 8007950:	2304      	movs	r3, #4
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e05b      	b.n	8007a0e <UART_SetConfig+0x216>
 8007956:	2308      	movs	r3, #8
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e058      	b.n	8007a0e <UART_SetConfig+0x216>
 800795c:	2310      	movs	r3, #16
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e055      	b.n	8007a0e <UART_SetConfig+0x216>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a6e      	ldr	r2, [pc, #440]	; (8007b20 <UART_SetConfig+0x328>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d124      	bne.n	80079b6 <UART_SetConfig+0x1be>
 800796c:	4b69      	ldr	r3, [pc, #420]	; (8007b14 <UART_SetConfig+0x31c>)
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007978:	d011      	beq.n	800799e <UART_SetConfig+0x1a6>
 800797a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800797e:	d817      	bhi.n	80079b0 <UART_SetConfig+0x1b8>
 8007980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007984:	d011      	beq.n	80079aa <UART_SetConfig+0x1b2>
 8007986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800798a:	d811      	bhi.n	80079b0 <UART_SetConfig+0x1b8>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <UART_SetConfig+0x1a0>
 8007990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007994:	d006      	beq.n	80079a4 <UART_SetConfig+0x1ac>
 8007996:	e00b      	b.n	80079b0 <UART_SetConfig+0x1b8>
 8007998:	2300      	movs	r3, #0
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e037      	b.n	8007a0e <UART_SetConfig+0x216>
 800799e:	2302      	movs	r3, #2
 80079a0:	77fb      	strb	r3, [r7, #31]
 80079a2:	e034      	b.n	8007a0e <UART_SetConfig+0x216>
 80079a4:	2304      	movs	r3, #4
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e031      	b.n	8007a0e <UART_SetConfig+0x216>
 80079aa:	2308      	movs	r3, #8
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e02e      	b.n	8007a0e <UART_SetConfig+0x216>
 80079b0:	2310      	movs	r3, #16
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e02b      	b.n	8007a0e <UART_SetConfig+0x216>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a5a      	ldr	r2, [pc, #360]	; (8007b24 <UART_SetConfig+0x32c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d124      	bne.n	8007a0a <UART_SetConfig+0x212>
 80079c0:	4b54      	ldr	r3, [pc, #336]	; (8007b14 <UART_SetConfig+0x31c>)
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80079c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079cc:	d011      	beq.n	80079f2 <UART_SetConfig+0x1fa>
 80079ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079d2:	d817      	bhi.n	8007a04 <UART_SetConfig+0x20c>
 80079d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079d8:	d011      	beq.n	80079fe <UART_SetConfig+0x206>
 80079da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079de:	d811      	bhi.n	8007a04 <UART_SetConfig+0x20c>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <UART_SetConfig+0x1f4>
 80079e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079e8:	d006      	beq.n	80079f8 <UART_SetConfig+0x200>
 80079ea:	e00b      	b.n	8007a04 <UART_SetConfig+0x20c>
 80079ec:	2300      	movs	r3, #0
 80079ee:	77fb      	strb	r3, [r7, #31]
 80079f0:	e00d      	b.n	8007a0e <UART_SetConfig+0x216>
 80079f2:	2302      	movs	r3, #2
 80079f4:	77fb      	strb	r3, [r7, #31]
 80079f6:	e00a      	b.n	8007a0e <UART_SetConfig+0x216>
 80079f8:	2304      	movs	r3, #4
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e007      	b.n	8007a0e <UART_SetConfig+0x216>
 80079fe:	2308      	movs	r3, #8
 8007a00:	77fb      	strb	r3, [r7, #31]
 8007a02:	e004      	b.n	8007a0e <UART_SetConfig+0x216>
 8007a04:	2310      	movs	r3, #16
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e001      	b.n	8007a0e <UART_SetConfig+0x216>
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a16:	d15b      	bne.n	8007ad0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007a18:	7ffb      	ldrb	r3, [r7, #31]
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d827      	bhi.n	8007a6e <UART_SetConfig+0x276>
 8007a1e:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <UART_SetConfig+0x22c>)
 8007a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a24:	08007a49 	.word	0x08007a49
 8007a28:	08007a51 	.word	0x08007a51
 8007a2c:	08007a59 	.word	0x08007a59
 8007a30:	08007a6f 	.word	0x08007a6f
 8007a34:	08007a5f 	.word	0x08007a5f
 8007a38:	08007a6f 	.word	0x08007a6f
 8007a3c:	08007a6f 	.word	0x08007a6f
 8007a40:	08007a6f 	.word	0x08007a6f
 8007a44:	08007a67 	.word	0x08007a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a48:	f7fd fd1a 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8007a4c:	61b8      	str	r0, [r7, #24]
        break;
 8007a4e:	e013      	b.n	8007a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a50:	f7fd fd38 	bl	80054c4 <HAL_RCC_GetPCLK2Freq>
 8007a54:	61b8      	str	r0, [r7, #24]
        break;
 8007a56:	e00f      	b.n	8007a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a58:	4b33      	ldr	r3, [pc, #204]	; (8007b28 <UART_SetConfig+0x330>)
 8007a5a:	61bb      	str	r3, [r7, #24]
        break;
 8007a5c:	e00c      	b.n	8007a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a5e:	f7fd fc99 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8007a62:	61b8      	str	r0, [r7, #24]
        break;
 8007a64:	e008      	b.n	8007a78 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a6a:	61bb      	str	r3, [r7, #24]
        break;
 8007a6c:	e004      	b.n	8007a78 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	77bb      	strb	r3, [r7, #30]
        break;
 8007a76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8082 	beq.w	8007b84 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	005a      	lsls	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	085b      	lsrs	r3, r3, #1
 8007a8a:	441a      	add	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b0f      	cmp	r3, #15
 8007a9a:	d916      	bls.n	8007aca <UART_SetConfig+0x2d2>
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa2:	d212      	bcs.n	8007aca <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f023 030f 	bic.w	r3, r3, #15
 8007aac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	89fb      	ldrh	r3, [r7, #14]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	89fa      	ldrh	r2, [r7, #14]
 8007ac6:	60da      	str	r2, [r3, #12]
 8007ac8:	e05c      	b.n	8007b84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	77bb      	strb	r3, [r7, #30]
 8007ace:	e059      	b.n	8007b84 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad0:	7ffb      	ldrb	r3, [r7, #31]
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d835      	bhi.n	8007b42 <UART_SetConfig+0x34a>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <UART_SetConfig+0x2e4>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b09 	.word	0x08007b09
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b43 	.word	0x08007b43
 8007aec:	08007b33 	.word	0x08007b33
 8007af0:	08007b43 	.word	0x08007b43
 8007af4:	08007b43 	.word	0x08007b43
 8007af8:	08007b43 	.word	0x08007b43
 8007afc:	08007b3b 	.word	0x08007b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b00:	f7fd fcbe 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8007b04:	61b8      	str	r0, [r7, #24]
        break;
 8007b06:	e021      	b.n	8007b4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b08:	f7fd fcdc 	bl	80054c4 <HAL_RCC_GetPCLK2Freq>
 8007b0c:	61b8      	str	r0, [r7, #24]
        break;
 8007b0e:	e01d      	b.n	8007b4c <UART_SetConfig+0x354>
 8007b10:	40013800 	.word	0x40013800
 8007b14:	40021000 	.word	0x40021000
 8007b18:	40004400 	.word	0x40004400
 8007b1c:	40004800 	.word	0x40004800
 8007b20:	40004c00 	.word	0x40004c00
 8007b24:	40005000 	.word	0x40005000
 8007b28:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b2c:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <UART_SetConfig+0x3a4>)
 8007b2e:	61bb      	str	r3, [r7, #24]
        break;
 8007b30:	e00c      	b.n	8007b4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b32:	f7fd fc2f 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8007b36:	61b8      	str	r0, [r7, #24]
        break;
 8007b38:	e008      	b.n	8007b4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3e:	61bb      	str	r3, [r7, #24]
        break;
 8007b40:	e004      	b.n	8007b4c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	77bb      	strb	r3, [r7, #30]
        break;
 8007b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d018      	beq.n	8007b84 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	085a      	lsrs	r2, r3, #1
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	441a      	add	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b0f      	cmp	r3, #15
 8007b6a:	d909      	bls.n	8007b80 <UART_SetConfig+0x388>
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b72:	d205      	bcs.n	8007b80 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	e001      	b.n	8007b84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b90:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3720      	adds	r7, #32
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	007a1200 	.word	0x007a1200

08007ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c9e:	d10a      	bne.n	8007cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b098      	sub	sp, #96	; 0x60
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cf4:	f7fb fc22 	bl	800353c <HAL_GetTick>
 8007cf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d12e      	bne.n	8007d66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d10:	2200      	movs	r2, #0
 8007d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f88c 	bl	8007e34 <UART_WaitOnFlagUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d021      	beq.n	8007d66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d36:	653b      	str	r3, [r7, #80]	; 0x50
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d40:	647b      	str	r3, [r7, #68]	; 0x44
 8007d42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e062      	b.n	8007e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d149      	bne.n	8007e08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f856 	bl	8007e34 <UART_WaitOnFlagUntilTimeout>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d03c      	beq.n	8007e08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	461a      	mov	r2, r3
 8007daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30
 8007dae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e6      	bne.n	8007d8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0301 	bic.w	r3, r3, #1
 8007dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de0:	61fa      	str	r2, [r7, #28]
 8007de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	69b9      	ldr	r1, [r7, #24]
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	617b      	str	r3, [r7, #20]
   return(result);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e5      	bne.n	8007dc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e011      	b.n	8007e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3758      	adds	r7, #88	; 0x58
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	4613      	mov	r3, r2
 8007e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e44:	e049      	b.n	8007eda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4c:	d045      	beq.n	8007eda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e4e:	f7fb fb75 	bl	800353c <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d302      	bcc.n	8007e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e048      	b.n	8007efa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d031      	beq.n	8007eda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d110      	bne.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2208      	movs	r2, #8
 8007e8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 f838 	bl	8007f02 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2208      	movs	r2, #8
 8007e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e029      	b.n	8007efa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb4:	d111      	bne.n	8007eda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f81e 	bl	8007f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e00f      	b.n	8007efa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	bf0c      	ite	eq
 8007eea:	2301      	moveq	r3, #1
 8007eec:	2300      	movne	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d0a6      	beq.n	8007e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b095      	sub	sp, #84	; 0x54
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	643b      	str	r3, [r7, #64]	; 0x40
 8007f2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e6      	bne.n	8007f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3308      	adds	r3, #8
 8007f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f023 0301 	bic.w	r3, r3, #1
 8007f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e5      	bne.n	8007f3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d118      	bne.n	8007faa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f023 0310 	bic.w	r3, r3, #16
 8007f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e6      	bne.n	8007f78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007fbe:	bf00      	nop
 8007fc0:	3754      	adds	r7, #84	; 0x54
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f7ff fbef 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fee:	bf00      	nop
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b088      	sub	sp, #32
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	60bb      	str	r3, [r7, #8]
   return(result);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	613b      	str	r3, [r7, #16]
   return(result);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e6      	bne.n	8007ffe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff fbbb 	bl	80077b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008042:	bf00      	nop
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800805e:	b480      	push	{r7}
 8008060:	b085      	sub	sp, #20
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008066:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800806a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	b29b      	uxth	r3, r3
 8008078:	43db      	mvns	r3, r3
 800807a:	b29b      	uxth	r3, r3
 800807c:	4013      	ands	r3, r2
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008094:	b084      	sub	sp, #16
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	f107 0014 	add.w	r0, r7, #20
 80080a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	b004      	add	sp, #16
 80080d4:	4770      	bx	lr
	...

080080d8 <__errno>:
 80080d8:	4b01      	ldr	r3, [pc, #4]	; (80080e0 <__errno+0x8>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	2000008c 	.word	0x2000008c

080080e4 <__libc_init_array>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4d0d      	ldr	r5, [pc, #52]	; (800811c <__libc_init_array+0x38>)
 80080e8:	4c0d      	ldr	r4, [pc, #52]	; (8008120 <__libc_init_array+0x3c>)
 80080ea:	1b64      	subs	r4, r4, r5
 80080ec:	10a4      	asrs	r4, r4, #2
 80080ee:	2600      	movs	r6, #0
 80080f0:	42a6      	cmp	r6, r4
 80080f2:	d109      	bne.n	8008108 <__libc_init_array+0x24>
 80080f4:	4d0b      	ldr	r5, [pc, #44]	; (8008124 <__libc_init_array+0x40>)
 80080f6:	4c0c      	ldr	r4, [pc, #48]	; (8008128 <__libc_init_array+0x44>)
 80080f8:	f001 fa98 	bl	800962c <_init>
 80080fc:	1b64      	subs	r4, r4, r5
 80080fe:	10a4      	asrs	r4, r4, #2
 8008100:	2600      	movs	r6, #0
 8008102:	42a6      	cmp	r6, r4
 8008104:	d105      	bne.n	8008112 <__libc_init_array+0x2e>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f855 3b04 	ldr.w	r3, [r5], #4
 800810c:	4798      	blx	r3
 800810e:	3601      	adds	r6, #1
 8008110:	e7ee      	b.n	80080f0 <__libc_init_array+0xc>
 8008112:	f855 3b04 	ldr.w	r3, [r5], #4
 8008116:	4798      	blx	r3
 8008118:	3601      	adds	r6, #1
 800811a:	e7f2      	b.n	8008102 <__libc_init_array+0x1e>
 800811c:	080099dc 	.word	0x080099dc
 8008120:	080099dc 	.word	0x080099dc
 8008124:	080099dc 	.word	0x080099dc
 8008128:	080099e0 	.word	0x080099e0

0800812c <memset>:
 800812c:	4402      	add	r2, r0
 800812e:	4603      	mov	r3, r0
 8008130:	4293      	cmp	r3, r2
 8008132:	d100      	bne.n	8008136 <memset+0xa>
 8008134:	4770      	bx	lr
 8008136:	f803 1b01 	strb.w	r1, [r3], #1
 800813a:	e7f9      	b.n	8008130 <memset+0x4>

0800813c <srand>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4b10      	ldr	r3, [pc, #64]	; (8008180 <srand+0x44>)
 8008140:	681d      	ldr	r5, [r3, #0]
 8008142:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008144:	4604      	mov	r4, r0
 8008146:	b9b3      	cbnz	r3, 8008176 <srand+0x3a>
 8008148:	2018      	movs	r0, #24
 800814a:	f000 f9d9 	bl	8008500 <malloc>
 800814e:	4602      	mov	r2, r0
 8008150:	63a8      	str	r0, [r5, #56]	; 0x38
 8008152:	b920      	cbnz	r0, 800815e <srand+0x22>
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <srand+0x48>)
 8008156:	480c      	ldr	r0, [pc, #48]	; (8008188 <srand+0x4c>)
 8008158:	2142      	movs	r1, #66	; 0x42
 800815a:	f000 f895 	bl	8008288 <__assert_func>
 800815e:	490b      	ldr	r1, [pc, #44]	; (800818c <srand+0x50>)
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <srand+0x54>)
 8008162:	e9c0 1300 	strd	r1, r3, [r0]
 8008166:	4b0b      	ldr	r3, [pc, #44]	; (8008194 <srand+0x58>)
 8008168:	6083      	str	r3, [r0, #8]
 800816a:	230b      	movs	r3, #11
 800816c:	8183      	strh	r3, [r0, #12]
 800816e:	2100      	movs	r1, #0
 8008170:	2001      	movs	r0, #1
 8008172:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008176:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008178:	2200      	movs	r2, #0
 800817a:	611c      	str	r4, [r3, #16]
 800817c:	615a      	str	r2, [r3, #20]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	2000008c 	.word	0x2000008c
 8008184:	08009898 	.word	0x08009898
 8008188:	080098af 	.word	0x080098af
 800818c:	abcd330e 	.word	0xabcd330e
 8008190:	e66d1234 	.word	0xe66d1234
 8008194:	0005deec 	.word	0x0005deec

08008198 <rand>:
 8008198:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <rand+0x5c>)
 800819a:	b510      	push	{r4, lr}
 800819c:	681c      	ldr	r4, [r3, #0]
 800819e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081a0:	b9b3      	cbnz	r3, 80081d0 <rand+0x38>
 80081a2:	2018      	movs	r0, #24
 80081a4:	f000 f9ac 	bl	8008500 <malloc>
 80081a8:	63a0      	str	r0, [r4, #56]	; 0x38
 80081aa:	b928      	cbnz	r0, 80081b8 <rand+0x20>
 80081ac:	4602      	mov	r2, r0
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <rand+0x60>)
 80081b0:	4812      	ldr	r0, [pc, #72]	; (80081fc <rand+0x64>)
 80081b2:	214e      	movs	r1, #78	; 0x4e
 80081b4:	f000 f868 	bl	8008288 <__assert_func>
 80081b8:	4a11      	ldr	r2, [pc, #68]	; (8008200 <rand+0x68>)
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <rand+0x6c>)
 80081bc:	e9c0 2300 	strd	r2, r3, [r0]
 80081c0:	4b11      	ldr	r3, [pc, #68]	; (8008208 <rand+0x70>)
 80081c2:	6083      	str	r3, [r0, #8]
 80081c4:	230b      	movs	r3, #11
 80081c6:	8183      	strh	r3, [r0, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	2300      	movs	r3, #0
 80081cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80081d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80081d2:	4a0e      	ldr	r2, [pc, #56]	; (800820c <rand+0x74>)
 80081d4:	6920      	ldr	r0, [r4, #16]
 80081d6:	6963      	ldr	r3, [r4, #20]
 80081d8:	490d      	ldr	r1, [pc, #52]	; (8008210 <rand+0x78>)
 80081da:	4342      	muls	r2, r0
 80081dc:	fb01 2203 	mla	r2, r1, r3, r2
 80081e0:	fba0 0101 	umull	r0, r1, r0, r1
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	eb42 0001 	adc.w	r0, r2, r1
 80081ea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80081ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80081f2:	bd10      	pop	{r4, pc}
 80081f4:	2000008c 	.word	0x2000008c
 80081f8:	08009898 	.word	0x08009898
 80081fc:	080098af 	.word	0x080098af
 8008200:	abcd330e 	.word	0xabcd330e
 8008204:	e66d1234 	.word	0xe66d1234
 8008208:	0005deec 	.word	0x0005deec
 800820c:	5851f42d 	.word	0x5851f42d
 8008210:	4c957f2d 	.word	0x4c957f2d

08008214 <siprintf>:
 8008214:	b40e      	push	{r1, r2, r3}
 8008216:	b500      	push	{lr}
 8008218:	b09c      	sub	sp, #112	; 0x70
 800821a:	ab1d      	add	r3, sp, #116	; 0x74
 800821c:	9002      	str	r0, [sp, #8]
 800821e:	9006      	str	r0, [sp, #24]
 8008220:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008224:	4809      	ldr	r0, [pc, #36]	; (800824c <siprintf+0x38>)
 8008226:	9107      	str	r1, [sp, #28]
 8008228:	9104      	str	r1, [sp, #16]
 800822a:	4909      	ldr	r1, [pc, #36]	; (8008250 <siprintf+0x3c>)
 800822c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008230:	9105      	str	r1, [sp, #20]
 8008232:	6800      	ldr	r0, [r0, #0]
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	a902      	add	r1, sp, #8
 8008238:	f000 faa6 	bl	8008788 <_svfiprintf_r>
 800823c:	9b02      	ldr	r3, [sp, #8]
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	b01c      	add	sp, #112	; 0x70
 8008244:	f85d eb04 	ldr.w	lr, [sp], #4
 8008248:	b003      	add	sp, #12
 800824a:	4770      	bx	lr
 800824c:	2000008c 	.word	0x2000008c
 8008250:	ffff0208 	.word	0xffff0208

08008254 <time>:
 8008254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008256:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <time+0x30>)
 8008258:	2200      	movs	r2, #0
 800825a:	4669      	mov	r1, sp
 800825c:	4604      	mov	r4, r0
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	f000 f938 	bl	80084d4 <_gettimeofday_r>
 8008264:	2800      	cmp	r0, #0
 8008266:	bfbe      	ittt	lt
 8008268:	f04f 32ff 	movlt.w	r2, #4294967295
 800826c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008270:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008278:	b10c      	cbz	r4, 800827e <time+0x2a>
 800827a:	e9c4 0100 	strd	r0, r1, [r4]
 800827e:	b004      	add	sp, #16
 8008280:	bd10      	pop	{r4, pc}
 8008282:	bf00      	nop
 8008284:	2000008c 	.word	0x2000008c

08008288 <__assert_func>:
 8008288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800828a:	4614      	mov	r4, r2
 800828c:	461a      	mov	r2, r3
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <__assert_func+0x2c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4605      	mov	r5, r0
 8008294:	68d8      	ldr	r0, [r3, #12]
 8008296:	b14c      	cbz	r4, 80082ac <__assert_func+0x24>
 8008298:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <__assert_func+0x30>)
 800829a:	9100      	str	r1, [sp, #0]
 800829c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082a0:	4906      	ldr	r1, [pc, #24]	; (80082bc <__assert_func+0x34>)
 80082a2:	462b      	mov	r3, r5
 80082a4:	f000 f8e4 	bl	8008470 <fiprintf>
 80082a8:	f000 ff82 	bl	80091b0 <abort>
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <__assert_func+0x38>)
 80082ae:	461c      	mov	r4, r3
 80082b0:	e7f3      	b.n	800829a <__assert_func+0x12>
 80082b2:	bf00      	nop
 80082b4:	2000008c 	.word	0x2000008c
 80082b8:	0800990a 	.word	0x0800990a
 80082bc:	08009917 	.word	0x08009917
 80082c0:	08009945 	.word	0x08009945

080082c4 <std>:
 80082c4:	2300      	movs	r3, #0
 80082c6:	b510      	push	{r4, lr}
 80082c8:	4604      	mov	r4, r0
 80082ca:	e9c0 3300 	strd	r3, r3, [r0]
 80082ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082d2:	6083      	str	r3, [r0, #8]
 80082d4:	8181      	strh	r1, [r0, #12]
 80082d6:	6643      	str	r3, [r0, #100]	; 0x64
 80082d8:	81c2      	strh	r2, [r0, #14]
 80082da:	6183      	str	r3, [r0, #24]
 80082dc:	4619      	mov	r1, r3
 80082de:	2208      	movs	r2, #8
 80082e0:	305c      	adds	r0, #92	; 0x5c
 80082e2:	f7ff ff23 	bl	800812c <memset>
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <std+0x38>)
 80082e8:	6263      	str	r3, [r4, #36]	; 0x24
 80082ea:	4b05      	ldr	r3, [pc, #20]	; (8008300 <std+0x3c>)
 80082ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ee:	4b05      	ldr	r3, [pc, #20]	; (8008304 <std+0x40>)
 80082f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082f2:	4b05      	ldr	r3, [pc, #20]	; (8008308 <std+0x44>)
 80082f4:	6224      	str	r4, [r4, #32]
 80082f6:	6323      	str	r3, [r4, #48]	; 0x30
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	bf00      	nop
 80082fc:	08008f85 	.word	0x08008f85
 8008300:	08008fa7 	.word	0x08008fa7
 8008304:	08008fdf 	.word	0x08008fdf
 8008308:	08009003 	.word	0x08009003

0800830c <_cleanup_r>:
 800830c:	4901      	ldr	r1, [pc, #4]	; (8008314 <_cleanup_r+0x8>)
 800830e:	f000 b8c1 	b.w	8008494 <_fwalk_reent>
 8008312:	bf00      	nop
 8008314:	080092ed 	.word	0x080092ed

08008318 <__sfmoreglue>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	2268      	movs	r2, #104	; 0x68
 800831c:	1e4d      	subs	r5, r1, #1
 800831e:	4355      	muls	r5, r2
 8008320:	460e      	mov	r6, r1
 8008322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008326:	f000 f95f 	bl	80085e8 <_malloc_r>
 800832a:	4604      	mov	r4, r0
 800832c:	b140      	cbz	r0, 8008340 <__sfmoreglue+0x28>
 800832e:	2100      	movs	r1, #0
 8008330:	e9c0 1600 	strd	r1, r6, [r0]
 8008334:	300c      	adds	r0, #12
 8008336:	60a0      	str	r0, [r4, #8]
 8008338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800833c:	f7ff fef6 	bl	800812c <memset>
 8008340:	4620      	mov	r0, r4
 8008342:	bd70      	pop	{r4, r5, r6, pc}

08008344 <__sfp_lock_acquire>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sfp_lock_acquire+0x8>)
 8008346:	f000 b8d8 	b.w	80084fa <__retarget_lock_acquire_recursive>
 800834a:	bf00      	nop
 800834c:	20000da1 	.word	0x20000da1

08008350 <__sfp_lock_release>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sfp_lock_release+0x8>)
 8008352:	f000 b8d3 	b.w	80084fc <__retarget_lock_release_recursive>
 8008356:	bf00      	nop
 8008358:	20000da1 	.word	0x20000da1

0800835c <__sinit_lock_acquire>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sinit_lock_acquire+0x8>)
 800835e:	f000 b8cc 	b.w	80084fa <__retarget_lock_acquire_recursive>
 8008362:	bf00      	nop
 8008364:	20000da2 	.word	0x20000da2

08008368 <__sinit_lock_release>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__sinit_lock_release+0x8>)
 800836a:	f000 b8c7 	b.w	80084fc <__retarget_lock_release_recursive>
 800836e:	bf00      	nop
 8008370:	20000da2 	.word	0x20000da2

08008374 <__sinit>:
 8008374:	b510      	push	{r4, lr}
 8008376:	4604      	mov	r4, r0
 8008378:	f7ff fff0 	bl	800835c <__sinit_lock_acquire>
 800837c:	69a3      	ldr	r3, [r4, #24]
 800837e:	b11b      	cbz	r3, 8008388 <__sinit+0x14>
 8008380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008384:	f7ff bff0 	b.w	8008368 <__sinit_lock_release>
 8008388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800838c:	6523      	str	r3, [r4, #80]	; 0x50
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <__sinit+0x68>)
 8008390:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <__sinit+0x6c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	62a2      	str	r2, [r4, #40]	; 0x28
 8008396:	42a3      	cmp	r3, r4
 8008398:	bf04      	itt	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	61a3      	streq	r3, [r4, #24]
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 f820 	bl	80083e4 <__sfp>
 80083a4:	6060      	str	r0, [r4, #4]
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 f81c 	bl	80083e4 <__sfp>
 80083ac:	60a0      	str	r0, [r4, #8]
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 f818 	bl	80083e4 <__sfp>
 80083b4:	2200      	movs	r2, #0
 80083b6:	60e0      	str	r0, [r4, #12]
 80083b8:	2104      	movs	r1, #4
 80083ba:	6860      	ldr	r0, [r4, #4]
 80083bc:	f7ff ff82 	bl	80082c4 <std>
 80083c0:	68a0      	ldr	r0, [r4, #8]
 80083c2:	2201      	movs	r2, #1
 80083c4:	2109      	movs	r1, #9
 80083c6:	f7ff ff7d 	bl	80082c4 <std>
 80083ca:	68e0      	ldr	r0, [r4, #12]
 80083cc:	2202      	movs	r2, #2
 80083ce:	2112      	movs	r1, #18
 80083d0:	f7ff ff78 	bl	80082c4 <std>
 80083d4:	2301      	movs	r3, #1
 80083d6:	61a3      	str	r3, [r4, #24]
 80083d8:	e7d2      	b.n	8008380 <__sinit+0xc>
 80083da:	bf00      	nop
 80083dc:	08009894 	.word	0x08009894
 80083e0:	0800830d 	.word	0x0800830d

080083e4 <__sfp>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	4607      	mov	r7, r0
 80083e8:	f7ff ffac 	bl	8008344 <__sfp_lock_acquire>
 80083ec:	4b1e      	ldr	r3, [pc, #120]	; (8008468 <__sfp+0x84>)
 80083ee:	681e      	ldr	r6, [r3, #0]
 80083f0:	69b3      	ldr	r3, [r6, #24]
 80083f2:	b913      	cbnz	r3, 80083fa <__sfp+0x16>
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff ffbd 	bl	8008374 <__sinit>
 80083fa:	3648      	adds	r6, #72	; 0x48
 80083fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008400:	3b01      	subs	r3, #1
 8008402:	d503      	bpl.n	800840c <__sfp+0x28>
 8008404:	6833      	ldr	r3, [r6, #0]
 8008406:	b30b      	cbz	r3, 800844c <__sfp+0x68>
 8008408:	6836      	ldr	r6, [r6, #0]
 800840a:	e7f7      	b.n	80083fc <__sfp+0x18>
 800840c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008410:	b9d5      	cbnz	r5, 8008448 <__sfp+0x64>
 8008412:	4b16      	ldr	r3, [pc, #88]	; (800846c <__sfp+0x88>)
 8008414:	60e3      	str	r3, [r4, #12]
 8008416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800841a:	6665      	str	r5, [r4, #100]	; 0x64
 800841c:	f000 f86c 	bl	80084f8 <__retarget_lock_init_recursive>
 8008420:	f7ff ff96 	bl	8008350 <__sfp_lock_release>
 8008424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800842c:	6025      	str	r5, [r4, #0]
 800842e:	61a5      	str	r5, [r4, #24]
 8008430:	2208      	movs	r2, #8
 8008432:	4629      	mov	r1, r5
 8008434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008438:	f7ff fe78 	bl	800812c <memset>
 800843c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008444:	4620      	mov	r0, r4
 8008446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008448:	3468      	adds	r4, #104	; 0x68
 800844a:	e7d9      	b.n	8008400 <__sfp+0x1c>
 800844c:	2104      	movs	r1, #4
 800844e:	4638      	mov	r0, r7
 8008450:	f7ff ff62 	bl	8008318 <__sfmoreglue>
 8008454:	4604      	mov	r4, r0
 8008456:	6030      	str	r0, [r6, #0]
 8008458:	2800      	cmp	r0, #0
 800845a:	d1d5      	bne.n	8008408 <__sfp+0x24>
 800845c:	f7ff ff78 	bl	8008350 <__sfp_lock_release>
 8008460:	230c      	movs	r3, #12
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	e7ee      	b.n	8008444 <__sfp+0x60>
 8008466:	bf00      	nop
 8008468:	08009894 	.word	0x08009894
 800846c:	ffff0001 	.word	0xffff0001

08008470 <fiprintf>:
 8008470:	b40e      	push	{r1, r2, r3}
 8008472:	b503      	push	{r0, r1, lr}
 8008474:	4601      	mov	r1, r0
 8008476:	ab03      	add	r3, sp, #12
 8008478:	4805      	ldr	r0, [pc, #20]	; (8008490 <fiprintf+0x20>)
 800847a:	f853 2b04 	ldr.w	r2, [r3], #4
 800847e:	6800      	ldr	r0, [r0, #0]
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	f000 faab 	bl	80089dc <_vfiprintf_r>
 8008486:	b002      	add	sp, #8
 8008488:	f85d eb04 	ldr.w	lr, [sp], #4
 800848c:	b003      	add	sp, #12
 800848e:	4770      	bx	lr
 8008490:	2000008c 	.word	0x2000008c

08008494 <_fwalk_reent>:
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	4606      	mov	r6, r0
 800849a:	4688      	mov	r8, r1
 800849c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084a0:	2700      	movs	r7, #0
 80084a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084a6:	f1b9 0901 	subs.w	r9, r9, #1
 80084aa:	d505      	bpl.n	80084b8 <_fwalk_reent+0x24>
 80084ac:	6824      	ldr	r4, [r4, #0]
 80084ae:	2c00      	cmp	r4, #0
 80084b0:	d1f7      	bne.n	80084a2 <_fwalk_reent+0xe>
 80084b2:	4638      	mov	r0, r7
 80084b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b8:	89ab      	ldrh	r3, [r5, #12]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d907      	bls.n	80084ce <_fwalk_reent+0x3a>
 80084be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084c2:	3301      	adds	r3, #1
 80084c4:	d003      	beq.n	80084ce <_fwalk_reent+0x3a>
 80084c6:	4629      	mov	r1, r5
 80084c8:	4630      	mov	r0, r6
 80084ca:	47c0      	blx	r8
 80084cc:	4307      	orrs	r7, r0
 80084ce:	3568      	adds	r5, #104	; 0x68
 80084d0:	e7e9      	b.n	80084a6 <_fwalk_reent+0x12>
	...

080084d4 <_gettimeofday_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d07      	ldr	r5, [pc, #28]	; (80084f4 <_gettimeofday_r+0x20>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	4611      	mov	r1, r2
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	f001 f89b 	bl	800961c <_gettimeofday>
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d102      	bne.n	80084f0 <_gettimeofday_r+0x1c>
 80084ea:	682b      	ldr	r3, [r5, #0]
 80084ec:	b103      	cbz	r3, 80084f0 <_gettimeofday_r+0x1c>
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	bd38      	pop	{r3, r4, r5, pc}
 80084f2:	bf00      	nop
 80084f4:	20000dac 	.word	0x20000dac

080084f8 <__retarget_lock_init_recursive>:
 80084f8:	4770      	bx	lr

080084fa <__retarget_lock_acquire_recursive>:
 80084fa:	4770      	bx	lr

080084fc <__retarget_lock_release_recursive>:
 80084fc:	4770      	bx	lr
	...

08008500 <malloc>:
 8008500:	4b02      	ldr	r3, [pc, #8]	; (800850c <malloc+0xc>)
 8008502:	4601      	mov	r1, r0
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f000 b86f 	b.w	80085e8 <_malloc_r>
 800850a:	bf00      	nop
 800850c:	2000008c 	.word	0x2000008c

08008510 <_free_r>:
 8008510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008512:	2900      	cmp	r1, #0
 8008514:	d044      	beq.n	80085a0 <_free_r+0x90>
 8008516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851a:	9001      	str	r0, [sp, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f1a1 0404 	sub.w	r4, r1, #4
 8008522:	bfb8      	it	lt
 8008524:	18e4      	addlt	r4, r4, r3
 8008526:	f000 ffbd 	bl	80094a4 <__malloc_lock>
 800852a:	4a1e      	ldr	r2, [pc, #120]	; (80085a4 <_free_r+0x94>)
 800852c:	9801      	ldr	r0, [sp, #4]
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	b933      	cbnz	r3, 8008540 <_free_r+0x30>
 8008532:	6063      	str	r3, [r4, #4]
 8008534:	6014      	str	r4, [r2, #0]
 8008536:	b003      	add	sp, #12
 8008538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800853c:	f000 bfb8 	b.w	80094b0 <__malloc_unlock>
 8008540:	42a3      	cmp	r3, r4
 8008542:	d908      	bls.n	8008556 <_free_r+0x46>
 8008544:	6825      	ldr	r5, [r4, #0]
 8008546:	1961      	adds	r1, r4, r5
 8008548:	428b      	cmp	r3, r1
 800854a:	bf01      	itttt	eq
 800854c:	6819      	ldreq	r1, [r3, #0]
 800854e:	685b      	ldreq	r3, [r3, #4]
 8008550:	1949      	addeq	r1, r1, r5
 8008552:	6021      	streq	r1, [r4, #0]
 8008554:	e7ed      	b.n	8008532 <_free_r+0x22>
 8008556:	461a      	mov	r2, r3
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	b10b      	cbz	r3, 8008560 <_free_r+0x50>
 800855c:	42a3      	cmp	r3, r4
 800855e:	d9fa      	bls.n	8008556 <_free_r+0x46>
 8008560:	6811      	ldr	r1, [r2, #0]
 8008562:	1855      	adds	r5, r2, r1
 8008564:	42a5      	cmp	r5, r4
 8008566:	d10b      	bne.n	8008580 <_free_r+0x70>
 8008568:	6824      	ldr	r4, [r4, #0]
 800856a:	4421      	add	r1, r4
 800856c:	1854      	adds	r4, r2, r1
 800856e:	42a3      	cmp	r3, r4
 8008570:	6011      	str	r1, [r2, #0]
 8008572:	d1e0      	bne.n	8008536 <_free_r+0x26>
 8008574:	681c      	ldr	r4, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	6053      	str	r3, [r2, #4]
 800857a:	4421      	add	r1, r4
 800857c:	6011      	str	r1, [r2, #0]
 800857e:	e7da      	b.n	8008536 <_free_r+0x26>
 8008580:	d902      	bls.n	8008588 <_free_r+0x78>
 8008582:	230c      	movs	r3, #12
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	e7d6      	b.n	8008536 <_free_r+0x26>
 8008588:	6825      	ldr	r5, [r4, #0]
 800858a:	1961      	adds	r1, r4, r5
 800858c:	428b      	cmp	r3, r1
 800858e:	bf04      	itt	eq
 8008590:	6819      	ldreq	r1, [r3, #0]
 8008592:	685b      	ldreq	r3, [r3, #4]
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	bf04      	itt	eq
 8008598:	1949      	addeq	r1, r1, r5
 800859a:	6021      	streq	r1, [r4, #0]
 800859c:	6054      	str	r4, [r2, #4]
 800859e:	e7ca      	b.n	8008536 <_free_r+0x26>
 80085a0:	b003      	add	sp, #12
 80085a2:	bd30      	pop	{r4, r5, pc}
 80085a4:	20000da4 	.word	0x20000da4

080085a8 <sbrk_aligned>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	4e0e      	ldr	r6, [pc, #56]	; (80085e4 <sbrk_aligned+0x3c>)
 80085ac:	460c      	mov	r4, r1
 80085ae:	6831      	ldr	r1, [r6, #0]
 80085b0:	4605      	mov	r5, r0
 80085b2:	b911      	cbnz	r1, 80085ba <sbrk_aligned+0x12>
 80085b4:	f000 fcd6 	bl	8008f64 <_sbrk_r>
 80085b8:	6030      	str	r0, [r6, #0]
 80085ba:	4621      	mov	r1, r4
 80085bc:	4628      	mov	r0, r5
 80085be:	f000 fcd1 	bl	8008f64 <_sbrk_r>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	d00a      	beq.n	80085dc <sbrk_aligned+0x34>
 80085c6:	1cc4      	adds	r4, r0, #3
 80085c8:	f024 0403 	bic.w	r4, r4, #3
 80085cc:	42a0      	cmp	r0, r4
 80085ce:	d007      	beq.n	80085e0 <sbrk_aligned+0x38>
 80085d0:	1a21      	subs	r1, r4, r0
 80085d2:	4628      	mov	r0, r5
 80085d4:	f000 fcc6 	bl	8008f64 <_sbrk_r>
 80085d8:	3001      	adds	r0, #1
 80085da:	d101      	bne.n	80085e0 <sbrk_aligned+0x38>
 80085dc:	f04f 34ff 	mov.w	r4, #4294967295
 80085e0:	4620      	mov	r0, r4
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	20000da8 	.word	0x20000da8

080085e8 <_malloc_r>:
 80085e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ec:	1ccd      	adds	r5, r1, #3
 80085ee:	f025 0503 	bic.w	r5, r5, #3
 80085f2:	3508      	adds	r5, #8
 80085f4:	2d0c      	cmp	r5, #12
 80085f6:	bf38      	it	cc
 80085f8:	250c      	movcc	r5, #12
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	4607      	mov	r7, r0
 80085fe:	db01      	blt.n	8008604 <_malloc_r+0x1c>
 8008600:	42a9      	cmp	r1, r5
 8008602:	d905      	bls.n	8008610 <_malloc_r+0x28>
 8008604:	230c      	movs	r3, #12
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	2600      	movs	r6, #0
 800860a:	4630      	mov	r0, r6
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	4e2e      	ldr	r6, [pc, #184]	; (80086cc <_malloc_r+0xe4>)
 8008612:	f000 ff47 	bl	80094a4 <__malloc_lock>
 8008616:	6833      	ldr	r3, [r6, #0]
 8008618:	461c      	mov	r4, r3
 800861a:	bb34      	cbnz	r4, 800866a <_malloc_r+0x82>
 800861c:	4629      	mov	r1, r5
 800861e:	4638      	mov	r0, r7
 8008620:	f7ff ffc2 	bl	80085a8 <sbrk_aligned>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	4604      	mov	r4, r0
 8008628:	d14d      	bne.n	80086c6 <_malloc_r+0xde>
 800862a:	6834      	ldr	r4, [r6, #0]
 800862c:	4626      	mov	r6, r4
 800862e:	2e00      	cmp	r6, #0
 8008630:	d140      	bne.n	80086b4 <_malloc_r+0xcc>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	4631      	mov	r1, r6
 8008636:	4638      	mov	r0, r7
 8008638:	eb04 0803 	add.w	r8, r4, r3
 800863c:	f000 fc92 	bl	8008f64 <_sbrk_r>
 8008640:	4580      	cmp	r8, r0
 8008642:	d13a      	bne.n	80086ba <_malloc_r+0xd2>
 8008644:	6821      	ldr	r1, [r4, #0]
 8008646:	3503      	adds	r5, #3
 8008648:	1a6d      	subs	r5, r5, r1
 800864a:	f025 0503 	bic.w	r5, r5, #3
 800864e:	3508      	adds	r5, #8
 8008650:	2d0c      	cmp	r5, #12
 8008652:	bf38      	it	cc
 8008654:	250c      	movcc	r5, #12
 8008656:	4629      	mov	r1, r5
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff ffa5 	bl	80085a8 <sbrk_aligned>
 800865e:	3001      	adds	r0, #1
 8008660:	d02b      	beq.n	80086ba <_malloc_r+0xd2>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	442b      	add	r3, r5
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	e00e      	b.n	8008688 <_malloc_r+0xa0>
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	1b52      	subs	r2, r2, r5
 800866e:	d41e      	bmi.n	80086ae <_malloc_r+0xc6>
 8008670:	2a0b      	cmp	r2, #11
 8008672:	d916      	bls.n	80086a2 <_malloc_r+0xba>
 8008674:	1961      	adds	r1, r4, r5
 8008676:	42a3      	cmp	r3, r4
 8008678:	6025      	str	r5, [r4, #0]
 800867a:	bf18      	it	ne
 800867c:	6059      	strne	r1, [r3, #4]
 800867e:	6863      	ldr	r3, [r4, #4]
 8008680:	bf08      	it	eq
 8008682:	6031      	streq	r1, [r6, #0]
 8008684:	5162      	str	r2, [r4, r5]
 8008686:	604b      	str	r3, [r1, #4]
 8008688:	4638      	mov	r0, r7
 800868a:	f104 060b 	add.w	r6, r4, #11
 800868e:	f000 ff0f 	bl	80094b0 <__malloc_unlock>
 8008692:	f026 0607 	bic.w	r6, r6, #7
 8008696:	1d23      	adds	r3, r4, #4
 8008698:	1af2      	subs	r2, r6, r3
 800869a:	d0b6      	beq.n	800860a <_malloc_r+0x22>
 800869c:	1b9b      	subs	r3, r3, r6
 800869e:	50a3      	str	r3, [r4, r2]
 80086a0:	e7b3      	b.n	800860a <_malloc_r+0x22>
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	bf0c      	ite	eq
 80086a8:	6032      	streq	r2, [r6, #0]
 80086aa:	605a      	strne	r2, [r3, #4]
 80086ac:	e7ec      	b.n	8008688 <_malloc_r+0xa0>
 80086ae:	4623      	mov	r3, r4
 80086b0:	6864      	ldr	r4, [r4, #4]
 80086b2:	e7b2      	b.n	800861a <_malloc_r+0x32>
 80086b4:	4634      	mov	r4, r6
 80086b6:	6876      	ldr	r6, [r6, #4]
 80086b8:	e7b9      	b.n	800862e <_malloc_r+0x46>
 80086ba:	230c      	movs	r3, #12
 80086bc:	603b      	str	r3, [r7, #0]
 80086be:	4638      	mov	r0, r7
 80086c0:	f000 fef6 	bl	80094b0 <__malloc_unlock>
 80086c4:	e7a1      	b.n	800860a <_malloc_r+0x22>
 80086c6:	6025      	str	r5, [r4, #0]
 80086c8:	e7de      	b.n	8008688 <_malloc_r+0xa0>
 80086ca:	bf00      	nop
 80086cc:	20000da4 	.word	0x20000da4

080086d0 <__ssputs_r>:
 80086d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	688e      	ldr	r6, [r1, #8]
 80086d6:	429e      	cmp	r6, r3
 80086d8:	4682      	mov	sl, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	4690      	mov	r8, r2
 80086de:	461f      	mov	r7, r3
 80086e0:	d838      	bhi.n	8008754 <__ssputs_r+0x84>
 80086e2:	898a      	ldrh	r2, [r1, #12]
 80086e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086e8:	d032      	beq.n	8008750 <__ssputs_r+0x80>
 80086ea:	6825      	ldr	r5, [r4, #0]
 80086ec:	6909      	ldr	r1, [r1, #16]
 80086ee:	eba5 0901 	sub.w	r9, r5, r1
 80086f2:	6965      	ldr	r5, [r4, #20]
 80086f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086fc:	3301      	adds	r3, #1
 80086fe:	444b      	add	r3, r9
 8008700:	106d      	asrs	r5, r5, #1
 8008702:	429d      	cmp	r5, r3
 8008704:	bf38      	it	cc
 8008706:	461d      	movcc	r5, r3
 8008708:	0553      	lsls	r3, r2, #21
 800870a:	d531      	bpl.n	8008770 <__ssputs_r+0xa0>
 800870c:	4629      	mov	r1, r5
 800870e:	f7ff ff6b 	bl	80085e8 <_malloc_r>
 8008712:	4606      	mov	r6, r0
 8008714:	b950      	cbnz	r0, 800872c <__ssputs_r+0x5c>
 8008716:	230c      	movs	r3, #12
 8008718:	f8ca 3000 	str.w	r3, [sl]
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	f04f 30ff 	mov.w	r0, #4294967295
 8008728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872c:	6921      	ldr	r1, [r4, #16]
 800872e:	464a      	mov	r2, r9
 8008730:	f000 fe90 	bl	8009454 <memcpy>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800873a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	6126      	str	r6, [r4, #16]
 8008742:	6165      	str	r5, [r4, #20]
 8008744:	444e      	add	r6, r9
 8008746:	eba5 0509 	sub.w	r5, r5, r9
 800874a:	6026      	str	r6, [r4, #0]
 800874c:	60a5      	str	r5, [r4, #8]
 800874e:	463e      	mov	r6, r7
 8008750:	42be      	cmp	r6, r7
 8008752:	d900      	bls.n	8008756 <__ssputs_r+0x86>
 8008754:	463e      	mov	r6, r7
 8008756:	6820      	ldr	r0, [r4, #0]
 8008758:	4632      	mov	r2, r6
 800875a:	4641      	mov	r1, r8
 800875c:	f000 fe88 	bl	8009470 <memmove>
 8008760:	68a3      	ldr	r3, [r4, #8]
 8008762:	1b9b      	subs	r3, r3, r6
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	4433      	add	r3, r6
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	2000      	movs	r0, #0
 800876e:	e7db      	b.n	8008728 <__ssputs_r+0x58>
 8008770:	462a      	mov	r2, r5
 8008772:	f000 fea3 	bl	80094bc <_realloc_r>
 8008776:	4606      	mov	r6, r0
 8008778:	2800      	cmp	r0, #0
 800877a:	d1e1      	bne.n	8008740 <__ssputs_r+0x70>
 800877c:	6921      	ldr	r1, [r4, #16]
 800877e:	4650      	mov	r0, sl
 8008780:	f7ff fec6 	bl	8008510 <_free_r>
 8008784:	e7c7      	b.n	8008716 <__ssputs_r+0x46>
	...

08008788 <_svfiprintf_r>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	4698      	mov	r8, r3
 800878e:	898b      	ldrh	r3, [r1, #12]
 8008790:	061b      	lsls	r3, r3, #24
 8008792:	b09d      	sub	sp, #116	; 0x74
 8008794:	4607      	mov	r7, r0
 8008796:	460d      	mov	r5, r1
 8008798:	4614      	mov	r4, r2
 800879a:	d50e      	bpl.n	80087ba <_svfiprintf_r+0x32>
 800879c:	690b      	ldr	r3, [r1, #16]
 800879e:	b963      	cbnz	r3, 80087ba <_svfiprintf_r+0x32>
 80087a0:	2140      	movs	r1, #64	; 0x40
 80087a2:	f7ff ff21 	bl	80085e8 <_malloc_r>
 80087a6:	6028      	str	r0, [r5, #0]
 80087a8:	6128      	str	r0, [r5, #16]
 80087aa:	b920      	cbnz	r0, 80087b6 <_svfiprintf_r+0x2e>
 80087ac:	230c      	movs	r3, #12
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	e0d1      	b.n	800895a <_svfiprintf_r+0x1d2>
 80087b6:	2340      	movs	r3, #64	; 0x40
 80087b8:	616b      	str	r3, [r5, #20]
 80087ba:	2300      	movs	r3, #0
 80087bc:	9309      	str	r3, [sp, #36]	; 0x24
 80087be:	2320      	movs	r3, #32
 80087c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c8:	2330      	movs	r3, #48	; 0x30
 80087ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008974 <_svfiprintf_r+0x1ec>
 80087ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087d2:	f04f 0901 	mov.w	r9, #1
 80087d6:	4623      	mov	r3, r4
 80087d8:	469a      	mov	sl, r3
 80087da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087de:	b10a      	cbz	r2, 80087e4 <_svfiprintf_r+0x5c>
 80087e0:	2a25      	cmp	r2, #37	; 0x25
 80087e2:	d1f9      	bne.n	80087d8 <_svfiprintf_r+0x50>
 80087e4:	ebba 0b04 	subs.w	fp, sl, r4
 80087e8:	d00b      	beq.n	8008802 <_svfiprintf_r+0x7a>
 80087ea:	465b      	mov	r3, fp
 80087ec:	4622      	mov	r2, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff ff6d 	bl	80086d0 <__ssputs_r>
 80087f6:	3001      	adds	r0, #1
 80087f8:	f000 80aa 	beq.w	8008950 <_svfiprintf_r+0x1c8>
 80087fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087fe:	445a      	add	r2, fp
 8008800:	9209      	str	r2, [sp, #36]	; 0x24
 8008802:	f89a 3000 	ldrb.w	r3, [sl]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80a2 	beq.w	8008950 <_svfiprintf_r+0x1c8>
 800880c:	2300      	movs	r3, #0
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008816:	f10a 0a01 	add.w	sl, sl, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	9307      	str	r3, [sp, #28]
 800881e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008822:	931a      	str	r3, [sp, #104]	; 0x68
 8008824:	4654      	mov	r4, sl
 8008826:	2205      	movs	r2, #5
 8008828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882c:	4851      	ldr	r0, [pc, #324]	; (8008974 <_svfiprintf_r+0x1ec>)
 800882e:	f7f7 fcd7 	bl	80001e0 <memchr>
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	b9d8      	cbnz	r0, 800886e <_svfiprintf_r+0xe6>
 8008836:	06d0      	lsls	r0, r2, #27
 8008838:	bf44      	itt	mi
 800883a:	2320      	movmi	r3, #32
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008840:	0711      	lsls	r1, r2, #28
 8008842:	bf44      	itt	mi
 8008844:	232b      	movmi	r3, #43	; 0x2b
 8008846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800884a:	f89a 3000 	ldrb.w	r3, [sl]
 800884e:	2b2a      	cmp	r3, #42	; 0x2a
 8008850:	d015      	beq.n	800887e <_svfiprintf_r+0xf6>
 8008852:	9a07      	ldr	r2, [sp, #28]
 8008854:	4654      	mov	r4, sl
 8008856:	2000      	movs	r0, #0
 8008858:	f04f 0c0a 	mov.w	ip, #10
 800885c:	4621      	mov	r1, r4
 800885e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008862:	3b30      	subs	r3, #48	; 0x30
 8008864:	2b09      	cmp	r3, #9
 8008866:	d94e      	bls.n	8008906 <_svfiprintf_r+0x17e>
 8008868:	b1b0      	cbz	r0, 8008898 <_svfiprintf_r+0x110>
 800886a:	9207      	str	r2, [sp, #28]
 800886c:	e014      	b.n	8008898 <_svfiprintf_r+0x110>
 800886e:	eba0 0308 	sub.w	r3, r0, r8
 8008872:	fa09 f303 	lsl.w	r3, r9, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	46a2      	mov	sl, r4
 800887c:	e7d2      	b.n	8008824 <_svfiprintf_r+0x9c>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	1d19      	adds	r1, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9103      	str	r1, [sp, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfbb      	ittet	lt
 800888a:	425b      	neglt	r3, r3
 800888c:	f042 0202 	orrlt.w	r2, r2, #2
 8008890:	9307      	strge	r3, [sp, #28]
 8008892:	9307      	strlt	r3, [sp, #28]
 8008894:	bfb8      	it	lt
 8008896:	9204      	strlt	r2, [sp, #16]
 8008898:	7823      	ldrb	r3, [r4, #0]
 800889a:	2b2e      	cmp	r3, #46	; 0x2e
 800889c:	d10c      	bne.n	80088b8 <_svfiprintf_r+0x130>
 800889e:	7863      	ldrb	r3, [r4, #1]
 80088a0:	2b2a      	cmp	r3, #42	; 0x2a
 80088a2:	d135      	bne.n	8008910 <_svfiprintf_r+0x188>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	1d1a      	adds	r2, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9203      	str	r2, [sp, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bfb8      	it	lt
 80088b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80088b4:	3402      	adds	r4, #2
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008984 <_svfiprintf_r+0x1fc>
 80088bc:	7821      	ldrb	r1, [r4, #0]
 80088be:	2203      	movs	r2, #3
 80088c0:	4650      	mov	r0, sl
 80088c2:	f7f7 fc8d 	bl	80001e0 <memchr>
 80088c6:	b140      	cbz	r0, 80088da <_svfiprintf_r+0x152>
 80088c8:	2340      	movs	r3, #64	; 0x40
 80088ca:	eba0 000a 	sub.w	r0, r0, sl
 80088ce:	fa03 f000 	lsl.w	r0, r3, r0
 80088d2:	9b04      	ldr	r3, [sp, #16]
 80088d4:	4303      	orrs	r3, r0
 80088d6:	3401      	adds	r4, #1
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088de:	4826      	ldr	r0, [pc, #152]	; (8008978 <_svfiprintf_r+0x1f0>)
 80088e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088e4:	2206      	movs	r2, #6
 80088e6:	f7f7 fc7b 	bl	80001e0 <memchr>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d038      	beq.n	8008960 <_svfiprintf_r+0x1d8>
 80088ee:	4b23      	ldr	r3, [pc, #140]	; (800897c <_svfiprintf_r+0x1f4>)
 80088f0:	bb1b      	cbnz	r3, 800893a <_svfiprintf_r+0x1b2>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	3307      	adds	r3, #7
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	3308      	adds	r3, #8
 80088fc:	9303      	str	r3, [sp, #12]
 80088fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008900:	4433      	add	r3, r6
 8008902:	9309      	str	r3, [sp, #36]	; 0x24
 8008904:	e767      	b.n	80087d6 <_svfiprintf_r+0x4e>
 8008906:	fb0c 3202 	mla	r2, ip, r2, r3
 800890a:	460c      	mov	r4, r1
 800890c:	2001      	movs	r0, #1
 800890e:	e7a5      	b.n	800885c <_svfiprintf_r+0xd4>
 8008910:	2300      	movs	r3, #0
 8008912:	3401      	adds	r4, #1
 8008914:	9305      	str	r3, [sp, #20]
 8008916:	4619      	mov	r1, r3
 8008918:	f04f 0c0a 	mov.w	ip, #10
 800891c:	4620      	mov	r0, r4
 800891e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008922:	3a30      	subs	r2, #48	; 0x30
 8008924:	2a09      	cmp	r2, #9
 8008926:	d903      	bls.n	8008930 <_svfiprintf_r+0x1a8>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0c5      	beq.n	80088b8 <_svfiprintf_r+0x130>
 800892c:	9105      	str	r1, [sp, #20]
 800892e:	e7c3      	b.n	80088b8 <_svfiprintf_r+0x130>
 8008930:	fb0c 2101 	mla	r1, ip, r1, r2
 8008934:	4604      	mov	r4, r0
 8008936:	2301      	movs	r3, #1
 8008938:	e7f0      	b.n	800891c <_svfiprintf_r+0x194>
 800893a:	ab03      	add	r3, sp, #12
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	462a      	mov	r2, r5
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <_svfiprintf_r+0x1f8>)
 8008942:	a904      	add	r1, sp, #16
 8008944:	4638      	mov	r0, r7
 8008946:	f3af 8000 	nop.w
 800894a:	1c42      	adds	r2, r0, #1
 800894c:	4606      	mov	r6, r0
 800894e:	d1d6      	bne.n	80088fe <_svfiprintf_r+0x176>
 8008950:	89ab      	ldrh	r3, [r5, #12]
 8008952:	065b      	lsls	r3, r3, #25
 8008954:	f53f af2c 	bmi.w	80087b0 <_svfiprintf_r+0x28>
 8008958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800895a:	b01d      	add	sp, #116	; 0x74
 800895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008960:	ab03      	add	r3, sp, #12
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	462a      	mov	r2, r5
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <_svfiprintf_r+0x1f8>)
 8008968:	a904      	add	r1, sp, #16
 800896a:	4638      	mov	r0, r7
 800896c:	f000 f9d4 	bl	8008d18 <_printf_i>
 8008970:	e7eb      	b.n	800894a <_svfiprintf_r+0x1c2>
 8008972:	bf00      	nop
 8008974:	080099a8 	.word	0x080099a8
 8008978:	080099b2 	.word	0x080099b2
 800897c:	00000000 	.word	0x00000000
 8008980:	080086d1 	.word	0x080086d1
 8008984:	080099ae 	.word	0x080099ae

08008988 <__sfputc_r>:
 8008988:	6893      	ldr	r3, [r2, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	b410      	push	{r4}
 8008990:	6093      	str	r3, [r2, #8]
 8008992:	da08      	bge.n	80089a6 <__sfputc_r+0x1e>
 8008994:	6994      	ldr	r4, [r2, #24]
 8008996:	42a3      	cmp	r3, r4
 8008998:	db01      	blt.n	800899e <__sfputc_r+0x16>
 800899a:	290a      	cmp	r1, #10
 800899c:	d103      	bne.n	80089a6 <__sfputc_r+0x1e>
 800899e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a2:	f000 bb33 	b.w	800900c <__swbuf_r>
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	1c58      	adds	r0, r3, #1
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	7019      	strb	r1, [r3, #0]
 80089ae:	4608      	mov	r0, r1
 80089b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <__sfputs_r>:
 80089b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b8:	4606      	mov	r6, r0
 80089ba:	460f      	mov	r7, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	18d5      	adds	r5, r2, r3
 80089c0:	42ac      	cmp	r4, r5
 80089c2:	d101      	bne.n	80089c8 <__sfputs_r+0x12>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e007      	b.n	80089d8 <__sfputs_r+0x22>
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	463a      	mov	r2, r7
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ffda 	bl	8008988 <__sfputc_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d1f3      	bne.n	80089c0 <__sfputs_r+0xa>
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089dc <_vfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460d      	mov	r5, r1
 80089e2:	b09d      	sub	sp, #116	; 0x74
 80089e4:	4614      	mov	r4, r2
 80089e6:	4698      	mov	r8, r3
 80089e8:	4606      	mov	r6, r0
 80089ea:	b118      	cbz	r0, 80089f4 <_vfiprintf_r+0x18>
 80089ec:	6983      	ldr	r3, [r0, #24]
 80089ee:	b90b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x18>
 80089f0:	f7ff fcc0 	bl	8008374 <__sinit>
 80089f4:	4b89      	ldr	r3, [pc, #548]	; (8008c1c <_vfiprintf_r+0x240>)
 80089f6:	429d      	cmp	r5, r3
 80089f8:	d11b      	bne.n	8008a32 <_vfiprintf_r+0x56>
 80089fa:	6875      	ldr	r5, [r6, #4]
 80089fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089fe:	07d9      	lsls	r1, r3, #31
 8008a00:	d405      	bmi.n	8008a0e <_vfiprintf_r+0x32>
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	059a      	lsls	r2, r3, #22
 8008a06:	d402      	bmi.n	8008a0e <_vfiprintf_r+0x32>
 8008a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a0a:	f7ff fd76 	bl	80084fa <__retarget_lock_acquire_recursive>
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	071b      	lsls	r3, r3, #28
 8008a12:	d501      	bpl.n	8008a18 <_vfiprintf_r+0x3c>
 8008a14:	692b      	ldr	r3, [r5, #16]
 8008a16:	b9eb      	cbnz	r3, 8008a54 <_vfiprintf_r+0x78>
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 fb5a 	bl	80090d4 <__swsetup_r>
 8008a20:	b1c0      	cbz	r0, 8008a54 <_vfiprintf_r+0x78>
 8008a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a24:	07dc      	lsls	r4, r3, #31
 8008a26:	d50e      	bpl.n	8008a46 <_vfiprintf_r+0x6a>
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	b01d      	add	sp, #116	; 0x74
 8008a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a32:	4b7b      	ldr	r3, [pc, #492]	; (8008c20 <_vfiprintf_r+0x244>)
 8008a34:	429d      	cmp	r5, r3
 8008a36:	d101      	bne.n	8008a3c <_vfiprintf_r+0x60>
 8008a38:	68b5      	ldr	r5, [r6, #8]
 8008a3a:	e7df      	b.n	80089fc <_vfiprintf_r+0x20>
 8008a3c:	4b79      	ldr	r3, [pc, #484]	; (8008c24 <_vfiprintf_r+0x248>)
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	bf08      	it	eq
 8008a42:	68f5      	ldreq	r5, [r6, #12]
 8008a44:	e7da      	b.n	80089fc <_vfiprintf_r+0x20>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	0598      	lsls	r0, r3, #22
 8008a4a:	d4ed      	bmi.n	8008a28 <_vfiprintf_r+0x4c>
 8008a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4e:	f7ff fd55 	bl	80084fc <__retarget_lock_release_recursive>
 8008a52:	e7e9      	b.n	8008a28 <_vfiprintf_r+0x4c>
 8008a54:	2300      	movs	r3, #0
 8008a56:	9309      	str	r3, [sp, #36]	; 0x24
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a62:	2330      	movs	r3, #48	; 0x30
 8008a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c28 <_vfiprintf_r+0x24c>
 8008a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a6c:	f04f 0901 	mov.w	r9, #1
 8008a70:	4623      	mov	r3, r4
 8008a72:	469a      	mov	sl, r3
 8008a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a78:	b10a      	cbz	r2, 8008a7e <_vfiprintf_r+0xa2>
 8008a7a:	2a25      	cmp	r2, #37	; 0x25
 8008a7c:	d1f9      	bne.n	8008a72 <_vfiprintf_r+0x96>
 8008a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a82:	d00b      	beq.n	8008a9c <_vfiprintf_r+0xc0>
 8008a84:	465b      	mov	r3, fp
 8008a86:	4622      	mov	r2, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ff93 	bl	80089b6 <__sfputs_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	f000 80aa 	beq.w	8008bea <_vfiprintf_r+0x20e>
 8008a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a98:	445a      	add	r2, fp
 8008a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 80a2 	beq.w	8008bea <_vfiprintf_r+0x20e>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab0:	f10a 0a01 	add.w	sl, sl, #1
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	9307      	str	r3, [sp, #28]
 8008ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008abc:	931a      	str	r3, [sp, #104]	; 0x68
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2205      	movs	r2, #5
 8008ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac6:	4858      	ldr	r0, [pc, #352]	; (8008c28 <_vfiprintf_r+0x24c>)
 8008ac8:	f7f7 fb8a 	bl	80001e0 <memchr>
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	b9d8      	cbnz	r0, 8008b08 <_vfiprintf_r+0x12c>
 8008ad0:	06d1      	lsls	r1, r2, #27
 8008ad2:	bf44      	itt	mi
 8008ad4:	2320      	movmi	r3, #32
 8008ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ada:	0713      	lsls	r3, r2, #28
 8008adc:	bf44      	itt	mi
 8008ade:	232b      	movmi	r3, #43	; 0x2b
 8008ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aea:	d015      	beq.n	8008b18 <_vfiprintf_r+0x13c>
 8008aec:	9a07      	ldr	r2, [sp, #28]
 8008aee:	4654      	mov	r4, sl
 8008af0:	2000      	movs	r0, #0
 8008af2:	f04f 0c0a 	mov.w	ip, #10
 8008af6:	4621      	mov	r1, r4
 8008af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afc:	3b30      	subs	r3, #48	; 0x30
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	d94e      	bls.n	8008ba0 <_vfiprintf_r+0x1c4>
 8008b02:	b1b0      	cbz	r0, 8008b32 <_vfiprintf_r+0x156>
 8008b04:	9207      	str	r2, [sp, #28]
 8008b06:	e014      	b.n	8008b32 <_vfiprintf_r+0x156>
 8008b08:	eba0 0308 	sub.w	r3, r0, r8
 8008b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	46a2      	mov	sl, r4
 8008b16:	e7d2      	b.n	8008abe <_vfiprintf_r+0xe2>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	1d19      	adds	r1, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	9103      	str	r1, [sp, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bfbb      	ittet	lt
 8008b24:	425b      	neglt	r3, r3
 8008b26:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2a:	9307      	strge	r3, [sp, #28]
 8008b2c:	9307      	strlt	r3, [sp, #28]
 8008b2e:	bfb8      	it	lt
 8008b30:	9204      	strlt	r2, [sp, #16]
 8008b32:	7823      	ldrb	r3, [r4, #0]
 8008b34:	2b2e      	cmp	r3, #46	; 0x2e
 8008b36:	d10c      	bne.n	8008b52 <_vfiprintf_r+0x176>
 8008b38:	7863      	ldrb	r3, [r4, #1]
 8008b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b3c:	d135      	bne.n	8008baa <_vfiprintf_r+0x1ce>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d1a      	adds	r2, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9203      	str	r2, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfb8      	it	lt
 8008b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b4e:	3402      	adds	r4, #2
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c38 <_vfiprintf_r+0x25c>
 8008b56:	7821      	ldrb	r1, [r4, #0]
 8008b58:	2203      	movs	r2, #3
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	f7f7 fb40 	bl	80001e0 <memchr>
 8008b60:	b140      	cbz	r0, 8008b74 <_vfiprintf_r+0x198>
 8008b62:	2340      	movs	r3, #64	; 0x40
 8008b64:	eba0 000a 	sub.w	r0, r0, sl
 8008b68:	fa03 f000 	lsl.w	r0, r3, r0
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	4303      	orrs	r3, r0
 8008b70:	3401      	adds	r4, #1
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b78:	482c      	ldr	r0, [pc, #176]	; (8008c2c <_vfiprintf_r+0x250>)
 8008b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b7e:	2206      	movs	r2, #6
 8008b80:	f7f7 fb2e 	bl	80001e0 <memchr>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d03f      	beq.n	8008c08 <_vfiprintf_r+0x22c>
 8008b88:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <_vfiprintf_r+0x254>)
 8008b8a:	bb1b      	cbnz	r3, 8008bd4 <_vfiprintf_r+0x1f8>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	3307      	adds	r3, #7
 8008b90:	f023 0307 	bic.w	r3, r3, #7
 8008b94:	3308      	adds	r3, #8
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9a:	443b      	add	r3, r7
 8008b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b9e:	e767      	b.n	8008a70 <_vfiprintf_r+0x94>
 8008ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7a5      	b.n	8008af6 <_vfiprintf_r+0x11a>
 8008baa:	2300      	movs	r3, #0
 8008bac:	3401      	adds	r4, #1
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f04f 0c0a 	mov.w	ip, #10
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bbc:	3a30      	subs	r2, #48	; 0x30
 8008bbe:	2a09      	cmp	r2, #9
 8008bc0:	d903      	bls.n	8008bca <_vfiprintf_r+0x1ee>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0c5      	beq.n	8008b52 <_vfiprintf_r+0x176>
 8008bc6:	9105      	str	r1, [sp, #20]
 8008bc8:	e7c3      	b.n	8008b52 <_vfiprintf_r+0x176>
 8008bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bce:	4604      	mov	r4, r0
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e7f0      	b.n	8008bb6 <_vfiprintf_r+0x1da>
 8008bd4:	ab03      	add	r3, sp, #12
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	462a      	mov	r2, r5
 8008bda:	4b16      	ldr	r3, [pc, #88]	; (8008c34 <_vfiprintf_r+0x258>)
 8008bdc:	a904      	add	r1, sp, #16
 8008bde:	4630      	mov	r0, r6
 8008be0:	f3af 8000 	nop.w
 8008be4:	4607      	mov	r7, r0
 8008be6:	1c78      	adds	r0, r7, #1
 8008be8:	d1d6      	bne.n	8008b98 <_vfiprintf_r+0x1bc>
 8008bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bec:	07d9      	lsls	r1, r3, #31
 8008bee:	d405      	bmi.n	8008bfc <_vfiprintf_r+0x220>
 8008bf0:	89ab      	ldrh	r3, [r5, #12]
 8008bf2:	059a      	lsls	r2, r3, #22
 8008bf4:	d402      	bmi.n	8008bfc <_vfiprintf_r+0x220>
 8008bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf8:	f7ff fc80 	bl	80084fc <__retarget_lock_release_recursive>
 8008bfc:	89ab      	ldrh	r3, [r5, #12]
 8008bfe:	065b      	lsls	r3, r3, #25
 8008c00:	f53f af12 	bmi.w	8008a28 <_vfiprintf_r+0x4c>
 8008c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c06:	e711      	b.n	8008a2c <_vfiprintf_r+0x50>
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <_vfiprintf_r+0x258>)
 8008c10:	a904      	add	r1, sp, #16
 8008c12:	4630      	mov	r0, r6
 8008c14:	f000 f880 	bl	8008d18 <_printf_i>
 8008c18:	e7e4      	b.n	8008be4 <_vfiprintf_r+0x208>
 8008c1a:	bf00      	nop
 8008c1c:	08009968 	.word	0x08009968
 8008c20:	08009988 	.word	0x08009988
 8008c24:	08009948 	.word	0x08009948
 8008c28:	080099a8 	.word	0x080099a8
 8008c2c:	080099b2 	.word	0x080099b2
 8008c30:	00000000 	.word	0x00000000
 8008c34:	080089b7 	.word	0x080089b7
 8008c38:	080099ae 	.word	0x080099ae

08008c3c <_printf_common>:
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	4616      	mov	r6, r2
 8008c42:	4699      	mov	r9, r3
 8008c44:	688a      	ldr	r2, [r1, #8]
 8008c46:	690b      	ldr	r3, [r1, #16]
 8008c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	bfb8      	it	lt
 8008c50:	4613      	movlt	r3, r2
 8008c52:	6033      	str	r3, [r6, #0]
 8008c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c58:	4607      	mov	r7, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b10a      	cbz	r2, 8008c62 <_printf_common+0x26>
 8008c5e:	3301      	adds	r3, #1
 8008c60:	6033      	str	r3, [r6, #0]
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	0699      	lsls	r1, r3, #26
 8008c66:	bf42      	ittt	mi
 8008c68:	6833      	ldrmi	r3, [r6, #0]
 8008c6a:	3302      	addmi	r3, #2
 8008c6c:	6033      	strmi	r3, [r6, #0]
 8008c6e:	6825      	ldr	r5, [r4, #0]
 8008c70:	f015 0506 	ands.w	r5, r5, #6
 8008c74:	d106      	bne.n	8008c84 <_printf_common+0x48>
 8008c76:	f104 0a19 	add.w	sl, r4, #25
 8008c7a:	68e3      	ldr	r3, [r4, #12]
 8008c7c:	6832      	ldr	r2, [r6, #0]
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	dc26      	bgt.n	8008cd2 <_printf_common+0x96>
 8008c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c88:	1e13      	subs	r3, r2, #0
 8008c8a:	6822      	ldr	r2, [r4, #0]
 8008c8c:	bf18      	it	ne
 8008c8e:	2301      	movne	r3, #1
 8008c90:	0692      	lsls	r2, r2, #26
 8008c92:	d42b      	bmi.n	8008cec <_printf_common+0xb0>
 8008c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c98:	4649      	mov	r1, r9
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	47c0      	blx	r8
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d01e      	beq.n	8008ce0 <_printf_common+0xa4>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	68e5      	ldr	r5, [r4, #12]
 8008ca6:	6832      	ldr	r2, [r6, #0]
 8008ca8:	f003 0306 	and.w	r3, r3, #6
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	bf08      	it	eq
 8008cb0:	1aad      	subeq	r5, r5, r2
 8008cb2:	68a3      	ldr	r3, [r4, #8]
 8008cb4:	6922      	ldr	r2, [r4, #16]
 8008cb6:	bf0c      	ite	eq
 8008cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cbc:	2500      	movne	r5, #0
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	bfc4      	itt	gt
 8008cc2:	1a9b      	subgt	r3, r3, r2
 8008cc4:	18ed      	addgt	r5, r5, r3
 8008cc6:	2600      	movs	r6, #0
 8008cc8:	341a      	adds	r4, #26
 8008cca:	42b5      	cmp	r5, r6
 8008ccc:	d11a      	bne.n	8008d04 <_printf_common+0xc8>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e008      	b.n	8008ce4 <_printf_common+0xa8>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	4638      	mov	r0, r7
 8008cda:	47c0      	blx	r8
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d103      	bne.n	8008ce8 <_printf_common+0xac>
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce8:	3501      	adds	r5, #1
 8008cea:	e7c6      	b.n	8008c7a <_printf_common+0x3e>
 8008cec:	18e1      	adds	r1, r4, r3
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	2030      	movs	r0, #48	; 0x30
 8008cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cf6:	4422      	add	r2, r4
 8008cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d00:	3302      	adds	r3, #2
 8008d02:	e7c7      	b.n	8008c94 <_printf_common+0x58>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4622      	mov	r2, r4
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	47c0      	blx	r8
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d0e6      	beq.n	8008ce0 <_printf_common+0xa4>
 8008d12:	3601      	adds	r6, #1
 8008d14:	e7d9      	b.n	8008cca <_printf_common+0x8e>
	...

08008d18 <_printf_i>:
 8008d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d1c:	7e0f      	ldrb	r7, [r1, #24]
 8008d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d20:	2f78      	cmp	r7, #120	; 0x78
 8008d22:	4691      	mov	r9, r2
 8008d24:	4680      	mov	r8, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	469a      	mov	sl, r3
 8008d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d2e:	d807      	bhi.n	8008d40 <_printf_i+0x28>
 8008d30:	2f62      	cmp	r7, #98	; 0x62
 8008d32:	d80a      	bhi.n	8008d4a <_printf_i+0x32>
 8008d34:	2f00      	cmp	r7, #0
 8008d36:	f000 80d8 	beq.w	8008eea <_printf_i+0x1d2>
 8008d3a:	2f58      	cmp	r7, #88	; 0x58
 8008d3c:	f000 80a3 	beq.w	8008e86 <_printf_i+0x16e>
 8008d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d48:	e03a      	b.n	8008dc0 <_printf_i+0xa8>
 8008d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d4e:	2b15      	cmp	r3, #21
 8008d50:	d8f6      	bhi.n	8008d40 <_printf_i+0x28>
 8008d52:	a101      	add	r1, pc, #4	; (adr r1, 8008d58 <_printf_i+0x40>)
 8008d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d58:	08008db1 	.word	0x08008db1
 8008d5c:	08008dc5 	.word	0x08008dc5
 8008d60:	08008d41 	.word	0x08008d41
 8008d64:	08008d41 	.word	0x08008d41
 8008d68:	08008d41 	.word	0x08008d41
 8008d6c:	08008d41 	.word	0x08008d41
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008d41 	.word	0x08008d41
 8008d78:	08008d41 	.word	0x08008d41
 8008d7c:	08008d41 	.word	0x08008d41
 8008d80:	08008d41 	.word	0x08008d41
 8008d84:	08008ed1 	.word	0x08008ed1
 8008d88:	08008df5 	.word	0x08008df5
 8008d8c:	08008eb3 	.word	0x08008eb3
 8008d90:	08008d41 	.word	0x08008d41
 8008d94:	08008d41 	.word	0x08008d41
 8008d98:	08008ef3 	.word	0x08008ef3
 8008d9c:	08008d41 	.word	0x08008d41
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008d41 	.word	0x08008d41
 8008da8:	08008d41 	.word	0x08008d41
 8008dac:	08008ebb 	.word	0x08008ebb
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	1d1a      	adds	r2, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0a3      	b.n	8008f0c <_printf_i+0x1f4>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	6829      	ldr	r1, [r5, #0]
 8008dc8:	0606      	lsls	r6, r0, #24
 8008dca:	f101 0304 	add.w	r3, r1, #4
 8008dce:	d50a      	bpl.n	8008de6 <_printf_i+0xce>
 8008dd0:	680e      	ldr	r6, [r1, #0]
 8008dd2:	602b      	str	r3, [r5, #0]
 8008dd4:	2e00      	cmp	r6, #0
 8008dd6:	da03      	bge.n	8008de0 <_printf_i+0xc8>
 8008dd8:	232d      	movs	r3, #45	; 0x2d
 8008dda:	4276      	negs	r6, r6
 8008ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de0:	485e      	ldr	r0, [pc, #376]	; (8008f5c <_printf_i+0x244>)
 8008de2:	230a      	movs	r3, #10
 8008de4:	e019      	b.n	8008e1a <_printf_i+0x102>
 8008de6:	680e      	ldr	r6, [r1, #0]
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dee:	bf18      	it	ne
 8008df0:	b236      	sxthne	r6, r6
 8008df2:	e7ef      	b.n	8008dd4 <_printf_i+0xbc>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	1d19      	adds	r1, r3, #4
 8008dfa:	6029      	str	r1, [r5, #0]
 8008dfc:	0601      	lsls	r1, r0, #24
 8008dfe:	d501      	bpl.n	8008e04 <_printf_i+0xec>
 8008e00:	681e      	ldr	r6, [r3, #0]
 8008e02:	e002      	b.n	8008e0a <_printf_i+0xf2>
 8008e04:	0646      	lsls	r6, r0, #25
 8008e06:	d5fb      	bpl.n	8008e00 <_printf_i+0xe8>
 8008e08:	881e      	ldrh	r6, [r3, #0]
 8008e0a:	4854      	ldr	r0, [pc, #336]	; (8008f5c <_printf_i+0x244>)
 8008e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8008e0e:	bf0c      	ite	eq
 8008e10:	2308      	moveq	r3, #8
 8008e12:	230a      	movne	r3, #10
 8008e14:	2100      	movs	r1, #0
 8008e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e1a:	6865      	ldr	r5, [r4, #4]
 8008e1c:	60a5      	str	r5, [r4, #8]
 8008e1e:	2d00      	cmp	r5, #0
 8008e20:	bfa2      	ittt	ge
 8008e22:	6821      	ldrge	r1, [r4, #0]
 8008e24:	f021 0104 	bicge.w	r1, r1, #4
 8008e28:	6021      	strge	r1, [r4, #0]
 8008e2a:	b90e      	cbnz	r6, 8008e30 <_printf_i+0x118>
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	d04d      	beq.n	8008ecc <_printf_i+0x1b4>
 8008e30:	4615      	mov	r5, r2
 8008e32:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e36:	fb03 6711 	mls	r7, r3, r1, r6
 8008e3a:	5dc7      	ldrb	r7, [r0, r7]
 8008e3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e40:	4637      	mov	r7, r6
 8008e42:	42bb      	cmp	r3, r7
 8008e44:	460e      	mov	r6, r1
 8008e46:	d9f4      	bls.n	8008e32 <_printf_i+0x11a>
 8008e48:	2b08      	cmp	r3, #8
 8008e4a:	d10b      	bne.n	8008e64 <_printf_i+0x14c>
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	07de      	lsls	r6, r3, #31
 8008e50:	d508      	bpl.n	8008e64 <_printf_i+0x14c>
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	6861      	ldr	r1, [r4, #4]
 8008e56:	4299      	cmp	r1, r3
 8008e58:	bfde      	ittt	le
 8008e5a:	2330      	movle	r3, #48	; 0x30
 8008e5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e64:	1b52      	subs	r2, r2, r5
 8008e66:	6122      	str	r2, [r4, #16]
 8008e68:	f8cd a000 	str.w	sl, [sp]
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	aa03      	add	r2, sp, #12
 8008e70:	4621      	mov	r1, r4
 8008e72:	4640      	mov	r0, r8
 8008e74:	f7ff fee2 	bl	8008c3c <_printf_common>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d14c      	bne.n	8008f16 <_printf_i+0x1fe>
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	b004      	add	sp, #16
 8008e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e86:	4835      	ldr	r0, [pc, #212]	; (8008f5c <_printf_i+0x244>)
 8008e88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e8c:	6829      	ldr	r1, [r5, #0]
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e94:	6029      	str	r1, [r5, #0]
 8008e96:	061d      	lsls	r5, r3, #24
 8008e98:	d514      	bpl.n	8008ec4 <_printf_i+0x1ac>
 8008e9a:	07df      	lsls	r7, r3, #31
 8008e9c:	bf44      	itt	mi
 8008e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8008ea2:	6023      	strmi	r3, [r4, #0]
 8008ea4:	b91e      	cbnz	r6, 8008eae <_printf_i+0x196>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	f023 0320 	bic.w	r3, r3, #32
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	2310      	movs	r3, #16
 8008eb0:	e7b0      	b.n	8008e14 <_printf_i+0xfc>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f043 0320 	orr.w	r3, r3, #32
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	2378      	movs	r3, #120	; 0x78
 8008ebc:	4828      	ldr	r0, [pc, #160]	; (8008f60 <_printf_i+0x248>)
 8008ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ec2:	e7e3      	b.n	8008e8c <_printf_i+0x174>
 8008ec4:	0659      	lsls	r1, r3, #25
 8008ec6:	bf48      	it	mi
 8008ec8:	b2b6      	uxthmi	r6, r6
 8008eca:	e7e6      	b.n	8008e9a <_printf_i+0x182>
 8008ecc:	4615      	mov	r5, r2
 8008ece:	e7bb      	b.n	8008e48 <_printf_i+0x130>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	6826      	ldr	r6, [r4, #0]
 8008ed4:	6961      	ldr	r1, [r4, #20]
 8008ed6:	1d18      	adds	r0, r3, #4
 8008ed8:	6028      	str	r0, [r5, #0]
 8008eda:	0635      	lsls	r5, r6, #24
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	d501      	bpl.n	8008ee4 <_printf_i+0x1cc>
 8008ee0:	6019      	str	r1, [r3, #0]
 8008ee2:	e002      	b.n	8008eea <_printf_i+0x1d2>
 8008ee4:	0670      	lsls	r0, r6, #25
 8008ee6:	d5fb      	bpl.n	8008ee0 <_printf_i+0x1c8>
 8008ee8:	8019      	strh	r1, [r3, #0]
 8008eea:	2300      	movs	r3, #0
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	4615      	mov	r5, r2
 8008ef0:	e7ba      	b.n	8008e68 <_printf_i+0x150>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	1d1a      	adds	r2, r3, #4
 8008ef6:	602a      	str	r2, [r5, #0]
 8008ef8:	681d      	ldr	r5, [r3, #0]
 8008efa:	6862      	ldr	r2, [r4, #4]
 8008efc:	2100      	movs	r1, #0
 8008efe:	4628      	mov	r0, r5
 8008f00:	f7f7 f96e 	bl	80001e0 <memchr>
 8008f04:	b108      	cbz	r0, 8008f0a <_printf_i+0x1f2>
 8008f06:	1b40      	subs	r0, r0, r5
 8008f08:	6060      	str	r0, [r4, #4]
 8008f0a:	6863      	ldr	r3, [r4, #4]
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f14:	e7a8      	b.n	8008e68 <_printf_i+0x150>
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	462a      	mov	r2, r5
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	47d0      	blx	sl
 8008f20:	3001      	adds	r0, #1
 8008f22:	d0ab      	beq.n	8008e7c <_printf_i+0x164>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	079b      	lsls	r3, r3, #30
 8008f28:	d413      	bmi.n	8008f52 <_printf_i+0x23a>
 8008f2a:	68e0      	ldr	r0, [r4, #12]
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	4298      	cmp	r0, r3
 8008f30:	bfb8      	it	lt
 8008f32:	4618      	movlt	r0, r3
 8008f34:	e7a4      	b.n	8008e80 <_printf_i+0x168>
 8008f36:	2301      	movs	r3, #1
 8008f38:	4632      	mov	r2, r6
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	47d0      	blx	sl
 8008f40:	3001      	adds	r0, #1
 8008f42:	d09b      	beq.n	8008e7c <_printf_i+0x164>
 8008f44:	3501      	adds	r5, #1
 8008f46:	68e3      	ldr	r3, [r4, #12]
 8008f48:	9903      	ldr	r1, [sp, #12]
 8008f4a:	1a5b      	subs	r3, r3, r1
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dcf2      	bgt.n	8008f36 <_printf_i+0x21e>
 8008f50:	e7eb      	b.n	8008f2a <_printf_i+0x212>
 8008f52:	2500      	movs	r5, #0
 8008f54:	f104 0619 	add.w	r6, r4, #25
 8008f58:	e7f5      	b.n	8008f46 <_printf_i+0x22e>
 8008f5a:	bf00      	nop
 8008f5c:	080099b9 	.word	0x080099b9
 8008f60:	080099ca 	.word	0x080099ca

08008f64 <_sbrk_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d06      	ldr	r5, [pc, #24]	; (8008f80 <_sbrk_r+0x1c>)
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4604      	mov	r4, r0
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	602b      	str	r3, [r5, #0]
 8008f70:	f7fa fa18 	bl	80033a4 <_sbrk>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_sbrk_r+0x1a>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_sbrk_r+0x1a>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	20000dac 	.word	0x20000dac

08008f84 <__sread>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	460c      	mov	r4, r1
 8008f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8c:	f000 fac6 	bl	800951c <_read_r>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	bfab      	itete	ge
 8008f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f96:	89a3      	ldrhlt	r3, [r4, #12]
 8008f98:	181b      	addge	r3, r3, r0
 8008f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f9e:	bfac      	ite	ge
 8008fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fa2:	81a3      	strhlt	r3, [r4, #12]
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <__swrite>:
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	461f      	mov	r7, r3
 8008fac:	898b      	ldrh	r3, [r1, #12]
 8008fae:	05db      	lsls	r3, r3, #23
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	d505      	bpl.n	8008fc4 <__swrite+0x1e>
 8008fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f000 f9d0 	bl	8009364 <_lseek_r>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	f000 b869 	b.w	80090b0 <_write_r>

08008fde <__sseek>:
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe6:	f000 f9bd 	bl	8009364 <_lseek_r>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	bf15      	itete	ne
 8008ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ffa:	81a3      	strheq	r3, [r4, #12]
 8008ffc:	bf18      	it	ne
 8008ffe:	81a3      	strhne	r3, [r4, #12]
 8009000:	bd10      	pop	{r4, pc}

08009002 <__sclose>:
 8009002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009006:	f000 b8db 	b.w	80091c0 <_close_r>
	...

0800900c <__swbuf_r>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	460e      	mov	r6, r1
 8009010:	4614      	mov	r4, r2
 8009012:	4605      	mov	r5, r0
 8009014:	b118      	cbz	r0, 800901e <__swbuf_r+0x12>
 8009016:	6983      	ldr	r3, [r0, #24]
 8009018:	b90b      	cbnz	r3, 800901e <__swbuf_r+0x12>
 800901a:	f7ff f9ab 	bl	8008374 <__sinit>
 800901e:	4b21      	ldr	r3, [pc, #132]	; (80090a4 <__swbuf_r+0x98>)
 8009020:	429c      	cmp	r4, r3
 8009022:	d12b      	bne.n	800907c <__swbuf_r+0x70>
 8009024:	686c      	ldr	r4, [r5, #4]
 8009026:	69a3      	ldr	r3, [r4, #24]
 8009028:	60a3      	str	r3, [r4, #8]
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	071a      	lsls	r2, r3, #28
 800902e:	d52f      	bpl.n	8009090 <__swbuf_r+0x84>
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	b36b      	cbz	r3, 8009090 <__swbuf_r+0x84>
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	6820      	ldr	r0, [r4, #0]
 8009038:	1ac0      	subs	r0, r0, r3
 800903a:	6963      	ldr	r3, [r4, #20]
 800903c:	b2f6      	uxtb	r6, r6
 800903e:	4283      	cmp	r3, r0
 8009040:	4637      	mov	r7, r6
 8009042:	dc04      	bgt.n	800904e <__swbuf_r+0x42>
 8009044:	4621      	mov	r1, r4
 8009046:	4628      	mov	r0, r5
 8009048:	f000 f950 	bl	80092ec <_fflush_r>
 800904c:	bb30      	cbnz	r0, 800909c <__swbuf_r+0x90>
 800904e:	68a3      	ldr	r3, [r4, #8]
 8009050:	3b01      	subs	r3, #1
 8009052:	60a3      	str	r3, [r4, #8]
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	6022      	str	r2, [r4, #0]
 800905a:	701e      	strb	r6, [r3, #0]
 800905c:	6963      	ldr	r3, [r4, #20]
 800905e:	3001      	adds	r0, #1
 8009060:	4283      	cmp	r3, r0
 8009062:	d004      	beq.n	800906e <__swbuf_r+0x62>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	07db      	lsls	r3, r3, #31
 8009068:	d506      	bpl.n	8009078 <__swbuf_r+0x6c>
 800906a:	2e0a      	cmp	r6, #10
 800906c:	d104      	bne.n	8009078 <__swbuf_r+0x6c>
 800906e:	4621      	mov	r1, r4
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f93b 	bl	80092ec <_fflush_r>
 8009076:	b988      	cbnz	r0, 800909c <__swbuf_r+0x90>
 8009078:	4638      	mov	r0, r7
 800907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907c:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <__swbuf_r+0x9c>)
 800907e:	429c      	cmp	r4, r3
 8009080:	d101      	bne.n	8009086 <__swbuf_r+0x7a>
 8009082:	68ac      	ldr	r4, [r5, #8]
 8009084:	e7cf      	b.n	8009026 <__swbuf_r+0x1a>
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <__swbuf_r+0xa0>)
 8009088:	429c      	cmp	r4, r3
 800908a:	bf08      	it	eq
 800908c:	68ec      	ldreq	r4, [r5, #12]
 800908e:	e7ca      	b.n	8009026 <__swbuf_r+0x1a>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f81e 	bl	80090d4 <__swsetup_r>
 8009098:	2800      	cmp	r0, #0
 800909a:	d0cb      	beq.n	8009034 <__swbuf_r+0x28>
 800909c:	f04f 37ff 	mov.w	r7, #4294967295
 80090a0:	e7ea      	b.n	8009078 <__swbuf_r+0x6c>
 80090a2:	bf00      	nop
 80090a4:	08009968 	.word	0x08009968
 80090a8:	08009988 	.word	0x08009988
 80090ac:	08009948 	.word	0x08009948

080090b0 <_write_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d07      	ldr	r5, [pc, #28]	; (80090d0 <_write_r+0x20>)
 80090b4:	4604      	mov	r4, r0
 80090b6:	4608      	mov	r0, r1
 80090b8:	4611      	mov	r1, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f7fa f91f 	bl	8003302 <_write>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_write_r+0x1e>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_write_r+0x1e>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	20000dac 	.word	0x20000dac

080090d4 <__swsetup_r>:
 80090d4:	4b32      	ldr	r3, [pc, #200]	; (80091a0 <__swsetup_r+0xcc>)
 80090d6:	b570      	push	{r4, r5, r6, lr}
 80090d8:	681d      	ldr	r5, [r3, #0]
 80090da:	4606      	mov	r6, r0
 80090dc:	460c      	mov	r4, r1
 80090de:	b125      	cbz	r5, 80090ea <__swsetup_r+0x16>
 80090e0:	69ab      	ldr	r3, [r5, #24]
 80090e2:	b913      	cbnz	r3, 80090ea <__swsetup_r+0x16>
 80090e4:	4628      	mov	r0, r5
 80090e6:	f7ff f945 	bl	8008374 <__sinit>
 80090ea:	4b2e      	ldr	r3, [pc, #184]	; (80091a4 <__swsetup_r+0xd0>)
 80090ec:	429c      	cmp	r4, r3
 80090ee:	d10f      	bne.n	8009110 <__swsetup_r+0x3c>
 80090f0:	686c      	ldr	r4, [r5, #4]
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f8:	0719      	lsls	r1, r3, #28
 80090fa:	d42c      	bmi.n	8009156 <__swsetup_r+0x82>
 80090fc:	06dd      	lsls	r5, r3, #27
 80090fe:	d411      	bmi.n	8009124 <__swsetup_r+0x50>
 8009100:	2309      	movs	r3, #9
 8009102:	6033      	str	r3, [r6, #0]
 8009104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	f04f 30ff 	mov.w	r0, #4294967295
 800910e:	e03e      	b.n	800918e <__swsetup_r+0xba>
 8009110:	4b25      	ldr	r3, [pc, #148]	; (80091a8 <__swsetup_r+0xd4>)
 8009112:	429c      	cmp	r4, r3
 8009114:	d101      	bne.n	800911a <__swsetup_r+0x46>
 8009116:	68ac      	ldr	r4, [r5, #8]
 8009118:	e7eb      	b.n	80090f2 <__swsetup_r+0x1e>
 800911a:	4b24      	ldr	r3, [pc, #144]	; (80091ac <__swsetup_r+0xd8>)
 800911c:	429c      	cmp	r4, r3
 800911e:	bf08      	it	eq
 8009120:	68ec      	ldreq	r4, [r5, #12]
 8009122:	e7e6      	b.n	80090f2 <__swsetup_r+0x1e>
 8009124:	0758      	lsls	r0, r3, #29
 8009126:	d512      	bpl.n	800914e <__swsetup_r+0x7a>
 8009128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800912a:	b141      	cbz	r1, 800913e <__swsetup_r+0x6a>
 800912c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009130:	4299      	cmp	r1, r3
 8009132:	d002      	beq.n	800913a <__swsetup_r+0x66>
 8009134:	4630      	mov	r0, r6
 8009136:	f7ff f9eb 	bl	8008510 <_free_r>
 800913a:	2300      	movs	r3, #0
 800913c:	6363      	str	r3, [r4, #52]	; 0x34
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	2300      	movs	r3, #0
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0308 	orr.w	r3, r3, #8
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	b94b      	cbnz	r3, 800916e <__swsetup_r+0x9a>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009164:	d003      	beq.n	800916e <__swsetup_r+0x9a>
 8009166:	4621      	mov	r1, r4
 8009168:	4630      	mov	r0, r6
 800916a:	f000 f933 	bl	80093d4 <__smakebuf_r>
 800916e:	89a0      	ldrh	r0, [r4, #12]
 8009170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009174:	f010 0301 	ands.w	r3, r0, #1
 8009178:	d00a      	beq.n	8009190 <__swsetup_r+0xbc>
 800917a:	2300      	movs	r3, #0
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	6963      	ldr	r3, [r4, #20]
 8009180:	425b      	negs	r3, r3
 8009182:	61a3      	str	r3, [r4, #24]
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	b943      	cbnz	r3, 800919a <__swsetup_r+0xc6>
 8009188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800918c:	d1ba      	bne.n	8009104 <__swsetup_r+0x30>
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	0781      	lsls	r1, r0, #30
 8009192:	bf58      	it	pl
 8009194:	6963      	ldrpl	r3, [r4, #20]
 8009196:	60a3      	str	r3, [r4, #8]
 8009198:	e7f4      	b.n	8009184 <__swsetup_r+0xb0>
 800919a:	2000      	movs	r0, #0
 800919c:	e7f7      	b.n	800918e <__swsetup_r+0xba>
 800919e:	bf00      	nop
 80091a0:	2000008c 	.word	0x2000008c
 80091a4:	08009968 	.word	0x08009968
 80091a8:	08009988 	.word	0x08009988
 80091ac:	08009948 	.word	0x08009948

080091b0 <abort>:
 80091b0:	b508      	push	{r3, lr}
 80091b2:	2006      	movs	r0, #6
 80091b4:	f000 f9ec 	bl	8009590 <raise>
 80091b8:	2001      	movs	r0, #1
 80091ba:	f7fa f87b 	bl	80032b4 <_exit>
	...

080091c0 <_close_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4d06      	ldr	r5, [pc, #24]	; (80091dc <_close_r+0x1c>)
 80091c4:	2300      	movs	r3, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	f7fa f8b5 	bl	800333a <_close>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_close_r+0x1a>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_close_r+0x1a>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20000dac 	.word	0x20000dac

080091e0 <__sflush_r>:
 80091e0:	898a      	ldrh	r2, [r1, #12]
 80091e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e6:	4605      	mov	r5, r0
 80091e8:	0710      	lsls	r0, r2, #28
 80091ea:	460c      	mov	r4, r1
 80091ec:	d458      	bmi.n	80092a0 <__sflush_r+0xc0>
 80091ee:	684b      	ldr	r3, [r1, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dc05      	bgt.n	8009200 <__sflush_r+0x20>
 80091f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dc02      	bgt.n	8009200 <__sflush_r+0x20>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009202:	2e00      	cmp	r6, #0
 8009204:	d0f9      	beq.n	80091fa <__sflush_r+0x1a>
 8009206:	2300      	movs	r3, #0
 8009208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800920c:	682f      	ldr	r7, [r5, #0]
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	d032      	beq.n	8009278 <__sflush_r+0x98>
 8009212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	075a      	lsls	r2, r3, #29
 8009218:	d505      	bpl.n	8009226 <__sflush_r+0x46>
 800921a:	6863      	ldr	r3, [r4, #4]
 800921c:	1ac0      	subs	r0, r0, r3
 800921e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009220:	b10b      	cbz	r3, 8009226 <__sflush_r+0x46>
 8009222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009224:	1ac0      	subs	r0, r0, r3
 8009226:	2300      	movs	r3, #0
 8009228:	4602      	mov	r2, r0
 800922a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922c:	6a21      	ldr	r1, [r4, #32]
 800922e:	4628      	mov	r0, r5
 8009230:	47b0      	blx	r6
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	d106      	bne.n	8009246 <__sflush_r+0x66>
 8009238:	6829      	ldr	r1, [r5, #0]
 800923a:	291d      	cmp	r1, #29
 800923c:	d82c      	bhi.n	8009298 <__sflush_r+0xb8>
 800923e:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <__sflush_r+0x108>)
 8009240:	40ca      	lsrs	r2, r1
 8009242:	07d6      	lsls	r6, r2, #31
 8009244:	d528      	bpl.n	8009298 <__sflush_r+0xb8>
 8009246:	2200      	movs	r2, #0
 8009248:	6062      	str	r2, [r4, #4]
 800924a:	04d9      	lsls	r1, r3, #19
 800924c:	6922      	ldr	r2, [r4, #16]
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	d504      	bpl.n	800925c <__sflush_r+0x7c>
 8009252:	1c42      	adds	r2, r0, #1
 8009254:	d101      	bne.n	800925a <__sflush_r+0x7a>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b903      	cbnz	r3, 800925c <__sflush_r+0x7c>
 800925a:	6560      	str	r0, [r4, #84]	; 0x54
 800925c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925e:	602f      	str	r7, [r5, #0]
 8009260:	2900      	cmp	r1, #0
 8009262:	d0ca      	beq.n	80091fa <__sflush_r+0x1a>
 8009264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009268:	4299      	cmp	r1, r3
 800926a:	d002      	beq.n	8009272 <__sflush_r+0x92>
 800926c:	4628      	mov	r0, r5
 800926e:	f7ff f94f 	bl	8008510 <_free_r>
 8009272:	2000      	movs	r0, #0
 8009274:	6360      	str	r0, [r4, #52]	; 0x34
 8009276:	e7c1      	b.n	80091fc <__sflush_r+0x1c>
 8009278:	6a21      	ldr	r1, [r4, #32]
 800927a:	2301      	movs	r3, #1
 800927c:	4628      	mov	r0, r5
 800927e:	47b0      	blx	r6
 8009280:	1c41      	adds	r1, r0, #1
 8009282:	d1c7      	bne.n	8009214 <__sflush_r+0x34>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0c4      	beq.n	8009214 <__sflush_r+0x34>
 800928a:	2b1d      	cmp	r3, #29
 800928c:	d001      	beq.n	8009292 <__sflush_r+0xb2>
 800928e:	2b16      	cmp	r3, #22
 8009290:	d101      	bne.n	8009296 <__sflush_r+0xb6>
 8009292:	602f      	str	r7, [r5, #0]
 8009294:	e7b1      	b.n	80091fa <__sflush_r+0x1a>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	e7ad      	b.n	80091fc <__sflush_r+0x1c>
 80092a0:	690f      	ldr	r7, [r1, #16]
 80092a2:	2f00      	cmp	r7, #0
 80092a4:	d0a9      	beq.n	80091fa <__sflush_r+0x1a>
 80092a6:	0793      	lsls	r3, r2, #30
 80092a8:	680e      	ldr	r6, [r1, #0]
 80092aa:	bf08      	it	eq
 80092ac:	694b      	ldreq	r3, [r1, #20]
 80092ae:	600f      	str	r7, [r1, #0]
 80092b0:	bf18      	it	ne
 80092b2:	2300      	movne	r3, #0
 80092b4:	eba6 0807 	sub.w	r8, r6, r7
 80092b8:	608b      	str	r3, [r1, #8]
 80092ba:	f1b8 0f00 	cmp.w	r8, #0
 80092be:	dd9c      	ble.n	80091fa <__sflush_r+0x1a>
 80092c0:	6a21      	ldr	r1, [r4, #32]
 80092c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092c4:	4643      	mov	r3, r8
 80092c6:	463a      	mov	r2, r7
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b0      	blx	r6
 80092cc:	2800      	cmp	r0, #0
 80092ce:	dc06      	bgt.n	80092de <__sflush_r+0xfe>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	f04f 30ff 	mov.w	r0, #4294967295
 80092dc:	e78e      	b.n	80091fc <__sflush_r+0x1c>
 80092de:	4407      	add	r7, r0
 80092e0:	eba8 0800 	sub.w	r8, r8, r0
 80092e4:	e7e9      	b.n	80092ba <__sflush_r+0xda>
 80092e6:	bf00      	nop
 80092e8:	20400001 	.word	0x20400001

080092ec <_fflush_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	690b      	ldr	r3, [r1, #16]
 80092f0:	4605      	mov	r5, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	b913      	cbnz	r3, 80092fc <_fflush_r+0x10>
 80092f6:	2500      	movs	r5, #0
 80092f8:	4628      	mov	r0, r5
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	b118      	cbz	r0, 8009306 <_fflush_r+0x1a>
 80092fe:	6983      	ldr	r3, [r0, #24]
 8009300:	b90b      	cbnz	r3, 8009306 <_fflush_r+0x1a>
 8009302:	f7ff f837 	bl	8008374 <__sinit>
 8009306:	4b14      	ldr	r3, [pc, #80]	; (8009358 <_fflush_r+0x6c>)
 8009308:	429c      	cmp	r4, r3
 800930a:	d11b      	bne.n	8009344 <_fflush_r+0x58>
 800930c:	686c      	ldr	r4, [r5, #4]
 800930e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0ef      	beq.n	80092f6 <_fflush_r+0xa>
 8009316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009318:	07d0      	lsls	r0, r2, #31
 800931a:	d404      	bmi.n	8009326 <_fflush_r+0x3a>
 800931c:	0599      	lsls	r1, r3, #22
 800931e:	d402      	bmi.n	8009326 <_fflush_r+0x3a>
 8009320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009322:	f7ff f8ea 	bl	80084fa <__retarget_lock_acquire_recursive>
 8009326:	4628      	mov	r0, r5
 8009328:	4621      	mov	r1, r4
 800932a:	f7ff ff59 	bl	80091e0 <__sflush_r>
 800932e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009330:	07da      	lsls	r2, r3, #31
 8009332:	4605      	mov	r5, r0
 8009334:	d4e0      	bmi.n	80092f8 <_fflush_r+0xc>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	059b      	lsls	r3, r3, #22
 800933a:	d4dd      	bmi.n	80092f8 <_fflush_r+0xc>
 800933c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933e:	f7ff f8dd 	bl	80084fc <__retarget_lock_release_recursive>
 8009342:	e7d9      	b.n	80092f8 <_fflush_r+0xc>
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <_fflush_r+0x70>)
 8009346:	429c      	cmp	r4, r3
 8009348:	d101      	bne.n	800934e <_fflush_r+0x62>
 800934a:	68ac      	ldr	r4, [r5, #8]
 800934c:	e7df      	b.n	800930e <_fflush_r+0x22>
 800934e:	4b04      	ldr	r3, [pc, #16]	; (8009360 <_fflush_r+0x74>)
 8009350:	429c      	cmp	r4, r3
 8009352:	bf08      	it	eq
 8009354:	68ec      	ldreq	r4, [r5, #12]
 8009356:	e7da      	b.n	800930e <_fflush_r+0x22>
 8009358:	08009968 	.word	0x08009968
 800935c:	08009988 	.word	0x08009988
 8009360:	08009948 	.word	0x08009948

08009364 <_lseek_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	; (8009384 <_lseek_r+0x20>)
 8009368:	4604      	mov	r4, r0
 800936a:	4608      	mov	r0, r1
 800936c:	4611      	mov	r1, r2
 800936e:	2200      	movs	r2, #0
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f7fa f808 	bl	8003388 <_lseek>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_lseek_r+0x1e>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_lseek_r+0x1e>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000dac 	.word	0x20000dac

08009388 <__swhatbuf_r>:
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	460e      	mov	r6, r1
 800938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009390:	2900      	cmp	r1, #0
 8009392:	b096      	sub	sp, #88	; 0x58
 8009394:	4614      	mov	r4, r2
 8009396:	461d      	mov	r5, r3
 8009398:	da08      	bge.n	80093ac <__swhatbuf_r+0x24>
 800939a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	602a      	str	r2, [r5, #0]
 80093a2:	061a      	lsls	r2, r3, #24
 80093a4:	d410      	bmi.n	80093c8 <__swhatbuf_r+0x40>
 80093a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093aa:	e00e      	b.n	80093ca <__swhatbuf_r+0x42>
 80093ac:	466a      	mov	r2, sp
 80093ae:	f000 f90b 	bl	80095c8 <_fstat_r>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	dbf1      	blt.n	800939a <__swhatbuf_r+0x12>
 80093b6:	9a01      	ldr	r2, [sp, #4]
 80093b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093c0:	425a      	negs	r2, r3
 80093c2:	415a      	adcs	r2, r3
 80093c4:	602a      	str	r2, [r5, #0]
 80093c6:	e7ee      	b.n	80093a6 <__swhatbuf_r+0x1e>
 80093c8:	2340      	movs	r3, #64	; 0x40
 80093ca:	2000      	movs	r0, #0
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	b016      	add	sp, #88	; 0x58
 80093d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080093d4 <__smakebuf_r>:
 80093d4:	898b      	ldrh	r3, [r1, #12]
 80093d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093d8:	079d      	lsls	r5, r3, #30
 80093da:	4606      	mov	r6, r0
 80093dc:	460c      	mov	r4, r1
 80093de:	d507      	bpl.n	80093f0 <__smakebuf_r+0x1c>
 80093e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	2301      	movs	r3, #1
 80093ea:	6163      	str	r3, [r4, #20]
 80093ec:	b002      	add	sp, #8
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	ab01      	add	r3, sp, #4
 80093f2:	466a      	mov	r2, sp
 80093f4:	f7ff ffc8 	bl	8009388 <__swhatbuf_r>
 80093f8:	9900      	ldr	r1, [sp, #0]
 80093fa:	4605      	mov	r5, r0
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7ff f8f3 	bl	80085e8 <_malloc_r>
 8009402:	b948      	cbnz	r0, 8009418 <__smakebuf_r+0x44>
 8009404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009408:	059a      	lsls	r2, r3, #22
 800940a:	d4ef      	bmi.n	80093ec <__smakebuf_r+0x18>
 800940c:	f023 0303 	bic.w	r3, r3, #3
 8009410:	f043 0302 	orr.w	r3, r3, #2
 8009414:	81a3      	strh	r3, [r4, #12]
 8009416:	e7e3      	b.n	80093e0 <__smakebuf_r+0xc>
 8009418:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <__smakebuf_r+0x7c>)
 800941a:	62b3      	str	r3, [r6, #40]	; 0x28
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	6020      	str	r0, [r4, #0]
 8009420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	9b00      	ldr	r3, [sp, #0]
 8009428:	6163      	str	r3, [r4, #20]
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	6120      	str	r0, [r4, #16]
 800942e:	b15b      	cbz	r3, 8009448 <__smakebuf_r+0x74>
 8009430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009434:	4630      	mov	r0, r6
 8009436:	f000 f8d9 	bl	80095ec <_isatty_r>
 800943a:	b128      	cbz	r0, 8009448 <__smakebuf_r+0x74>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	f043 0301 	orr.w	r3, r3, #1
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	89a0      	ldrh	r0, [r4, #12]
 800944a:	4305      	orrs	r5, r0
 800944c:	81a5      	strh	r5, [r4, #12]
 800944e:	e7cd      	b.n	80093ec <__smakebuf_r+0x18>
 8009450:	0800830d 	.word	0x0800830d

08009454 <memcpy>:
 8009454:	440a      	add	r2, r1
 8009456:	4291      	cmp	r1, r2
 8009458:	f100 33ff 	add.w	r3, r0, #4294967295
 800945c:	d100      	bne.n	8009460 <memcpy+0xc>
 800945e:	4770      	bx	lr
 8009460:	b510      	push	{r4, lr}
 8009462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800946a:	4291      	cmp	r1, r2
 800946c:	d1f9      	bne.n	8009462 <memcpy+0xe>
 800946e:	bd10      	pop	{r4, pc}

08009470 <memmove>:
 8009470:	4288      	cmp	r0, r1
 8009472:	b510      	push	{r4, lr}
 8009474:	eb01 0402 	add.w	r4, r1, r2
 8009478:	d902      	bls.n	8009480 <memmove+0x10>
 800947a:	4284      	cmp	r4, r0
 800947c:	4623      	mov	r3, r4
 800947e:	d807      	bhi.n	8009490 <memmove+0x20>
 8009480:	1e43      	subs	r3, r0, #1
 8009482:	42a1      	cmp	r1, r4
 8009484:	d008      	beq.n	8009498 <memmove+0x28>
 8009486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800948a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800948e:	e7f8      	b.n	8009482 <memmove+0x12>
 8009490:	4402      	add	r2, r0
 8009492:	4601      	mov	r1, r0
 8009494:	428a      	cmp	r2, r1
 8009496:	d100      	bne.n	800949a <memmove+0x2a>
 8009498:	bd10      	pop	{r4, pc}
 800949a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800949e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094a2:	e7f7      	b.n	8009494 <memmove+0x24>

080094a4 <__malloc_lock>:
 80094a4:	4801      	ldr	r0, [pc, #4]	; (80094ac <__malloc_lock+0x8>)
 80094a6:	f7ff b828 	b.w	80084fa <__retarget_lock_acquire_recursive>
 80094aa:	bf00      	nop
 80094ac:	20000da0 	.word	0x20000da0

080094b0 <__malloc_unlock>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__malloc_unlock+0x8>)
 80094b2:	f7ff b823 	b.w	80084fc <__retarget_lock_release_recursive>
 80094b6:	bf00      	nop
 80094b8:	20000da0 	.word	0x20000da0

080094bc <_realloc_r>:
 80094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c0:	4680      	mov	r8, r0
 80094c2:	4614      	mov	r4, r2
 80094c4:	460e      	mov	r6, r1
 80094c6:	b921      	cbnz	r1, 80094d2 <_realloc_r+0x16>
 80094c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	4611      	mov	r1, r2
 80094ce:	f7ff b88b 	b.w	80085e8 <_malloc_r>
 80094d2:	b92a      	cbnz	r2, 80094e0 <_realloc_r+0x24>
 80094d4:	f7ff f81c 	bl	8008510 <_free_r>
 80094d8:	4625      	mov	r5, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e0:	f000 f894 	bl	800960c <_malloc_usable_size_r>
 80094e4:	4284      	cmp	r4, r0
 80094e6:	4607      	mov	r7, r0
 80094e8:	d802      	bhi.n	80094f0 <_realloc_r+0x34>
 80094ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ee:	d812      	bhi.n	8009516 <_realloc_r+0x5a>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7ff f878 	bl	80085e8 <_malloc_r>
 80094f8:	4605      	mov	r5, r0
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d0ed      	beq.n	80094da <_realloc_r+0x1e>
 80094fe:	42bc      	cmp	r4, r7
 8009500:	4622      	mov	r2, r4
 8009502:	4631      	mov	r1, r6
 8009504:	bf28      	it	cs
 8009506:	463a      	movcs	r2, r7
 8009508:	f7ff ffa4 	bl	8009454 <memcpy>
 800950c:	4631      	mov	r1, r6
 800950e:	4640      	mov	r0, r8
 8009510:	f7fe fffe 	bl	8008510 <_free_r>
 8009514:	e7e1      	b.n	80094da <_realloc_r+0x1e>
 8009516:	4635      	mov	r5, r6
 8009518:	e7df      	b.n	80094da <_realloc_r+0x1e>
	...

0800951c <_read_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4d07      	ldr	r5, [pc, #28]	; (800953c <_read_r+0x20>)
 8009520:	4604      	mov	r4, r0
 8009522:	4608      	mov	r0, r1
 8009524:	4611      	mov	r1, r2
 8009526:	2200      	movs	r2, #0
 8009528:	602a      	str	r2, [r5, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	f7f9 fecc 	bl	80032c8 <_read>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_read_r+0x1e>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_read_r+0x1e>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000dac 	.word	0x20000dac

08009540 <_raise_r>:
 8009540:	291f      	cmp	r1, #31
 8009542:	b538      	push	{r3, r4, r5, lr}
 8009544:	4604      	mov	r4, r0
 8009546:	460d      	mov	r5, r1
 8009548:	d904      	bls.n	8009554 <_raise_r+0x14>
 800954a:	2316      	movs	r3, #22
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	f04f 30ff 	mov.w	r0, #4294967295
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009556:	b112      	cbz	r2, 800955e <_raise_r+0x1e>
 8009558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800955c:	b94b      	cbnz	r3, 8009572 <_raise_r+0x32>
 800955e:	4620      	mov	r0, r4
 8009560:	f000 f830 	bl	80095c4 <_getpid_r>
 8009564:	462a      	mov	r2, r5
 8009566:	4601      	mov	r1, r0
 8009568:	4620      	mov	r0, r4
 800956a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956e:	f000 b817 	b.w	80095a0 <_kill_r>
 8009572:	2b01      	cmp	r3, #1
 8009574:	d00a      	beq.n	800958c <_raise_r+0x4c>
 8009576:	1c59      	adds	r1, r3, #1
 8009578:	d103      	bne.n	8009582 <_raise_r+0x42>
 800957a:	2316      	movs	r3, #22
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	2001      	movs	r0, #1
 8009580:	e7e7      	b.n	8009552 <_raise_r+0x12>
 8009582:	2400      	movs	r4, #0
 8009584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009588:	4628      	mov	r0, r5
 800958a:	4798      	blx	r3
 800958c:	2000      	movs	r0, #0
 800958e:	e7e0      	b.n	8009552 <_raise_r+0x12>

08009590 <raise>:
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <raise+0xc>)
 8009592:	4601      	mov	r1, r0
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f7ff bfd3 	b.w	8009540 <_raise_r>
 800959a:	bf00      	nop
 800959c:	2000008c 	.word	0x2000008c

080095a0 <_kill_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d07      	ldr	r5, [pc, #28]	; (80095c0 <_kill_r+0x20>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	f7f9 fe71 	bl	8003294 <_kill>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d102      	bne.n	80095bc <_kill_r+0x1c>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b103      	cbz	r3, 80095bc <_kill_r+0x1c>
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	bd38      	pop	{r3, r4, r5, pc}
 80095be:	bf00      	nop
 80095c0:	20000dac 	.word	0x20000dac

080095c4 <_getpid_r>:
 80095c4:	f7f9 be5e 	b.w	8003284 <_getpid>

080095c8 <_fstat_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d07      	ldr	r5, [pc, #28]	; (80095e8 <_fstat_r+0x20>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	f7f9 febc 	bl	8003352 <_fstat>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <_fstat_r+0x1c>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_fstat_r+0x1c>
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	20000dac 	.word	0x20000dac

080095ec <_isatty_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	; (8009608 <_isatty_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7f9 febb 	bl	8003372 <_isatty>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_isatty_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_isatty_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	20000dac 	.word	0x20000dac

0800960c <_malloc_usable_size_r>:
 800960c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009610:	1f18      	subs	r0, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfbc      	itt	lt
 8009616:	580b      	ldrlt	r3, [r1, r0]
 8009618:	18c0      	addlt	r0, r0, r3
 800961a:	4770      	bx	lr

0800961c <_gettimeofday>:
 800961c:	4b02      	ldr	r3, [pc, #8]	; (8009628 <_gettimeofday+0xc>)
 800961e:	2258      	movs	r2, #88	; 0x58
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	f04f 30ff 	mov.w	r0, #4294967295
 8009626:	4770      	bx	lr
 8009628:	20000dac 	.word	0x20000dac

0800962c <_init>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	bf00      	nop
 8009630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009632:	bc08      	pop	{r3}
 8009634:	469e      	mov	lr, r3
 8009636:	4770      	bx	lr

08009638 <_fini>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr
