
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004260  08004260  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004260  08004260  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004260  08004260  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000450  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001380e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000262a  00000000  00000000  0003384a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00035e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d80  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d80c  00000000  00000000  00037a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013249  00000000  00000000  0005526c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0148  00000000  00000000  000684b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001185fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c64  00000000  00000000  00118650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041c0 	.word	0x080041c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080041c0 	.word	0x080041c0

080001c8 <HAL_GPIO_EXTI_Callback>:
    { GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]

  if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 80001d2:	4b85      	ldr	r3, [pc, #532]	; (80003e8 <HAL_GPIO_EXTI_Callback+0x220>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80001da:	f000 fd59 	bl	8000c90 <HAL_GetTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	429c      	cmp	r4, r3
 80001e2:	f200 80f9 	bhi.w	80003d8 <HAL_GPIO_EXTI_Callback+0x210>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 80001e6:	f000 fd53 	bl	8000c90 <HAL_GetTick>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a7e      	ldr	r2, [pc, #504]	; (80003e8 <HAL_GPIO_EXTI_Callback+0x220>)
 80001ee:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 80001f0:	23ff      	movs	r3, #255	; 0xff
 80001f2:	73fb      	strb	r3, [r7, #15]
  int8_t column_number = -1;
 80001f4:	23ff      	movs	r3, #255	; 0xff
 80001f6:	73bb      	strb	r3, [r7, #14]
  {
    // blue_button_pressed = 1;
    // return;
  }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 80001f8:	2300      	movs	r3, #0
 80001fa:	737b      	strb	r3, [r7, #13]
 80001fc:	e00b      	b.n	8000216 <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (GPIO_Pin == Row_pins[row])
 80001fe:	7b7b      	ldrb	r3, [r7, #13]
 8000200:	4a7a      	ldr	r2, [pc, #488]	; (80003ec <HAL_GPIO_EXTI_Callback+0x224>)
 8000202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000206:	88fa      	ldrh	r2, [r7, #6]
 8000208:	429a      	cmp	r2, r3
 800020a:	d101      	bne.n	8000210 <HAL_GPIO_EXTI_Callback+0x48>
    {
      row_number = row;
 800020c:	7b7b      	ldrb	r3, [r7, #13]
 800020e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000210:	7b7b      	ldrb	r3, [r7, #13]
 8000212:	3301      	adds	r3, #1
 8000214:	737b      	strb	r3, [r7, #13]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	2b03      	cmp	r3, #3
 800021a:	d9f0      	bls.n	80001fe <HAL_GPIO_EXTI_Callback+0x36>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 800021c:	4b74      	ldr	r3, [pc, #464]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 800021e:	2101      	movs	r1, #1
 8000220:	2200      	movs	r2, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 f85a 	bl	80012dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000228:	4b71      	ldr	r3, [pc, #452]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 800022a:	2102      	movs	r1, #2
 800022c:	2200      	movs	r2, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f001 f854 	bl	80012dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000234:	4b6e      	ldr	r3, [pc, #440]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 8000236:	2104      	movs	r1, #4
 8000238:	2200      	movs	r2, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f001 f84e 	bl	80012dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000240:	4b6b      	ldr	r3, [pc, #428]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 8000242:	2108      	movs	r1, #8
 8000244:	2200      	movs	r2, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f848 	bl	80012dc <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 800024c:	2300      	movs	r3, #0
 800024e:	733b      	strb	r3, [r7, #12]
 8000250:	e02d      	b.n	80002ae <HAL_GPIO_EXTI_Callback+0xe6>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000252:	7b3b      	ldrb	r3, [r7, #12]
 8000254:	4a67      	ldr	r2, [pc, #412]	; (80003f4 <HAL_GPIO_EXTI_Callback+0x22c>)
 8000256:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800025a:	7b3b      	ldrb	r3, [r7, #12]
 800025c:	4a66      	ldr	r2, [pc, #408]	; (80003f8 <HAL_GPIO_EXTI_Callback+0x230>)
 800025e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000262:	2201      	movs	r2, #1
 8000264:	4619      	mov	r1, r3
 8000266:	f001 f839 	bl	80012dc <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 800026a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800026e:	4a63      	ldr	r2, [pc, #396]	; (80003fc <HAL_GPIO_EXTI_Callback+0x234>)
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000278:	495c      	ldr	r1, [pc, #368]	; (80003ec <HAL_GPIO_EXTI_Callback+0x224>)
 800027a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800027e:	4619      	mov	r1, r3
 8000280:	4610      	mov	r0, r2
 8000282:	f001 f813 	bl	80012ac <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <HAL_GPIO_EXTI_Callback+0xc8>
    {

      column_number = col;
 800028c:	7b3b      	ldrb	r3, [r7, #12]
 800028e:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000290:	7b3b      	ldrb	r3, [r7, #12]
 8000292:	4a58      	ldr	r2, [pc, #352]	; (80003f4 <HAL_GPIO_EXTI_Callback+0x22c>)
 8000294:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000298:	7b3b      	ldrb	r3, [r7, #12]
 800029a:	4a57      	ldr	r2, [pc, #348]	; (80003f8 <HAL_GPIO_EXTI_Callback+0x230>)
 800029c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a0:	2200      	movs	r2, #0
 80002a2:	4619      	mov	r1, r3
 80002a4:	f001 f81a 	bl	80012dc <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 80002a8:	7b3b      	ldrb	r3, [r7, #12]
 80002aa:	3301      	adds	r3, #1
 80002ac:	733b      	strb	r3, [r7, #12]
 80002ae:	7b3b      	ldrb	r3, [r7, #12]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d9ce      	bls.n	8000252 <HAL_GPIO_EXTI_Callback+0x8a>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 80002b4:	4b4e      	ldr	r3, [pc, #312]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 80002b6:	2101      	movs	r1, #1
 80002b8:	2201      	movs	r2, #1
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f80e 	bl	80012dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 80002c0:	4b4b      	ldr	r3, [pc, #300]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 80002c2:	2102      	movs	r1, #2
 80002c4:	2201      	movs	r2, #1
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f808 	bl	80012dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 80002cc:	4b48      	ldr	r3, [pc, #288]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 80002ce:	2104      	movs	r1, #4
 80002d0:	2201      	movs	r2, #1
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f802 	bl	80012dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 80002d8:	4b45      	ldr	r3, [pc, #276]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x228>)
 80002da:	2108      	movs	r1, #8
 80002dc:	2201      	movs	r2, #1
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fffc 	bl	80012dc <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 80002e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ec:	d076      	beq.n	80003dc <HAL_GPIO_EXTI_Callback+0x214>
 80002ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002f6:	d071      	beq.n	80003dc <HAL_GPIO_EXTI_Callback+0x214>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	4413      	add	r3, r2
 8000302:	b2db      	uxtb	r3, r3
 8000304:	3301      	adds	r3, #1
 8000306:	72fb      	strb	r3, [r7, #11]
  switch (button_number)
 8000308:	7afb      	ldrb	r3, [r7, #11]
 800030a:	3b01      	subs	r3, #1
 800030c:	2b0f      	cmp	r3, #15
 800030e:	d867      	bhi.n	80003e0 <HAL_GPIO_EXTI_Callback+0x218>
 8000310:	a201      	add	r2, pc, #4	; (adr r2, 8000318 <HAL_GPIO_EXTI_Callback+0x150>)
 8000312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000316:	bf00      	nop
 8000318:	08000359 	.word	0x08000359
 800031c:	08000369 	.word	0x08000369
 8000320:	08000379 	.word	0x08000379
 8000324:	08000389 	.word	0x08000389
 8000328:	08000399 	.word	0x08000399
 800032c:	080003a9 	.word	0x080003a9
 8000330:	080003b9 	.word	0x080003b9
 8000334:	080003c9 	.word	0x080003c9
 8000338:	080003e1 	.word	0x080003e1
 800033c:	080003e1 	.word	0x080003e1
 8000340:	080003e1 	.word	0x080003e1
 8000344:	080003e1 	.word	0x080003e1
 8000348:	080003e1 	.word	0x080003e1
 800034c:	080003e1 	.word	0x080003e1
 8000350:	080003e1 	.word	0x080003e1
 8000354:	080003e1 	.word	0x080003e1
  {
  case 1:
    HAL_UART_Transmit(&huart1, "1",
 8000358:	f04f 33ff 	mov.w	r3, #4294967295
 800035c:	2201      	movs	r2, #1
 800035e:	4928      	ldr	r1, [pc, #160]	; (8000400 <HAL_GPIO_EXTI_Callback+0x238>)
 8000360:	4828      	ldr	r0, [pc, #160]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 8000362:	f002 ff00 	bl	8003166 <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000366:	e03c      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 2:
    HAL_UART_Transmit(&huart1, "2",
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
 800036c:	2201      	movs	r2, #1
 800036e:	4926      	ldr	r1, [pc, #152]	; (8000408 <HAL_GPIO_EXTI_Callback+0x240>)
 8000370:	4824      	ldr	r0, [pc, #144]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 8000372:	f002 fef8 	bl	8003166 <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000376:	e034      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 3:
    HAL_UART_Transmit(&huart1, "3",
 8000378:	f04f 33ff 	mov.w	r3, #4294967295
 800037c:	2201      	movs	r2, #1
 800037e:	4923      	ldr	r1, [pc, #140]	; (800040c <HAL_GPIO_EXTI_Callback+0x244>)
 8000380:	4820      	ldr	r0, [pc, #128]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 8000382:	f002 fef0 	bl	8003166 <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000386:	e02c      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 4:
    HAL_UART_Transmit(&huart1, "4",
 8000388:	f04f 33ff 	mov.w	r3, #4294967295
 800038c:	2201      	movs	r2, #1
 800038e:	4920      	ldr	r1, [pc, #128]	; (8000410 <HAL_GPIO_EXTI_Callback+0x248>)
 8000390:	481c      	ldr	r0, [pc, #112]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 8000392:	f002 fee8 	bl	8003166 <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 8000396:	e024      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 5:
    HAL_UART_Transmit(&huart1, "5",
 8000398:	f04f 33ff 	mov.w	r3, #4294967295
 800039c:	2201      	movs	r2, #1
 800039e:	491d      	ldr	r1, [pc, #116]	; (8000414 <HAL_GPIO_EXTI_Callback+0x24c>)
 80003a0:	4818      	ldr	r0, [pc, #96]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 80003a2:	f002 fee0 	bl	8003166 <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 80003a6:	e01c      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 6:
    HAL_UART_Transmit(&huart1, "6",
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	2201      	movs	r2, #1
 80003ae:	491a      	ldr	r1, [pc, #104]	; (8000418 <HAL_GPIO_EXTI_Callback+0x250>)
 80003b0:	4814      	ldr	r0, [pc, #80]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 80003b2:	f002 fed8 	bl	8003166 <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 80003b6:	e014      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 7:
    HAL_UART_Transmit(&huart1, "7",
 80003b8:	f04f 33ff 	mov.w	r3, #4294967295
 80003bc:	2201      	movs	r2, #1
 80003be:	4917      	ldr	r1, [pc, #92]	; (800041c <HAL_GPIO_EXTI_Callback+0x254>)
 80003c0:	4810      	ldr	r0, [pc, #64]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 80003c2:	f002 fed0 	bl	8003166 <HAL_UART_Transmit>
                        1,
                        HAL_MAX_DELAY);
    /* code */
    break;
 80003c6:	e00c      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 8:
    HAL_UART_Transmit(&huart1, "8",
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	2201      	movs	r2, #1
 80003ce:	4914      	ldr	r1, [pc, #80]	; (8000420 <HAL_GPIO_EXTI_Callback+0x258>)
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <HAL_GPIO_EXTI_Callback+0x23c>)
 80003d2:	f002 fec8 	bl	8003166 <HAL_UART_Transmit>
                          1,
                          HAL_MAX_DELAY);
    /* code */
    break;
 80003d6:	e004      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
    return;
 80003d8:	bf00      	nop
 80003da:	e002      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
    return; // Reject invalid scan
 80003dc:	bf00      	nop
 80003de:	e000      	b.n	80003e2 <HAL_GPIO_EXTI_Callback+0x21a>
  case 16:
    /* code */
    break;

  default:
    break;
 80003e0:	bf00      	nop
  }
}
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	20000454 	.word	0x20000454
 80003ec:	08004208 	.word	0x08004208
 80003f0:	48000c00 	.word	0x48000c00
 80003f4:	08004210 	.word	0x08004210
 80003f8:	08004220 	.word	0x08004220
 80003fc:	080041f8 	.word	0x080041f8
 8000400:	080041d8 	.word	0x080041d8
 8000404:	200000e0 	.word	0x200000e0
 8000408:	080041dc 	.word	0x080041dc
 800040c:	080041e0 	.word	0x080041e0
 8000410:	080041e4 	.word	0x080041e4
 8000414:	080041e8 	.word	0x080041e8
 8000418:	080041ec 	.word	0x080041ec
 800041c:	080041f0 	.word	0x080041f0
 8000420:	080041f4 	.word	0x080041f4

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 fbd8 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f826 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000430:	f000 f958 	bl	80006e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000434:	f000 f886 	bl	8000544 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000438:	f000 f8c4 	bl	80005c4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800043c:	f000 f930 	bl	80006a0 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000440:	f000 f8fe 	bl	8000640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800044a:	480b      	ldr	r0, [pc, #44]	; (8000478 <main+0x54>)
 800044c:	f000 ff46 	bl	80012dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000456:	4808      	ldr	r0, [pc, #32]	; (8000478 <main+0x54>)
 8000458:	f000 ff40 	bl	80012dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <main+0x54>)
 8000464:	f000 ff3a 	bl	80012dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	4802      	ldr	r0, [pc, #8]	; (8000478 <main+0x54>)
 8000470:	f000 ff34 	bl	80012dc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000474:	e7fe      	b.n	8000474 <main+0x50>
 8000476:	bf00      	nop
 8000478:	48000400 	.word	0x48000400

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b09e      	sub	sp, #120	; 0x78
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000486:	2228      	movs	r2, #40	; 0x28
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f003 fe90 	bl	80041b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
 800049e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a0:	463b      	mov	r3, r7
 80004a2:	223c      	movs	r2, #60	; 0x3c
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fe82 	bl	80041b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004ac:	2303      	movs	r3, #3
 80004ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ba:	2301      	movs	r3, #1
 80004bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004be:	2310      	movs	r3, #16
 80004c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c2:	2302      	movs	r3, #2
 80004c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 f928 	bl	800172c <HAL_RCC_OscConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004e2:	f000 f9b7 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	230f      	movs	r3, #15
 80004e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ea:	2302      	movs	r3, #2
 80004ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000500:	2101      	movs	r1, #1
 8000502:	4618      	mov	r0, r3
 8000504:	f002 f950 	bl	80027a8 <HAL_RCC_ClockConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800050e:	f000 f9a1 	bl	8000854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <SystemClock_Config+0xc4>)
 8000514:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800051e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000522:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000524:	463b      	mov	r3, r7
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fb74 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000532:	f000 f98f 	bl	8000854 <Error_Handler>
  }
}
 8000536:	bf00      	nop
 8000538:	3778      	adds	r7, #120	; 0x78
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	00020021 	.word	0x00020021

08000544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x74>)
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <MX_I2C1_Init+0x78>)
 800054c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <MX_I2C1_Init+0x74>)
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <MX_I2C1_Init+0x7c>)
 8000552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_I2C1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <MX_I2C1_Init+0x74>)
 800055c:	2201      	movs	r2, #1
 800055e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_I2C1_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_I2C1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_I2C1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_I2C1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_I2C1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800057e:	480e      	ldr	r0, [pc, #56]	; (80005b8 <MX_I2C1_Init+0x74>)
 8000580:	f000 fedc 	bl	800133c <HAL_I2C_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800058a:	f000 f963 	bl	8000854 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800058e:	2100      	movs	r1, #0
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <MX_I2C1_Init+0x74>)
 8000592:	f000 ff62 	bl	800145a <HAL_I2CEx_ConfigAnalogFilter>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800059c:	f000 f95a 	bl	8000854 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005a0:	2100      	movs	r1, #0
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_I2C1_Init+0x74>)
 80005a4:	f000 ffa4 	bl	80014f0 <HAL_I2CEx_ConfigDigitalFilter>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ae:	f000 f951 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028
 80005bc:	40005400 	.word	0x40005400
 80005c0:	2000090e 	.word	0x2000090e

080005c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_SPI1_Init+0x74>)
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_SPI1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_SPI1_Init+0x74>)
 80005d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MX_SPI1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_SPI1_Init+0x74>)
 80005de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_SPI1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_SPI1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_SPI1_Init+0x74>)
 80005f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_SPI1_Init+0x74>)
 80005fa:	2208      	movs	r2, #8
 80005fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_SPI1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_SPI1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_SPI1_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_SPI1_Init+0x74>)
 8000612:	2207      	movs	r2, #7
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_SPI1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_SPI1_Init+0x74>)
 800061e:	2208      	movs	r2, #8
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_SPI1_Init+0x74>)
 8000624:	f002 fca6 	bl	8002f74 <HAL_SPI_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800062e:	f000 f911 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000007c 	.word	0x2000007c
 800063c:	40013000 	.word	0x40013000

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_USART1_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800064c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x58>)
 8000684:	f002 fd21 	bl	80030ca <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 f8e1 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000e0 	.word	0x200000e0
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_USB_PCD_Init+0x3c>)
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <MX_USB_PCD_Init+0x40>)
 80006a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USB_PCD_Init+0x3c>)
 80006ac:	2208      	movs	r2, #8
 80006ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_USB_PCD_Init+0x3c>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USB_PCD_Init+0x3c>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_USB_PCD_Init+0x3c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USB_PCD_Init+0x3c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_USB_PCD_Init+0x3c>)
 80006ca:	f000 ff5d 	bl	8001588 <HAL_PCD_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006d4:	f000 f8be 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000168 	.word	0x20000168
 80006e0:	40005c00 	.word	0x40005c00

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	4b52      	ldr	r3, [pc, #328]	; (8000844 <MX_GPIO_Init+0x160>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a51      	ldr	r2, [pc, #324]	; (8000844 <MX_GPIO_Init+0x160>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <MX_GPIO_Init+0x160>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <MX_GPIO_Init+0x160>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a4b      	ldr	r2, [pc, #300]	; (8000844 <MX_GPIO_Init+0x160>)
 8000718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b49      	ldr	r3, [pc, #292]	; (8000844 <MX_GPIO_Init+0x160>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072a:	4b46      	ldr	r3, [pc, #280]	; (8000844 <MX_GPIO_Init+0x160>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a45      	ldr	r2, [pc, #276]	; (8000844 <MX_GPIO_Init+0x160>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b43      	ldr	r3, [pc, #268]	; (8000844 <MX_GPIO_Init+0x160>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b40      	ldr	r3, [pc, #256]	; (8000844 <MX_GPIO_Init+0x160>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a3f      	ldr	r2, [pc, #252]	; (8000844 <MX_GPIO_Init+0x160>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <MX_GPIO_Init+0x160>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <MX_GPIO_Init+0x160>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a39      	ldr	r2, [pc, #228]	; (8000844 <MX_GPIO_Init+0x160>)
 8000760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <MX_GPIO_Init+0x160>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <MX_GPIO_Init+0x160>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a33      	ldr	r2, [pc, #204]	; (8000844 <MX_GPIO_Init+0x160>)
 8000778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <MX_GPIO_Init+0x160>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800078a:	2200      	movs	r2, #0
 800078c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000790:	482d      	ldr	r0, [pc, #180]	; (8000848 <MX_GPIO_Init+0x164>)
 8000792:	f000 fda3 	bl	80012dc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	210f      	movs	r1, #15
 800079a:	482c      	ldr	r0, [pc, #176]	; (800084c <MX_GPIO_Init+0x168>)
 800079c:	f000 fd9e 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80007a0:	2337      	movs	r3, #55	; 0x37
 80007a2:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4824      	ldr	r0, [pc, #144]	; (8000848 <MX_GPIO_Init+0x164>)
 80007b6:	f000 fbff 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007ba:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007be:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	481d      	ldr	r0, [pc, #116]	; (8000848 <MX_GPIO_Init+0x164>)
 80007d4:	f000 fbf0 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d8:	2301      	movs	r3, #1
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fbe3 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007fe:	2302      	movs	r3, #2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_GPIO_Init+0x16c>)
 800080a:	f000 fbd5 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800080e:	230f      	movs	r3, #15
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <MX_GPIO_Init+0x168>)
 8000826:	f000 fbc7 	bl	8000fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f000 fb15 	bl	8000e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000834:	2028      	movs	r0, #40	; 0x28
 8000836:	f000 fb2e 	bl	8000e96 <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3730      	adds	r7, #48	; 0x30
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	48001000 	.word	0x48001000
 800084c:	48000c00 	.word	0x48000c00
 8000850:	48000400 	.word	0x48000400

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x44>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000896:	2006      	movs	r0, #6
 8000898:	f000 fad6 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_I2C_MspInit+0x7c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d127      	bne.n	800091a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x80>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a16      	ldr	r2, [pc, #88]	; (8000928 <HAL_I2C_MspInit+0x80>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_I2C_MspInit+0x80>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008e2:	23c0      	movs	r3, #192	; 0xc0
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	2312      	movs	r3, #18
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f2:	2304      	movs	r3, #4
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <HAL_I2C_MspInit+0x84>)
 80008fe:	f000 fb5b 	bl	8000fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_I2C_MspInit+0x80>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_I2C_MspInit+0x80>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x80>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	48000400 	.word	0x48000400

08000930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <HAL_SPI_MspInit+0x7c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d128      	bne.n	80009a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_SPI_MspInit+0x80>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000982:	23e0      	movs	r3, #224	; 0xe0
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000992:	2305      	movs	r3, #5
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a0:	f000 fb0a 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40013000 	.word	0x40013000
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <HAL_UART_MspInit+0x8c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12f      	bne.n	8000a36 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6193      	str	r3, [r2, #24]
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x90>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a06:	2330      	movs	r3, #48	; 0x30
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_UART_MspInit+0x94>)
 8000a22:	f000 fac9 	bl	8000fb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2025      	movs	r0, #37	; 0x25
 8000a2c:	f000 fa17 	bl	8000e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a30:	2025      	movs	r0, #37	; 0x25
 8000a32:	f000 fa30 	bl	8000e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40013800 	.word	0x40013800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000800 	.word	0x48000800

08000a4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_PCD_MspInit+0x80>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d129      	bne.n	8000ac2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_PCD_MspInit+0x84>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_PCD_MspInit+0x84>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_PCD_MspInit+0x84>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a98:	230e      	movs	r3, #14
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f000 fa87 	bl	8000fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_PCD_MspInit+0x84>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_PCD_MspInit+0x84>)
 8000ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_PCD_MspInit+0x84>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40005c00 	.word	0x40005c00
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f8a2 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USART1_IRQHandler+0x10>)
 8000b2e:	f002 fba5 	bl	800327c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000e0 	.word	0x200000e0

08000b3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000b40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b44:	f000 fbe2 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b4c:	f000 fbde 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000b50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b54:	f000 fbda 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000b58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b5c:	f000 fbd6 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f003 fad7 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fc33 	bl	8000424 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bcc:	08004268 	.word	0x08004268
  ldr r2, =_sbss
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd4:	2000045c 	.word	0x2000045c

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f92b 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe32 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f943 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f90b 	bl	8000e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000458 	.word	0x20000458

08000c90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000458 	.word	0x20000458

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e14:	d301      	bcc.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00f      	b.n	8000e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <SysTick_Config+0x40>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	210f      	movs	r1, #15
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f7ff ff8e 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <SysTick_Config+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <SysTick_Config+0x40>)
 8000e34:	2207      	movs	r2, #7
 8000e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	e000e010 	.word	0xe000e010

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff29 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e70:	f7ff ff3e 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff8e 	bl	8000d9c <NVIC_EncodePriority>
 8000e80:	4602      	mov	r2, r0
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff31 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffa2 	bl	8000e04 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d008      	beq.n	8000eee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2204      	movs	r2, #4
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e020      	b.n	8000f30 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 020e 	bic.w	r2, r2, #14
 8000efc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d005      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2204      	movs	r2, #4
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e027      	b.n	8000fae <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 020e 	bic.w	r2, r2, #14
 8000f6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0201 	bic.w	r2, r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f86:	2101      	movs	r1, #1
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	4798      	blx	r3
    } 
  }
  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e154      	b.n	8001272 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8146 	beq.w	800126c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d005      	beq.n	8000ff8 <HAL_GPIO_Init+0x40>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d130      	bne.n	800105a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800102e:	2201      	movs	r2, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	f003 0201 	and.w	r2, r3, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b03      	cmp	r3, #3
 8001064:	d017      	beq.n	8001096 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d123      	bne.n	80010ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	6939      	ldr	r1, [r7, #16]
 80010e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0203 	and.w	r2, r3, #3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 80a0 	beq.w	800126c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	4b58      	ldr	r3, [pc, #352]	; (8001290 <HAL_GPIO_Init+0x2d8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a57      	ldr	r2, [pc, #348]	; (8001290 <HAL_GPIO_Init+0x2d8>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b55      	ldr	r3, [pc, #340]	; (8001290 <HAL_GPIO_Init+0x2d8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <HAL_GPIO_Init+0x2dc>)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800116e:	d019      	beq.n	80011a4 <HAL_GPIO_Init+0x1ec>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a49      	ldr	r2, [pc, #292]	; (8001298 <HAL_GPIO_Init+0x2e0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d013      	beq.n	80011a0 <HAL_GPIO_Init+0x1e8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a48      	ldr	r2, [pc, #288]	; (800129c <HAL_GPIO_Init+0x2e4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d00d      	beq.n	800119c <HAL_GPIO_Init+0x1e4>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_GPIO_Init+0x2e8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d007      	beq.n	8001198 <HAL_GPIO_Init+0x1e0>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_GPIO_Init+0x2ec>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d101      	bne.n	8001194 <HAL_GPIO_Init+0x1dc>
 8001190:	2304      	movs	r3, #4
 8001192:	e008      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 8001194:	2305      	movs	r3, #5
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 8001198:	2303      	movs	r3, #3
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a4:	2300      	movs	r3, #0
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b6:	4937      	ldr	r1, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x2dc>)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c4:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e8:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001212:	4a25      	ldr	r2, [pc, #148]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800123c:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_GPIO_Init+0x2f0>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	f47f aea3 	bne.w	8000fc8 <HAL_GPIO_Init+0x10>
  }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40021000 	.word	0x40021000
 8001294:	40010000 	.word	0x40010000
 8001298:	48000400 	.word	0x48000400
 800129c:	48000800 	.word	0x48000800
 80012a0:	48000c00 	.word	0x48000c00
 80012a4:	48001000 	.word	0x48001000
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	4013      	ands	r3, r2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff4c 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e081      	b.n	8001452 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff faa0 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800138c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800139c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e006      	b.n	80013c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d104      	bne.n	80013d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69d9      	ldr	r1, [r3, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2220      	movs	r2, #32
 800143e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b20      	cmp	r3, #32
 800146e:	d138      	bne.n	80014e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800147a:	2302      	movs	r3, #2
 800147c:	e032      	b.n	80014e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2224      	movs	r2, #36	; 0x24
 800148a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2220      	movs	r2, #32
 80014d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
  }
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b20      	cmp	r3, #32
 8001504:	d139      	bne.n	800157a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001510:	2302      	movs	r3, #2
 8001512:	e033      	b.n	800157c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001542:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2220      	movs	r2, #32
 800156a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800157a:	2302      	movs	r3, #2
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	b08b      	sub	sp, #44	; 0x2c
 800158c:	af06      	add	r7, sp, #24
 800158e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0c4      	b.n	8001724 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fa4c 	bl	8000a4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2203      	movs	r2, #3
 80015b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fd94 	bl	80040ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e040      	b.n	800164e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	3301      	adds	r3, #1
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3303      	adds	r3, #3
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3338      	adds	r3, #56	; 0x38
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	333c      	adds	r3, #60	; 0x3c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	3340      	adds	r3, #64	; 0x40
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	d3b9      	bcc.n	80015cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	e044      	b.n	80016e8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3b5      	bcc.n	800165e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	687e      	ldr	r6, [r7, #4]
 80016fa:	466d      	mov	r5, sp
 80016fc:	f106 0410 	add.w	r4, r6, #16
 8001700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	602b      	str	r3, [r5, #0]
 8001708:	1d33      	adds	r3, r6, #4
 800170a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f002 fd09 	bl	8004124 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001732:	af00      	add	r7, sp, #0
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f001 b823 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 817d 	beq.w	8001a62 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001768:	4bbc      	ldr	r3, [pc, #752]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b04      	cmp	r3, #4
 8001772:	d00c      	beq.n	800178e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001774:	4bb9      	ldr	r3, [pc, #740]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d15c      	bne.n	800183a <HAL_RCC_OscConfig+0x10e>
 8001780:	4bb6      	ldr	r3, [pc, #728]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d155      	bne.n	800183a <HAL_RCC_OscConfig+0x10e>
 800178e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001792:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_OscConfig+0x94>
 80017ba:	4ba8      	ldr	r3, [pc, #672]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e015      	b.n	80017ec <HAL_RCC_OscConfig+0xc0>
 80017c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017e8:	4b9c      	ldr	r3, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017f8:	fa92 f2a2 	rbit	r2, r2
 80017fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001800:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001804:	fab2 f282 	clz	r2, r2
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	f002 021f 	and.w	r2, r2, #31
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 811f 	beq.w	8001a60 <HAL_RCC_OscConfig+0x334>
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 8116 	bne.w	8001a60 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f000 bfaf 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x12e>
 800184c:	4b83      	ldr	r3, [pc, #524]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a82      	ldr	r2, [pc, #520]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e036      	b.n	80018c8 <HAL_RCC_OscConfig+0x19c>
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x158>
 800186a:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7b      	ldr	r2, [pc, #492]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a78      	ldr	r2, [pc, #480]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800187c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e021      	b.n	80018c8 <HAL_RCC_OscConfig+0x19c>
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x184>
 8001896:	4b71      	ldr	r3, [pc, #452]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a70      	ldr	r2, [pc, #448]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6d      	ldr	r2, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0x19c>
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c8:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f023 020f 	bic.w	r2, r3, #15
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	495f      	ldr	r1, [pc, #380]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d059      	beq.n	80019a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f9cd 	bl	8000c90 <HAL_GetTick>
 80018f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff f9c8 	bl	8000c90 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	; 0x64
 800190a:	d902      	bls.n	8001912 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	f000 bf43 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
 8001912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001916:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001926:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	095b      	lsrs	r3, r3, #5
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <HAL_RCC_OscConfig+0x218>
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	e015      	b.n	8001970 <HAL_RCC_OscConfig+0x244>
 8001944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001948:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001960:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001974:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001978:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800197c:	fa92 f2a2 	rbit	r2, r2
 8001980:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001984:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001988:	fab2 f282 	clz	r2, r2
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	f042 0220 	orr.w	r2, r2, #32
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	f002 021f 	and.w	r2, r2, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ab      	beq.n	80018fc <HAL_RCC_OscConfig+0x1d0>
 80019a4:	e05d      	b.n	8001a62 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff f973 	bl	8000c90 <HAL_GetTick>
 80019aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f96e 	bl	8000c90 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d902      	bls.n	80019c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	f000 bee9 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
 80019c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2cc>
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	e015      	b.n	8001a24 <HAL_RCC_OscConfig+0x2f8>
 80019f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a10:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a28:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a2c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a30:	fa92 f2a2 	rbit	r2, r2
 8001a34:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ab      	bne.n	80019b0 <HAL_RCC_OscConfig+0x284>
 8001a58:	e003      	b.n	8001a62 <HAL_RCC_OscConfig+0x336>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 817d 	beq.w	8001d72 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a78:	4ba6      	ldr	r3, [pc, #664]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a84:	4ba3      	ldr	r3, [pc, #652]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d172      	bne.n	8001b76 <HAL_RCC_OscConfig+0x44a>
 8001a90:	4ba0      	ldr	r3, [pc, #640]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d16c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x44a>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001aae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_RCC_OscConfig+0x3a0>
 8001ac6:	4b93      	ldr	r3, [pc, #588]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e013      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c8>
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ae4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001af0:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	2202      	movs	r2, #2
 8001af6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001afa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001afe:	fa92 f2a2 	rbit	r2, r2
 8001b02:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b06:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b0a:	fab2 f282 	clz	r2, r2
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f002 021f 	and.w	r2, r2, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_RCC_OscConfig+0x410>
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f000 be2e 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b75      	ldr	r3, [pc, #468]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	21f8      	movs	r1, #248	; 0xf8
 8001b52:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b5a:	fa91 f1a1 	rbit	r1, r1
 8001b5e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b62:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b66:	fab1 f181 	clz	r1, r1
 8001b6a:	b2c9      	uxtb	r1, r1
 8001b6c:	408b      	lsls	r3, r1
 8001b6e:	4969      	ldr	r1, [pc, #420]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b74:	e0fd      	b.n	8001d72 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8088 	beq.w	8001c98 <HAL_RCC_OscConfig+0x56c>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f86c 	bl	8000c90 <HAL_GetTick>
 8001bb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f867 	bl	8000c90 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d902      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	f000 bde2 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001be6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_OscConfig+0x4d8>
 8001bfe:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e013      	b.n	8001c2c <HAL_RCC_OscConfig+0x500>
 8001c04:	2302      	movs	r3, #2
 8001c06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c36:	fa92 f2a2 	rbit	r2, r2
 8001c3a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f002 021f 	and.w	r2, r2, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0af      	beq.n	8001bbe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	21f8      	movs	r1, #248	; 0xf8
 8001c74:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c7c:	fa91 f1a1 	rbit	r1, r1
 8001c80:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c84:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c88:	fab1 f181 	clz	r1, r1
 8001c8c:	b2c9      	uxtb	r1, r1
 8001c8e:	408b      	lsls	r3, r1
 8001c90:	4920      	ldr	r1, [pc, #128]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
 8001c96:	e06c      	b.n	8001d72 <HAL_RCC_OscConfig+0x646>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001caa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ffe4 	bl	8000c90 <HAL_GetTick>
 8001cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cce:	f7fe ffdf 	bl	8000c90 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d902      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f000 bd5a 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d104      	bne.n	8001d18 <HAL_RCC_OscConfig+0x5ec>
 8001d0e:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <HAL_RCC_OscConfig+0x5e8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	e015      	b.n	8001d40 <HAL_RCC_OscConfig+0x614>
 8001d14:	40021000 	.word	0x40021000
 8001d18:	2302      	movs	r3, #2
 8001d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d3c:	4bc8      	ldr	r3, [pc, #800]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	2202      	movs	r2, #2
 8001d42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d4a:	fa92 f2a2 	rbit	r2, r2
 8001d4e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f042 0220 	orr.w	r2, r2, #32
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f002 021f 	and.w	r2, r2, #31
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ad      	bne.n	8001cce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8110 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d079      	beq.n	8001e8c <HAL_RCC_OscConfig+0x760>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	4bab      	ldr	r3, [pc, #684]	; (8002064 <HAL_RCC_OscConfig+0x938>)
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7fe ff65 	bl	8000c90 <HAL_GetTick>
 8001dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7fe ff60 	bl	8000c90 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d902      	bls.n	8001de2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f000 bcdb 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3c:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8001e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e48:	2102      	movs	r1, #2
 8001e4a:	6019      	str	r1, [r3, #0]
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f1a3 	rbit	r1, r3
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e62:	6019      	str	r1, [r3, #0]
  return result;
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0a0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x6a0>
 8001e8a:	e08d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x87c>
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eae:	601a      	str	r2, [r3, #0]
  return result;
 8001eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eb8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x938>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7fe fedf 	bl	8000c90 <HAL_GetTick>
 8001ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7fe feda 	bl	8000c90 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d902      	bls.n	8001eee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f000 bc55 	b.w	8002798 <HAL_RCC_OscConfig+0x106c>
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	fa93 f2a3 	rbit	r2, r3
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f3e:	2202      	movs	r2, #2
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8001f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f66:	2102      	movs	r1, #2
 8001f68:	6019      	str	r1, [r3, #0]
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f1a3 	rbit	r1, r3
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f80:	6019      	str	r1, [r3, #0]
  return result;
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d197      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 81a1 	beq.w	8002300 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d116      	bne.n	8001ffe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fda:	61d3      	str	r3, [r2, #28]
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ff6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <HAL_RCC_OscConfig+0x93c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11a      	bne.n	8002040 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x93c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_RCC_OscConfig+0x93c>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7fe fe3b 	bl	8000c90 <HAL_GetTick>
 800201a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	e009      	b.n	8002034 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe fe36 	bl	8000c90 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e3b1      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_RCC_OscConfig+0x93c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ef      	beq.n	8002020 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10d      	bne.n	800206c <HAL_RCC_OscConfig+0x940>
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a02      	ldr	r2, [pc, #8]	; (8002060 <HAL_RCC_OscConfig+0x934>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6213      	str	r3, [r2, #32]
 800205c:	e03c      	b.n	80020d8 <HAL_RCC_OscConfig+0x9ac>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	10908120 	.word	0x10908120
 8002068:	40007000 	.word	0x40007000
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10c      	bne.n	8002096 <HAL_RCC_OscConfig+0x96a>
 800207c:	4bc1      	ldr	r3, [pc, #772]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4ac0      	ldr	r2, [pc, #768]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	4bbe      	ldr	r3, [pc, #760]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4abd      	ldr	r2, [pc, #756]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	6213      	str	r3, [r2, #32]
 8002094:	e020      	b.n	80020d8 <HAL_RCC_OscConfig+0x9ac>
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x994>
 80020a6:	4bb7      	ldr	r3, [pc, #732]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4ab6      	ldr	r2, [pc, #728]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4bb4      	ldr	r3, [pc, #720]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4ab3      	ldr	r2, [pc, #716]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0x9ac>
 80020c0:	4bb0      	ldr	r3, [pc, #704]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4aaf      	ldr	r2, [pc, #700]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	4bad      	ldr	r3, [pc, #692]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4aac      	ldr	r2, [pc, #688]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80020d2:	f023 0304 	bic.w	r3, r3, #4
 80020d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8081 	beq.w	80021ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7fe fdd1 	bl	8000c90 <HAL_GetTick>
 80020ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7fe fdcc 	bl	8000c90 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e345      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002152:	601a      	str	r2, [r3, #0]
  return result;
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800215c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d102      	bne.n	8002178 <HAL_RCC_OscConfig+0xa4c>
 8002172:	4b84      	ldr	r3, [pc, #528]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	e013      	b.n	80021a0 <HAL_RCC_OscConfig+0xa74>
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002180:	2202      	movs	r2, #2
 8002182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002188:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4b79      	ldr	r3, [pc, #484]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021a8:	2102      	movs	r1, #2
 80021aa:	6011      	str	r1, [r2, #0]
 80021ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fa92 f1a2 	rbit	r1, r2
 80021ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021c2:	6011      	str	r1, [r2, #0]
  return result;
 80021c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d084      	beq.n	80020f4 <HAL_RCC_OscConfig+0x9c8>
 80021ea:	e07f      	b.n	80022ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7fe fd50 	bl	8000c90 <HAL_GetTick>
 80021f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	e00b      	b.n	800220e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fd4b 	bl	8000c90 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e2c4      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002216:	2202      	movs	r2, #2
 8002218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	fa93 f2a3 	rbit	r2, r3
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800223a:	2202      	movs	r2, #2
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f2a3 	rbit	r2, r3
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002254:	601a      	str	r2, [r3, #0]
  return result;
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800225e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d102      	bne.n	800227a <HAL_RCC_OscConfig+0xb4e>
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	e013      	b.n	80022a2 <HAL_RCC_OscConfig+0xb76>
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022aa:	2102      	movs	r1, #2
 80022ac:	6011      	str	r1, [r2, #0]
 80022ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	fa92 f1a2 	rbit	r1, r2
 80022bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022c4:	6011      	str	r1, [r2, #0]
  return result;
 80022c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	fab2 f282 	clz	r2, r2
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	f002 021f 	and.w	r2, r2, #31
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d184      	bne.n	80021f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d105      	bne.n	8002300 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a22      	ldr	r2, [pc, #136]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 80022fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8242 	beq.w	8002796 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_RCC_OscConfig+0xc58>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	f000 8213 	beq.w	8002746 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f040 8162 	bne.w	80025f6 <HAL_RCC_OscConfig+0xeca>
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800233a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800233e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002356:	601a      	str	r2, [r3, #0]
  return result;
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002360:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800236c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	461a      	mov	r2, r3
 8002374:	2300      	movs	r3, #0
 8002376:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fc8a 	bl	8000c90 <HAL_GetTick>
 800237c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	e00c      	b.n	800239c <HAL_RCC_OscConfig+0xc70>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fc82 	bl	8000c90 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1fd      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023c0:	601a      	str	r2, [r3, #0]
  return result;
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_OscConfig+0xcba>
 80023e0:	4bb0      	ldr	r3, [pc, #704]	; (80026a4 <HAL_RCC_OscConfig+0xf78>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	e027      	b.n	8002436 <HAL_RCC_OscConfig+0xd0a>
 80023e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002406:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	4b9c      	ldr	r3, [pc, #624]	; (80026a4 <HAL_RCC_OscConfig+0xf78>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800243a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800243e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002442:	6011      	str	r1, [r2, #0]
 8002444:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002448:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	fa92 f1a2 	rbit	r1, r2
 8002452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002456:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800245a:	6011      	str	r1, [r2, #0]
  return result;
 800245c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002460:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	fab2 f282 	clz	r2, r2
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f042 0220 	orr.w	r2, r2, #32
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	f002 021f 	and.w	r2, r2, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f202 	lsl.w	r2, r1, r2
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d182      	bne.n	8002388 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0xf78>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	497f      	ldr	r1, [pc, #508]	; (80026a4 <HAL_RCC_OscConfig+0xf78>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024ce:	601a      	str	r2, [r3, #0]
  return result;
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	461a      	mov	r2, r3
 80024ec:	2301      	movs	r3, #1
 80024ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fbce 	bl	8000c90 <HAL_GetTick>
 80024f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	e009      	b.n	800250e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe fbc9 	bl	8000c90 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e144      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002532:	601a      	str	r2, [r3, #0]
  return result;
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800253c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0xe2c>
 8002552:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <HAL_RCC_OscConfig+0xf78>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e027      	b.n	80025a8 <HAL_RCC_OscConfig+0xe7c>
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002560:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_OscConfig+0xf78>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fa92 f1a2 	rbit	r1, r2
 80025c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0220 	orr.w	r2, r2, #32
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d082      	beq.n	80024fa <HAL_RCC_OscConfig+0xdce>
 80025f4:	e0cf      	b.n	8002796 <HAL_RCC_OscConfig+0x106a>
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800261a:	601a      	str	r2, [r3, #0]
  return result;
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002624:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	461a      	mov	r2, r3
 8002638:	2300      	movs	r3, #0
 800263a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fb28 	bl	8000c90 <HAL_GetTick>
 8002640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	e009      	b.n	800265a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fb23 	bl	8000c90 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e09e      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800267e:	601a      	str	r2, [r3, #0]
  return result;
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002688:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d104      	bne.n	80026a8 <HAL_RCC_OscConfig+0xf7c>
 800269e:	4b01      	ldr	r3, [pc, #4]	; (80026a4 <HAL_RCC_OscConfig+0xf78>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e029      	b.n	80026f8 <HAL_RCC_OscConfig+0xfcc>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f2a3 	rbit	r2, r3
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	fa93 f2a3 	rbit	r2, r3
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x1078>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026fc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002704:	6011      	str	r1, [r2, #0]
 8002706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800270a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	fa92 f1a2 	rbit	r1, r2
 8002714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002718:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800271c:	6011      	str	r1, [r2, #0]
  return result;
 800271e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002722:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	fab2 f282 	clz	r2, r2
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	f042 0220 	orr.w	r2, r2, #32
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f002 021f 	and.w	r2, r2, #31
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f202 	lsl.w	r2, r1, r2
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d180      	bne.n	8002646 <HAL_RCC_OscConfig+0xf1a>
 8002744:	e027      	b.n	8002796 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e01e      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_OscConfig+0x1078>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002762:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002766:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	429a      	cmp	r2, r3
 8002778:	d10b      	bne.n	8002792 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800277a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800277e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000

080027a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b09e      	sub	sp, #120	; 0x78
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e162      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b90      	ldr	r3, [pc, #576]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b8d      	ldr	r3, [pc, #564]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	498b      	ldr	r1, [pc, #556]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e14a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fc:	4b82      	ldr	r3, [pc, #520]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	497f      	ldr	r1, [pc, #508]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80dc 	beq.w	80029d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d13c      	bne.n	800289e <HAL_RCC_ClockConfig+0xf6>
 8002824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002828:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <HAL_RCC_ClockConfig+0xa6>
 8002848:	4b6f      	ldr	r3, [pc, #444]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	e00f      	b.n	800286e <HAL_RCC_ClockConfig+0xc6>
 800284e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002852:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	667b      	str	r3, [r7, #100]	; 0x64
 800285c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002860:	663b      	str	r3, [r7, #96]	; 0x60
 8002862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002872:	65ba      	str	r2, [r7, #88]	; 0x58
 8002874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002876:	fa92 f2a2 	rbit	r2, r2
 800287a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800287c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f002 021f 	and.w	r2, r2, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d17b      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0f3      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d13c      	bne.n	8002920 <HAL_RCC_ClockConfig+0x178>
 80028a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x128>
 80028ca:	4b4f      	ldr	r3, [pc, #316]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	e00f      	b.n	80028f0 <HAL_RCC_ClockConfig+0x148>
 80028d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
 80028de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e2:	643b      	str	r3, [r7, #64]	; 0x40
 80028e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	4b46      	ldr	r3, [pc, #280]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80028f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f042 0220 	orr.w	r2, r2, #32
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13a      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b2      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
 8002920:	2302      	movs	r3, #2
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1a0>
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e00d      	b.n	8002964 <HAL_RCC_ClockConfig+0x1bc>
 8002948:	2302      	movs	r3, #2
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
 8002954:	2302      	movs	r3, #2
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	2202      	movs	r2, #2
 8002966:	61ba      	str	r2, [r7, #24]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	fa92 f2a2 	rbit	r2, r2
 800296e:	617a      	str	r2, [r7, #20]
  return result;
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	fab2 f282 	clz	r2, r2
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f002 021f 	and.w	r2, r2, #31
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f202 	lsl.w	r2, r1, r2
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e079      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	491a      	ldr	r1, [pc, #104]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a4:	f7fe f974 	bl	8000c90 <HAL_GetTick>
 80029a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7fe f970 	bl	8000c90 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e061      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d214      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0207 	bic.w	r2, r3, #7
 80029ea:	4906      	ldr	r1, [pc, #24]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e040      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	491a      	ldr	r1, [pc, #104]	; (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4912      	ldr	r1, [pc, #72]	; (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a4a:	f000 f829 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a58:	22f0      	movs	r2, #240	; 0xf0
 8002a5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	fa92 f2a2 	rbit	r2, r2
 8002a62:	60fa      	str	r2, [r7, #12]
  return result;
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	fab2 f282 	clz	r2, r2
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	40d3      	lsrs	r3, r2
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x2ec>)
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	fa21 f303 	lsr.w	r3, r1, r3
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <HAL_RCC_ClockConfig+0x2f0>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_RCC_ClockConfig+0x2f4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe f8c2 	bl	8000c08 <HAL_InitTick>
  
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3778      	adds	r7, #120	; 0x78
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08004228 	.word	0x08004228
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b08b      	sub	sp, #44	; 0x2c
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ace:	e03c      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	e03c      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002adc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ae0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	fa92 f2a2 	rbit	r2, r2
 8002ae8:	607a      	str	r2, [r7, #4]
  return result;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	40d3      	lsrs	r3, r2
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	220f      	movs	r2, #15
 8002b04:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	fa92 f2a2 	rbit	r2, r2
 8002b0c:	60fa      	str	r2, [r7, #12]
  return result;
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	40d3      	lsrs	r3, r2
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e004      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	623b      	str	r3, [r7, #32]
      break;
 8002b48:	e002      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b4c:	623b      	str	r3, [r7, #32]
      break;
 8002b4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b50:	6a3b      	ldr	r3, [r7, #32]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	372c      	adds	r7, #44	; 0x2c
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	007a1200 	.word	0x007a1200
 8002b68:	08004240 	.word	0x08004240
 8002b6c:	08004250 	.word	0x08004250
 8002b70:	003d0900 	.word	0x003d0900

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000

08002b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b92:	f7ff ffef 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b96:	4601      	mov	r1, r0
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ba0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ba4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	fa92 f2a2 	rbit	r2, r2
 8002bac:	603a      	str	r2, [r7, #0]
  return result;
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	fab2 f282 	clz	r2, r2
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	40d3      	lsrs	r3, r2
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08004238 	.word	0x08004238

08002bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bd6:	f7ff ffcd 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bda:	4601      	mov	r1, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002be4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002be8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	fa92 f2a2 	rbit	r2, r2
 8002bf0:	603a      	str	r2, [r7, #0]
  return result;
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	40d3      	lsrs	r3, r2
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08004238 	.word	0x08004238

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b092      	sub	sp, #72	; 0x48
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80d4 	beq.w	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b4e      	ldr	r3, [pc, #312]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10e      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	61d3      	str	r3, [r2, #28]
 8002c50:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b42      	ldr	r3, [pc, #264]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a41      	ldr	r2, [pc, #260]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe f809 	bl	8000c90 <HAL_GetTick>
 8002c7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7fe f805 	bl	8000c90 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e169      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b38      	ldr	r3, [pc, #224]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8084 	beq.w	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d07c      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc0:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2301      	movs	r3, #1
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d04b      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fd ffb5 	bl	8000c90 <HAL_GetTick>
 8002d26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fd ffb1 	bl	8000c90 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e113      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d40:	2302      	movs	r3, #2
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	61fb      	str	r3, [r7, #28]
  return result;
 8002d58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d108      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d6e:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	e00d      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	10908100 	.word	0x10908100
 8002d80:	2302      	movs	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	4b78      	ldr	r3, [pc, #480]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2202      	movs	r2, #2
 8002d92:	613a      	str	r2, [r7, #16]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	fa92 f2a2 	rbit	r2, r2
 8002d9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	fab2 f282 	clz	r2, r2
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f002 021f 	and.w	r2, r2, #31
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0b7      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	496a      	ldr	r1, [pc, #424]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd4:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dec:	4b60      	ldr	r3, [pc, #384]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f023 0203 	bic.w	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	495d      	ldr	r1, [pc, #372]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e0a:	4b59      	ldr	r3, [pc, #356]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4956      	ldr	r1, [pc, #344]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e28:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	494e      	ldr	r1, [pc, #312]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f023 0210 	bic.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4947      	ldr	r1, [pc, #284]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e64:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	493f      	ldr	r1, [pc, #252]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f023 0220 	bic.w	r2, r3, #32
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4938      	ldr	r1, [pc, #224]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	4930      	ldr	r1, [pc, #192]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	4929      	ldr	r1, [pc, #164]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4921      	ldr	r1, [pc, #132]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	491a      	ldr	r1, [pc, #104]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	4912      	ldr	r1, [pc, #72]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	490b      	ldr	r1, [pc, #44]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	4903      	ldr	r1, [pc, #12]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3748      	adds	r7, #72	; 0x48
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e09d      	b.n	80030c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f96:	d009      	beq.n	8002fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
 8002f9e:	e005      	b.n	8002fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fcb2 	bl	8000930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fec:	d902      	bls.n	8002ff4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e002      	b.n	8002ffa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003002:	d007      	beq.n	8003014 <HAL_SPI_Init+0xa0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	ea42 0103 	orr.w	r1, r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	f003 0204 	and.w	r2, r3, #4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e040      	b.n	800315e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7fd fc61 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2224      	movs	r2, #36	; 0x24
 80030f6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fbbd 	bl	8003888 <UART_SetConfig>
 800310e:	4603      	mov	r3, r0
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e022      	b.n	800315e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fd85 	bl	8003c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003134:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003144:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fe0c 	bl	8003d74 <UART_CheckIdleState>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	; 0x28
 800316a:	af02      	add	r7, sp, #8
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800317a:	2b20      	cmp	r3, #32
 800317c:	d178      	bne.n	8003270 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_Transmit+0x24>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e071      	b.n	8003272 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2221      	movs	r2, #33	; 0x21
 800319a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800319c:	f7fd fd78 	bl	8000c90 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ba:	d108      	bne.n	80031ce <HAL_UART_Transmit+0x68>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e003      	b.n	80031d6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031d6:	e030      	b.n	800323a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2200      	movs	r2, #0
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fe6e 	bl	8003ec4 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e03c      	b.n	8003272 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10b      	bne.n	8003216 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800320a:	b292      	uxth	r2, r2
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3302      	adds	r3, #2
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	e008      	b.n	8003228 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b292      	uxth	r2, r2
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1c8      	bne.n	80031d8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	2140      	movs	r1, #64	; 0x40
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fe37 	bl	8003ec4 <UART_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e005      	b.n	8003272 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0ba      	sub	sp, #232	; 0xe8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80032aa:	4013      	ands	r3, r2
 80032ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d115      	bne.n	80032e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00f      	beq.n	80032e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 82ab 	beq.w	8003830 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
      }
      return;
 80032e2:	e2a5      	b.n	8003830 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8117 	beq.w	800351c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032fe:	4b85      	ldr	r3, [pc, #532]	; (8003514 <HAL_UART_IRQHandler+0x298>)
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 810a 	beq.w	800351c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d011      	beq.n	8003338 <HAL_UART_IRQHandler+0xbc>
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d011      	beq.n	8003368 <HAL_UART_IRQHandler+0xec>
 8003344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2202      	movs	r2, #2
 8003356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d011      	beq.n	8003398 <HAL_UART_IRQHandler+0x11c>
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2204      	movs	r2, #4
 8003386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	f043 0202 	orr.w	r2, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2208      	movs	r2, #8
 80033c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	f043 0208 	orr.w	r2, r3, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d012      	beq.n	8003406 <HAL_UART_IRQHandler+0x18a>
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8211 	beq.w	8003834 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800341e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d005      	beq.n	800345e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003456:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800345a:	2b00      	cmp	r3, #0
 800345c:	d04f      	beq.n	80034fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fd97 	bl	8003f92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d141      	bne.n	80034f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3308      	adds	r3, #8
 8003478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800348c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3308      	adds	r3, #8
 800349a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800349e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1d9      	bne.n	8003472 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_UART_IRQHandler+0x29c>)
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fd32 	bl	8000f3c <HAL_DMA_Abort_IT>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d017      	beq.n	800350e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034e8:	4610      	mov	r0, r2
 80034ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	e00f      	b.n	800350e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9b4 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	e00b      	b.n	800350e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f9b0 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	e007      	b.n	800350e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9ac 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800350c:	e192      	b.n	8003834 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350e:	bf00      	nop
    return;
 8003510:	e190      	b.n	8003834 <HAL_UART_IRQHandler+0x5b8>
 8003512:	bf00      	nop
 8003514:	04000120 	.word	0x04000120
 8003518:	0800405b 	.word	0x0800405b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 814b 	bne.w	80037bc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8144 	beq.w	80037bc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 813d 	beq.w	80037bc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	f040 80b5 	bne.w	80036c4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003566:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8164 	beq.w	8003838 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800357a:	429a      	cmp	r2, r3
 800357c:	f080 815c 	bcs.w	8003838 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b20      	cmp	r3, #32
 8003592:	f000 8086 	beq.w	80036a2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1da      	bne.n	8003596 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3308      	adds	r3, #8
 8003600:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003604:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003608:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800360c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e1      	bne.n	80035e0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3308      	adds	r3, #8
 8003622:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800362c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003640:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003642:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800364e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e3      	bne.n	800361c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003672:	f023 0310 	bic.w	r3, r3, #16
 8003676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003684:	65bb      	str	r3, [r7, #88]	; 0x58
 8003686:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800368a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e4      	bne.n	8003662 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fc14 	bl	8000eca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8d7 	bl	8003870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036c2:	e0b9      	b.n	8003838 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80ab 	beq.w	800383c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80036e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80a6 	beq.w	800383c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
 8003714:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e4      	bne.n	80036f0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	623b      	str	r3, [r7, #32]
   return(result);
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3308      	adds	r3, #8
 8003746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800374a:	633a      	str	r2, [r7, #48]	; 0x30
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e3      	bne.n	8003726 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0310 	bic.w	r3, r3, #16
 8003786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	69b9      	ldr	r1, [r7, #24]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	617b      	str	r3, [r7, #20]
   return(result);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e4      	bne.n	8003772 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f85b 	bl	8003870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037ba:	e03f      	b.n	800383c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <HAL_UART_IRQHandler+0x56a>
 80037c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fc7b 	bl	80040da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037e4:	e02d      	b.n	8003842 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01c      	beq.n	8003840 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
    }
    return;
 800380e:	e017      	b.n	8003840 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <HAL_UART_IRQHandler+0x5c6>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00c      	beq.n	8003842 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fc2c 	bl	8004086 <UART_EndTransmit_IT>
    return;
 800382e:	e008      	b.n	8003842 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003830:	bf00      	nop
 8003832:	e006      	b.n	8003842 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003834:	bf00      	nop
 8003836:	e004      	b.n	8003842 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003838:	bf00      	nop
 800383a:	e002      	b.n	8003842 <HAL_UART_IRQHandler+0x5c6>
      return;
 800383c:	bf00      	nop
 800383e:	e000      	b.n	8003842 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003840:	bf00      	nop
  }

}
 8003842:	37e8      	adds	r7, #232	; 0xe8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038b6:	f023 030c 	bic.w	r3, r3, #12
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4aa7      	ldr	r2, [pc, #668]	; (8003ba0 <UART_SetConfig+0x318>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d120      	bne.n	800394a <UART_SetConfig+0xc2>
 8003908:	4ba6      	ldr	r3, [pc, #664]	; (8003ba4 <UART_SetConfig+0x31c>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b03      	cmp	r3, #3
 8003912:	d817      	bhi.n	8003944 <UART_SetConfig+0xbc>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <UART_SetConfig+0x94>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003939 	.word	0x08003939
 8003924:	0800393f 	.word	0x0800393f
 8003928:	08003933 	.word	0x08003933
 800392c:	2301      	movs	r3, #1
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e0b5      	b.n	8003a9e <UART_SetConfig+0x216>
 8003932:	2302      	movs	r3, #2
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e0b2      	b.n	8003a9e <UART_SetConfig+0x216>
 8003938:	2304      	movs	r3, #4
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e0af      	b.n	8003a9e <UART_SetConfig+0x216>
 800393e:	2308      	movs	r3, #8
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e0ac      	b.n	8003a9e <UART_SetConfig+0x216>
 8003944:	2310      	movs	r3, #16
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e0a9      	b.n	8003a9e <UART_SetConfig+0x216>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a96      	ldr	r2, [pc, #600]	; (8003ba8 <UART_SetConfig+0x320>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d124      	bne.n	800399e <UART_SetConfig+0x116>
 8003954:	4b93      	ldr	r3, [pc, #588]	; (8003ba4 <UART_SetConfig+0x31c>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800395c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003960:	d011      	beq.n	8003986 <UART_SetConfig+0xfe>
 8003962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003966:	d817      	bhi.n	8003998 <UART_SetConfig+0x110>
 8003968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800396c:	d011      	beq.n	8003992 <UART_SetConfig+0x10a>
 800396e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003972:	d811      	bhi.n	8003998 <UART_SetConfig+0x110>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <UART_SetConfig+0xf8>
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d006      	beq.n	800398c <UART_SetConfig+0x104>
 800397e:	e00b      	b.n	8003998 <UART_SetConfig+0x110>
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e08b      	b.n	8003a9e <UART_SetConfig+0x216>
 8003986:	2302      	movs	r3, #2
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e088      	b.n	8003a9e <UART_SetConfig+0x216>
 800398c:	2304      	movs	r3, #4
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e085      	b.n	8003a9e <UART_SetConfig+0x216>
 8003992:	2308      	movs	r3, #8
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e082      	b.n	8003a9e <UART_SetConfig+0x216>
 8003998:	2310      	movs	r3, #16
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e07f      	b.n	8003a9e <UART_SetConfig+0x216>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a82      	ldr	r2, [pc, #520]	; (8003bac <UART_SetConfig+0x324>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d124      	bne.n	80039f2 <UART_SetConfig+0x16a>
 80039a8:	4b7e      	ldr	r3, [pc, #504]	; (8003ba4 <UART_SetConfig+0x31c>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80039b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039b4:	d011      	beq.n	80039da <UART_SetConfig+0x152>
 80039b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039ba:	d817      	bhi.n	80039ec <UART_SetConfig+0x164>
 80039bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039c0:	d011      	beq.n	80039e6 <UART_SetConfig+0x15e>
 80039c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039c6:	d811      	bhi.n	80039ec <UART_SetConfig+0x164>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <UART_SetConfig+0x14c>
 80039cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d0:	d006      	beq.n	80039e0 <UART_SetConfig+0x158>
 80039d2:	e00b      	b.n	80039ec <UART_SetConfig+0x164>
 80039d4:	2300      	movs	r3, #0
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e061      	b.n	8003a9e <UART_SetConfig+0x216>
 80039da:	2302      	movs	r3, #2
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e05e      	b.n	8003a9e <UART_SetConfig+0x216>
 80039e0:	2304      	movs	r3, #4
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e05b      	b.n	8003a9e <UART_SetConfig+0x216>
 80039e6:	2308      	movs	r3, #8
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e058      	b.n	8003a9e <UART_SetConfig+0x216>
 80039ec:	2310      	movs	r3, #16
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e055      	b.n	8003a9e <UART_SetConfig+0x216>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <UART_SetConfig+0x328>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d124      	bne.n	8003a46 <UART_SetConfig+0x1be>
 80039fc:	4b69      	ldr	r3, [pc, #420]	; (8003ba4 <UART_SetConfig+0x31c>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a08:	d011      	beq.n	8003a2e <UART_SetConfig+0x1a6>
 8003a0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a0e:	d817      	bhi.n	8003a40 <UART_SetConfig+0x1b8>
 8003a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a14:	d011      	beq.n	8003a3a <UART_SetConfig+0x1b2>
 8003a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a1a:	d811      	bhi.n	8003a40 <UART_SetConfig+0x1b8>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <UART_SetConfig+0x1a0>
 8003a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a24:	d006      	beq.n	8003a34 <UART_SetConfig+0x1ac>
 8003a26:	e00b      	b.n	8003a40 <UART_SetConfig+0x1b8>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e037      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e034      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a34:	2304      	movs	r3, #4
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e031      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e02e      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a40:	2310      	movs	r3, #16
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e02b      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <UART_SetConfig+0x32c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d124      	bne.n	8003a9a <UART_SetConfig+0x212>
 8003a50:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <UART_SetConfig+0x31c>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003a58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a5c:	d011      	beq.n	8003a82 <UART_SetConfig+0x1fa>
 8003a5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a62:	d817      	bhi.n	8003a94 <UART_SetConfig+0x20c>
 8003a64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a68:	d011      	beq.n	8003a8e <UART_SetConfig+0x206>
 8003a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a6e:	d811      	bhi.n	8003a94 <UART_SetConfig+0x20c>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <UART_SetConfig+0x1f4>
 8003a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a78:	d006      	beq.n	8003a88 <UART_SetConfig+0x200>
 8003a7a:	e00b      	b.n	8003a94 <UART_SetConfig+0x20c>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e00d      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a82:	2302      	movs	r3, #2
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e00a      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e007      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	77fb      	strb	r3, [r7, #31]
 8003a92:	e004      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a94:	2310      	movs	r3, #16
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e001      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa6:	d15b      	bne.n	8003b60 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d827      	bhi.n	8003afe <UART_SetConfig+0x276>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x22c>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003aff 	.word	0x08003aff
 8003ac4:	08003aef 	.word	0x08003aef
 8003ac8:	08003aff 	.word	0x08003aff
 8003acc:	08003aff 	.word	0x08003aff
 8003ad0:	08003aff 	.word	0x08003aff
 8003ad4:	08003af7 	.word	0x08003af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f7ff f858 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8003adc:	61b8      	str	r0, [r7, #24]
        break;
 8003ade:	e013      	b.n	8003b08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7ff f876 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 8003ae4:	61b8      	str	r0, [r7, #24]
        break;
 8003ae6:	e00f      	b.n	8003b08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <UART_SetConfig+0x330>)
 8003aea:	61bb      	str	r3, [r7, #24]
        break;
 8003aec:	e00c      	b.n	8003b08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aee:	f7fe ffd7 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003af2:	61b8      	str	r0, [r7, #24]
        break;
 8003af4:	e008      	b.n	8003b08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afa:	61bb      	str	r3, [r7, #24]
        break;
 8003afc:	e004      	b.n	8003b08 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	77bb      	strb	r3, [r7, #30]
        break;
 8003b06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8082 	beq.w	8003c14 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	005a      	lsls	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	441a      	add	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	d916      	bls.n	8003b5a <UART_SetConfig+0x2d2>
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d212      	bcs.n	8003b5a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f023 030f 	bic.w	r3, r3, #15
 8003b3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	89fa      	ldrh	r2, [r7, #14]
 8003b56:	60da      	str	r2, [r3, #12]
 8003b58:	e05c      	b.n	8003c14 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	77bb      	strb	r3, [r7, #30]
 8003b5e:	e059      	b.n	8003c14 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d835      	bhi.n	8003bd2 <UART_SetConfig+0x34a>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0x2e4>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003b99 	.word	0x08003b99
 8003b74:	08003bbd 	.word	0x08003bbd
 8003b78:	08003bd3 	.word	0x08003bd3
 8003b7c:	08003bc3 	.word	0x08003bc3
 8003b80:	08003bd3 	.word	0x08003bd3
 8003b84:	08003bd3 	.word	0x08003bd3
 8003b88:	08003bd3 	.word	0x08003bd3
 8003b8c:	08003bcb 	.word	0x08003bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7fe fffc 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8003b94:	61b8      	str	r0, [r7, #24]
        break;
 8003b96:	e021      	b.n	8003bdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff f81a 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	61b8      	str	r0, [r7, #24]
        break;
 8003b9e:	e01d      	b.n	8003bdc <UART_SetConfig+0x354>
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	40004800 	.word	0x40004800
 8003bb0:	40004c00 	.word	0x40004c00
 8003bb4:	40005000 	.word	0x40005000
 8003bb8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <UART_SetConfig+0x3a4>)
 8003bbe:	61bb      	str	r3, [r7, #24]
        break;
 8003bc0:	e00c      	b.n	8003bdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc2:	f7fe ff6d 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003bc6:	61b8      	str	r0, [r7, #24]
        break;
 8003bc8:	e008      	b.n	8003bdc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	61bb      	str	r3, [r7, #24]
        break;
 8003bd0:	e004      	b.n	8003bdc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	77bb      	strb	r3, [r7, #30]
        break;
 8003bda:	bf00      	nop
    }

    if (pclk != 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085a      	lsrs	r2, r3, #1
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	441a      	add	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d909      	bls.n	8003c10 <UART_SetConfig+0x388>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d205      	bcs.n	8003c10 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	e001      	b.n	8003c14 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	007a1200 	.word	0x007a1200

08003c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01a      	beq.n	8003d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2e:	d10a      	bne.n	8003d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b098      	sub	sp, #96	; 0x60
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d84:	f7fc ff84 	bl	8000c90 <HAL_GetTick>
 8003d88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d12e      	bne.n	8003df6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da0:	2200      	movs	r2, #0
 8003da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f88c 	bl	8003ec4 <UART_WaitOnFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d021      	beq.n	8003df6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e6      	bne.n	8003db2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e062      	b.n	8003ebc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d149      	bne.n	8003e98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f856 	bl	8003ec4 <UART_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d03c      	beq.n	8003e98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e6      	bne.n	8003e1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e70:	61fa      	str	r2, [r7, #28]
 8003e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e5      	bne.n	8003e50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e011      	b.n	8003ebc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3758      	adds	r7, #88	; 0x58
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed4:	e049      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d045      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fc fed7 	bl	8000c90 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e048      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d031      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d110      	bne.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f838 	bl	8003f92 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2208      	movs	r2, #8
 8003f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e029      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f44:	d111      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f81e 	bl	8003f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e00f      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d0a6      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b095      	sub	sp, #84	; 0x54
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003fba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004004:	2b01      	cmp	r3, #1
 8004006:	d118      	bne.n	800403a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	60bb      	str	r3, [r7, #8]
   return(result);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f023 0310 	bic.w	r3, r3, #16
 800401c:	647b      	str	r3, [r7, #68]	; 0x44
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6979      	ldr	r1, [r7, #20]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	613b      	str	r3, [r7, #16]
   return(result);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e6      	bne.n	8004008 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800404e:	bf00      	nop
 8004050:	3754      	adds	r7, #84	; 0x54
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff fbef 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	60bb      	str	r3, [r7, #8]
   return(result);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6979      	ldr	r1, [r7, #20]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e6      	bne.n	800408e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fbbb 	bl	8003848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d2:	bf00      	nop
 80040d4:	3720      	adds	r7, #32
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040f6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	b29b      	uxth	r3, r3
 8004108:	43db      	mvns	r3, r3
 800410a:	b29b      	uxth	r3, r3
 800410c:	4013      	ands	r3, r2
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004124:	b084      	sub	sp, #16
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	f107 0014 	add.w	r0, r7, #20
 8004132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	b004      	add	sp, #16
 8004164:	4770      	bx	lr
	...

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4d0d      	ldr	r5, [pc, #52]	; (80041a0 <__libc_init_array+0x38>)
 800416c:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	2600      	movs	r6, #0
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	4d0b      	ldr	r5, [pc, #44]	; (80041a8 <__libc_init_array+0x40>)
 800417a:	4c0c      	ldr	r4, [pc, #48]	; (80041ac <__libc_init_array+0x44>)
 800417c:	f000 f820 	bl	80041c0 <_init>
 8004180:	1b64      	subs	r4, r4, r5
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	2600      	movs	r6, #0
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f855 3b04 	ldr.w	r3, [r5], #4
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004260 	.word	0x08004260
 80041a4:	08004260 	.word	0x08004260
 80041a8:	08004260 	.word	0x08004260
 80041ac:	08004264 	.word	0x08004264

080041b0 <memset>:
 80041b0:	4402      	add	r2, r0
 80041b2:	4603      	mov	r3, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d100      	bne.n	80041ba <memset+0xa>
 80041b8:	4770      	bx	lr
 80041ba:	f803 1b01 	strb.w	r1, [r3], #1
 80041be:	e7f9      	b.n	80041b4 <memset+0x4>

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
