
TankGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a254  0800a254  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a254  0800a254  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a254  0800a254  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  0800a25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
 10 .bss          00000cd0  200000f4  200000f4  000200f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dc4  20000dc4  000200f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cabb  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035c7  00000000  00000000  0003cbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  000401a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016b8  00000000  00000000  00041968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021420  00000000  00000000  00043020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d7e9  00000000  00000000  00064440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5d04  00000000  00000000  00081c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014792d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070b8  00000000  00000000  00147980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014ea38  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0014ea5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f4 	.word	0x200000f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dc8 	.word	0x08009dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	08009dc8 	.word	0x08009dc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <playTankHitSound>:
    500, 500, 1000, 500, 500, 1000, 500, 500, 1000, 500, 500, 1000,
    500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500
};


void playTankHitSound() {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    PWM_Change_Tone(IMPACT_FREQ, 100);
 8000284:	2164      	movs	r1, #100	; 0x64
 8000286:	f44f 7048 	mov.w	r0, #800	; 0x320
 800028a:	f002 ffbf 	bl	800320c <PWM_Change_Tone>
    HAL_Delay(IMPACT_DURATION);
 800028e:	2032      	movs	r0, #50	; 0x32
 8000290:	f003 fac8 	bl	8003824 <HAL_Delay>
    PWM_Change_Tone(VIBRATION_FREQ, 100);
 8000294:	2164      	movs	r1, #100	; 0x64
 8000296:	20c8      	movs	r0, #200	; 0xc8
 8000298:	f002 ffb8 	bl	800320c <PWM_Change_Tone>
    HAL_Delay(VIBRATION_DURATION);
 800029c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80002a0:	f003 fac0 	bl	8003824 <HAL_Delay>
    PWM_Change_Tone(0, 0);
 80002a4:	2100      	movs	r1, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	f002 ffb0 	bl	800320c <PWM_Change_Tone>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <playExplosionSound>:
    }
}



void playExplosionSound() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < DURATION / 10; i++) {
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e011      	b.n	80002e0 <playExplosionSound+0x30>
        PWM_Change_Tone(HIGH_FREQ, 100);
 80002bc:	2164      	movs	r1, #100	; 0x64
 80002be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002c2:	f002 ffa3 	bl	800320c <PWM_Change_Tone>
        HAL_Delay(5);
 80002c6:	2005      	movs	r0, #5
 80002c8:	f003 faac 	bl	8003824 <HAL_Delay>
        PWM_Change_Tone(LOW_FREQ, 100);
 80002cc:	2164      	movs	r1, #100	; 0x64
 80002ce:	2032      	movs	r0, #50	; 0x32
 80002d0:	f002 ff9c 	bl	800320c <PWM_Change_Tone>
        HAL_Delay(5);
 80002d4:	2005      	movs	r0, #5
 80002d6:	f003 faa5 	bl	8003824 <HAL_Delay>
    for (int i = 0; i < DURATION / 10; i++) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b09      	cmp	r3, #9
 80002e4:	ddea      	ble.n	80002bc <playExplosionSound+0xc>
    }
    PWM_Change_Tone(0, 0);
 80002e6:	2100      	movs	r1, #0
 80002e8:	2000      	movs	r0, #0
 80002ea:	f002 ff8f 	bl	800320c <PWM_Change_Tone>
}
 80002ee:	bf00      	nop
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08e      	sub	sp, #56	; 0x38
 80002fc:	af0a      	add	r7, sp, #40	; 0x28
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	4608      	mov	r0, r1
 8000302:	4611      	mov	r1, r2
 8000304:	461a      	mov	r2, r3
 8000306:	4603      	mov	r3, r0
 8000308:	817b      	strh	r3, [r7, #10]
 800030a:	460b      	mov	r3, r1
 800030c:	813b      	strh	r3, [r7, #8]
 800030e:	4613      	mov	r3, r2
 8000310:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000312:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <LiquidCrystal+0x90>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d019      	beq.n	800034e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800031a:	8939      	ldrh	r1, [r7, #8]
 800031c:	897a      	ldrh	r2, [r7, #10]
 800031e:	2300      	movs	r3, #0
 8000320:	9308      	str	r3, [sp, #32]
 8000322:	2300      	movs	r3, #0
 8000324:	9307      	str	r3, [sp, #28]
 8000326:	2300      	movs	r3, #0
 8000328:	9306      	str	r3, [sp, #24]
 800032a:	2300      	movs	r3, #0
 800032c:	9305      	str	r3, [sp, #20]
 800032e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000330:	9304      	str	r3, [sp, #16]
 8000332:	8c3b      	ldrh	r3, [r7, #32]
 8000334:	9303      	str	r3, [sp, #12]
 8000336:	8bbb      	ldrh	r3, [r7, #28]
 8000338:	9302      	str	r3, [sp, #8]
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	460b      	mov	r3, r1
 8000344:	68f9      	ldr	r1, [r7, #12]
 8000346:	2001      	movs	r0, #1
 8000348:	f000 f820 	bl	800038c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800034c:	e018      	b.n	8000380 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800034e:	8939      	ldrh	r1, [r7, #8]
 8000350:	897a      	ldrh	r2, [r7, #10]
 8000352:	2300      	movs	r3, #0
 8000354:	9308      	str	r3, [sp, #32]
 8000356:	2300      	movs	r3, #0
 8000358:	9307      	str	r3, [sp, #28]
 800035a:	2300      	movs	r3, #0
 800035c:	9306      	str	r3, [sp, #24]
 800035e:	2300      	movs	r3, #0
 8000360:	9305      	str	r3, [sp, #20]
 8000362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000364:	9304      	str	r3, [sp, #16]
 8000366:	8c3b      	ldrh	r3, [r7, #32]
 8000368:	9303      	str	r3, [sp, #12]
 800036a:	8bbb      	ldrh	r3, [r7, #28]
 800036c:	9302      	str	r3, [sp, #8]
 800036e:	8b3b      	ldrh	r3, [r7, #24]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	460b      	mov	r3, r1
 8000378:	68f9      	ldr	r1, [r7, #12]
 800037a:	2000      	movs	r0, #0
 800037c:	f000 f806 	bl	800038c <init>
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000000 	.word	0x20000000

0800038c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	60b9      	str	r1, [r7, #8]
 8000394:	4611      	mov	r1, r2
 8000396:	461a      	mov	r2, r3
 8000398:	4603      	mov	r3, r0
 800039a:	73fb      	strb	r3, [r7, #15]
 800039c:	460b      	mov	r3, r1
 800039e:	81bb      	strh	r3, [r7, #12]
 80003a0:	4613      	mov	r3, r2
 80003a2:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <init+0x84>)
 80003a6:	89bb      	ldrh	r3, [r7, #12]
 80003a8:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 80003aa:	4a1a      	ldr	r2, [pc, #104]	; (8000414 <init+0x88>)
 80003ac:	88fb      	ldrh	r3, [r7, #6]
 80003ae:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 80003b0:	4a19      	ldr	r2, [pc, #100]	; (8000418 <init+0x8c>)
 80003b2:	8b3b      	ldrh	r3, [r7, #24]
 80003b4:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 80003b6:	4a19      	ldr	r2, [pc, #100]	; (800041c <init+0x90>)
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <init+0x94>)
 80003be:	8bbb      	ldrh	r3, [r7, #28]
 80003c0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80003c2:	4a17      	ldr	r2, [pc, #92]	; (8000420 <init+0x94>)
 80003c4:	8c3b      	ldrh	r3, [r7, #32]
 80003c6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80003c8:	4a15      	ldr	r2, [pc, #84]	; (8000420 <init+0x94>)
 80003ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003cc:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 80003ce:	4a14      	ldr	r2, [pc, #80]	; (8000420 <init+0x94>)
 80003d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80003d2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80003d4:	4a12      	ldr	r2, [pc, #72]	; (8000420 <init+0x94>)
 80003d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80003d8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80003da:	4a11      	ldr	r2, [pc, #68]	; (8000420 <init+0x94>)
 80003dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80003de:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80003e0:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <init+0x94>)
 80003e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80003e4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <init+0x94>)
 80003e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80003ea:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <init+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e002      	b.n	8000400 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <init+0x98>)
 80003fc:	2210      	movs	r2, #16
 80003fe:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8000400:	2102      	movs	r1, #2
 8000402:	2010      	movs	r0, #16
 8000404:	f000 f810 	bl	8000428 <begin>
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000112 	.word	0x20000112
 8000414:	20000114 	.word	0x20000114
 8000418:	20000116 	.word	0x20000116
 800041c:	20000128 	.word	0x20000128
 8000420:	20000118 	.word	0x20000118
 8000424:	2000012c 	.word	0x2000012c

08000428 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d906      	bls.n	800044c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800043e:	4b77      	ldr	r3, [pc, #476]	; (800061c <begin+0x1f4>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b74      	ldr	r3, [pc, #464]	; (800061c <begin+0x1f4>)
 800044a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800044c:	4a74      	ldr	r2, [pc, #464]	; (8000620 <begin+0x1f8>)
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000452:	79fa      	ldrb	r2, [r7, #7]
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	3340      	adds	r3, #64	; 0x40
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f988 	bl	8000770 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000460:	4b70      	ldr	r3, [pc, #448]	; (8000624 <begin+0x1fc>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d009      	beq.n	800047c <begin+0x54>
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d106      	bne.n	800047c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800046e:	4b6b      	ldr	r3, [pc, #428]	; (800061c <begin+0x1f4>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b68      	ldr	r3, [pc, #416]	; (800061c <begin+0x1f4>)
 800047a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800047c:	f000 f8e4 	bl	8000648 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000488:	4b67      	ldr	r3, [pc, #412]	; (8000628 <begin+0x200>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d01b      	beq.n	80004c8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000490:	4b66      	ldr	r3, [pc, #408]	; (800062c <begin+0x204>)
 8000492:	881a      	ldrh	r2, [r3, #0]
 8000494:	4b66      	ldr	r3, [pc, #408]	; (8000630 <begin+0x208>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b65      	ldr	r3, [pc, #404]	; (8000634 <begin+0x20c>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	4b64      	ldr	r3, [pc, #400]	; (8000638 <begin+0x210>)
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b29a      	uxth	r2, r3
 80004ac:	4b62      	ldr	r3, [pc, #392]	; (8000638 <begin+0x210>)
 80004ae:	885b      	ldrh	r3, [r3, #2]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b60      	ldr	r3, [pc, #384]	; (8000638 <begin+0x210>)
 80004b6:	889b      	ldrh	r3, [r3, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b5e      	ldr	r3, [pc, #376]	; (8000638 <begin+0x210>)
 80004be:	88db      	ldrh	r3, [r3, #6]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	e02a      	b.n	800051e <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004c8:	4b58      	ldr	r3, [pc, #352]	; (800062c <begin+0x204>)
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	4b58      	ldr	r3, [pc, #352]	; (8000630 <begin+0x208>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	4b57      	ldr	r3, [pc, #348]	; (8000634 <begin+0x20c>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	4313      	orrs	r3, r2
 80004da:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004dc:	4b56      	ldr	r3, [pc, #344]	; (8000638 <begin+0x210>)
 80004de:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004e4:	4b54      	ldr	r3, [pc, #336]	; (8000638 <begin+0x210>)
 80004e6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004ec:	4b52      	ldr	r3, [pc, #328]	; (8000638 <begin+0x210>)
 80004ee:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004f4:	4b50      	ldr	r3, [pc, #320]	; (8000638 <begin+0x210>)
 80004f6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b4e      	ldr	r3, [pc, #312]	; (8000638 <begin+0x210>)
 80004fe:	891b      	ldrh	r3, [r3, #8]
 8000500:	4313      	orrs	r3, r2
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b4c      	ldr	r3, [pc, #304]	; (8000638 <begin+0x210>)
 8000506:	895b      	ldrh	r3, [r3, #10]
 8000508:	4313      	orrs	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b4a      	ldr	r3, [pc, #296]	; (8000638 <begin+0x210>)
 800050e:	899b      	ldrh	r3, [r3, #12]
 8000510:	4313      	orrs	r3, r2
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b48      	ldr	r3, [pc, #288]	; (8000638 <begin+0x210>)
 8000516:	89db      	ldrh	r3, [r3, #14]
 8000518:	4313      	orrs	r3, r2
 800051a:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800051c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 800051e:	4b47      	ldr	r3, [pc, #284]	; (800063c <begin+0x214>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f107 020c 	add.w	r2, r7, #12
 8000526:	4611      	mov	r1, r2
 8000528:	4618      	mov	r0, r3
 800052a:	f003 fb27 	bl	8003b7c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 800052e:	2032      	movs	r0, #50	; 0x32
 8000530:	f003 f978 	bl	8003824 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000534:	4b41      	ldr	r3, [pc, #260]	; (800063c <begin+0x214>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a3c      	ldr	r2, [pc, #240]	; (800062c <begin+0x204>)
 800053a:	8811      	ldrh	r1, [r2, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fcae 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000544:	4b3d      	ldr	r3, [pc, #244]	; (800063c <begin+0x214>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a3a      	ldr	r2, [pc, #232]	; (8000634 <begin+0x20c>)
 800054a:	8811      	ldrh	r1, [r2, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fca6 	bl	8003ea0 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8000554:	4b36      	ldr	r3, [pc, #216]	; (8000630 <begin+0x208>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2bff      	cmp	r3, #255	; 0xff
 800055a:	d007      	beq.n	800056c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <begin+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a33      	ldr	r2, [pc, #204]	; (8000630 <begin+0x208>)
 8000562:	8811      	ldrh	r1, [r2, #0]
 8000564:	2200      	movs	r2, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fc9a 	bl	8003ea0 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <begin+0x1f4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f003 0310 	and.w	r3, r3, #16
 8000574:	2b00      	cmp	r3, #0
 8000576:	d115      	bne.n	80005a4 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 fa45 	bl	8000a08 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800057e:	2005      	movs	r0, #5
 8000580:	f003 f950 	bl	8003824 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 fa3f 	bl	8000a08 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800058a:	2005      	movs	r0, #5
 800058c:	f003 f94a 	bl	8003824 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 fa39 	bl	8000a08 <write4bits>
    HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f003 f944 	bl	8003824 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 800059c:	2002      	movs	r0, #2
 800059e:	f000 fa33 	bl	8000a08 <write4bits>
 80005a2:	e01d      	b.n	80005e0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <begin+0x1f4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f9a4 	bl	80008fc <command>
    HAL_Delay(5);  // wait more than 4.1ms
 80005b4:	2005      	movs	r0, #5
 80005b6:	f003 f935 	bl	8003824 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <begin+0x1f4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f999 	bl	80008fc <command>
    HAL_Delay(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f003 f92a 	bl	8003824 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <begin+0x1f4>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f98e 	bl	80008fc <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <begin+0x1f4>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f986 	bl	80008fc <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <begin+0x218>)
 80005f2:	2204      	movs	r2, #4
 80005f4:	701a      	strb	r2, [r3, #0]
  display();
 80005f6:	f000 f917 	bl	8000828 <display>

  // clear it off
  clear();
 80005fa:	f000 f8d9 	bl	80007b0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <begin+0x21c>)
 8000600:	2202      	movs	r2, #2
 8000602:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <begin+0x21c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f974 	bl	80008fc <command>

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000012c 	.word	0x2000012c
 8000620:	2000012f 	.word	0x2000012f
 8000624:	20000110 	.word	0x20000110
 8000628:	20000000 	.word	0x20000000
 800062c:	20000112 	.word	0x20000112
 8000630:	20000114 	.word	0x20000114
 8000634:	20000116 	.word	0x20000116
 8000638:	20000118 	.word	0x20000118
 800063c:	20000128 	.word	0x20000128
 8000640:	2000012d 	.word	0x2000012d
 8000644:	2000012e 	.word	0x2000012e

08000648 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <enableClock+0x10c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000656:	d10c      	bne.n	8000672 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <enableClock+0x110>)
 800065e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <enableClock+0x110>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066c:	61fb      	str	r3, [r7, #28]
 800066e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000670:	e06a      	b.n	8000748 <enableClock+0x100>
  else if(_port == GPIOB)
 8000672:	4b38      	ldr	r3, [pc, #224]	; (8000754 <enableClock+0x10c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a39      	ldr	r2, [pc, #228]	; (800075c <enableClock+0x114>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d10c      	bne.n	8000696 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a35      	ldr	r2, [pc, #212]	; (8000758 <enableClock+0x110>)
 8000682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000686:	6153      	str	r3, [r2, #20]
 8000688:	4b33      	ldr	r3, [pc, #204]	; (8000758 <enableClock+0x110>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]
}
 8000694:	e058      	b.n	8000748 <enableClock+0x100>
  else if(_port == GPIOB)
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <enableClock+0x10c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a30      	ldr	r2, [pc, #192]	; (800075c <enableClock+0x114>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d10c      	bne.n	80006ba <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <enableClock+0x110>)
 80006a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006aa:	6153      	str	r3, [r2, #20]
 80006ac:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <enableClock+0x110>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	697b      	ldr	r3, [r7, #20]
}
 80006b8:	e046      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOC)
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <enableClock+0x10c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a28      	ldr	r2, [pc, #160]	; (8000760 <enableClock+0x118>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d10c      	bne.n	80006de <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a23      	ldr	r2, [pc, #140]	; (8000758 <enableClock+0x110>)
 80006ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <enableClock+0x110>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	693b      	ldr	r3, [r7, #16]
}
 80006dc:	e034      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOD)
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <enableClock+0x10c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <enableClock+0x11c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d10c      	bne.n	8000702 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <enableClock+0x110>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <enableClock+0x110>)
 80006ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f2:	6153      	str	r3, [r2, #20]
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <enableClock+0x110>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	e022      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOE)
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <enableClock+0x10c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <enableClock+0x120>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d10c      	bne.n	8000726 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <enableClock+0x110>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <enableClock+0x110>)
 8000712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000716:	6153      	str	r3, [r2, #20]
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <enableClock+0x110>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
}
 8000724:	e010      	b.n	8000748 <enableClock+0x100>
	else if(_port == GPIOF)
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <enableClock+0x10c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <enableClock+0x124>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d10b      	bne.n	8000748 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <enableClock+0x110>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a08      	ldr	r2, [pc, #32]	; (8000758 <enableClock+0x110>)
 8000736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073a:	6153      	str	r3, [r2, #20]
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <enableClock+0x110>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
}
 8000748:	bf00      	nop
 800074a:	3724      	adds	r7, #36	; 0x24
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000128 	.word	0x20000128
 8000758:	40021000 	.word	0x40021000
 800075c:	48000400 	.word	0x48000400
 8000760:	48000800 	.word	0x48000800
 8000764:	48000c00 	.word	0x48000c00
 8000768:	48001000 	.word	0x48001000
 800076c:	48001400 	.word	0x48001400

08000770 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <setRowOffsets+0x3c>)
 8000784:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <setRowOffsets+0x3c>)
 800078c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <setRowOffsets+0x3c>)
 8000794:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <setRowOffsets+0x3c>)
 800079c:	70da      	strb	r2, [r3, #3]
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000130 	.word	0x20000130

080007b0 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 f8a1 	bl	80008fc <command>
  HAL_Delay(2);  // this command takes a long time!
 80007ba:	2002      	movs	r0, #2
 80007bc:	f003 f832 	bl	8003824 <HAL_Delay>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80007d4:	2304      	movs	r3, #4
 80007d6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d803      	bhi.n	80007e8 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	3b01      	subs	r3, #1
 80007e6:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <setCursor+0x5c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d303      	bcc.n	80007fa <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <setCursor+0x5c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	4a09      	ldr	r2, [pc, #36]	; (8000824 <setCursor+0x60>)
 80007fe:	5cd2      	ldrb	r2, [r2, r3]
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4413      	add	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800080c:	b25b      	sxtb	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f873 	bl	80008fc <command>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000012f 	.word	0x2000012f
 8000824:	20000130 	.word	0x20000130

08000828 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <display+0x28>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <display+0x28>)
 8000838:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <display+0x28>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f859 	bl	80008fc <command>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000012d 	.word	0x2000012d

08000854 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <print+0x12>
 8000862:	2300      	movs	r3, #0
 8000864:	e01d      	b.n	80008a2 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fcb0 	bl	80001d0 <strlen>
 8000870:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000876:	e00c      	b.n	8000892 <print+0x3e>
    if (write(*buffer++)) n++;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	617a      	str	r2, [r7, #20]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f849 	bl	8000918 <write>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d008      	beq.n	800089e <print+0x4a>
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	613a      	str	r2, [r7, #16]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1ed      	bne.n	8000878 <print+0x24>
 800089c:	e000      	b.n	80008a0 <print+0x4c>
    else break;
 800089e:	bf00      	nop
  }
  return n;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	b25b      	sxtb	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f815 	bl	80008fc <command>
  for (int i=0; i<8; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e009      	b.n	80008ec <createChar+0x42>
    write(charmap[i]);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f819 	bl	8000918 <write>
  for (int i=0; i<8; i++) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	ddf2      	ble.n	80008d8 <createChar+0x2e>
  }
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f814 	bl	8000938 <send>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <write>:

inline size_t write(uint8_t value) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2101      	movs	r1, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f806 	bl	8000938 <send>
  return 1; // assume sucess
 800092c:	2301      	movs	r3, #1
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <send+0x6c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <send+0x70>)
 800094e:	8811      	ldrh	r1, [r2, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	4618      	mov	r0, r3
 8000954:	f003 faa4 	bl	8003ea0 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <send+0x74>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	2bff      	cmp	r3, #255	; 0xff
 800095e:	d007      	beq.n	8000970 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <send+0x6c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <send+0x74>)
 8000966:	8811      	ldrh	r1, [r2, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fa98 	bl	8003ea0 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <send+0x78>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	2b00      	cmp	r3, #0
 800097a:	d004      	beq.n	8000986 <send+0x4e>
    write8bits(value);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f86c 	bl	8000a5c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000984:	e009      	b.n	800099a <send+0x62>
    write4bits(value>>4);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f000 f83b 	bl	8000a08 <write4bits>
    write4bits(value);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f837 	bl	8000a08 <write4bits>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000128 	.word	0x20000128
 80009a8:	20000112 	.word	0x20000112
 80009ac:	20000114 	.word	0x20000114
 80009b0:	2000012c 	.word	0x2000012c

080009b4 <pulseEnable>:

void pulseEnable(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <pulseEnable+0x4c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <pulseEnable+0x50>)
 80009be:	8811      	ldrh	r1, [r2, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 fa6c 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f002 ff2b 	bl	8003824 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <pulseEnable+0x4c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <pulseEnable+0x50>)
 80009d4:	8811      	ldrh	r1, [r2, #0]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f003 fa61 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80009de:	2001      	movs	r0, #1
 80009e0:	f002 ff20 	bl	8003824 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <pulseEnable+0x4c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <pulseEnable+0x50>)
 80009ea:	8811      	ldrh	r1, [r2, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fa56 	bl	8003ea0 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80009f4:	2001      	movs	r0, #1
 80009f6:	f002 ff15 	bl	8003824 <HAL_Delay>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000128 	.word	0x20000128
 8000a04:	20000116 	.word	0x20000116

08000a08 <write4bits>:

void write4bits(uint8_t value) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e013      	b.n	8000a40 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <write4bits+0x4c>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <write4bits+0x50>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	fa42 f303 	asr.w	r3, r2, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	f003 fa33 	bl	8003ea0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	dde8      	ble.n	8000a18 <write4bits+0x10>
  }

  pulseEnable();
 8000a46:	f7ff ffb5 	bl	80009b4 <pulseEnable>
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000128 	.word	0x20000128
 8000a58:	20000118 	.word	0x20000118

08000a5c <write8bits>:

void write8bits(uint8_t value) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e013      	b.n	8000a94 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <write8bits+0x4c>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <write8bits+0x50>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	fa42 f303 	asr.w	r3, r2, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f003 fa09 	bl	8003ea0 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	dde8      	ble.n	8000a6c <write8bits+0x10>
  }

  pulseEnable();
 8000a9a:	f7ff ff8b 	bl	80009b4 <pulseEnable>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000128 	.word	0x20000128
 8000aac:	20000118 	.word	0x20000118

08000ab0 <HAL_GPIO_EXTI_Callback>:
const uint16_t Column_pins[] =
		{ GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3 };
// LEFT WIRES : D0 , D1,D2,D3
volatile uint32_t last_gpio_exti;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]

	if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8000aba:	4bb6      	ldr	r3, [pc, #728]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8000ac2:	f002 fea3 	bl	800380c <HAL_GetTick>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	f200 82a1 	bhi.w	8001010 <HAL_GPIO_EXTI_Callback+0x560>
			{
		return;
	}
	last_gpio_exti = HAL_GetTick();
 8000ace:	f002 fe9d 	bl	800380c <HAL_GetTick>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4aaf      	ldr	r2, [pc, #700]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000ad6:	6013      	str	r3, [r2, #0]

	int8_t row_number = -1;
 8000ad8:	23ff      	movs	r3, #255	; 0xff
 8000ada:	73fb      	strb	r3, [r7, #15]
	int8_t column_number = -1;
 8000adc:	23ff      	movs	r3, #255	; 0xff
 8000ade:	73bb      	strb	r3, [r7, #14]
	if (GPIO_Pin == GPIO_PIN_0) {
		// blue_button_pressed = 1;
		// return;
	}

	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	737b      	strb	r3, [r7, #13]
 8000ae4:	e00b      	b.n	8000afe <HAL_GPIO_EXTI_Callback+0x4e>
			{
		if (GPIO_Pin == Row_pins[row]) {
 8000ae6:	7b7b      	ldrb	r3, [r7, #13]
 8000ae8:	4aab      	ldr	r2, [pc, #684]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aee:	88fa      	ldrh	r2, [r7, #6]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d101      	bne.n	8000af8 <HAL_GPIO_EXTI_Callback+0x48>
			row_number = row;
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8000af8:	7b7b      	ldrb	r3, [r7, #13]
 8000afa:	3301      	adds	r3, #1
 8000afc:	737b      	strb	r3, [r7, #13]
 8000afe:	7b7b      	ldrb	r3, [r7, #13]
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d9f0      	bls.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x36>
		}
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8000b04:	4ba5      	ldr	r3, [pc, #660]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f9c8 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8000b10:	4ba2      	ldr	r3, [pc, #648]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b12:	2102      	movs	r1, #2
 8000b14:	2200      	movs	r2, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 f9c2 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 8000b1c:	4b9f      	ldr	r3, [pc, #636]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b1e:	2104      	movs	r1, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 f9bc 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 8000b28:	4b9c      	ldr	r3, [pc, #624]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 f9b6 	bl	8003ea0 <HAL_GPIO_WritePin>

	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b34:	2300      	movs	r3, #0
 8000b36:	733b      	strb	r3, [r7, #12]
 8000b38:	e02d      	b.n	8000b96 <HAL_GPIO_EXTI_Callback+0xe6>
			{
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 8000b3a:	7b3b      	ldrb	r3, [r7, #12]
 8000b3c:	4a98      	ldr	r2, [pc, #608]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b42:	7b3b      	ldrb	r3, [r7, #12]
 8000b44:	4a97      	ldr	r2, [pc, #604]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f003 f9a7 	bl	8003ea0 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number])) {
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	4a94      	ldr	r2, [pc, #592]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000b58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b60:	498d      	ldr	r1, [pc, #564]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000b62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4610      	mov	r0, r2
 8000b6a:	f003 f981 	bl	8003e70 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_GPIO_EXTI_Callback+0xc8>

			column_number = col;
 8000b74:	7b3b      	ldrb	r3, [r7, #12]
 8000b76:	73bb      	strb	r3, [r7, #14]
		}
		HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8000b78:	7b3b      	ldrb	r3, [r7, #12]
 8000b7a:	4a89      	ldr	r2, [pc, #548]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000b7c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	4a88      	ldr	r2, [pc, #544]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8000b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f003 f988 	bl	8003ea0 <HAL_GPIO_WritePin>
	for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8000b90:	7b3b      	ldrb	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	733b      	strb	r3, [r7, #12]
 8000b96:	7b3b      	ldrb	r3, [r7, #12]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d9ce      	bls.n	8000b3a <HAL_GPIO_EXTI_Callback+0x8a>
	}

	HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8000b9c:	4b7f      	ldr	r3, [pc, #508]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 f97c 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8000ba8:	4b7c      	ldr	r3, [pc, #496]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000baa:	2102      	movs	r1, #2
 8000bac:	2201      	movs	r2, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f003 f976 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 f970 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8000bc0:	4b76      	ldr	r3, [pc, #472]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 f96a 	bl	8003ea0 <HAL_GPIO_WritePin>

	if (row_number == -1 || column_number == -1) {
 8000bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	f000 821e 	beq.w	8001014 <HAL_GPIO_EXTI_Callback+0x564>
 8000bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	f000 8218 	beq.w	8001014 <HAL_GPIO_EXTI_Callback+0x564>
	// +----+----+----+----+
	// | 13 | 14 | 15 | 16 |  R3
	// +----+----+----+----+
	//1 - 6 - 9 for the Right Player
	//4 -7 -12 for the left player
	const uint8_t button_number = row_number * 4 + column_number + 1;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	4413      	add	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	72fb      	strb	r3, [r7, #11]
	switch (button_number) {
 8000bf4:	7afb      	ldrb	r3, [r7, #11]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	f200 820d 	bhi.w	8001018 <HAL_GPIO_EXTI_Callback+0x568>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <HAL_GPIO_EXTI_Callback+0x154>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c45 	.word	0x08000c45
 8000c08:	08000cf5 	.word	0x08000cf5
 8000c0c:	08000d0f 	.word	0x08000d0f
 8000c10:	08000d37 	.word	0x08000d37
 8000c14:	08000e17 	.word	0x08000e17
 8000c18:	08000e27 	.word	0x08000e27
 8000c1c:	08000e3d 	.word	0x08000e3d
 8000c20:	08000e53 	.word	0x08000e53
 8000c24:	08000ea1 	.word	0x08000ea1
 8000c28:	08001019 	.word	0x08001019
 8000c2c:	08001019 	.word	0x08001019
 8000c30:	08000f13 	.word	0x08000f13
 8000c34:	08000f83 	.word	0x08000f83
 8000c38:	08000fa3 	.word	0x08000fa3
 8000c3c:	08000fc5 	.word	0x08000fc5
 8000c40:	08001019 	.word	0x08001019
	case 1:
		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000c44:	4b59      	ldr	r3, [pc, #356]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d113      	bne.n	8000c74 <HAL_GPIO_EXTI_Callback+0x1c4>
			R_Health = (R_Health + 10 - 1) % 10;
 8000c4c:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f103 0109 	add.w	r1, r3, #9
 8000c54:	4b57      	ldr	r3, [pc, #348]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000c56:	fb83 2301 	smull	r2, r3, r3, r1
 8000c5a:	109a      	asrs	r2, r3, #2
 8000c5c:	17cb      	asrs	r3, r1, #31
 8000c5e:	1ad2      	subs	r2, r2, r3
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	1aca      	subs	r2, r1, r3
 8000c6a:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000c6c:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000c6e:	f001 fb3d 	bl	80022ec <HealthSetting>
 8000c72:	e016      	b.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x1f2>
		} else if (screen == 5) {
 8000c74:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d112      	bne.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x1f2>
			R_bullets = (R_bullets + 10 - 1) % 10;
 8000c7c:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f103 0109 	add.w	r1, r3, #9
 8000c84:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000c86:	fb83 2301 	smull	r2, r3, r3, r1
 8000c8a:	109a      	asrs	r2, r3, #2
 8000c8c:	17cb      	asrs	r3, r1, #31
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	1aca      	subs	r2, r1, r3
 8000c9a:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000c9c:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000c9e:	f001 faed 	bl	800227c <bulletsSetting>
		}
		if (screen == 0) {
 8000ca2:	4b42      	ldr	r3, [pc, #264]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x212>
			screen = 1;
 8000caa:	4b40      	ldr	r3, [pc, #256]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x30c>)
 8000cb2:	f005 fb4f 	bl	8006354 <HAL_TIM_Base_Start_IT>
			refreshAll();
 8000cb6:	f000 f9e5 	bl	8001084 <refreshAll>
			initializeObjects();
 8000cba:	f001 f845 	bl	8001d48 <initializeObjects>
			displayObjects();
 8000cbe:	f001 fa61 	bl	8002184 <displayObjects>
		}
		if (screen == 1) {
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	f040 81a8 	bne.w	800101c <HAL_GPIO_EXTI_Callback+0x56c>
			if (R_bullets > 0) {
 8000ccc:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f340 81a3 	ble.w	800101c <HAL_GPIO_EXTI_Callback+0x56c>
				R_bullets--;
 8000cd6:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000cde:	6013      	str	r3, [r2, #0]
				shoot(&playerR);
 8000ce0:	4837      	ldr	r0, [pc, #220]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x310>)
 8000ce2:	f000 fac7 	bl	8001274 <shoot>
				HAL_UART_Transmit(&huart1, "-Bullet for right", 16, 100000);
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x314>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	4937      	ldr	r1, [pc, #220]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x318>)
 8000cec:	4837      	ldr	r0, [pc, #220]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x31c>)
 8000cee:	f006 fdc1 	bl	8007874 <HAL_UART_Transmit>
			}
		}

		/* code */
		break;
 8000cf2:	e193      	b.n	800101c <HAL_GPIO_EXTI_Callback+0x56c>
	case 2:

		if (screen == 0) {
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f040 8191 	bne.w	8001020 <HAL_GPIO_EXTI_Callback+0x570>
			screen = 2;
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000d04:	f000 f9be 	bl	8001084 <refreshAll>
			showAbout();
 8000d08:	f001 fa8a 	bl	8002220 <showAbout>
		}
		/* code */
		break;
 8000d0c:	e188      	b.n	8001020 <HAL_GPIO_EXTI_Callback+0x570>
	case 3:
		HAL_UART_Transmit(&huart1, "3", 1,
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	2201      	movs	r2, #1
 8000d14:	492e      	ldr	r1, [pc, #184]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x320>)
 8000d16:	482d      	ldr	r0, [pc, #180]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x31c>)
 8000d18:	f006 fdac 	bl	8007874 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		if (screen == 0) {
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f040 817f 	bne.w	8001024 <HAL_GPIO_EXTI_Callback+0x574>
			screen = 3;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000d28:	2203      	movs	r2, #3
 8000d2a:	601a      	str	r2, [r3, #0]
			refreshAll();
 8000d2c:	f000 f9aa 	bl	8001084 <refreshAll>
			showSetting();
 8000d30:	f001 fa84 	bl	800223c <showSetting>
		}
		/* code */
		break;
 8000d34:	e176      	b.n	8001024 <HAL_GPIO_EXTI_Callback+0x574>
	case 4:
		if (screen == 1) {
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d111      	bne.n	8000d62 <HAL_GPIO_EXTI_Callback+0x2b2>
			if (L_bullets > 0) {
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x324>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	dd0d      	ble.n	8000d62 <HAL_GPIO_EXTI_Callback+0x2b2>
				L_bullets--;
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x324>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x324>)
 8000d4e:	6013      	str	r3, [r2, #0]
				shoot(&playerL);
 8000d50:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d52:	f000 fa8f 	bl	8001274 <shoot>
				HAL_UART_Transmit(&huart1, "-Bullet for left", 15, 100000);
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x314>)
 8000d58:	220f      	movs	r2, #15
 8000d5a:	4920      	ldr	r1, [pc, #128]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x32c>)
 8000d5c:	481b      	ldr	r0, [pc, #108]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x31c>)
 8000d5e:	f006 fd89 	bl	8007874 <HAL_UART_Transmit>
			}
			//shot(playerR.x, playerR.y + 1, currentStateR % 2);
		}

		//TO DECREASE IN SETTING
		if (screen == 4) {
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d13c      	bne.n	8000de4 <HAL_GPIO_EXTI_Callback+0x334>
			L_Health = (L_Health + 10 - 1) % 10;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f103 0109 	add.w	r1, r3, #9
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000d74:	fb83 2301 	smull	r2, r3, r3, r1
 8000d78:	109a      	asrs	r2, r3, #2
 8000d7a:	17cb      	asrs	r3, r1, #31
 8000d7c:	1ad2      	subs	r2, r2, r3
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	1aca      	subs	r2, r1, r3
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d8a:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000d8c:	f001 faae 	bl	80022ec <HealthSetting>
		} else if (screen == 5) {
			L_bullets = (L_bullets + 10 - 1) % 10;
			bulletsSetting();
		}

		break;
 8000d90:	e14a      	b.n	8001028 <HAL_GPIO_EXTI_Callback+0x578>
 8000d92:	bf00      	nop
 8000d94:	20000d9c 	.word	0x20000d9c
 8000d98:	08009fb0 	.word	0x08009fb0
 8000d9c:	48000c00 	.word	0x48000c00
 8000da0:	08009fb8 	.word	0x08009fb8
 8000da4:	08009fc8 	.word	0x08009fc8
 8000da8:	08009fa0 	.word	0x08009fa0
 8000dac:	20000618 	.word	0x20000618
 8000db0:	20000004 	.word	0x20000004
 8000db4:	66666667 	.word	0x66666667
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	2000020c 	.word	0x2000020c
 8000dc0:	20000c68 	.word	0x20000c68
 8000dc4:	000186a0 	.word	0x000186a0
 8000dc8:	08009de0 	.word	0x08009de0
 8000dcc:	200002a4 	.word	0x200002a4
 8000dd0:	08009df4 	.word	0x08009df4
 8000dd4:	20000010 	.word	0x20000010
 8000dd8:	20000c78 	.word	0x20000c78
 8000ddc:	08009df8 	.word	0x08009df8
 8000de0:	20000008 	.word	0x20000008
		} else if (screen == 5) {
 8000de4:	4b96      	ldr	r3, [pc, #600]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	f040 811d 	bne.w	8001028 <HAL_GPIO_EXTI_Callback+0x578>
			L_bullets = (L_bullets + 10 - 1) % 10;
 8000dee:	4b95      	ldr	r3, [pc, #596]	; (8001044 <HAL_GPIO_EXTI_Callback+0x594>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f103 0109 	add.w	r1, r3, #9
 8000df6:	4b94      	ldr	r3, [pc, #592]	; (8001048 <HAL_GPIO_EXTI_Callback+0x598>)
 8000df8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dfc:	109a      	asrs	r2, r3, #2
 8000dfe:	17cb      	asrs	r3, r1, #31
 8000e00:	1ad2      	subs	r2, r2, r3
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	1aca      	subs	r2, r1, r3
 8000e0c:	4b8d      	ldr	r3, [pc, #564]	; (8001044 <HAL_GPIO_EXTI_Callback+0x594>)
 8000e0e:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000e10:	f001 fa34 	bl	800227c <bulletsSetting>
		break;
 8000e14:	e108      	b.n	8001028 <HAL_GPIO_EXTI_Callback+0x578>
	case 5:
		HAL_UART_Transmit(&huart1, "5", 1,
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	498b      	ldr	r1, [pc, #556]	; (800104c <HAL_GPIO_EXTI_Callback+0x59c>)
 8000e1e:	488c      	ldr	r0, [pc, #560]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e20:	f006 fd28 	bl	8007874 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000e24:	e109      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
	case 6:
		HAL_UART_Transmit(&huart1, "6", 1,
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4989      	ldr	r1, [pc, #548]	; (8001054 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000e2e:	4888      	ldr	r0, [pc, #544]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e30:	f006 fd20 	bl	8007874 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(0);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f947 	bl	80010c8 <changeFoxStateR>
		break;
 8000e3a:	e0fe      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
	case 7:
		HAL_UART_Transmit(&huart1, "7", 1,
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	2201      	movs	r2, #1
 8000e42:	4985      	ldr	r1, [pc, #532]	; (8001058 <HAL_GPIO_EXTI_Callback+0x5a8>)
 8000e44:	4882      	ldr	r0, [pc, #520]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e46:	f006 fd15 	bl	8007874 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		changeFoxStateR(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 f93c 	bl	80010c8 <changeFoxStateR>
		/* code */
		break;
 8000e50:	e0f3      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
	case 8:
		//back btn
		refreshAll();
 8000e52:	f000 f917 	bl	8001084 <refreshAll>
		if (screen == 4 | screen == 5) {
 8000e56:	4b7a      	ldr	r3, [pc, #488]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf0c      	ite	eq
 8000e5e:	2301      	moveq	r3, #1
 8000e60:	2300      	movne	r3, #0
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b76      	ldr	r3, [pc, #472]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	bf0c      	ite	eq
 8000e6c:	2301      	moveq	r3, #1
 8000e6e:	2300      	movne	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_EXTI_Callback+0x3d6>
			screen = 3;
 8000e7a:	4b71      	ldr	r3, [pc, #452]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	601a      	str	r2, [r3, #0]
			showSetting();
 8000e80:	f001 f9dc 	bl	800223c <showSetting>
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x3e0>
		} else {
			screen = 0;
 8000e86:	4b6e      	ldr	r3, [pc, #440]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
			showMain();
 8000e8c:	f001 f9a6 	bl	80021dc <showMain>
		}

		HAL_UART_Transmit(&huart1, "B", 1,
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	2201      	movs	r2, #1
 8000e96:	4971      	ldr	r1, [pc, #452]	; (800105c <HAL_GPIO_EXTI_Callback+0x5ac>)
 8000e98:	486d      	ldr	r0, [pc, #436]	; (8001050 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8000e9a:	f006 fceb 	bl	8007874 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		/* code */
		break;
 8000e9e:	e0cc      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
	case 9:

		if (screen == 4) {
 8000ea0:	4b67      	ldr	r3, [pc, #412]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d112      	bne.n	8000ece <HAL_GPIO_EXTI_Callback+0x41e>
			R_Health = (R_Health + 1) % 10;
 8000ea8:	4b6d      	ldr	r3, [pc, #436]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1c59      	adds	r1, r3, #1
 8000eae:	4b66      	ldr	r3, [pc, #408]	; (8001048 <HAL_GPIO_EXTI_Callback+0x598>)
 8000eb0:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb4:	109a      	asrs	r2, r3, #2
 8000eb6:	17cb      	asrs	r3, r1, #31
 8000eb8:	1ad2      	subs	r2, r2, r3
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	1aca      	subs	r2, r1, r3
 8000ec4:	4b66      	ldr	r3, [pc, #408]	; (8001060 <HAL_GPIO_EXTI_Callback+0x5b0>)
 8000ec6:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000ec8:	f001 fa10 	bl	80022ec <HealthSetting>
 8000ecc:	e015      	b.n	8000efa <HAL_GPIO_EXTI_Callback+0x44a>
		} else if (screen == 5) {
 8000ece:	4b5c      	ldr	r3, [pc, #368]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	d111      	bne.n	8000efa <HAL_GPIO_EXTI_Callback+0x44a>
			R_bullets = (R_bullets + 1) % 10;
 8000ed6:	4b63      	ldr	r3, [pc, #396]	; (8001064 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1c59      	adds	r1, r3, #1
 8000edc:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <HAL_GPIO_EXTI_Callback+0x598>)
 8000ede:	fb83 2301 	smull	r2, r3, r3, r1
 8000ee2:	109a      	asrs	r2, r3, #2
 8000ee4:	17cb      	asrs	r3, r1, #31
 8000ee6:	1ad2      	subs	r2, r2, r3
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	1aca      	subs	r2, r1, r3
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8000ef4:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000ef6:	f001 f9c1 	bl	800227c <bulletsSetting>
		}
		//right player
		if (screen == 1) {
 8000efa:	4b51      	ldr	r3, [pc, #324]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	f040 8094 	bne.w	800102c <HAL_GPIO_EXTI_Callback+0x57c>
			movement(&playerR, currentStateR);
 8000f04:	4b58      	ldr	r3, [pc, #352]	; (8001068 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4858      	ldr	r0, [pc, #352]	; (800106c <HAL_GPIO_EXTI_Callback+0x5bc>)
 8000f0c:	f000 fc98 	bl	8001840 <movement>
		}
		break;
 8000f10:	e08c      	b.n	800102c <HAL_GPIO_EXTI_Callback+0x57c>
		break;
	case 11:
		/* code */
		break;
	case 12:
		if (screen == 4) {
 8000f12:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d112      	bne.n	8000f40 <HAL_GPIO_EXTI_Callback+0x490>
			L_Health = (L_Health + 1) % 10;
 8000f1a:	4b55      	ldr	r3, [pc, #340]	; (8001070 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1c59      	adds	r1, r3, #1
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_GPIO_EXTI_Callback+0x598>)
 8000f22:	fb83 2301 	smull	r2, r3, r3, r1
 8000f26:	109a      	asrs	r2, r3, #2
 8000f28:	17cb      	asrs	r3, r1, #31
 8000f2a:	1ad2      	subs	r2, r2, r3
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	1aca      	subs	r2, r1, r3
 8000f36:	4b4e      	ldr	r3, [pc, #312]	; (8001070 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8000f38:	601a      	str	r2, [r3, #0]
			HealthSetting();
 8000f3a:	f001 f9d7 	bl	80022ec <HealthSetting>
 8000f3e:	e015      	b.n	8000f6c <HAL_GPIO_EXTI_Callback+0x4bc>
		} else if (screen == 5) {
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d111      	bne.n	8000f6c <HAL_GPIO_EXTI_Callback+0x4bc>
			L_bullets = (L_bullets + 1) % 10;
 8000f48:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <HAL_GPIO_EXTI_Callback+0x594>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	1c59      	adds	r1, r3, #1
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HAL_GPIO_EXTI_Callback+0x598>)
 8000f50:	fb83 2301 	smull	r2, r3, r3, r1
 8000f54:	109a      	asrs	r2, r3, #2
 8000f56:	17cb      	asrs	r3, r1, #31
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	1aca      	subs	r2, r1, r3
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <HAL_GPIO_EXTI_Callback+0x594>)
 8000f66:	601a      	str	r2, [r3, #0]
			bulletsSetting();
 8000f68:	f001 f988 	bl	800227c <bulletsSetting>
		}
		if (screen == 1) {
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d15d      	bne.n	8001030 <HAL_GPIO_EXTI_Callback+0x580>
			movement(&playerL, currentStateL);
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <HAL_GPIO_EXTI_Callback+0x5c4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	483f      	ldr	r0, [pc, #252]	; (8001078 <HAL_GPIO_EXTI_Callback+0x5c8>)
 8000f7c:	f000 fc60 	bl	8001840 <movement>
		}
		/* code */
		break;
 8000f80:	e056      	b.n	8001030 <HAL_GPIO_EXTI_Callback+0x580>
	case 13:
		/* code */
		if (screen = 3) {
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f7ff fc1a 	bl	80007c4 <setCursor>
			print("                   ");
 8000f90:	483a      	ldr	r0, [pc, #232]	; (800107c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8000f92:	f7ff fc5f 	bl	8000854 <print>
			HealthSetting();
 8000f96:	f001 f9a9 	bl	80022ec <HealthSetting>
			screen = 4;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000fa0:	e04b      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
	case 14:
		/* code */
		if (screen == 3) {
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d144      	bne.n	8001034 <HAL_GPIO_EXTI_Callback+0x584>
			screen = 5;
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000fac:	2205      	movs	r2, #5
 8000fae:	601a      	str	r2, [r3, #0]
			setCursor(20, 1);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2014      	movs	r0, #20
 8000fb4:	f7ff fc06 	bl	80007c4 <setCursor>
			print("                   ");
 8000fb8:	4830      	ldr	r0, [pc, #192]	; (800107c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8000fba:	f7ff fc4b 	bl	8000854 <print>
			bulletsSetting();
 8000fbe:	f001 f95d 	bl	800227c <bulletsSetting>
		}
		break;
 8000fc2:	e037      	b.n	8001034 <HAL_GPIO_EXTI_Callback+0x584>
	case 15:
		if (screen == 3) {
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d109      	bne.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x530>
			vfx = (vfx + 1) % 2;
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	bfb8      	it	lt
 8000fda:	425b      	neglt	r3, r3
 8000fdc:	4a28      	ldr	r2, [pc, #160]	; (8001080 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8000fde:	6013      	str	r3, [r2, #0]
		}
		if (screen == 4 | screen == 5) {
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d019      	beq.n	8001038 <HAL_GPIO_EXTI_Callback+0x588>
			screen = 3;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_GPIO_EXTI_Callback+0x590>)
 8001006:	2203      	movs	r2, #3
 8001008:	601a      	str	r2, [r3, #0]
			showSetting();
 800100a:	f001 f917 	bl	800223c <showSetting>
		}
		/* code */
		break;
 800100e:	e013      	b.n	8001038 <HAL_GPIO_EXTI_Callback+0x588>
		return;
 8001010:	bf00      	nop
 8001012:	e012      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		return; // Reject invalid scan
 8001014:	bf00      	nop
 8001016:	e010      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
	case 16:
		/* code */
		break;

	default:
		break;
 8001018:	bf00      	nop
 800101a:	e00e      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 800101c:	bf00      	nop
 800101e:	e00c      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8001020:	bf00      	nop
 8001022:	e00a      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8001024:	bf00      	nop
 8001026:	e008      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8001028:	bf00      	nop
 800102a:	e006      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 800102c:	bf00      	nop
 800102e:	e004      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8001030:	bf00      	nop
 8001032:	e002      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <HAL_GPIO_EXTI_Callback+0x58a>
		break;
 8001038:	bf00      	nop
	}
}
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	20000618 	.word	0x20000618
 8001044:	20000010 	.word	0x20000010
 8001048:	66666667 	.word	0x66666667
 800104c:	08009e0c 	.word	0x08009e0c
 8001050:	200002a4 	.word	0x200002a4
 8001054:	08009e10 	.word	0x08009e10
 8001058:	08009e14 	.word	0x08009e14
 800105c:	08009e18 	.word	0x08009e18
 8001060:	20000004 	.word	0x20000004
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000c88 	.word	0x20000c88
 800106c:	20000c68 	.word	0x20000c68
 8001070:	20000008 	.word	0x20000008
 8001074:	20000c8c 	.word	0x20000c8c
 8001078:	20000c78 	.word	0x20000c78
 800107c:	08009e1c 	.word	0x08009e1c
 8001080:	20000014 	.word	0x20000014

08001084 <refreshAll>:

void refreshAll(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8001088:	2100      	movs	r1, #0
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff fb9a 	bl	80007c4 <setCursor>
	print("                   ");
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <refreshAll+0x40>)
 8001092:	f7ff fbdf 	bl	8000854 <print>
	setCursor(0, 1);
 8001096:	2101      	movs	r1, #1
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fb93 	bl	80007c4 <setCursor>
	print("                   ");
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <refreshAll+0x40>)
 80010a0:	f7ff fbd8 	bl	8000854 <print>
	setCursor(20, 0);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2014      	movs	r0, #20
 80010a8:	f7ff fb8c 	bl	80007c4 <setCursor>
	print("                   ");
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <refreshAll+0x40>)
 80010ae:	f7ff fbd1 	bl	8000854 <print>
	setCursor(20, 1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2014      	movs	r0, #20
 80010b6:	f7ff fb85 	bl	80007c4 <setCursor>
	print("                   ");
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <refreshAll+0x40>)
 80010bc:	f7ff fbca 	bl	8000854 <print>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	08009e1c 	.word	0x08009e1c

080010c8 <changeFoxStateR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void changeFoxStateR(int Player) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	byte *currentFoxR = foxStates[currentStateR];
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <changeFoxStateR+0xf4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <changeFoxStateR+0xf8>)
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	60fb      	str	r3, [r7, #12]
	byte *currentFoxL = foxStates[currentStateL];
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <changeFoxStateR+0xfc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a37      	ldr	r2, [pc, #220]	; (80011c0 <changeFoxStateR+0xf8>)
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	60bb      	str	r3, [r7, #8]

	if (!Player) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d110      	bne.n	8001110 <changeFoxStateR+0x48>
		createChar(7, currentFoxR);
 80010ee:	68f9      	ldr	r1, [r7, #12]
 80010f0:	2007      	movs	r0, #7
 80010f2:	f7ff fbda 	bl	80008aa <createChar>
		currentStateR = (currentStateR + 1) % 4;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <changeFoxStateR+0xf4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	425a      	negs	r2, r3
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	bf58      	it	pl
 8001108:	4253      	negpl	r3, r2
 800110a:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <changeFoxStateR+0xf4>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e00f      	b.n	8001130 <changeFoxStateR+0x68>
	} else {
		createChar(8, currentFoxL);
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	2008      	movs	r0, #8
 8001114:	f7ff fbc9 	bl	80008aa <createChar>
		currentStateL = (currentStateL + 1) % 4;
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <changeFoxStateR+0xfc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	425a      	negs	r2, r3
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	bf58      	it	pl
 800112a:	4253      	negpl	r3, r2
 800112c:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <changeFoxStateR+0xfc>)
 800112e:	6013      	str	r3, [r2, #0]
	}
	switch (currentStateR) {
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <changeFoxStateR+0xf4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b03      	cmp	r3, #3
 8001136:	d81b      	bhi.n	8001170 <changeFoxStateR+0xa8>
 8001138:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <changeFoxStateR+0x78>)
 800113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	08001151 	.word	0x08001151
 8001144:	08001159 	.word	0x08001159
 8001148:	08001161 	.word	0x08001161
 800114c:	08001169 	.word	0x08001169
	case 0:
		playerR.direction = UP;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <changeFoxStateR+0x100>)
 8001152:	2200      	movs	r2, #0
 8001154:	721a      	strb	r2, [r3, #8]
		break;
 8001156:	e00c      	b.n	8001172 <changeFoxStateR+0xaa>
	case 1:
		playerR.direction = RIGHT;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <changeFoxStateR+0x100>)
 800115a:	2203      	movs	r2, #3
 800115c:	721a      	strb	r2, [r3, #8]
		break;
 800115e:	e008      	b.n	8001172 <changeFoxStateR+0xaa>
	case 2:
		playerR.direction = LEFT;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <changeFoxStateR+0x100>)
 8001162:	2202      	movs	r2, #2
 8001164:	721a      	strb	r2, [r3, #8]
		break;
 8001166:	e004      	b.n	8001172 <changeFoxStateR+0xaa>
	case 3:
		playerR.direction = DOWN;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <changeFoxStateR+0x100>)
 800116a:	2201      	movs	r2, #1
 800116c:	721a      	strb	r2, [r3, #8]
		break;
 800116e:	e000      	b.n	8001172 <changeFoxStateR+0xaa>
	default:
		break;
 8001170:	bf00      	nop
	}
	switch (currentStateL) {
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <changeFoxStateR+0xfc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d81a      	bhi.n	80011b0 <changeFoxStateR+0xe8>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <changeFoxStateR+0xb8>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001191 	.word	0x08001191
 8001184:	08001199 	.word	0x08001199
 8001188:	080011a1 	.word	0x080011a1
 800118c:	080011a9 	.word	0x080011a9
	case 0:
		playerL.direction = UP;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <changeFoxStateR+0x104>)
 8001192:	2200      	movs	r2, #0
 8001194:	721a      	strb	r2, [r3, #8]
		break;
 8001196:	e00c      	b.n	80011b2 <changeFoxStateR+0xea>
	case 1:
		playerL.direction = RIGHT;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <changeFoxStateR+0x104>)
 800119a:	2203      	movs	r2, #3
 800119c:	721a      	strb	r2, [r3, #8]
		break;
 800119e:	e008      	b.n	80011b2 <changeFoxStateR+0xea>
	case 2:
		playerL.direction = LEFT;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <changeFoxStateR+0x104>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	721a      	strb	r2, [r3, #8]
		break;
 80011a6:	e004      	b.n	80011b2 <changeFoxStateR+0xea>
	case 3:
		playerL.direction = DOWN;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <changeFoxStateR+0x104>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	721a      	strb	r2, [r3, #8]
		break;
 80011ae:	e000      	b.n	80011b2 <changeFoxStateR+0xea>
	default:
		break;
 80011b0:	bf00      	nop
	}

}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000c88 	.word	0x20000c88
 80011c0:	20000068 	.word	0x20000068
 80011c4:	20000c8c 	.word	0x20000c8c
 80011c8:	20000c68 	.word	0x20000c68
 80011cc:	20000c78 	.word	0x20000c78

080011d0 <increase>:
void increase(int isHealth, Player *player) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	if (isHealth) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01d      	beq.n	800121c <increase+0x4c>
		if (player->c == 7) {
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	7a5b      	ldrb	r3, [r3, #9]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d10c      	bne.n	8001202 <increase+0x32>
			R_Health++;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <increase+0x94>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <increase+0x94>)
 80011f0:	6013      	str	r3, [r2, #0]
			if (R_Health > 9) {
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <increase+0x94>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b09      	cmp	r3, #9
 80011f8:	dd2d      	ble.n	8001256 <increase+0x86>
				R_Health = 9;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <increase+0x94>)
 80011fc:	2209      	movs	r2, #9
 80011fe:	601a      	str	r2, [r3, #0]
			if (L_bullets > 9) {
				L_bullets = 9;
			}
		}
	}
}
 8001200:	e029      	b.n	8001256 <increase+0x86>
			L_Health++;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <increase+0x98>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <increase+0x98>)
 800120a:	6013      	str	r3, [r2, #0]
			if (L_Health > 9) {
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <increase+0x98>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b09      	cmp	r3, #9
 8001212:	dd20      	ble.n	8001256 <increase+0x86>
				L_Health = 9;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <increase+0x98>)
 8001216:	2209      	movs	r2, #9
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	e01c      	b.n	8001256 <increase+0x86>
		if (player->c == 7) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	7a5b      	ldrb	r3, [r3, #9]
 8001220:	2b07      	cmp	r3, #7
 8001222:	d10c      	bne.n	800123e <increase+0x6e>
			R_bullets++;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <increase+0x9c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <increase+0x9c>)
 800122c:	6013      	str	r3, [r2, #0]
			if (R_bullets > 9) {
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <increase+0x9c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b09      	cmp	r3, #9
 8001234:	dd0f      	ble.n	8001256 <increase+0x86>
				R_bullets = 9;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <increase+0x9c>)
 8001238:	2209      	movs	r2, #9
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	e00b      	b.n	8001256 <increase+0x86>
			L_bullets++;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <increase+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <increase+0xa0>)
 8001246:	6013      	str	r3, [r2, #0]
			if (L_bullets > 9) {
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <increase+0xa0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b09      	cmp	r3, #9
 800124e:	dd02      	ble.n	8001256 <increase+0x86>
				L_bullets = 9;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <increase+0xa0>)
 8001252:	2209      	movs	r2, #9
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000004 	.word	0x20000004
 8001268:	20000008 	.word	0x20000008
 800126c:	2000000c 	.word	0x2000000c
 8001270:	20000010 	.word	0x20000010

08001274 <shoot>:

void shoot(Player *player) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

	if (vfx) {
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <shoot+0x94>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <shoot+0x14>
		playExplosionSound();
 8001284:	f7ff f814 	bl	80002b0 <playExplosionSound>
	}

	num_shooted_bullet++;
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <shoot+0x98>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <shoot+0x98>)
 8001290:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < num_shooted_bullet; i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	e02d      	b.n	80012f4 <shoot+0x80>
		if (!fires[i].isAlive) {
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <shoot+0x9c>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	330c      	adds	r3, #12
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d122      	bne.n	80012ee <shoot+0x7a>
			fires[i].col = player->y;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4918      	ldr	r1, [pc, #96]	; (8001310 <shoot+0x9c>)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	440b      	add	r3, r1
 80012b4:	601a      	str	r2, [r3, #0]
			fires[i].row = player->x;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4915      	ldr	r1, [pc, #84]	; (8001310 <shoot+0x9c>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	3304      	adds	r3, #4
 80012c4:	601a      	str	r2, [r3, #0]
			fires[i].direction = player->direction;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7a19      	ldrb	r1, [r3, #8]
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <shoot+0x9c>)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	3308      	adds	r3, #8
 80012d4:	460a      	mov	r2, r1
 80012d6:	701a      	strb	r2, [r3, #0]
			fires[i].isAlive = 1;
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <shoot+0x9c>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	330c      	adds	r3, #12
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
			shootFlag = 1;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <shoot+0xa0>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
			break;
 80012ec:	e008      	b.n	8001300 <shoot+0x8c>
	for (int i = 0; i < num_shooted_bullet; i++) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <shoot+0x98>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbcc      	blt.n	8001298 <shoot+0x24>
		}
	}
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000014 	.word	0x20000014
 800130c:	20000624 	.word	0x20000624
 8001310:	20000628 	.word	0x20000628
 8001314:	2000061c 	.word	0x2000061c

08001318 <shotPosition>:

void shotPosition() {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
	for (int k = 0; k < num_shooted_bullet; k++) {
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e26e      	b.n	8001802 <shotPosition+0x4ea>
		if (fires[k].isAlive) {
 8001324:	4a93      	ldr	r2, [pc, #588]	; (8001574 <shotPosition+0x25c>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	330c      	adds	r3, #12
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8263 	beq.w	80017fc <shotPosition+0x4e4>

			int col = fires[k].col;
 8001336:	4a8f      	ldr	r2, [pc, #572]	; (8001574 <shotPosition+0x25c>)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60bb      	str	r3, [r7, #8]
			int row = fires[k].row;
 8001342:	4a8c      	ldr	r2, [pc, #560]	; (8001574 <shotPosition+0x25c>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	607b      	str	r3, [r7, #4]

			switch (fires[k].direction) {
 8001350:	4a88      	ldr	r2, [pc, #544]	; (8001574 <shotPosition+0x25c>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	3308      	adds	r3, #8
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b03      	cmp	r3, #3
 800135e:	f200 8081 	bhi.w	8001464 <shotPosition+0x14c>
 8001362:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <shotPosition+0x50>)
 8001364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001368:	08001407 	.word	0x08001407
 800136c:	08001391 	.word	0x08001391
 8001370:	080013ef 	.word	0x080013ef
 8001374:	08001379 	.word	0x08001379
			case RIGHT:
				fires[k].col++;
 8001378:	4a7e      	ldr	r2, [pc, #504]	; (8001574 <shotPosition+0x25c>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	497b      	ldr	r1, [pc, #492]	; (8001574 <shotPosition+0x25c>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	440b      	add	r3, r1
 800138c:	601a      	str	r2, [r3, #0]
				break;
 800138e:	e06e      	b.n	800146e <shotPosition+0x156>
			case DOWN:
				if (row == 0) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d107      	bne.n	80013a6 <shotPosition+0x8e>
					fires[k].row = 1;
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <shotPosition+0x25c>)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	4413      	add	r3, r2
 800139e:	3304      	adds	r3, #4
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
				} else if (row == 1 & col < 20) {
					fires[k].row = 0;
					fires[k].col += 20;
				}
				break;
 80013a4:	e060      	b.n	8001468 <shotPosition+0x150>
				} else if (row == 1 & col < 20) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b13      	cmp	r3, #19
 80013b6:	bfd4      	ite	le
 80013b8:	2301      	movle	r3, #1
 80013ba:	2300      	movgt	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4013      	ands	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d050      	beq.n	8001468 <shotPosition+0x150>
					fires[k].row = 0;
 80013c6:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <shotPosition+0x25c>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	3304      	adds	r3, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
					fires[k].col += 20;
 80013d4:	4a67      	ldr	r2, [pc, #412]	; (8001574 <shotPosition+0x25c>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4413      	add	r3, r2
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f103 0214 	add.w	r2, r3, #20
 80013e2:	4964      	ldr	r1, [pc, #400]	; (8001574 <shotPosition+0x25c>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	440b      	add	r3, r1
 80013ea:	601a      	str	r2, [r3, #0]
				break;
 80013ec:	e03c      	b.n	8001468 <shotPosition+0x150>
			case LEFT:
				fires[k].col--;
 80013ee:	4a61      	ldr	r2, [pc, #388]	; (8001574 <shotPosition+0x25c>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	495e      	ldr	r1, [pc, #376]	; (8001574 <shotPosition+0x25c>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	440b      	add	r3, r1
 8001402:	601a      	str	r2, [r3, #0]
				break;
 8001404:	e033      	b.n	800146e <shotPosition+0x156>
			case UP:
				if (row == 1) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d107      	bne.n	800141c <shotPosition+0x104>
					fires[k].row = 0;
 800140c:	4a59      	ldr	r2, [pc, #356]	; (8001574 <shotPosition+0x25c>)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4413      	add	r3, r2
 8001414:	3304      	adds	r3, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
				} else if (row == 0 & col >= 20) {
					fires[k].row = 1;
					fires[k].col -= 20;
				}
				break;
 800141a:	e027      	b.n	800146c <shotPosition+0x154>
				} else if (row == 0 & col >= 20) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	bf0c      	ite	eq
 8001422:	2301      	moveq	r3, #1
 8001424:	2300      	movne	r3, #0
 8001426:	b2da      	uxtb	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b13      	cmp	r3, #19
 800142c:	bfcc      	ite	gt
 800142e:	2301      	movgt	r3, #1
 8001430:	2300      	movle	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4013      	ands	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d017      	beq.n	800146c <shotPosition+0x154>
					fires[k].row = 1;
 800143c:	4a4d      	ldr	r2, [pc, #308]	; (8001574 <shotPosition+0x25c>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	3304      	adds	r3, #4
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
					fires[k].col -= 20;
 800144a:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <shotPosition+0x25c>)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1a3 0214 	sub.w	r2, r3, #20
 8001458:	4946      	ldr	r1, [pc, #280]	; (8001574 <shotPosition+0x25c>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	440b      	add	r3, r1
 8001460:	601a      	str	r2, [r3, #0]
				break;
 8001462:	e003      	b.n	800146c <shotPosition+0x154>
			default:
				break;
 8001464:	bf00      	nop
 8001466:	e002      	b.n	800146e <shotPosition+0x156>
				break;
 8001468:	bf00      	nop
 800146a:	e000      	b.n	800146e <shotPosition+0x156>
				break;
 800146c:	bf00      	nop
			}

			int f = lcd[fires[k].col][fires[k].row];
 800146e:	4a41      	ldr	r2, [pc, #260]	; (8001574 <shotPosition+0x25c>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	493e      	ldr	r1, [pc, #248]	; (8001574 <shotPosition+0x25c>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	440b      	add	r3, r1
 8001480:	3304      	adds	r3, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	493c      	ldr	r1, [pc, #240]	; (8001578 <shotPosition+0x260>)
 8001486:	2026      	movs	r0, #38	; 0x26
 8001488:	fb00 f202 	mul.w	r2, r0, r2
 800148c:	440a      	add	r2, r1
 800148e:	4413      	add	r3, r2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	603b      	str	r3, [r7, #0]

			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d006      	beq.n	80014a8 <shotPosition+0x190>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d003      	beq.n	80014a8 <shotPosition+0x190>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	f040 80b3 	bne.w	800160e <shotPosition+0x2f6>
				do {
					switch (fires[k].direction) {
 80014a8:	4a32      	ldr	r2, [pc, #200]	; (8001574 <shotPosition+0x25c>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	3308      	adds	r3, #8
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	f200 8085 	bhi.w	80015c4 <shotPosition+0x2ac>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <shotPosition+0x1a8>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800155f 	.word	0x0800155f
 80014c4:	080014e9 	.word	0x080014e9
 80014c8:	08001547 	.word	0x08001547
 80014cc:	080014d1 	.word	0x080014d1
					case RIGHT:
						fires[k].col++;
 80014d0:	4a28      	ldr	r2, [pc, #160]	; (8001574 <shotPosition+0x25c>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	4925      	ldr	r1, [pc, #148]	; (8001574 <shotPosition+0x25c>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	440b      	add	r3, r1
 80014e4:	601a      	str	r2, [r3, #0]
						break;
 80014e6:	e072      	b.n	80015ce <shotPosition+0x2b6>
					case DOWN:
						if (row == 0) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d107      	bne.n	80014fe <shotPosition+0x1e6>
							fires[k].row = 1;
 80014ee:	4a21      	ldr	r2, [pc, #132]	; (8001574 <shotPosition+0x25c>)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	3304      	adds	r3, #4
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
						} else if (row == 1 & col < 20) {
							fires[k].row = 0;
							fires[k].col += 20;
						}
						break;
 80014fc:	e064      	b.n	80015c8 <shotPosition+0x2b0>
						} else if (row == 1 & col < 20) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b01      	cmp	r3, #1
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2da      	uxtb	r2, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b13      	cmp	r3, #19
 800150e:	bfd4      	ite	le
 8001510:	2301      	movle	r3, #1
 8001512:	2300      	movgt	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4013      	ands	r3, r2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d054      	beq.n	80015c8 <shotPosition+0x2b0>
							fires[k].row = 0;
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <shotPosition+0x25c>)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	3304      	adds	r3, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
							fires[k].col += 20;
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <shotPosition+0x25c>)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4413      	add	r3, r2
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f103 0214 	add.w	r2, r3, #20
 800153a:	490e      	ldr	r1, [pc, #56]	; (8001574 <shotPosition+0x25c>)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	440b      	add	r3, r1
 8001542:	601a      	str	r2, [r3, #0]
						break;
 8001544:	e040      	b.n	80015c8 <shotPosition+0x2b0>
					case LEFT:
						fires[k].col--;
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <shotPosition+0x25c>)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <shotPosition+0x25c>)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	601a      	str	r2, [r3, #0]
						break;
 800155c:	e037      	b.n	80015ce <shotPosition+0x2b6>
					case UP:
						if (row == 1) {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10b      	bne.n	800157c <shotPosition+0x264>
							fires[k].row = 0;
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <shotPosition+0x25c>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	3304      	adds	r3, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
						} else if (row == 0 & col >= 20) {
							fires[k].row = 1;
							fires[k].col -= 20;
						}
						break;
 8001572:	e02b      	b.n	80015cc <shotPosition+0x2b4>
 8001574:	20000628 	.word	0x20000628
 8001578:	20000d50 	.word	0x20000d50
						} else if (row == 0 & col >= 20) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf0c      	ite	eq
 8001582:	2301      	moveq	r3, #1
 8001584:	2300      	movne	r3, #0
 8001586:	b2da      	uxtb	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b13      	cmp	r3, #19
 800158c:	bfcc      	ite	gt
 800158e:	2301      	movgt	r3, #1
 8001590:	2300      	movle	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4013      	ands	r3, r2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d017      	beq.n	80015cc <shotPosition+0x2b4>
							fires[k].row = 1;
 800159c:	4a9e      	ldr	r2, [pc, #632]	; (8001818 <shotPosition+0x500>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	4413      	add	r3, r2
 80015a4:	3304      	adds	r3, #4
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
							fires[k].col -= 20;
 80015aa:	4a9b      	ldr	r2, [pc, #620]	; (8001818 <shotPosition+0x500>)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	4413      	add	r3, r2
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1a3 0214 	sub.w	r2, r3, #20
 80015b8:	4997      	ldr	r1, [pc, #604]	; (8001818 <shotPosition+0x500>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	440b      	add	r3, r1
 80015c0:	601a      	str	r2, [r3, #0]
						break;
 80015c2:	e003      	b.n	80015cc <shotPosition+0x2b4>
					default:
						break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <shotPosition+0x2b6>
						break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <shotPosition+0x2b6>
						break;
 80015cc:	bf00      	nop
					}

					f = lcd[fires[k].col][fires[k].row];
 80015ce:	4a92      	ldr	r2, [pc, #584]	; (8001818 <shotPosition+0x500>)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	498f      	ldr	r1, [pc, #572]	; (8001818 <shotPosition+0x500>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	440b      	add	r3, r1
 80015e0:	3304      	adds	r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	498d      	ldr	r1, [pc, #564]	; (800181c <shotPosition+0x504>)
 80015e6:	2026      	movs	r0, #38	; 0x26
 80015e8:	fb00 f202 	mul.w	r2, r0, r2
 80015ec:	440a      	add	r2, r1
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	603b      	str	r3, [r7, #0]
				} while (f == 5 || f == 1 || f == 2);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	f43f af56 	beq.w	80014a8 <shotPosition+0x190>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f43f af52 	beq.w	80014a8 <shotPosition+0x190>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b02      	cmp	r3, #2
 8001608:	f43f af4e 	beq.w	80014a8 <shotPosition+0x190>
			if (f == 1 || f == 2 || f == 5) { // if health / bulletIcon / chance jump them
 800160c:	e0a3      	b.n	8001756 <shotPosition+0x43e>
			} else if (f == 4) { //if wall
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d107      	bne.n	8001624 <shotPosition+0x30c>
				fires[k].isAlive = 0;
 8001614:	4a80      	ldr	r2, [pc, #512]	; (8001818 <shotPosition+0x500>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	330c      	adds	r3, #12
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e098      	b.n	8001756 <shotPosition+0x43e>
			} else if (f == 3) { //if barrier
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d11a      	bne.n	8001660 <shotPosition+0x348>
				lcd[fires[k].row][fires[k].col] = ' ';
 800162a:	4a7b      	ldr	r2, [pc, #492]	; (8001818 <shotPosition+0x500>)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	3304      	adds	r3, #4
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4978      	ldr	r1, [pc, #480]	; (8001818 <shotPosition+0x500>)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	440b      	add	r3, r1
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4976      	ldr	r1, [pc, #472]	; (800181c <shotPosition+0x504>)
 8001642:	2026      	movs	r0, #38	; 0x26
 8001644:	fb00 f202 	mul.w	r2, r0, r2
 8001648:	440a      	add	r2, r1
 800164a:	4413      	add	r3, r2
 800164c:	2220      	movs	r2, #32
 800164e:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Transmit(&huart1, lcd[fires[k].row][fires[k].col], 1,
//						100000);
				fires[k].isAlive = 0;
 8001650:	4a71      	ldr	r2, [pc, #452]	; (8001818 <shotPosition+0x500>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	330c      	adds	r3, #12
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e07a      	b.n	8001756 <shotPosition+0x43e>
			} else if (fires[k].col == playerR.y && fires[k].row == playerR.x) {
 8001660:	4a6d      	ldr	r2, [pc, #436]	; (8001818 <shotPosition+0x500>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <shotPosition+0x508>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d121      	bne.n	80016b6 <shotPosition+0x39e>
 8001672:	4a69      	ldr	r2, [pc, #420]	; (8001818 <shotPosition+0x500>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	3304      	adds	r3, #4
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b68      	ldr	r3, [pc, #416]	; (8001820 <shotPosition+0x508>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d117      	bne.n	80016b6 <shotPosition+0x39e>
				//decreaseHealth playerR ;
				R_Health--;
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <shotPosition+0x50c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3b01      	subs	r3, #1
 800168c:	4a65      	ldr	r2, [pc, #404]	; (8001824 <shotPosition+0x50c>)
 800168e:	6013      	str	r3, [r2, #0]
				playerL.score++;
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <shotPosition+0x510>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3301      	adds	r3, #1
 8001696:	4a64      	ldr	r2, [pc, #400]	; (8001828 <shotPosition+0x510>)
 8001698:	60d3      	str	r3, [r2, #12]
				if (vfx) {
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <shotPosition+0x514>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <shotPosition+0x38e>
					playTankHitSound();
 80016a2:	f7fe fded 	bl	8000280 <playTankHitSound>
				}
				fires[k].isAlive = 0;
 80016a6:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <shotPosition+0x500>)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	330c      	adds	r3, #12
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e04f      	b.n	8001756 <shotPosition+0x43e>
			} else if (fires[k].col == playerL.y && fires[k].row == playerL.x) {
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <shotPosition+0x500>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	4413      	add	r3, r2
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <shotPosition+0x510>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d121      	bne.n	800170c <shotPosition+0x3f4>
 80016c8:	4a53      	ldr	r2, [pc, #332]	; (8001818 <shotPosition+0x500>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	3304      	adds	r3, #4
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b54      	ldr	r3, [pc, #336]	; (8001828 <shotPosition+0x510>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d117      	bne.n	800170c <shotPosition+0x3f4>
				//decreaseHealth(playerL);
				L_Health--;
 80016dc:	4b54      	ldr	r3, [pc, #336]	; (8001830 <shotPosition+0x518>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	4a53      	ldr	r2, [pc, #332]	; (8001830 <shotPosition+0x518>)
 80016e4:	6013      	str	r3, [r2, #0]
				playerR.score++;
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <shotPosition+0x508>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <shotPosition+0x508>)
 80016ee:	60d3      	str	r3, [r2, #12]
				if (vfx) {
 80016f0:	4b4e      	ldr	r3, [pc, #312]	; (800182c <shotPosition+0x514>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <shotPosition+0x3e4>
					playTankHitSound();
 80016f8:	f7fe fdc2 	bl	8000280 <playTankHitSound>
				}
				fires[k].isAlive = 0;
 80016fc:	4a46      	ldr	r2, [pc, #280]	; (8001818 <shotPosition+0x500>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	330c      	adds	r3, #12
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e024      	b.n	8001756 <shotPosition+0x43e>
			} else if (fires[k].col < 0 || fires[k].col >= 40
 800170c:	4a42      	ldr	r2, [pc, #264]	; (8001818 <shotPosition+0x500>)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db16      	blt.n	8001748 <shotPosition+0x430>
 800171a:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <shotPosition+0x500>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	4413      	add	r3, r2
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b27      	cmp	r3, #39	; 0x27
 8001726:	dc0f      	bgt.n	8001748 <shotPosition+0x430>
					|| fires[k].row < 0 || fires[k].row >= 2) {
 8001728:	4a3b      	ldr	r2, [pc, #236]	; (8001818 <shotPosition+0x500>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	3304      	adds	r3, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db07      	blt.n	8001748 <shotPosition+0x430>
 8001738:	4a37      	ldr	r2, [pc, #220]	; (8001818 <shotPosition+0x500>)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	dd06      	ble.n	8001756 <shotPosition+0x43e>
				fires[k].isAlive = 0;
 8001748:	4a33      	ldr	r2, [pc, #204]	; (8001818 <shotPosition+0x500>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	4413      	add	r3, r2
 8001750:	330c      	adds	r3, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
			}

			if (!(col == playerR.x && row == playerR.y)
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <shotPosition+0x508>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	d104      	bne.n	800176a <shotPosition+0x452>
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <shotPosition+0x508>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	429a      	cmp	r2, r3
 8001768:	d014      	beq.n	8001794 <shotPosition+0x47c>
					&& !(col == playerL.x && row == playerR.y)) {
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <shotPosition+0x510>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	429a      	cmp	r2, r3
 8001772:	d104      	bne.n	800177e <shotPosition+0x466>
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <shotPosition+0x508>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d00a      	beq.n	8001794 <shotPosition+0x47c>
				setCursor(col, row);
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f7ff f81f 	bl	80007c4 <setCursor>
				print(" ");
 8001786:	482b      	ldr	r0, [pc, #172]	; (8001834 <shotPosition+0x51c>)
 8001788:	f7ff f864 	bl	8000854 <print>
				HAL_Delay(500);
 800178c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001790:	f002 f848 	bl	8003824 <HAL_Delay>
			}

			if (fires[k].isAlive) {
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <shotPosition+0x500>)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	330c      	adds	r3, #12
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d012      	beq.n	80017ca <shotPosition+0x4b2>
				setCursor(fires[k].col, fires[k].row);
 80017a4:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <shotPosition+0x500>)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	491a      	ldr	r1, [pc, #104]	; (8001818 <shotPosition+0x500>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	440b      	add	r3, r1
 80017b6:	3304      	adds	r3, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7ff f801 	bl	80007c4 <setCursor>
				write(6);
 80017c2:	2006      	movs	r0, #6
 80017c4:	f7ff f8a8 	bl	8000918 <write>
 80017c8:	e018      	b.n	80017fc <shotPosition+0x4e4>
			} else {
				//num_shooted_bullet--;
				shootFlag = 0;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <shotPosition+0x520>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
				setCursor(col, row);
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7fe fff6 	bl	80007c4 <setCursor>
				print(" ");
 80017d8:	4816      	ldr	r0, [pc, #88]	; (8001834 <shotPosition+0x51c>)
 80017da:	f7ff f83b 	bl	8000854 <print>
				fires[k].col = -1;
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <shotPosition+0x500>)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	4413      	add	r3, r2
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	601a      	str	r2, [r3, #0]
				fires[k].row = -1;
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <shotPosition+0x500>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	3304      	adds	r3, #4
 80017f6:	f04f 32ff 	mov.w	r2, #4294967295
 80017fa:	601a      	str	r2, [r3, #0]
	for (int k = 0; k < num_shooted_bullet; k++) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <shotPosition+0x524>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	f6ff ad8b 	blt.w	8001324 <shotPosition+0xc>
			}
		}

	}
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000628 	.word	0x20000628
 800181c:	20000d50 	.word	0x20000d50
 8001820:	20000c68 	.word	0x20000c68
 8001824:	20000004 	.word	0x20000004
 8001828:	20000c78 	.word	0x20000c78
 800182c:	20000014 	.word	0x20000014
 8001830:	20000008 	.word	0x20000008
 8001834:	08009e30 	.word	0x08009e30
 8001838:	2000061c 	.word	0x2000061c
 800183c:	20000624 	.word	0x20000624

08001840 <movement>:
void movement(Player *player, int currentState) {
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
//
//	sprintf(buffer, "Player X: %d, Player Y: %d", player->x, player->y); // Convert integers to string
//
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//	HAL_MAX_DELAY); // Transmit string over UART
	int oldX = player->x;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60fb      	str	r3, [r7, #12]
	int oldY = player->y;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	60bb      	str	r3, [r7, #8]
	switch (currentState) {
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b03      	cmp	r3, #3
 800185a:	f200 8247 	bhi.w	8001cec <movement+0x4ac>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <movement+0x24>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001875 	.word	0x08001875
 8001868:	08001959 	.word	0x08001959
 800186c:	08001ac1 	.word	0x08001ac1
 8001870:	08001c19 	.word	0x08001c19
	case 0:	//top

		if (player->x == 1 && lcd[0][player->y] != 4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d124      	bne.n	80018c6 <movement+0x86>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a8b      	ldr	r2, [pc, #556]	; (8001ab0 <movement+0x270>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d01e      	beq.n	80018c6 <movement+0x86>
				&& lcd[0][player->y] != 3) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a88      	ldr	r2, [pc, #544]	; (8001ab0 <movement+0x270>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d018      	beq.n	80018c6 <movement+0x86>
			//catching heart and bullet
			if (lcd[0][player->y] == 1) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a85      	ldr	r2, [pc, #532]	; (8001ab0 <movement+0x270>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d104      	bne.n	80018aa <movement+0x6a>
				increase(1, player);
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7ff fc94 	bl	80011d0 <increase>
 80018a8:	e009      	b.n	80018be <movement+0x7e>
			} else if (lcd[0][player->y] == 5) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a80      	ldr	r2, [pc, #512]	; (8001ab0 <movement+0x270>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d103      	bne.n	80018be <movement+0x7e>
				increase(0, player);
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fc89 	bl	80011d0 <increase>
			}
			player->x = 0;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e047      	b.n	8001956 <movement+0x116>
		} else if (player->x == 0 && player->y >= 20) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d13a      	bne.n	8001944 <movement+0x104>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b13      	cmp	r3, #19
 80018d4:	dd36      	ble.n	8001944 <movement+0x104>
			if (lcd[1][(player->y) - 20] != 4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	3b14      	subs	r3, #20
 80018dc:	4a74      	ldr	r2, [pc, #464]	; (8001ab0 <movement+0x270>)
 80018de:	4413      	add	r3, r2
 80018e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d035      	beq.n	8001954 <movement+0x114>
					&& lcd[1][(player->y) - 20] != 3) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	3b14      	subs	r3, #20
 80018ee:	4a70      	ldr	r2, [pc, #448]	; (8001ab0 <movement+0x270>)
 80018f0:	4413      	add	r3, r2
 80018f2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d02c      	beq.n	8001954 <movement+0x114>
				//catching heart and bullet
				if (lcd[1][(player->y) - 20] == 1) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	3b14      	subs	r3, #20
 8001900:	4a6b      	ldr	r2, [pc, #428]	; (8001ab0 <movement+0x270>)
 8001902:	4413      	add	r3, r2
 8001904:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001908:	2b01      	cmp	r3, #1
 800190a:	d104      	bne.n	8001916 <movement+0xd6>
					increase(1, player);
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	2001      	movs	r0, #1
 8001910:	f7ff fc5e 	bl	80011d0 <increase>
 8001914:	e00c      	b.n	8001930 <movement+0xf0>
				} else if (lcd[1][(player->y) - 20] == 5) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	3b14      	subs	r3, #20
 800191c:	4a64      	ldr	r2, [pc, #400]	; (8001ab0 <movement+0x270>)
 800191e:	4413      	add	r3, r2
 8001920:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001924:	2b05      	cmp	r3, #5
 8001926:	d103      	bne.n	8001930 <movement+0xf0>
					increase(0, player);
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fc50 	bl	80011d0 <increase>
				}
				player->x = 1;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
				player->y = (player->y) - 20;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f1a3 0214 	sub.w	r2, r3, #20
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	605a      	str	r2, [r3, #4]
			if (lcd[1][(player->y) - 20] != 4
 8001942:	e007      	b.n	8001954 <movement+0x114>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT TOP", 8,
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
 8001948:	2208      	movs	r2, #8
 800194a:	495a      	ldr	r1, [pc, #360]	; (8001ab4 <movement+0x274>)
 800194c:	485a      	ldr	r0, [pc, #360]	; (8001ab8 <movement+0x278>)
 800194e:	f005 ff91 	bl	8007874 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001952:	e1cb      	b.n	8001cec <movement+0x4ac>
			if (lcd[1][(player->y) - 20] != 4
 8001954:	bf00      	nop
		break;
 8001956:	e1c9      	b.n	8001cec <movement+0x4ac>
	case 1:	//right

		if (player->y >= 0 && player->y < 19) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db4c      	blt.n	80019fa <movement+0x1ba>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b12      	cmp	r3, #18
 8001966:	dc48      	bgt.n	80019fa <movement+0x1ba>
			if (lcd[player->x][(player->y) + 1] != 3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	3301      	adds	r3, #1
 8001972:	494f      	ldr	r1, [pc, #316]	; (8001ab0 <movement+0x270>)
 8001974:	2026      	movs	r0, #38	; 0x26
 8001976:	fb00 f202 	mul.w	r2, r0, r2
 800197a:	440a      	add	r2, r1
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b03      	cmp	r3, #3
 8001982:	f000 8091 	beq.w	8001aa8 <movement+0x268>
					&& lcd[player->x][(player->y) + 1] != 4) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	3301      	adds	r3, #1
 8001990:	4947      	ldr	r1, [pc, #284]	; (8001ab0 <movement+0x270>)
 8001992:	2026      	movs	r0, #38	; 0x26
 8001994:	fb00 f202 	mul.w	r2, r0, r2
 8001998:	440a      	add	r2, r1
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	f000 8082 	beq.w	8001aa8 <movement+0x268>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4940      	ldr	r1, [pc, #256]	; (8001ab0 <movement+0x270>)
 80019b0:	2026      	movs	r0, #38	; 0x26
 80019b2:	fb00 f202 	mul.w	r2, r0, r2
 80019b6:	440a      	add	r2, r1
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d104      	bne.n	80019ca <movement+0x18a>
					increase(1, player);
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fc04 	bl	80011d0 <increase>
 80019c8:	e011      	b.n	80019ee <movement+0x1ae>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4936      	ldr	r1, [pc, #216]	; (8001ab0 <movement+0x270>)
 80019d6:	2026      	movs	r0, #38	; 0x26
 80019d8:	fb00 f202 	mul.w	r2, r0, r2
 80019dc:	440a      	add	r2, r1
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d103      	bne.n	80019ee <movement+0x1ae>
					increase(0, player);
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fbf1 	bl	80011d0 <increase>
				}
				player->y = (player->y) + 1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 80019f8:	e056      	b.n	8001aa8 <movement+0x268>
			}
		} else if (player->y < 39 && player->y >= 20) {
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b26      	cmp	r3, #38	; 0x26
 8001a00:	dc4a      	bgt.n	8001a98 <movement+0x258>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b13      	cmp	r3, #19
 8001a08:	dd46      	ble.n	8001a98 <movement+0x258>
			if (lcd[player->x][(player->y) + 1] != 3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4926      	ldr	r1, [pc, #152]	; (8001ab0 <movement+0x270>)
 8001a16:	2026      	movs	r0, #38	; 0x26
 8001a18:	fb00 f202 	mul.w	r2, r0, r2
 8001a1c:	440a      	add	r2, r1
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d042      	beq.n	8001aac <movement+0x26c>
					&& lcd[player->x][(player->y) + 1] != 4) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	491f      	ldr	r1, [pc, #124]	; (8001ab0 <movement+0x270>)
 8001a32:	2026      	movs	r0, #38	; 0x26
 8001a34:	fb00 f202 	mul.w	r2, r0, r2
 8001a38:	440a      	add	r2, r1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d034      	beq.n	8001aac <movement+0x26c>
				//catching heart and bullet
				if (lcd[player->x][(player->y) + 1] == 1) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	4918      	ldr	r1, [pc, #96]	; (8001ab0 <movement+0x270>)
 8001a4e:	2026      	movs	r0, #38	; 0x26
 8001a50:	fb00 f202 	mul.w	r2, r0, r2
 8001a54:	440a      	add	r2, r1
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d104      	bne.n	8001a68 <movement+0x228>
					increase(1, player);
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fbb5 	bl	80011d0 <increase>
 8001a66:	e011      	b.n	8001a8c <movement+0x24c>
				} else if (lcd[player->x][(player->y) + 1] == 5) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	3301      	adds	r3, #1
 8001a72:	490f      	ldr	r1, [pc, #60]	; (8001ab0 <movement+0x270>)
 8001a74:	2026      	movs	r0, #38	; 0x26
 8001a76:	fb00 f202 	mul.w	r2, r0, r2
 8001a7a:	440a      	add	r2, r1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	d103      	bne.n	8001a8c <movement+0x24c>
					increase(0, player);
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff fba2 	bl	80011d0 <increase>
				}
				player->y = (player->y) + 1;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) + 1] != 3
 8001a96:	e009      	b.n	8001aac <movement+0x26c>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT RIGHt", 10,
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	4907      	ldr	r1, [pc, #28]	; (8001abc <movement+0x27c>)
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <movement+0x278>)
 8001aa2:	f005 fee7 	bl	8007874 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001aa6:	e121      	b.n	8001cec <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001aa8:	bf00      	nop
 8001aaa:	e11f      	b.n	8001cec <movement+0x4ac>
			if (lcd[player->x][(player->y) + 1] != 3
 8001aac:	bf00      	nop
		break;
 8001aae:	e11d      	b.n	8001cec <movement+0x4ac>
 8001ab0:	20000d50 	.word	0x20000d50
 8001ab4:	08009e34 	.word	0x08009e34
 8001ab8:	200002a4 	.word	0x200002a4
 8001abc:	08009e40 	.word	0x08009e40

	case 2:	//left

		if (player->y > 0 && player->y <= 19) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dd4c      	ble.n	8001b62 <movement+0x322>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b13      	cmp	r3, #19
 8001ace:	dc48      	bgt.n	8001b62 <movement+0x322>
			if (lcd[player->x][(player->y) - 1] != 3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	4997      	ldr	r1, [pc, #604]	; (8001d38 <movement+0x4f8>)
 8001adc:	2026      	movs	r0, #38	; 0x26
 8001ade:	fb00 f202 	mul.w	r2, r0, r2
 8001ae2:	440a      	add	r2, r1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	f000 8091 	beq.w	8001c10 <movement+0x3d0>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	498f      	ldr	r1, [pc, #572]	; (8001d38 <movement+0x4f8>)
 8001afa:	2026      	movs	r0, #38	; 0x26
 8001afc:	fb00 f202 	mul.w	r2, r0, r2
 8001b00:	440a      	add	r2, r1
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	f000 8082 	beq.w	8001c10 <movement+0x3d0>
				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4988      	ldr	r1, [pc, #544]	; (8001d38 <movement+0x4f8>)
 8001b18:	2026      	movs	r0, #38	; 0x26
 8001b1a:	fb00 f202 	mul.w	r2, r0, r2
 8001b1e:	440a      	add	r2, r1
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d104      	bne.n	8001b32 <movement+0x2f2>
					increase(1, player);
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fb50 	bl	80011d0 <increase>
 8001b30:	e011      	b.n	8001b56 <movement+0x316>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	497e      	ldr	r1, [pc, #504]	; (8001d38 <movement+0x4f8>)
 8001b3e:	2026      	movs	r0, #38	; 0x26
 8001b40:	fb00 f202 	mul.w	r2, r0, r2
 8001b44:	440a      	add	r2, r1
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d103      	bne.n	8001b56 <movement+0x316>
					increase(0, player);
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff fb3d 	bl	80011d0 <increase>
				}

				player->y = (player->y) - 1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001b60:	e056      	b.n	8001c10 <movement+0x3d0>
			}
		} else if (player->y <= 39 && player->y > 20) {
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b27      	cmp	r3, #39	; 0x27
 8001b68:	dc4a      	bgt.n	8001c00 <movement+0x3c0>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b14      	cmp	r3, #20
 8001b70:	dd46      	ble.n	8001c00 <movement+0x3c0>
			if (lcd[player->x][(player->y) - 1] != 3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	496e      	ldr	r1, [pc, #440]	; (8001d38 <movement+0x4f8>)
 8001b7e:	2026      	movs	r0, #38	; 0x26
 8001b80:	fb00 f202 	mul.w	r2, r0, r2
 8001b84:	440a      	add	r2, r1
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d042      	beq.n	8001c14 <movement+0x3d4>
					&& lcd[player->x][(player->y) - 1] != 4) {
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	4967      	ldr	r1, [pc, #412]	; (8001d38 <movement+0x4f8>)
 8001b9a:	2026      	movs	r0, #38	; 0x26
 8001b9c:	fb00 f202 	mul.w	r2, r0, r2
 8001ba0:	440a      	add	r2, r1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d034      	beq.n	8001c14 <movement+0x3d4>

				//catching heart and bullet
				if (lcd[player->x][(player->y) - 1] == 1) {
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	4960      	ldr	r1, [pc, #384]	; (8001d38 <movement+0x4f8>)
 8001bb6:	2026      	movs	r0, #38	; 0x26
 8001bb8:	fb00 f202 	mul.w	r2, r0, r2
 8001bbc:	440a      	add	r2, r1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d104      	bne.n	8001bd0 <movement+0x390>
					increase(1, player);
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff fb01 	bl	80011d0 <increase>
 8001bce:	e011      	b.n	8001bf4 <movement+0x3b4>
				} else if (lcd[player->x][(player->y) - 1] == 5) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4957      	ldr	r1, [pc, #348]	; (8001d38 <movement+0x4f8>)
 8001bdc:	2026      	movs	r0, #38	; 0x26
 8001bde:	fb00 f202 	mul.w	r2, r0, r2
 8001be2:	440a      	add	r2, r1
 8001be4:	4413      	add	r3, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d103      	bne.n	8001bf4 <movement+0x3b4>
					increase(0, player);
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff faee 	bl	80011d0 <increase>
				}

				player->y = (player->y) - 1;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]
			if (lcd[player->x][(player->y) - 1] != 3
 8001bfe:	e009      	b.n	8001c14 <movement+0x3d4>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT LEFT", 9,
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	2209      	movs	r2, #9
 8001c06:	494d      	ldr	r1, [pc, #308]	; (8001d3c <movement+0x4fc>)
 8001c08:	484d      	ldr	r0, [pc, #308]	; (8001d40 <movement+0x500>)
 8001c0a:	f005 fe33 	bl	8007874 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001c0e:	e06d      	b.n	8001cec <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001c10:	bf00      	nop
 8001c12:	e06b      	b.n	8001cec <movement+0x4ac>
			if (lcd[player->x][(player->y) - 1] != 3
 8001c14:	bf00      	nop
		break;
 8001c16:	e069      	b.n	8001cec <movement+0x4ac>
		break;
	case 3:	//bot
		if (player->x == 0 && lcd[1][player->y] != 4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d12c      	bne.n	8001c7a <movement+0x43a>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a44      	ldr	r2, [pc, #272]	; (8001d38 <movement+0x4f8>)
 8001c26:	4413      	add	r3, r2
 8001c28:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d024      	beq.n	8001c7a <movement+0x43a>
				&& lcd[1][player->y] != 3) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a40      	ldr	r2, [pc, #256]	; (8001d38 <movement+0x4f8>)
 8001c36:	4413      	add	r3, r2
 8001c38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d01c      	beq.n	8001c7a <movement+0x43a>
			//catching heart and bullet
			if (lcd[1][player->y] == 1) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a3c      	ldr	r2, [pc, #240]	; (8001d38 <movement+0x4f8>)
 8001c46:	4413      	add	r3, r2
 8001c48:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d104      	bne.n	8001c5a <movement+0x41a>
				increase(1, player);
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	2001      	movs	r0, #1
 8001c54:	f7ff fabc 	bl	80011d0 <increase>
 8001c58:	e00b      	b.n	8001c72 <movement+0x432>
			} else if (lcd[1][player->y] == 5) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <movement+0x4f8>)
 8001c60:	4413      	add	r3, r2
 8001c62:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d103      	bne.n	8001c72 <movement+0x432>
				increase(0, player);
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff faaf 	bl	80011d0 <increase>
			}

			player->x = 1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e037      	b.n	8001cea <movement+0x4aa>
		} else if (player->x == 1 && player->y < 20) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d12b      	bne.n	8001cda <movement+0x49a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b13      	cmp	r3, #19
 8001c88:	dc27      	bgt.n	8001cda <movement+0x49a>
			if (lcd[0][(player->y) + 20] != 4) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <movement+0x4f8>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d028      	beq.n	8001cea <movement+0x4aa>
				//catching heart and bullet
				if (lcd[0][(player->y) + 20] == 1) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <movement+0x4f8>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d104      	bne.n	8001cb0 <movement+0x470>
					increase(1, player);
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff fa91 	bl	80011d0 <increase>
 8001cae:	e00a      	b.n	8001cc6 <movement+0x486>
				} else if (lcd[0][(player->y) + 20] == 5) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	3314      	adds	r3, #20
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <movement+0x4f8>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d103      	bne.n	8001cc6 <movement+0x486>
					increase(0, player);
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff fa85 	bl	80011d0 <increase>
				}
				player->x = 0;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
				player->y = (player->y) + 20;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f103 0214 	add.w	r2, r3, #20
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]
			if (lcd[0][(player->y) + 20] != 4) {
 8001cd8:	e007      	b.n	8001cea <movement+0x4aa>
			}
		} else {
			HAL_UART_Transmit(&huart1, "CANT BOT", 8,
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	2208      	movs	r2, #8
 8001ce0:	4918      	ldr	r1, [pc, #96]	; (8001d44 <movement+0x504>)
 8001ce2:	4817      	ldr	r0, [pc, #92]	; (8001d40 <movement+0x500>)
 8001ce4:	f005 fdc6 	bl	8007874 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}
		break;
 8001ce8:	e7ff      	b.n	8001cea <movement+0x4aa>
 8001cea:	bf00      	nop
	}

	lcd[player->x][player->y] = player->c;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	7a4c      	ldrb	r4, [r1, #9]
 8001cf8:	490f      	ldr	r1, [pc, #60]	; (8001d38 <movement+0x4f8>)
 8001cfa:	2026      	movs	r0, #38	; 0x26
 8001cfc:	fb00 f202 	mul.w	r2, r0, r2
 8001d00:	440a      	add	r2, r1
 8001d02:	4413      	add	r3, r2
 8001d04:	4622      	mov	r2, r4
 8001d06:	701a      	strb	r2, [r3, #0]

	// Clear the old position on the LCD
	setCursor(oldY, oldX);
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f7fe fd5a 	bl	80007c4 <setCursor>
	write(' ');
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7fe fe01 	bl	8000918 <write>

	// Write the player's character at the new position on the LCD
	setCursor(player->y, player->x);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4610      	mov	r0, r2
 8001d22:	f7fe fd4f 	bl	80007c4 <setCursor>
	write(player->c);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7a5b      	ldrb	r3, [r3, #9]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fdf4 	bl	8000918 <write>

}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}
 8001d38:	20000d50 	.word	0x20000d50
 8001d3c:	08009e4c 	.word	0x08009e4c
 8001d40:	200002a4 	.word	0x200002a4
 8001d44:	08009e58 	.word	0x08009e58

08001d48 <initializeObjects>:

void initializeObjects() {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b08b      	sub	sp, #44	; 0x2c
 8001d4c:	af00      	add	r7, sp, #0
	playerR.x = 1;
 8001d4e:	4ba8      	ldr	r3, [pc, #672]	; (8001ff0 <initializeObjects+0x2a8>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
	playerR.y = 19;
 8001d54:	4ba6      	ldr	r3, [pc, #664]	; (8001ff0 <initializeObjects+0x2a8>)
 8001d56:	2213      	movs	r2, #19
 8001d58:	605a      	str	r2, [r3, #4]
	playerR.c = 7;
 8001d5a:	4ba5      	ldr	r3, [pc, #660]	; (8001ff0 <initializeObjects+0x2a8>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	725a      	strb	r2, [r3, #9]
	playerL.c = 8;
 8001d60:	4ba4      	ldr	r3, [pc, #656]	; (8001ff4 <initializeObjects+0x2ac>)
 8001d62:	2208      	movs	r2, #8
 8001d64:	725a      	strb	r2, [r3, #9]
	playerL.x = 1;
 8001d66:	4ba3      	ldr	r3, [pc, #652]	; (8001ff4 <initializeObjects+0x2ac>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
	playerL.y = 0;
 8001d6c:	4ba1      	ldr	r3, [pc, #644]	; (8001ff4 <initializeObjects+0x2ac>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	e015      	b.n	8001da4 <initializeObjects+0x5c>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	e00c      	b.n	8001d98 <initializeObjects+0x50>
			lcd[i][j] = ' ';  // Empty cell
 8001d7e:	4a9e      	ldr	r2, [pc, #632]	; (8001ff8 <initializeObjects+0x2b0>)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	2126      	movs	r1, #38	; 0x26
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	441a      	add	r2, r3
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2220      	movs	r2, #32
 8001d90:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < LCD_WIDTH; j++) {
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	3301      	adds	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b25      	cmp	r3, #37	; 0x25
 8001d9c:	ddef      	ble.n	8001d7e <initializeObjects+0x36>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3301      	adds	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	dde6      	ble.n	8001d78 <initializeObjects+0x30>
		}
	}

	//hearts
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	e036      	b.n	8001e1e <initializeObjects+0xd6>
		hearts[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001db0:	f006 fdc0 	bl	8008934 <rand>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <initializeObjects+0x2b4>)
 8001db8:	fb83 1302 	smull	r1, r3, r3, r2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	1119      	asrs	r1, r3, #4
 8001dc0:	17d3      	asrs	r3, r2, #31
 8001dc2:	1ac9      	subs	r1, r1, r3
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	1ad1      	subs	r1, r2, r3
 8001dce:	3103      	adds	r1, #3
 8001dd0:	488b      	ldr	r0, [pc, #556]	; (8002000 <initializeObjects+0x2b8>)
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4403      	add	r3, r0
 8001dde:	6019      	str	r1, [r3, #0]
		hearts[i].y = rand() % 2;       // Random number between 0 and 1
 8001de0:	f006 fda8 	bl	8008934 <rand>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	bfb8      	it	lt
 8001dee:	425b      	neglt	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	4883      	ldr	r0, [pc, #524]	; (8002000 <initializeObjects+0x2b8>)
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4403      	add	r3, r0
 8001e00:	3304      	adds	r3, #4
 8001e02:	6019      	str	r1, [r3, #0]
		hearts[i].c = 1;
 8001e04:	497e      	ldr	r1, [pc, #504]	; (8002000 <initializeObjects+0x2b8>)
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3308      	adds	r3, #8
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	ddc5      	ble.n	8001db0 <initializeObjects+0x68>
	}

	//  mistery boxes
	for (int i = 0; i < NUM_BOXES; i++) {
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	e036      	b.n	8001e98 <initializeObjects+0x150>
		boxes[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001e2a:	f006 fd83 	bl	8008934 <rand>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <initializeObjects+0x2b4>)
 8001e32:	fb83 1302 	smull	r1, r3, r3, r2
 8001e36:	4413      	add	r3, r2
 8001e38:	1119      	asrs	r1, r3, #4
 8001e3a:	17d3      	asrs	r3, r2, #31
 8001e3c:	1ac9      	subs	r1, r1, r3
 8001e3e:	460b      	mov	r3, r1
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	1a5b      	subs	r3, r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	1ad1      	subs	r1, r2, r3
 8001e48:	3103      	adds	r1, #3
 8001e4a:	486e      	ldr	r0, [pc, #440]	; (8002004 <initializeObjects+0x2bc>)
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4403      	add	r3, r0
 8001e58:	6019      	str	r1, [r3, #0]
		boxes[i].y = rand() % 2;       // Random number between 0 and 1
 8001e5a:	f006 fd6b 	bl	8008934 <rand>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	bfb8      	it	lt
 8001e68:	425b      	neglt	r3, r3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4865      	ldr	r0, [pc, #404]	; (8002004 <initializeObjects+0x2bc>)
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4403      	add	r3, r0
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	6019      	str	r1, [r3, #0]
		boxes[i].c = 2;
 8001e7e:	4961      	ldr	r1, [pc, #388]	; (8002004 <initializeObjects+0x2bc>)
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	ddc5      	ble.n	8001e2a <initializeObjects+0xe2>
	}

	//bullets
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e036      	b.n	8001f12 <initializeObjects+0x1ca>
		bullets[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001ea4:	f006 fd46 	bl	8008934 <rand>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <initializeObjects+0x2b4>)
 8001eac:	fb83 1302 	smull	r1, r3, r3, r2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	1119      	asrs	r1, r3, #4
 8001eb4:	17d3      	asrs	r3, r2, #31
 8001eb6:	1ac9      	subs	r1, r1, r3
 8001eb8:	460b      	mov	r3, r1
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a5b      	subs	r3, r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	1ad1      	subs	r1, r2, r3
 8001ec2:	3103      	adds	r1, #3
 8001ec4:	4850      	ldr	r0, [pc, #320]	; (8002008 <initializeObjects+0x2c0>)
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4403      	add	r3, r0
 8001ed2:	6019      	str	r1, [r3, #0]
		bullets[i].y = rand() % 2;       // Random number between 0 and 1
 8001ed4:	f006 fd2e 	bl	8008934 <rand>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	bfb8      	it	lt
 8001ee2:	425b      	neglt	r3, r3
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4848      	ldr	r0, [pc, #288]	; (8002008 <initializeObjects+0x2c0>)
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4403      	add	r3, r0
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	6019      	str	r1, [r3, #0]
		bullets[i].c = 5;
 8001ef8:	4943      	ldr	r1, [pc, #268]	; (8002008 <initializeObjects+0x2c0>)
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3308      	adds	r3, #8
 8001f08:	2205      	movs	r2, #5
 8001f0a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	ddc5      	ble.n	8001ea4 <initializeObjects+0x15c>
	}
	//obstacles
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e036      	b.n	8001f8c <initializeObjects+0x244>
		obstacles[i].x = 3 + rand() % 28;  // Random number between 3 and 30
 8001f1e:	f006 fd09 	bl	8008934 <rand>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <initializeObjects+0x2b4>)
 8001f26:	fb83 1302 	smull	r1, r3, r3, r2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	1119      	asrs	r1, r3, #4
 8001f2e:	17d3      	asrs	r3, r2, #31
 8001f30:	1ac9      	subs	r1, r1, r3
 8001f32:	460b      	mov	r3, r1
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a5b      	subs	r3, r3, r1
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	1ad1      	subs	r1, r2, r3
 8001f3c:	3103      	adds	r1, #3
 8001f3e:	4833      	ldr	r0, [pc, #204]	; (800200c <initializeObjects+0x2c4>)
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	6019      	str	r1, [r3, #0]
		obstacles[i].y = rand() % 2;       // Random number between 0 and 1
 8001f4e:	f006 fcf1 	bl	8008934 <rand>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	bfb8      	it	lt
 8001f5c:	425b      	neglt	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	482a      	ldr	r0, [pc, #168]	; (800200c <initializeObjects+0x2c4>)
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3304      	adds	r3, #4
 8001f70:	6019      	str	r1, [r3, #0]
		obstacles[i].c = 4;
 8001f72:	4926      	ldr	r1, [pc, #152]	; (800200c <initializeObjects+0x2c4>)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3308      	adds	r3, #8
 8001f82:	2204      	movs	r2, #4
 8001f84:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	ddc5      	ble.n	8001f1e <initializeObjects+0x1d6>
	}
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e024      	b.n	8001fe2 <initializeObjects+0x29a>
		lcd[hearts[i].y][hearts[i].x] = hearts[i].c;
 8001f98:	4919      	ldr	r1, [pc, #100]	; (8002000 <initializeObjects+0x2b8>)
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	4915      	ldr	r1, [pc, #84]	; (8002000 <initializeObjects+0x2b8>)
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	4c11      	ldr	r4, [pc, #68]	; (8002000 <initializeObjects+0x2b8>)
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4423      	add	r3, r4
 8001fc8:	3308      	adds	r3, #8
 8001fca:	781c      	ldrb	r4, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <initializeObjects+0x2b0>)
 8001fce:	2326      	movs	r3, #38	; 0x26
 8001fd0:	fb00 f303 	mul.w	r3, r0, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	4622      	mov	r2, r4
 8001fda:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_HEARTS; i++) {
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	ddd7      	ble.n	8001f98 <initializeObjects+0x250>
	}
	for (int i = 0; i < NUM_BULLETS; i++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	e035      	b.n	800205a <initializeObjects+0x312>
 8001fee:	bf00      	nop
 8001ff0:	20000c68 	.word	0x20000c68
 8001ff4:	20000c78 	.word	0x20000c78
 8001ff8:	20000d50 	.word	0x20000d50
 8001ffc:	92492493 	.word	0x92492493
 8002000:	20000c90 	.word	0x20000c90
 8002004:	20000cb4 	.word	0x20000cb4
 8002008:	20000ccc 	.word	0x20000ccc
 800200c:	20000d08 	.word	0x20000d08
		lcd[bullets[i].y][bullets[i].x] = bullets[i].c;
 8002010:	4956      	ldr	r1, [pc, #344]	; (800216c <initializeObjects+0x424>)
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3304      	adds	r3, #4
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	4952      	ldr	r1, [pc, #328]	; (800216c <initializeObjects+0x424>)
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	4c4e      	ldr	r4, [pc, #312]	; (800216c <initializeObjects+0x424>)
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4423      	add	r3, r4
 8002040:	3308      	adds	r3, #8
 8002042:	781c      	ldrb	r4, [r3, #0]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <initializeObjects+0x428>)
 8002046:	2326      	movs	r3, #38	; 0x26
 8002048:	fb00 f303 	mul.w	r3, r0, r3
 800204c:	4413      	add	r3, r2
 800204e:	440b      	add	r3, r1
 8002050:	4622      	mov	r2, r4
 8002052:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BULLETS; i++) {
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3301      	adds	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b04      	cmp	r3, #4
 800205e:	ddd7      	ble.n	8002010 <initializeObjects+0x2c8>
	}
	for (int i = 0; i < NUM_BOXES; i++) {
 8002060:	2300      	movs	r3, #0
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	e024      	b.n	80020b0 <initializeObjects+0x368>
		lcd[boxes[i].y][boxes[i].x] = boxes[i].c;
 8002066:	4943      	ldr	r1, [pc, #268]	; (8002174 <initializeObjects+0x42c>)
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3304      	adds	r3, #4
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	493e      	ldr	r1, [pc, #248]	; (8002174 <initializeObjects+0x42c>)
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	4c3a      	ldr	r4, [pc, #232]	; (8002174 <initializeObjects+0x42c>)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4423      	add	r3, r4
 8002096:	3308      	adds	r3, #8
 8002098:	781c      	ldrb	r4, [r3, #0]
 800209a:	4a35      	ldr	r2, [pc, #212]	; (8002170 <initializeObjects+0x428>)
 800209c:	2326      	movs	r3, #38	; 0x26
 800209e:	fb00 f303 	mul.w	r3, r0, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	4622      	mov	r2, r4
 80020a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_BOXES; i++) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3301      	adds	r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	ddd7      	ble.n	8002066 <initializeObjects+0x31e>
	}
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	e024      	b.n	8002106 <initializeObjects+0x3be>
		lcd[obstacles[i].y][obstacles[i].x] = obstacles[i].c;
 80020bc:	492e      	ldr	r1, [pc, #184]	; (8002178 <initializeObjects+0x430>)
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3304      	adds	r3, #4
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	492a      	ldr	r1, [pc, #168]	; (8002178 <initializeObjects+0x430>)
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	4c26      	ldr	r4, [pc, #152]	; (8002178 <initializeObjects+0x430>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4423      	add	r3, r4
 80020ec:	3308      	adds	r3, #8
 80020ee:	781c      	ldrb	r4, [r3, #0]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <initializeObjects+0x428>)
 80020f2:	2326      	movs	r3, #38	; 0x26
 80020f4:	fb00 f303 	mul.w	r3, r0, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	4622      	mov	r2, r4
 80020fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_OBSTACLE; i++) {
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b05      	cmp	r3, #5
 800210a:	ddd7      	ble.n	80020bc <initializeObjects+0x374>
	}
	//WALLS
	lcd[1][1] = 3;
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <initializeObjects+0x428>)
 800210e:	2203      	movs	r2, #3
 8002110:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	lcd[0][22] = 3;
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <initializeObjects+0x428>)
 8002116:	2203      	movs	r2, #3
 8002118:	759a      	strb	r2, [r3, #22]
	lcd[1][18] = 3;
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <initializeObjects+0x428>)
 800211c:	2203      	movs	r2, #3
 800211e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	lcd[0][37] = 3;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <initializeObjects+0x428>)
 8002124:	2203      	movs	r2, #3
 8002126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//[0][38] [0][39] [1][38] [1][39]  are dead
	//Wolves
	lcd[playerR.x][playerR.y] = playerR.c;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <initializeObjects+0x434>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <initializeObjects+0x434>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4912      	ldr	r1, [pc, #72]	; (800217c <initializeObjects+0x434>)
 8002134:	7a4c      	ldrb	r4, [r1, #9]
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <initializeObjects+0x428>)
 8002138:	2026      	movs	r0, #38	; 0x26
 800213a:	fb00 f202 	mul.w	r2, r0, r2
 800213e:	440a      	add	r2, r1
 8002140:	4413      	add	r3, r2
 8002142:	4622      	mov	r2, r4
 8002144:	701a      	strb	r2, [r3, #0]
	lcd[playerL.x][playerL.y] = playerL.c;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <initializeObjects+0x438>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <initializeObjects+0x438>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	490c      	ldr	r1, [pc, #48]	; (8002180 <initializeObjects+0x438>)
 8002150:	7a4c      	ldrb	r4, [r1, #9]
 8002152:	4907      	ldr	r1, [pc, #28]	; (8002170 <initializeObjects+0x428>)
 8002154:	2026      	movs	r0, #38	; 0x26
 8002156:	fb00 f202 	mul.w	r2, r0, r2
 800215a:	440a      	add	r2, r1
 800215c:	4413      	add	r3, r2
 800215e:	4622      	mov	r2, r4
 8002160:	701a      	strb	r2, [r3, #0]
	//lcd[1][0]=8;
	//lcd[1][19]=7;
}
 8002162:	bf00      	nop
 8002164:	372c      	adds	r7, #44	; 0x2c
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	20000ccc 	.word	0x20000ccc
 8002170:	20000d50 	.word	0x20000d50
 8002174:	20000cb4 	.word	0x20000cb4
 8002178:	20000d08 	.word	0x20000d08
 800217c:	20000c68 	.word	0x20000c68
 8002180:	20000c78 	.word	0x20000c78

08002184 <displayObjects>:

void displayObjects() {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
	// Display the objects based on the screen array
	for (int i = 0; i < LCD_HEIGHT; i++) {
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	e01b      	b.n	80021c8 <displayObjects+0x44>
		for (int j = 0; j < LCD_WIDTH; j++) {
 8002190:	2300      	movs	r3, #0
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	e012      	b.n	80021bc <displayObjects+0x38>
			setCursor(j, i);
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f7fe fb13 	bl	80007c4 <setCursor>
			write(lcd[i][j]);
 800219e:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <displayObjects+0x54>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2126      	movs	r1, #38	; 0x26
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	441a      	add	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fbb1 	bl	8000918 <write>
		for (int j = 0; j < LCD_WIDTH; j++) {
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b25      	cmp	r3, #37	; 0x25
 80021c0:	dde9      	ble.n	8002196 <displayObjects+0x12>
	for (int i = 0; i < LCD_HEIGHT; i++) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3301      	adds	r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	dde0      	ble.n	8002190 <displayObjects+0xc>
		}
	}
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000d50 	.word	0x20000d50

080021dc <showMain>:

//MENU PART
void showMain(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 80021e0:	2100      	movs	r1, #0
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe faee 	bl	80007c4 <setCursor>
	print("1- Play");
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <showMain+0x38>)
 80021ea:	f7fe fb33 	bl	8000854 <print>
	setCursor(0, 1);
 80021ee:	2101      	movs	r1, #1
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fae7 	bl	80007c4 <setCursor>
	print("2- About");
 80021f6:	4808      	ldr	r0, [pc, #32]	; (8002218 <showMain+0x3c>)
 80021f8:	f7fe fb2c 	bl	8000854 <print>
	write(1);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7fe fb8b 	bl	8000918 <write>
	setCursor(20, 0);
 8002202:	2100      	movs	r1, #0
 8002204:	2014      	movs	r0, #20
 8002206:	f7fe fadd 	bl	80007c4 <setCursor>
	print("3- Setting");
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <showMain+0x40>)
 800220c:	f7fe fb22 	bl	8000854 <print>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	08009e64 	.word	0x08009e64
 8002218:	08009e6c 	.word	0x08009e6c
 800221c:	08009e78 	.word	0x08009e78

08002220 <showAbout>:

void showAbout(void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8002224:	2100      	movs	r1, #0
 8002226:	2000      	movs	r0, #0
 8002228:	f7fe facc 	bl	80007c4 <setCursor>
	print("Kimiya & Atiye");
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <showAbout+0x18>)
 800222e:	f7fe fb11 	bl	8000854 <print>
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	08009e84 	.word	0x08009e84

0800223c <showSetting>:

void showSetting(void) {
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	setCursor(0, 0);
 8002240:	2100      	movs	r1, #0
 8002242:	2000      	movs	r0, #0
 8002244:	f7fe fabe 	bl	80007c4 <setCursor>
	print("Right vs Left");
 8002248:	4809      	ldr	r0, [pc, #36]	; (8002270 <showSetting+0x34>)
 800224a:	f7fe fb03 	bl	8000854 <print>
	setCursor(0, 1);
 800224e:	2101      	movs	r1, #1
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fab7 	bl	80007c4 <setCursor>
	print("0-Bullets");
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <showSetting+0x38>)
 8002258:	f7fe fafc 	bl	8000854 <print>
	setCursor(20, 0);
 800225c:	2100      	movs	r1, #0
 800225e:	2014      	movs	r0, #20
 8002260:	f7fe fab0 	bl	80007c4 <setCursor>
	print("*-Health");
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <showSetting+0x3c>)
 8002266:	f7fe faf5 	bl	8000854 <print>
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	08009e94 	.word	0x08009e94
 8002274:	08009ea4 	.word	0x08009ea4
 8002278:	08009eb0 	.word	0x08009eb0

0800227c <bulletsSetting>:

void bulletsSetting(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 8002282:	2101      	movs	r1, #1
 8002284:	2000      	movs	r0, #0
 8002286:	f7fe fa9d 	bl	80007c4 <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Bullets:%d", R_bullets);
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <bulletsSetting+0x5c>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4912      	ldr	r1, [pc, #72]	; (80022dc <bulletsSetting+0x60>)
 8002294:	4618      	mov	r0, r3
 8002296:	f006 fb8b 	bl	80089b0 <siprintf>
	print(RBStr);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fad8 	bl	8000854 <print>
	setCursor(20, 0);
 80022a4:	2100      	movs	r1, #0
 80022a6:	2014      	movs	r0, #20
 80022a8:	f7fe fa8c 	bl	80007c4 <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Bullets:%d", L_bullets);
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <bulletsSetting+0x64>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	463b      	mov	r3, r7
 80022b2:	490c      	ldr	r1, [pc, #48]	; (80022e4 <bulletsSetting+0x68>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f006 fb7b 	bl	80089b0 <siprintf>
	print(LBStr);
 80022ba:	463b      	mov	r3, r7
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fac9 	bl	8000854 <print>
	setCursor(20, 1);
 80022c2:	2101      	movs	r1, #1
 80022c4:	2014      	movs	r0, #20
 80022c6:	f7fe fa7d 	bl	80007c4 <setCursor>

	print("#-Confirm");
 80022ca:	4807      	ldr	r0, [pc, #28]	; (80022e8 <bulletsSetting+0x6c>)
 80022cc:	f7fe fac2 	bl	8000854 <print>
}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000000c 	.word	0x2000000c
 80022dc:	08009ebc 	.word	0x08009ebc
 80022e0:	20000010 	.word	0x20000010
 80022e4:	08009ed0 	.word	0x08009ed0
 80022e8:	08009ee0 	.word	0x08009ee0

080022ec <HealthSetting>:

void HealthSetting(void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
	setCursor(0, 1);
 80022f2:	2101      	movs	r1, #1
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7fe fa65 	bl	80007c4 <setCursor>
	char RBStr[20];
	sprintf(RBStr, "Right Health:%d", R_Health);
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HealthSetting+0x5c>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4912      	ldr	r1, [pc, #72]	; (800234c <HealthSetting+0x60>)
 8002304:	4618      	mov	r0, r3
 8002306:	f006 fb53 	bl	80089b0 <siprintf>
	print(RBStr);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe faa0 	bl	8000854 <print>
	setCursor(20, 0);
 8002314:	2100      	movs	r1, #0
 8002316:	2014      	movs	r0, #20
 8002318:	f7fe fa54 	bl	80007c4 <setCursor>

	char LBStr[20];
	sprintf(LBStr, "Left Health:%d", L_Health);
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HealthSetting+0x64>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	463b      	mov	r3, r7
 8002322:	490c      	ldr	r1, [pc, #48]	; (8002354 <HealthSetting+0x68>)
 8002324:	4618      	mov	r0, r3
 8002326:	f006 fb43 	bl	80089b0 <siprintf>
	print(LBStr);
 800232a:	463b      	mov	r3, r7
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fa91 	bl	8000854 <print>
	setCursor(20, 1);
 8002332:	2101      	movs	r1, #1
 8002334:	2014      	movs	r0, #20
 8002336:	f7fe fa45 	bl	80007c4 <setCursor>

	print("#-Confirm");
 800233a:	4807      	ldr	r0, [pc, #28]	; (8002358 <HealthSetting+0x6c>)
 800233c:	f7fe fa8a 	bl	8000854 <print>
}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000004 	.word	0x20000004
 800234c:	08009eec 	.word	0x08009eec
 8002350:	20000008 	.word	0x20000008
 8002354:	08009efc 	.word	0x08009efc
 8002358:	08009ee0 	.word	0x08009ee0

0800235c <spawnRandomObject>:
//		pwm_timer->Instance->EGR = TIM_EGR_UG;
//		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
//	}
//}

void spawnRandomObject() {
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0

	int x, y;
	do {
		x = rand() % LCD_WIDTH;
 8002362:	f006 fae7 	bl	8008934 <rand>
 8002366:	4603      	mov	r3, r0
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <spawnRandomObject+0xcc>)
 800236a:	fb82 1203 	smull	r1, r2, r2, r3
 800236e:	1111      	asrs	r1, r2, #4
 8002370:	17da      	asrs	r2, r3, #31
 8002372:	1a8a      	subs	r2, r1, r2
 8002374:	2126      	movs	r1, #38	; 0x26
 8002376:	fb01 f202 	mul.w	r2, r1, r2
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	607b      	str	r3, [r7, #4]
		y = rand() % LCD_HEIGHT;
 800237e:	f006 fad9 	bl	8008934 <rand>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	bfb8      	it	lt
 800238c:	425b      	neglt	r3, r3
 800238e:	603b      	str	r3, [r7, #0]
	} while (lcd[y][x] != ' ');
 8002390:	4a26      	ldr	r2, [pc, #152]	; (800242c <spawnRandomObject+0xd0>)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2126      	movs	r1, #38	; 0x26
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	441a      	add	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d1dd      	bne.n	8002362 <spawnRandomObject+0x6>

	if (rand() % 2 == 0) {
 80023a6:	f006 fac5 	bl	8008934 <rand>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <spawnRandomObject+0x6e>

		lcd[y][x] = 1; //heart
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <spawnRandomObject+0xd0>)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2126      	movs	r1, #38	; 0x26
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	441a      	add	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e009      	b.n	80023de <spawnRandomObject+0x82>
	} else {

		lcd[y][x] = 5; //bullets
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <spawnRandomObject+0xd0>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2126      	movs	r1, #38	; 0x26
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	2205      	movs	r2, #5
 80023dc:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1, lcd[y][x], 1,
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <spawnRandomObject+0xd0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2126      	movs	r1, #38	; 0x26
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	441a      	add	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	2201      	movs	r2, #1
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <spawnRandomObject+0xd4>)
 80023fa:	f005 fa3b 	bl	8007874 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	setCursor(x, y);
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe f9df 	bl	80007c4 <setCursor>
	write(lcd[y][x]);
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <spawnRandomObject+0xd0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2126      	movs	r1, #38	; 0x26
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fa7d 	bl	8000918 <write>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	6bca1af3 	.word	0x6bca1af3
 800242c:	20000d50 	.word	0x20000d50
 8002430:	200002a4 	.word	0x200002a4

08002434 <HAL_TIM_PeriodElapsedCallback>:

//CALL BACKS-----------------------------------------------------------------

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d111      	bne.n	800246a <HAL_TIM_PeriodElapsedCallback+0x36>
		if (screen == 1) {
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10d      	bne.n	800246a <HAL_TIM_PeriodElapsedCallback+0x36>
			spawner++;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002456:	6013      	str	r3, [r2, #0]
			if (spawner >= 30) {
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b1d      	cmp	r3, #29
 800245e:	dd04      	ble.n	800246a <HAL_TIM_PeriodElapsedCallback+0x36>
				spawnRandomObject();
 8002460:	f7ff ff7c 	bl	800235c <spawnRandomObject>
				spawner = 0;
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40012c00 	.word	0x40012c00
 8002478:	20000618 	.word	0x20000618
 800247c:	20000620 	.word	0x20000620

08002480 <setScore>:
//  }
//}

//SETTERS -----------------------------------------------------------------

void setScore(int score) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b090      	sub	sp, #64	; 0x40
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "\nScore: %d", score);
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	490b      	ldr	r1, [pc, #44]	; (80024bc <setScore+0x3c>)
 8002490:	4618      	mov	r0, r3
 8002492:	f006 fa8d 	bl	80089b0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd fe98 	bl	80001d0 <strlen>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f107 010c 	add.w	r1, r7, #12
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <setScore+0x40>)
 80024ae:	f005 f9e1 	bl	8007874 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 80024b2:	bf00      	nop
 80024b4:	3740      	adds	r7, #64	; 0x40
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08009f0c 	.word	0x08009f0c
 80024c0:	200002a4 	.word	0x200002a4

080024c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b09b      	sub	sp, #108	; 0x6c
 80024c8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80024ca:	f001 f945 	bl	8003758 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80024ce:	f000 f98b 	bl	80027e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80024d2:	f000 fbcb 	bl	8002c6c <MX_GPIO_Init>
	MX_I2C1_Init();
 80024d6:	f000 f9f1 	bl	80028bc <MX_I2C1_Init>
	MX_SPI1_Init();
 80024da:	f000 fa89 	bl	80029f0 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 80024de:	f000 fba3 	bl	8002c28 <MX_USB_PCD_Init>
	MX_USART1_UART_Init();
 80024e2:	f000 fb71 	bl	8002bc8 <MX_USART1_UART_Init>
	MX_RTC_Init();
 80024e6:	f000 fa29 	bl	800293c <MX_RTC_Init>
	MX_TIM1_Init();
 80024ea:	f000 fabf 	bl	8002a6c <MX_TIM1_Init>
	MX_TIM2_Init();
 80024ee:	f000 fb11 	bl	8002b14 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024f8:	489f      	ldr	r0, [pc, #636]	; (8002778 <main+0x2b4>)
 80024fa:	f001 fcd1 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002504:	489c      	ldr	r0, [pc, #624]	; (8002778 <main+0x2b4>)
 8002506:	f001 fccb 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800250a:	2201      	movs	r2, #1
 800250c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002510:	4899      	ldr	r0, [pc, #612]	; (8002778 <main+0x2b4>)
 8002512:	f001 fcc5 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002516:	2201      	movs	r2, #1
 8002518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251c:	4896      	ldr	r0, [pc, #600]	; (8002778 <main+0x2b4>)
 800251e:	f001 fcbf 	bl	8003ea0 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, "yo", 2,
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	2202      	movs	r2, #2
 8002528:	4994      	ldr	r1, [pc, #592]	; (800277c <main+0x2b8>)
 800252a:	4895      	ldr	r0, [pc, #596]	; (8002780 <main+0x2bc>)
 800252c:	f005 f9a2 	bl	8007874 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, "\n", 2,
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	2202      	movs	r2, #2
 8002536:	4993      	ldr	r1, [pc, #588]	; (8002784 <main+0x2c0>)
 8002538:	4891      	ldr	r0, [pc, #580]	; (8002780 <main+0x2bc>)
 800253a:	f005 f99b 	bl	8007874 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, "mo.", 3,
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	2203      	movs	r2, #3
 8002544:	4990      	ldr	r1, [pc, #576]	; (8002788 <main+0x2c4>)
 8002546:	488e      	ldr	r0, [pc, #568]	; (8002780 <main+0x2bc>)
 8002548:	f005 f994 	bl	8007874 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

	srand(time(NULL));  // Initialize the random number generator
 800254c:	2000      	movs	r0, #0
 800254e:	f006 fa4f 	bl	80089f0 <time>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	f006 f9bf 	bl	80088d8 <srand>

	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,
 800255a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255e:	9303      	str	r3, [sp, #12]
 8002560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800257e:	4883      	ldr	r0, [pc, #524]	; (800278c <main+0x2c8>)
 8002580:	f7fd feba 	bl	80002f8 <LiquidCrystal>
	GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	byte *foxStates[4] = { leftFox, rightFox, topFox, bottomFox };
 8002584:	4b82      	ldr	r3, [pc, #520]	; (8002790 <main+0x2cc>)
 8002586:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800258a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800258c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	createChar(2, MisteryBox);
 8002590:	4980      	ldr	r1, [pc, #512]	; (8002794 <main+0x2d0>)
 8002592:	2002      	movs	r0, #2
 8002594:	f7fe f989 	bl	80008aa <createChar>
	createChar(3, wall);
 8002598:	497f      	ldr	r1, [pc, #508]	; (8002798 <main+0x2d4>)
 800259a:	2003      	movs	r0, #3
 800259c:	f7fe f985 	bl	80008aa <createChar>
	createChar(4, obstacle);
 80025a0:	497e      	ldr	r1, [pc, #504]	; (800279c <main+0x2d8>)
 80025a2:	2004      	movs	r0, #4
 80025a4:	f7fe f981 	bl	80008aa <createChar>
	createChar(1, heart);
 80025a8:	497d      	ldr	r1, [pc, #500]	; (80027a0 <main+0x2dc>)
 80025aa:	2001      	movs	r0, #1
 80025ac:	f7fe f97d 	bl	80008aa <createChar>
	createChar(5, bullet);
 80025b0:	497c      	ldr	r1, [pc, #496]	; (80027a4 <main+0x2e0>)
 80025b2:	2005      	movs	r0, #5
 80025b4:	f7fe f979 	bl	80008aa <createChar>
	createChar(6, Shot);
 80025b8:	497b      	ldr	r1, [pc, #492]	; (80027a8 <main+0x2e4>)
 80025ba:	2006      	movs	r0, #6
 80025bc:	f7fe f975 	bl	80008aa <createChar>
	RTC_TimeTypeDef mytime;
	RTC_DateTypeDef mydate;
	mydate.Year = 02;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	mydate.Month = 11;
 80025c6:	230b      	movs	r3, #11
 80025c8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mydate.Date = 17;
 80025cc:	2311      	movs	r3, #17
 80025ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	PWM_Start();
 80025d2:	f000 fdfb 	bl	80031cc <PWM_Start>
	//playMelodyNonBlocking();
	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80025d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	4873      	ldr	r0, [pc, #460]	; (80027ac <main+0x2e8>)
 80025e0:	f003 fc25 	bl	8005e2e <HAL_RTC_SetDate>
	//HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
	char timeStr[20];
	char dateStr[20];
	showMain();
 80025e4:	f7ff fdfa 	bl	80021dc <showMain>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (screen == 1) {
 80025e8:	4b71      	ldr	r3, [pc, #452]	; (80027b0 <main+0x2ec>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <main+0x130>
			call_change_melody();
 80025f0:	f000 feca 	bl	8003388 <call_change_melody>
		}
		if (screen != 1) {
 80025f4:	4b6e      	ldr	r3, [pc, #440]	; (80027b0 <main+0x2ec>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <main+0x13c>
			PWM_Stop();
 80025fc:	f000 fdf6 	bl	80031ec <PWM_Stop>
		}

		if (shootFlag == 1) {
 8002600:	4b6c      	ldr	r3, [pc, #432]	; (80027b4 <main+0x2f0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <main+0x148>
			shotPosition();
 8002608:	f7fe fe86 	bl	8001318 <shotPosition>
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (R_Health == 0) {
 800260c:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <main+0x2f4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d125      	bne.n	8002660 <main+0x19c>
			refreshAll();
 8002614:	f7fe fd36 	bl	8001084 <refreshAll>
			HAL_UART_Transmit(&huart1, "Right WON!", 10,
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	220a      	movs	r2, #10
 800261e:	4967      	ldr	r1, [pc, #412]	; (80027bc <main+0x2f8>)
 8002620:	4857      	ldr	r0, [pc, #348]	; (8002780 <main+0x2bc>)
 8002622:	f005 f927 	bl	8007874 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			setScore(playerL.score);
 8002626:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <main+0x2fc>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff28 	bl	8002480 <setScore>
			screen = -1;
 8002630:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <main+0x2ec>)
 8002632:	f04f 32ff 	mov.w	r2, #4294967295
 8002636:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 19; i++) {
 8002638:	2300      	movs	r3, #0
 800263a:	657b      	str	r3, [r7, #84]	; 0x54
 800263c:	e00d      	b.n	800265a <main+0x196>
				setCursor(i, 1);
 800263e:	2101      	movs	r1, #1
 8002640:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002642:	f7fe f8bf 	bl	80007c4 <setCursor>
				write(1);
 8002646:	2001      	movs	r0, #1
 8002648:	f7fe f966 	bl	8000918 <write>
				HAL_Delay(400);
 800264c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002650:	f001 f8e8 	bl	8003824 <HAL_Delay>
			for (int i = 0; i < 19; i++) {
 8002654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002656:	3301      	adds	r3, #1
 8002658:	657b      	str	r3, [r7, #84]	; 0x54
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	2b12      	cmp	r3, #18
 800265e:	ddee      	ble.n	800263e <main+0x17a>
			}
		}

		if (L_Health == 0) {
 8002660:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <main+0x300>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d125      	bne.n	80026b4 <main+0x1f0>
			refreshAll();
 8002668:	f7fe fd0c 	bl	8001084 <refreshAll>
			HAL_UART_Transmit(&huart1, "LEFT WON!", 9,
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	2209      	movs	r2, #9
 8002672:	4955      	ldr	r1, [pc, #340]	; (80027c8 <main+0x304>)
 8002674:	4842      	ldr	r0, [pc, #264]	; (8002780 <main+0x2bc>)
 8002676:	f005 f8fd 	bl	8007874 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			setScore(playerR.score);
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <main+0x308>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fefe 	bl	8002480 <setScore>
			screen = -1;
 8002684:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <main+0x2ec>)
 8002686:	f04f 32ff 	mov.w	r2, #4294967295
 800268a:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 19; i++) {
 800268c:	2300      	movs	r3, #0
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
 8002690:	e00d      	b.n	80026ae <main+0x1ea>
				setCursor(i, 1);
 8002692:	2101      	movs	r1, #1
 8002694:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002696:	f7fe f895 	bl	80007c4 <setCursor>
				write(1);
 800269a:	2001      	movs	r0, #1
 800269c:	f7fe f93c 	bl	8000918 <write>
				HAL_Delay(400);
 80026a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80026a4:	f001 f8be 	bl	8003824 <HAL_Delay>
			for (int i = 0; i < 19; i++) {
 80026a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026aa:	3301      	adds	r3, #1
 80026ac:	653b      	str	r3, [r7, #80]	; 0x50
 80026ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	ddee      	ble.n	8002692 <main+0x1ce>
			}
		}
		if (screen == -1) {
 80026b4:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <main+0x2ec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d106      	bne.n	80026cc <main+0x208>
			setCursor(7, 1);
 80026be:	2101      	movs	r1, #1
 80026c0:	2007      	movs	r0, #7
 80026c2:	f7fe f87f 	bl	80007c4 <setCursor>
			print("THE END");
 80026c6:	4842      	ldr	r0, [pc, #264]	; (80027d0 <main+0x30c>)
 80026c8:	f7fe f8c4 	bl	8000854 <print>
		}
		if (screen == 2) {
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <main+0x2ec>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d13b      	bne.n	800274c <main+0x288>
//			if (timeFlag) {
//				setRtcTime();
//				timeFlag = 0;
//			}
			HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 80026d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d8:	2200      	movs	r2, #0
 80026da:	4619      	mov	r1, r3
 80026dc:	4833      	ldr	r0, [pc, #204]	; (80027ac <main+0x2e8>)
 80026de:	f003 fb48 	bl	8005d72 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 80026e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e6:	2200      	movs	r2, #0
 80026e8:	4619      	mov	r1, r3
 80026ea:	4830      	ldr	r0, [pc, #192]	; (80027ac <main+0x2e8>)
 80026ec:	f003 fc23 	bl	8005f36 <HAL_RTC_GetDate>
			setCursor(20, 0);
 80026f0:	2100      	movs	r1, #0
 80026f2:	2014      	movs	r0, #20
 80026f4:	f7fe f866 	bl	80007c4 <setCursor>
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 80026f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80026fc:	461a      	mov	r2, r3
 80026fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002702:	4619      	mov	r1, r3
					mytime.Seconds);
 8002704:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(timeStr, "%2d:%2d:%2d", mytime.Hours, mytime.Minutes,
 8002708:	f107 0014 	add.w	r0, r7, #20
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	460b      	mov	r3, r1
 8002710:	4930      	ldr	r1, [pc, #192]	; (80027d4 <main+0x310>)
 8002712:	f006 f94d 	bl	80089b0 <siprintf>

			print(timeStr);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe f89a 	bl	8000854 <print>
			setCursor(20, 1);
 8002720:	2101      	movs	r1, #1
 8002722:	2014      	movs	r0, #20
 8002724:	f7fe f84e 	bl	80007c4 <setCursor>
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8002728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800272c:	461a      	mov	r2, r3
 800272e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002732:	4619      	mov	r1, r3
					mydate.Date);
 8002734:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
			sprintf(dateStr, "%2d//%2d//%2d", mydate.Year, mydate.Month,
 8002738:	4638      	mov	r0, r7
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	460b      	mov	r3, r1
 800273e:	4926      	ldr	r1, [pc, #152]	; (80027d8 <main+0x314>)
 8002740:	f006 f936 	bl	80089b0 <siprintf>

			print(dateStr);
 8002744:	463b      	mov	r3, r7
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe f884 	bl	8000854 <print>

		}

		if (screen == 3) {
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <main+0x2ec>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b03      	cmp	r3, #3
 8002752:	f47f af49 	bne.w	80025e8 <main+0x124>
			setCursor(20, 1);
 8002756:	2101      	movs	r1, #1
 8002758:	2014      	movs	r0, #20
 800275a:	f7fe f833 	bl	80007c4 <setCursor>
			if (vfx) {
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <main+0x318>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <main+0x2aa>
				print("vfx on-# to turn off");
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <main+0x31c>)
 8002768:	f7fe f874 	bl	8000854 <print>
 800276c:	e73c      	b.n	80025e8 <main+0x124>
			} else {
				print("vfx off-# to turn on ");
 800276e:	481d      	ldr	r0, [pc, #116]	; (80027e4 <main+0x320>)
 8002770:	f7fe f870 	bl	8000854 <print>
		if (screen == 1) {
 8002774:	e738      	b.n	80025e8 <main+0x124>
 8002776:	bf00      	nop
 8002778:	48000400 	.word	0x48000400
 800277c:	08009f18 	.word	0x08009f18
 8002780:	200002a4 	.word	0x200002a4
 8002784:	08009f1c 	.word	0x08009f1c
 8002788:	08009f20 	.word	0x08009f20
 800278c:	48000c00 	.word	0x48000c00
 8002790:	08009f90 	.word	0x08009f90
 8002794:	20000028 	.word	0x20000028
 8002798:	20000030 	.word	0x20000030
 800279c:	20000038 	.word	0x20000038
 80027a0:	20000020 	.word	0x20000020
 80027a4:	20000018 	.word	0x20000018
 80027a8:	20000060 	.word	0x20000060
 80027ac:	20000188 	.word	0x20000188
 80027b0:	20000618 	.word	0x20000618
 80027b4:	2000061c 	.word	0x2000061c
 80027b8:	20000004 	.word	0x20000004
 80027bc:	08009f24 	.word	0x08009f24
 80027c0:	20000c78 	.word	0x20000c78
 80027c4:	20000008 	.word	0x20000008
 80027c8:	08009f30 	.word	0x08009f30
 80027cc:	20000c68 	.word	0x20000c68
 80027d0:	08009f3c 	.word	0x08009f3c
 80027d4:	08009f44 	.word	0x08009f44
 80027d8:	08009f50 	.word	0x08009f50
 80027dc:	20000014 	.word	0x20000014
 80027e0:	08009f60 	.word	0x08009f60
 80027e4:	08009f78 	.word	0x08009f78

080027e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09e      	sub	sp, #120	; 0x78
 80027ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027f2:	2228      	movs	r2, #40	; 0x28
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f006 f866 	bl	80088c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800280c:	463b      	mov	r3, r7
 800280e:	223c      	movs	r2, #60	; 0x3c
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f006 f858 	bl	80088c8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002818:	230b      	movs	r3, #11
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800281c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002820:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002826:	2301      	movs	r3, #1
 8002828:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282a:	2310      	movs	r3, #16
 800282c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800282e:	2301      	movs	r3, #1
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002832:	2302      	movs	r3, #2
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800283a:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800283c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002840:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002842:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002846:	4618      	mov	r0, r3
 8002848:	f001 fd52 	bl	80042f0 <HAL_RCC_OscConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <SystemClock_Config+0x6e>
		Error_Handler();
 8002852:	f000 fac5 	bl	8002de0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002856:	230f      	movs	r3, #15
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800285a:	2302      	movs	r3, #2
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002868:	2300      	movs	r3, #0
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800286c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f002 fd7a 	bl	800536c <HAL_RCC_ClockConfig>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <SystemClock_Config+0x9a>
		Error_Handler();
 800287e:	f000 faaf 	bl	8002de0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <SystemClock_Config+0xd0>)
 8002884:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC
			| RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800288e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002892:	607b      	str	r3, [r7, #4]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8002894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800289e:	463b      	mov	r3, r7
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 ff99 	bl	80057d8 <HAL_RCCEx_PeriphCLKConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <SystemClock_Config+0xc8>
		Error_Handler();
 80028ac:	f000 fa98 	bl	8002de0 <Error_Handler>
	}
}
 80028b0:	bf00      	nop
 80028b2:	3778      	adds	r7, #120	; 0x78
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	00031021 	.word	0x00031021

080028bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <MX_I2C1_Init+0x74>)
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <MX_I2C1_Init+0x78>)
 80028c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <MX_I2C1_Init+0x74>)
 80028c8:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <MX_I2C1_Init+0x7c>)
 80028ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <MX_I2C1_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_I2C1_Init+0x74>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <MX_I2C1_Init+0x74>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <MX_I2C1_Init+0x74>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <MX_I2C1_Init+0x74>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_I2C1_Init+0x74>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <MX_I2C1_Init+0x74>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80028f6:	480e      	ldr	r0, [pc, #56]	; (8002930 <MX_I2C1_Init+0x74>)
 80028f8:	f001 fb02 	bl	8003f00 <HAL_I2C_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002902:	f000 fa6d 	bl	8002de0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002906:	2100      	movs	r1, #0
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <MX_I2C1_Init+0x74>)
 800290a:	f001 fb88 	bl	800401e <HAL_I2CEx_ConfigAnalogFilter>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002914:	f000 fa64 	bl	8002de0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002918:	2100      	movs	r1, #0
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_I2C1_Init+0x74>)
 800291c:	f001 fbca 	bl	80040b4 <HAL_I2CEx_ConfigDigitalFilter>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002926:	f000 fa5b 	bl	8002de0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000134 	.word	0x20000134
 8002934:	40005400 	.word	0x40005400
 8002938:	2000090e 	.word	0x2000090e

0800293c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8002950:	2300      	movs	r3, #0
 8002952:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <MX_RTC_Init+0xac>)
 8002956:	4a25      	ldr	r2, [pc, #148]	; (80029ec <MX_RTC_Init+0xb0>)
 8002958:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <MX_RTC_Init+0xac>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 39;
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <MX_RTC_Init+0xac>)
 8002962:	2227      	movs	r2, #39	; 0x27
 8002964:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 999;
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <MX_RTC_Init+0xac>)
 8002968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800296c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <MX_RTC_Init+0xac>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <MX_RTC_Init+0xac>)
 8002976:	2200      	movs	r2, #0
 8002978:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <MX_RTC_Init+0xac>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8002980:	4819      	ldr	r0, [pc, #100]	; (80029e8 <MX_RTC_Init+0xac>)
 8002982:	f003 f8d9 	bl	8005b38 <HAL_RTC_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_RTC_Init+0x54>
		Error_Handler();
 800298c:	f000 fa28 	bl	8002de0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8002990:	2300      	movs	r3, #0
 8002992:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8002994:	2300      	movs	r3, #0
 8002996:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8002998:	2300      	movs	r3, #0
 800299a:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2201      	movs	r2, #1
 80029a8:	4619      	mov	r1, r3
 80029aa:	480f      	ldr	r0, [pc, #60]	; (80029e8 <MX_RTC_Init+0xac>)
 80029ac:	f003 f947 	bl	8005c3e <HAL_RTC_SetTime>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_RTC_Init+0x7e>
		Error_Handler();
 80029b6:	f000 fa13 	bl	8002de0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80029ba:	2301      	movs	r3, #1
 80029bc:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80029be:	2301      	movs	r3, #1
 80029c0:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80029ca:	463b      	mov	r3, r7
 80029cc:	2201      	movs	r2, #1
 80029ce:	4619      	mov	r1, r3
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_RTC_Init+0xac>)
 80029d2:	f003 fa2c 	bl	8005e2e <HAL_RTC_SetDate>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_RTC_Init+0xa4>
		Error_Handler();
 80029dc:	f000 fa00 	bl	8002de0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000188 	.word	0x20000188
 80029ec:	40002800 	.word	0x40002800

080029f0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <MX_SPI1_Init+0x74>)
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <MX_SPI1_Init+0x78>)
 80029f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <MX_SPI1_Init+0x74>)
 80029fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a00:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a0e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a22:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a26:	2208      	movs	r2, #8
 8002a28:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a3e:	2207      	movs	r2, #7
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002a4e:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_SPI1_Init+0x74>)
 8002a50:	f003 fb7e 	bl	8006150 <HAL_SPI_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_SPI1_Init+0x6e>
		Error_Handler();
 8002a5a:	f000 f9c1 	bl	8002de0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200001a8 	.word	0x200001a8
 8002a68:	40013000 	.word	0x40013000

08002a6c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002a8c:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <MX_TIM1_Init+0xa4>)
 8002a8e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002a92:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8002a96:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 10000 - 1;
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002aa0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002aa4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002ab8:	4814      	ldr	r0, [pc, #80]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002aba:	f003 fbf4 	bl	80062a6 <HAL_TIM_Base_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM1_Init+0x5c>
		Error_Handler();
 8002ac4:	f000 f98c 	bl	8002de0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002acc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480d      	ldr	r0, [pc, #52]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002ad6:	f004 f8c9 	bl	8006c6c <HAL_TIM_ConfigClockSource>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0x78>
		Error_Handler();
 8002ae0:	f000 f97e 	bl	8002de0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_TIM1_Init+0xa0>)
 8002af6:	f004 fdd1 	bl	800769c <HAL_TIMEx_MasterConfigSynchronization>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002b00:	f000 f96e 	bl	8002de0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000020c 	.word	0x2000020c
 8002b10:	40012c00 	.word	0x40012c00

08002b14 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002b26:	463b      	mov	r3, r7
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
 8002b34:	615a      	str	r2, [r3, #20]
 8002b36:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b3e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b46:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b52:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002b60:	4818      	ldr	r0, [pc, #96]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b62:	f003 fc61 	bl	8006428 <HAL_TIM_PWM_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM2_Init+0x5c>
		Error_Handler();
 8002b6c:	f000 f938 	bl	8002de0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4811      	ldr	r0, [pc, #68]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002b80:	f004 fd8c 	bl	800769c <HAL_TIMEx_MasterConfigSynchronization>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM2_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8002b8a:	f000 f929 	bl	8002de0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b8e:	2360      	movs	r3, #96	; 0x60
 8002b90:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002ba6:	f003 ff4d 	bl	8006a44 <HAL_TIM_PWM_ConfigChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM2_Init+0xa0>
			!= HAL_OK) {
		Error_Handler();
 8002bb0:	f000 f916 	bl	8002de0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002bb4:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <MX_TIM2_Init+0xb0>)
 8002bb6:	f000 fa45 	bl	8003044 <HAL_TIM_MspPostInit>

}
 8002bba:	bf00      	nop
 8002bbc:	3728      	adds	r7, #40	; 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000258 	.word	0x20000258

08002bc8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <MX_USART1_UART_Init+0x5c>)
 8002bd0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002bd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bd8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002bee:	220c      	movs	r2, #12
 8002bf0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002c0a:	4805      	ldr	r0, [pc, #20]	; (8002c20 <MX_USART1_UART_Init+0x58>)
 8002c0c:	f004 fde4 	bl	80077d8 <HAL_UART_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8002c16:	f000 f8e3 	bl	8002de0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200002a4 	.word	0x200002a4
 8002c24:	40013800 	.word	0x40013800

08002c28 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <MX_USB_PCD_Init+0x3c>)
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <MX_USB_PCD_Init+0x40>)
 8002c30:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MX_USB_PCD_Init+0x3c>)
 8002c34:	2208      	movs	r2, #8
 8002c36:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <MX_USB_PCD_Init+0x3c>)
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <MX_USB_PCD_Init+0x3c>)
 8002c40:	2202      	movs	r2, #2
 8002c42:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002c44:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <MX_USB_PCD_Init+0x3c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <MX_USB_PCD_Init+0x3c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_USB_PCD_Init+0x3c>)
 8002c52:	f001 fa7b 	bl	800414c <HAL_PCD_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8002c5c:	f000 f8c0 	bl	8002de0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000032c 	.word	0x2000032c
 8002c68:	40005c00 	.word	0x40005c00

08002c6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c72:	f107 031c 	add.w	r3, r7, #28
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002c82:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	4a52      	ldr	r2, [pc, #328]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c8c:	6153      	str	r3, [r2, #20]
 8002c8e:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4a4c      	ldr	r2, [pc, #304]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ca4:	6153      	str	r3, [r2, #20]
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4a46      	ldr	r2, [pc, #280]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cbc:	6153      	str	r3, [r2, #20]
 8002cbe:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	6153      	str	r3, [r2, #20]
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4a3a      	ldr	r2, [pc, #232]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cec:	6153      	str	r3, [r2, #20]
 8002cee:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfa:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d04:	6153      	str	r3, [r2, #20]
 8002d06:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <MX_GPIO_Init+0x164>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8002d12:	2200      	movs	r2, #0
 8002d14:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002d18:	482e      	ldr	r0, [pc, #184]	; (8002dd4 <MX_GPIO_Init+0x168>)
 8002d1a:	f001 f8c1 	bl	8003ea0 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f647 710f 	movw	r1, #32527	; 0x7f0f
 8002d24:	482c      	ldr	r0, [pc, #176]	; (8002dd8 <MX_GPIO_Init+0x16c>)
 8002d26:	f001 f8bb 	bl	8003ea0 <HAL_GPIO_WritePin>
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 8002d2a:	2337      	movs	r3, #55	; 0x37
 8002d2c:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d2e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4825      	ldr	r0, [pc, #148]	; (8002dd4 <MX_GPIO_Init+0x168>)
 8002d40:	f000 ff1c 	bl	8003b7c <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 8002d44:	f64f 7308 	movw	r3, #65288	; 0xff08
 8002d48:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	481d      	ldr	r0, [pc, #116]	; (8002dd4 <MX_GPIO_Init+0x168>)
 8002d5e:	f000 ff0d 	bl	8003b7c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d78:	f000 ff00 	bl	8003b7c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002d7c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002d80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d86:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 031c 	add.w	r3, r7, #28
 8002d90:	4619      	mov	r1, r3
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <MX_GPIO_Init+0x170>)
 8002d94:	f000 fef2 	bl	8003b7c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD0
	 PD1 PD2 PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8002d98:	f647 730f 	movw	r3, #32527	; 0x7f0f
 8002d9c:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002daa:	f107 031c 	add.w	r3, r7, #28
 8002dae:	4619      	mov	r1, r3
 8002db0:	4809      	ldr	r0, [pc, #36]	; (8002dd8 <MX_GPIO_Init+0x16c>)
 8002db2:	f000 fee3 	bl	8003b7c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2101      	movs	r1, #1
 8002dba:	2028      	movs	r0, #40	; 0x28
 8002dbc:	f000 fe31 	bl	8003a22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc0:	2028      	movs	r0, #40	; 0x28
 8002dc2:	f000 fe4a 	bl	8003a5a <HAL_NVIC_EnableIRQ>

}
 8002dc6:	bf00      	nop
 8002dc8:	3730      	adds	r7, #48	; 0x30
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	48001000 	.word	0x48001000
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48000400 	.word	0x48000400

08002de0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002de4:	b672      	cpsid	i
}
 8002de6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002de8:	e7fe      	b.n	8002de8 <Error_Handler+0x8>
	...

08002dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_MspInit+0x44>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	4a0e      	ldr	r2, [pc, #56]	; (8002e30 <HAL_MspInit+0x44>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6193      	str	r3, [r2, #24]
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_MspInit+0x44>)
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <HAL_MspInit+0x44>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <HAL_MspInit+0x44>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	61d3      	str	r3, [r2, #28]
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_MspInit+0x44>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8002e22:	2006      	movs	r0, #6
 8002e24:	f000 fdf2 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000

08002e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_I2C_MspInit+0x7c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d127      	bne.n	8002ea6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_I2C_MspInit+0x80>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_I2C_MspInit+0x80>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e60:	6153      	str	r3, [r2, #20]
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_I2C_MspInit+0x80>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002e6e:	23c0      	movs	r3, #192	; 0xc0
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e72:	2312      	movs	r3, #18
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <HAL_I2C_MspInit+0x84>)
 8002e8a:	f000 fe77 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_I2C_MspInit+0x80>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <HAL_I2C_MspInit+0x80>)
 8002e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e98:	61d3      	str	r3, [r2, #28]
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_I2C_MspInit+0x80>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40005400 	.word	0x40005400
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	48000400 	.word	0x48000400

08002ebc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_RTC_MspInit+0x44>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_RTC_MspInit+0x36>
 8002ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002edc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_RTC_MspInit+0x48>)
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	461a      	mov	r2, r3
 8002eee:	2301      	movs	r3, #1
 8002ef0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40002800 	.word	0x40002800
 8002f04:	10908100 	.word	0x10908100

08002f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_SPI_MspInit+0x7c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d128      	bne.n	8002f7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_SPI_MspInit+0x80>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <HAL_SPI_MspInit+0x80>)
 8002f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f34:	6193      	str	r3, [r2, #24]
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_SPI_MspInit+0x80>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_SPI_MspInit+0x80>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <HAL_SPI_MspInit+0x80>)
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	6153      	str	r3, [r2, #20]
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_SPI_MspInit+0x80>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002f5a:	23e0      	movs	r3, #224	; 0xe0
 8002f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f6a:	2305      	movs	r3, #5
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	f107 0314 	add.w	r3, r7, #20
 8002f72:	4619      	mov	r1, r3
 8002f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f78:	f000 fe00 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f7c:	bf00      	nop
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40013000 	.word	0x40013000
 8002f88:	40021000 	.word	0x40021000

08002f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_TIM_Base_MspInit+0x74>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d12b      	bne.n	8002ff6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_TIM_Base_MspInit+0x78>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_TIM_Base_MspInit+0x78>)
 8002fa4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fa8:	6193      	str	r3, [r2, #24]
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_TIM_Base_MspInit+0x78>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2018      	movs	r0, #24
 8002fbc:	f000 fd31 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002fc0:	2018      	movs	r0, #24
 8002fc2:	f000 fd4a 	bl	8003a5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2019      	movs	r0, #25
 8002fcc:	f000 fd29 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002fd0:	2019      	movs	r0, #25
 8002fd2:	f000 fd42 	bl	8003a5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	201a      	movs	r0, #26
 8002fdc:	f000 fd21 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002fe0:	201a      	movs	r0, #26
 8002fe2:	f000 fd3a 	bl	8003a5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	201b      	movs	r0, #27
 8002fec:	f000 fd19 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ff0:	201b      	movs	r0, #27
 8002ff2:	f000 fd32 	bl	8003a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d10b      	bne.n	8003032 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_TIM_PWM_MspInit+0x38>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4a08      	ldr	r2, [pc, #32]	; (8003040 <HAL_TIM_PWM_MspInit+0x38>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	61d3      	str	r3, [r2, #28]
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_TIM_PWM_MspInit+0x38>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d11c      	bne.n	80030a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_TIM_MspPostInit+0x64>)
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <HAL_TIM_MspPostInit+0x64>)
 800306c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003070:	6153      	str	r3, [r2, #20]
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_TIM_MspPostInit+0x64>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800307e:	2302      	movs	r3, #2
 8003080:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800308e:	2301      	movs	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800309c:	f000 fd6e 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000

080030ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <HAL_UART_MspInit+0x8c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12f      	bne.n	800312e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_UART_MspInit+0x90>)
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	4a1a      	ldr	r2, [pc, #104]	; (800313c <HAL_UART_MspInit+0x90>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d8:	6193      	str	r3, [r2, #24]
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_UART_MspInit+0x90>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_UART_MspInit+0x90>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_UART_MspInit+0x90>)
 80030ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030f0:	6153      	str	r3, [r2, #20]
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_UART_MspInit+0x90>)
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80030fe:	2330      	movs	r3, #48	; 0x30
 8003100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800310e:	2307      	movs	r3, #7
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	4619      	mov	r1, r3
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <HAL_UART_MspInit+0x94>)
 800311a:	f000 fd2f 	bl	8003b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	2025      	movs	r0, #37	; 0x25
 8003124:	f000 fc7d 	bl	8003a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003128:	2025      	movs	r0, #37	; 0x25
 800312a:	f000 fc96 	bl	8003a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800312e:	bf00      	nop
 8003130:	3728      	adds	r7, #40	; 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40013800 	.word	0x40013800
 800313c:	40021000 	.word	0x40021000
 8003140:	48000800 	.word	0x48000800

08003144 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <HAL_PCD_MspInit+0x80>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d129      	bne.n	80031ba <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_PCD_MspInit+0x84>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_PCD_MspInit+0x84>)
 800316c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003170:	6153      	str	r3, [r2, #20]
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_PCD_MspInit+0x84>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800317e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800318c:	2303      	movs	r3, #3
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8003190:	230e      	movs	r3, #14
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800319e:	f000 fced 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_PCD_MspInit+0x84>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_PCD_MspInit+0x84>)
 80031a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_PCD_MspInit+0x84>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80031ba:	bf00      	nop
 80031bc:	3728      	adds	r7, #40	; 0x28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40005c00 	.word	0x40005c00
 80031c8:	40021000 	.word	0x40021000

080031cc <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <PWM_Start+0x18>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <PWM_Start+0x1c>)
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 f97c 	bl	80064d8 <HAL_TIM_PWM_Start>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000078 	.word	0x20000078
 80031e8:	2000007c 	.word	0x2000007c

080031ec <PWM_Stop>:

void PWM_Stop() {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <PWM_Stop+0x18>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <PWM_Stop+0x1c>)
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 fa6c 	bl	80066d8 <HAL_TIM_PWM_Stop>
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000078 	.word	0x20000078
 8003208:	2000007c 	.word	0x2000007c

0800320c <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	460a      	mov	r2, r1
 8003216:	80fb      	strh	r3, [r7, #6]
 8003218:	4613      	mov	r3, r2
 800321a:	80bb      	strh	r3, [r7, #4]
  if (pwm_freq == 0 || pwm_freq > 20000) {
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <PWM_Change_Tone+0x20>
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003228:	4293      	cmp	r3, r2
 800322a:	d937      	bls.n	800329c <PWM_Change_Tone+0x90>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 800322c:	4b52      	ldr	r3, [pc, #328]	; (8003378 <PWM_Change_Tone+0x16c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <PWM_Change_Tone+0x34>
 8003234:	4b51      	ldr	r3, [pc, #324]	; (800337c <PWM_Change_Tone+0x170>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	635a      	str	r2, [r3, #52]	; 0x34
 800323e:	e097      	b.n	8003370 <PWM_Change_Tone+0x164>
 8003240:	4b4d      	ldr	r3, [pc, #308]	; (8003378 <PWM_Change_Tone+0x16c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b04      	cmp	r3, #4
 8003246:	d105      	bne.n	8003254 <PWM_Change_Tone+0x48>
 8003248:	4b4c      	ldr	r3, [pc, #304]	; (800337c <PWM_Change_Tone+0x170>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	6393      	str	r3, [r2, #56]	; 0x38
 8003252:	e08d      	b.n	8003370 <PWM_Change_Tone+0x164>
 8003254:	4b48      	ldr	r3, [pc, #288]	; (8003378 <PWM_Change_Tone+0x16c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d105      	bne.n	8003268 <PWM_Change_Tone+0x5c>
 800325c:	4b47      	ldr	r3, [pc, #284]	; (800337c <PWM_Change_Tone+0x170>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003266:	e083      	b.n	8003370 <PWM_Change_Tone+0x164>
 8003268:	4b43      	ldr	r3, [pc, #268]	; (8003378 <PWM_Change_Tone+0x16c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d105      	bne.n	800327c <PWM_Change_Tone+0x70>
 8003270:	4b42      	ldr	r3, [pc, #264]	; (800337c <PWM_Change_Tone+0x170>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	e079      	b.n	8003370 <PWM_Change_Tone+0x164>
 800327c:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <PWM_Change_Tone+0x16c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b10      	cmp	r3, #16
 8003282:	d105      	bne.n	8003290 <PWM_Change_Tone+0x84>
 8003284:	4b3d      	ldr	r3, [pc, #244]	; (800337c <PWM_Change_Tone+0x170>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	6593      	str	r3, [r2, #88]	; 0x58
 800328e:	e06f      	b.n	8003370 <PWM_Change_Tone+0x164>
 8003290:	4b3a      	ldr	r3, [pc, #232]	; (800337c <PWM_Change_Tone+0x170>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2300      	movs	r3, #0
 8003298:	65d3      	str	r3, [r2, #92]	; 0x5c
 800329a:	e069      	b.n	8003370 <PWM_Change_Tone+0x164>
  } else {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 800329c:	f002 f9e2 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 80032a0:	61f8      	str	r0, [r7, #28]
    const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	4a35      	ldr	r2, [pc, #212]	; (8003380 <PWM_Change_Tone+0x174>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	0b9b      	lsrs	r3, r3, #14
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 80032b8:	8b7b      	ldrh	r3, [r7, #26]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80032cc:	88bb      	ldrh	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <PWM_Change_Tone+0x178>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	09db      	lsrs	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]

    pwm_timer->Instance->PSC = prescaler - 1;
 80032de:	8b7b      	ldrh	r3, [r7, #26]
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <PWM_Change_Tone+0x170>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer->Instance->ARR = period_cycles - 1;
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <PWM_Change_Tone+0x170>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	3a01      	subs	r2, #1
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer->Instance->EGR = TIM_EGR_UG;
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <PWM_Change_Tone+0x170>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2201      	movs	r2, #1
 80032fe:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <PWM_Change_Tone+0x16c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <PWM_Change_Tone+0x108>
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <PWM_Change_Tone+0x170>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8003312:	e02d      	b.n	8003370 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <PWM_Change_Tone+0x16c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b04      	cmp	r3, #4
 800331a:	d105      	bne.n	8003328 <PWM_Change_Tone+0x11c>
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <PWM_Change_Tone+0x170>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003326:	e023      	b.n	8003370 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <PWM_Change_Tone+0x16c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d105      	bne.n	800333c <PWM_Change_Tone+0x130>
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <PWM_Change_Tone+0x170>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800333a:	e019      	b.n	8003370 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <PWM_Change_Tone+0x16c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d105      	bne.n	8003350 <PWM_Change_Tone+0x144>
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <PWM_Change_Tone+0x170>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800334e:	e00f      	b.n	8003370 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <PWM_Change_Tone+0x16c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b10      	cmp	r3, #16
 8003356:	d105      	bne.n	8003364 <PWM_Change_Tone+0x158>
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <PWM_Change_Tone+0x170>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003362:	e005      	b.n	8003370 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <PWM_Change_Tone+0x170>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800336e:	e7ff      	b.n	8003370 <PWM_Change_Tone+0x164>
 8003370:	bf00      	nop
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000007c 	.word	0x2000007c
 800337c:	20000078 	.word	0x20000078
 8003380:	45e7b273 	.word	0x45e7b273
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <call_change_melody>:

void call_change_melody() {
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  PWM_Start();
 800338c:	f7ff ff1e 	bl	80031cc <PWM_Start>
  Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
 8003390:	2141      	movs	r1, #65	; 0x41
 8003392:	4802      	ldr	r0, [pc, #8]	; (800339c <call_change_melody+0x14>)
 8003394:	f000 f804 	bl	80033a0 <Change_Melody>
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	08009fd0 	.word	0x08009fd0

080033a0 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count) {
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
  melody_ptr = melody;
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <Change_Melody+0x2c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6013      	str	r3, [r2, #0]
  melody_tone_count = tone_count;
 80033b2:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <Change_Melody+0x30>)
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	8013      	strh	r3, [r2, #0]
  current_tone_number = 0;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <Change_Melody+0x34>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	801a      	strh	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000da0 	.word	0x20000da0
 80033d0:	20000da4 	.word	0x20000da4
 80033d4:	20000da6 	.word	0x20000da6

080033d8 <Update_Melody>:

void Update_Melody() {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() > current_tone_end)
 80033de:	f000 fa15 	bl	800380c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <Update_Melody+0x84>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d932      	bls.n	8003452 <Update_Melody+0x7a>
      && (current_tone_number < melody_tone_count)) {
 80033ec:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <Update_Melody+0x88>)
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <Update_Melody+0x8c>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d22a      	bcs.n	8003452 <Update_Melody+0x7a>
    const Tone active_tone = *(melody_ptr + current_tone_number);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <Update_Melody+0x90>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b17      	ldr	r3, [pc, #92]	; (8003460 <Update_Melody+0x88>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	441a      	add	r2, r3
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	6810      	ldr	r0, [r2, #0]
 800340e:	6018      	str	r0, [r3, #0]
    PWM_Change_Tone(active_tone.frequency, volume);
 8003410:	88bb      	ldrh	r3, [r7, #4]
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <Update_Melody+0x94>)
 8003414:	8812      	ldrh	r2, [r2, #0]
 8003416:	b292      	uxth	r2, r2
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fef6 	bl	800320c <PWM_Change_Tone>
    current_tone_end = HAL_GetTick() + active_tone.duration;
 8003420:	f000 f9f4 	bl	800380c <HAL_GetTick>
 8003424:	4603      	mov	r3, r0
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	4413      	add	r3, r2
 800342a:	4a0c      	ldr	r2, [pc, #48]	; (800345c <Update_Melody+0x84>)
 800342c:	6013      	str	r3, [r2, #0]
    current_tone_number++;
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <Update_Melody+0x88>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	3301      	adds	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <Update_Melody+0x88>)
 800343a:	801a      	strh	r2, [r3, #0]

    if (current_tone_number >= melody_tone_count) {
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <Update_Melody+0x88>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <Update_Melody+0x8c>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <Update_Melody+0x7a>
      current_tone_number = 0;
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <Update_Melody+0x88>)
 800344e:	2200      	movs	r2, #0
 8003450:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000da8 	.word	0x20000da8
 8003460:	20000da6 	.word	0x20000da6
 8003464:	20000da4 	.word	0x20000da4
 8003468:	20000da0 	.word	0x20000da0
 800346c:	20000080 	.word	0x20000080

08003470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <NMI_Handler+0x4>

08003476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800347a:	e7fe      	b.n	800347a <HardFault_Handler+0x4>

0800347c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <MemManage_Handler+0x4>

08003482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003486:	e7fe      	b.n	8003486 <BusFault_Handler+0x4>

08003488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800348c:	e7fe      	b.n	800348c <UsageFault_Handler+0x4>

0800348e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800348e:	b480      	push	{r7}
 8003490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034bc:	f000 f992 	bl	80037e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 80034c0:	f7ff ff8a 	bl	80033d8 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80034ce:	f003 f999 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	2000020c 	.word	0x2000020c

080034dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80034e2:	f003 f98f 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000020c 	.word	0x2000020c

080034f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80034f6:	f003 f985 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000020c 	.word	0x2000020c

08003504 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <TIM1_CC_IRQHandler+0x10>)
 800350a:	f003 f97b 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000020c 	.word	0x2000020c

08003518 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <USART1_IRQHandler+0x10>)
 800351e:	f004 fa33 	bl	8007988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200002a4 	.word	0x200002a4

0800352c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003530:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003534:	f000 fccc 	bl	8003ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003538:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800353c:	f000 fcc8 	bl	8003ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003540:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003544:	f000 fcc4 	bl	8003ed0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003548:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800354c:	f000 fcc0 	bl	8003ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}

08003554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return 1;
 8003558:	2301      	movs	r3, #1
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_kill>:

int _kill(int pid, int sig)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800356e:	f005 f981 	bl	8008874 <__errno>
 8003572:	4603      	mov	r3, r0
 8003574:	2216      	movs	r2, #22
 8003576:	601a      	str	r2, [r3, #0]
  return -1;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_exit>:

void _exit (int status)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ffe7 	bl	8003564 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003596:	e7fe      	b.n	8003596 <_exit+0x12>

08003598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e00a      	b.n	80035c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035aa:	f3af 8000 	nop.w
 80035ae:	4601      	mov	r1, r0
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	60ba      	str	r2, [r7, #8]
 80035b6:	b2ca      	uxtb	r2, r1
 80035b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	dbf0      	blt.n	80035aa <_read+0x12>
  }

  return len;
 80035c8:	687b      	ldr	r3, [r7, #4]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e009      	b.n	80035f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	60ba      	str	r2, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3301      	adds	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	dbf1      	blt.n	80035e4 <_write+0x12>
  }
  return len;
 8003600:	687b      	ldr	r3, [r7, #4]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <_close>:

int _close(int file)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003632:	605a      	str	r2, [r3, #4]
  return 0;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <_isatty>:

int _isatty(int file)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800364a:	2301      	movs	r3, #1
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <_sbrk+0x5c>)
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <_sbrk+0x60>)
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <_sbrk+0x64>)
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <_sbrk+0x68>)
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d207      	bcs.n	80036b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a4:	f005 f8e6 	bl	8008874 <__errno>
 80036a8:	4603      	mov	r3, r0
 80036aa:	220c      	movs	r2, #12
 80036ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	e009      	b.n	80036c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <_sbrk+0x64>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <_sbrk+0x64>)
 80036c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036c6:	68fb      	ldr	r3, [r7, #12]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	2000a000 	.word	0x2000a000
 80036d4:	00000400 	.word	0x00000400
 80036d8:	20000dac 	.word	0x20000dac
 80036dc:	20000dc8 	.word	0x20000dc8

080036e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <SystemInit+0x20>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	4a05      	ldr	r2, [pc, #20]	; (8003700 <SystemInit+0x20>)
 80036ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800373c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003708:	f7ff ffea 	bl	80036e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800370c:	480c      	ldr	r0, [pc, #48]	; (8003740 <LoopForever+0x6>)
  ldr r1, =_edata
 800370e:	490d      	ldr	r1, [pc, #52]	; (8003744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003710:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <LoopForever+0xe>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003724:	4c0a      	ldr	r4, [pc, #40]	; (8003750 <LoopForever+0x16>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003732:	f005 f8a5 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003736:	f7fe fec5 	bl	80024c4 <main>

0800373a <LoopForever>:

LoopForever:
    b LoopForever
 800373a:	e7fe      	b.n	800373a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800373c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003744:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8003748:	0800a25c 	.word	0x0800a25c
  ldr r2, =_sbss
 800374c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8003750:	20000dc4 	.word	0x20000dc4

08003754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC1_2_IRQHandler>
	...

08003758 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <HAL_Init+0x28>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a07      	ldr	r2, [pc, #28]	; (8003780 <HAL_Init+0x28>)
 8003762:	f043 0310 	orr.w	r3, r3, #16
 8003766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003768:	2003      	movs	r0, #3
 800376a:	f000 f94f 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800376e:	2000      	movs	r0, #0
 8003770:	f000 f808 	bl	8003784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003774:	f7ff fb3a 	bl	8002dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40022000 	.word	0x40022000

08003784 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_InitTick+0x54>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_InitTick+0x58>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	4619      	mov	r1, r3
 8003796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800379a:	fbb3 f3f1 	udiv	r3, r3, r1
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f967 	bl	8003a76 <HAL_SYSTICK_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00e      	b.n	80037d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	d80a      	bhi.n	80037ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037b8:	2200      	movs	r2, #0
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	f000 f92f 	bl	8003a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c4:	4a06      	ldr	r2, [pc, #24]	; (80037e0 <HAL_InitTick+0x5c>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000084 	.word	0x20000084
 80037dc:	2000008c 	.word	0x2000008c
 80037e0:	20000088 	.word	0x20000088

080037e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_IncTick+0x20>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_IncTick+0x24>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4413      	add	r3, r2
 80037f4:	4a04      	ldr	r2, [pc, #16]	; (8003808 <HAL_IncTick+0x24>)
 80037f6:	6013      	str	r3, [r2, #0]
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	2000008c 	.word	0x2000008c
 8003808:	20000db0 	.word	0x20000db0

0800380c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_GetTick+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000db0 	.word	0x20000db0

08003824 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7ff ffee 	bl	800380c <HAL_GetTick>
 8003830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d005      	beq.n	800384a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_Delay+0x44>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800384a:	bf00      	nop
 800384c:	f7ff ffde 	bl	800380c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	429a      	cmp	r2, r3
 800385a:	d8f7      	bhi.n	800384c <HAL_Delay+0x28>
  {
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000008c 	.word	0x2000008c

0800386c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003888:	4013      	ands	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <__NVIC_GetPriorityGrouping+0x18>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 0307 	and.w	r3, r3, #7
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db0b      	blt.n	80038fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4907      	ldr	r1, [pc, #28]	; (8003908 <__NVIC_EnableIRQ+0x38>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2001      	movs	r0, #1
 80038f2:	fa00 f202 	lsl.w	r2, r0, r2
 80038f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db0a      	blt.n	8003936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <__NVIC_SetPriority+0x4c>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	0112      	lsls	r2, r2, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	440b      	add	r3, r1
 8003930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003934:	e00a      	b.n	800394c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4908      	ldr	r1, [pc, #32]	; (800395c <__NVIC_SetPriority+0x50>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3b04      	subs	r3, #4
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	440b      	add	r3, r1
 800394a:	761a      	strb	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f1c3 0307 	rsb	r3, r3, #7
 800397a:	2b04      	cmp	r3, #4
 800397c:	bf28      	it	cs
 800397e:	2304      	movcs	r3, #4
 8003980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3304      	adds	r3, #4
 8003986:	2b06      	cmp	r3, #6
 8003988:	d902      	bls.n	8003990 <NVIC_EncodePriority+0x30>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3b03      	subs	r3, #3
 800398e:	e000      	b.n	8003992 <NVIC_EncodePriority+0x32>
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	401a      	ands	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43d9      	mvns	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	4313      	orrs	r3, r2
         );
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d8:	d301      	bcc.n	80039de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <SysTick_Config+0x40>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e6:	210f      	movs	r1, #15
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f7ff ff8e 	bl	800390c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SysTick_Config+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SysTick_Config+0x40>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff29 	bl	800386c <__NVIC_SetPriorityGrouping>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a34:	f7ff ff3e 	bl	80038b4 <__NVIC_GetPriorityGrouping>
 8003a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f7ff ff8e 	bl	8003960 <NVIC_EncodePriority>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff5d 	bl	800390c <__NVIC_SetPriority>
}
 8003a52:	bf00      	nop
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff31 	bl	80038d0 <__NVIC_EnableIRQ>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff ffa2 	bl	80039c8 <SysTick_Config>
 8003a84:	4603      	mov	r3, r0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d008      	beq.n	8003ab2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e020      	b.n	8003af4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 020e 	bic.w	r2, r2, #14
 8003ac0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d005      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e027      	b.n	8003b72 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020e 	bic.w	r2, r2, #14
 8003b30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
    } 
  }
  return status;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8a:	e154      	b.n	8003e36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa01 f303 	lsl.w	r3, r1, r3
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8146 	beq.w	8003e30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d005      	beq.n	8003bbc <HAL_GPIO_Init+0x40>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d130      	bne.n	8003c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0201 	and.w	r2, r3, #1
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d017      	beq.n	8003c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d123      	bne.n	8003cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	08da      	lsrs	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	08da      	lsrs	r2, r3, #3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3208      	adds	r2, #8
 8003ca8:	6939      	ldr	r1, [r7, #16]
 8003caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	2203      	movs	r2, #3
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0203 	and.w	r2, r3, #3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a0 	beq.w	8003e30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_GPIO_Init+0x2d8>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_GPIO_Init+0x2d8>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6193      	str	r3, [r2, #24]
 8003cfc:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_GPIO_Init+0x2d8>)
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d08:	4a53      	ldr	r2, [pc, #332]	; (8003e58 <HAL_GPIO_Init+0x2dc>)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	3302      	adds	r3, #2
 8003d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	220f      	movs	r2, #15
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d32:	d019      	beq.n	8003d68 <HAL_GPIO_Init+0x1ec>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a49      	ldr	r2, [pc, #292]	; (8003e5c <HAL_GPIO_Init+0x2e0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_GPIO_Init+0x1e8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a48      	ldr	r2, [pc, #288]	; (8003e60 <HAL_GPIO_Init+0x2e4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00d      	beq.n	8003d60 <HAL_GPIO_Init+0x1e4>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a47      	ldr	r2, [pc, #284]	; (8003e64 <HAL_GPIO_Init+0x2e8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <HAL_GPIO_Init+0x1e0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a46      	ldr	r2, [pc, #280]	; (8003e68 <HAL_GPIO_Init+0x2ec>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <HAL_GPIO_Init+0x1dc>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e008      	b.n	8003d6a <HAL_GPIO_Init+0x1ee>
 8003d58:	2305      	movs	r3, #5
 8003d5a:	e006      	b.n	8003d6a <HAL_GPIO_Init+0x1ee>
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e004      	b.n	8003d6a <HAL_GPIO_Init+0x1ee>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e002      	b.n	8003d6a <HAL_GPIO_Init+0x1ee>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_GPIO_Init+0x1ee>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	f002 0203 	and.w	r2, r2, #3
 8003d70:	0092      	lsls	r2, r2, #2
 8003d72:	4093      	lsls	r3, r2
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d7a:	4937      	ldr	r1, [pc, #220]	; (8003e58 <HAL_GPIO_Init+0x2dc>)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d88:	4b38      	ldr	r3, [pc, #224]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dac:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db2:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dd6:	4a25      	ldr	r2, [pc, #148]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ddc:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e00:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e06:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_GPIO_Init+0x2f0>)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3301      	adds	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f aea3 	bne.w	8003b8c <HAL_GPIO_Init+0x10>
  }
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	48000400 	.word	0x48000400
 8003e60:	48000800 	.word	0x48000800
 8003e64:	48000c00 	.word	0x48000c00
 8003e68:	48001000 	.word	0x48001000
 8003e6c:	40010400 	.word	0x40010400

08003e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e001      	b.n	8003e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc fdde 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40010400 	.word	0x40010400

08003f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e081      	b.n	8004016 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe ff84 	bl	8002e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d107      	bne.n	8003f7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	e006      	b.n	8003f88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d104      	bne.n	8003f9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69d9      	ldr	r1, [r3, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	d138      	bne.n	80040a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800403e:	2302      	movs	r3, #2
 8004040:	e032      	b.n	80040a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2224      	movs	r2, #36	; 0x24
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004070:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d139      	bne.n	800413e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e033      	b.n	8004140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004106:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414e:	b08b      	sub	sp, #44	; 0x2c
 8004150:	af06      	add	r7, sp, #24
 8004152:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e0c4      	b.n	80042e8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe ffe6 	bl	8003144 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2203      	movs	r2, #3
 800417c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fb38 	bl	80087fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	e040      	b.n	8004212 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	3301      	adds	r3, #1
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	440b      	add	r3, r1
 80041ca:	3303      	adds	r3, #3
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	440b      	add	r3, r1
 80041de:	3338      	adds	r3, #56	; 0x38
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	440b      	add	r3, r1
 80041f2:	333c      	adds	r3, #60	; 0x3c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	440b      	add	r3, r1
 8004206:	3340      	adds	r3, #64	; 0x40
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	3301      	adds	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d3b9      	bcc.n	8004190 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e044      	b.n	80042ac <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	440b      	add	r3, r1
 8004230:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800424a:	7bfa      	ldrb	r2, [r7, #15]
 800424c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	440b      	add	r3, r1
 8004288:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	440b      	add	r3, r1
 800429e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	3301      	adds	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d3b5      	bcc.n	8004222 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	687e      	ldr	r6, [r7, #4]
 80042be:	466d      	mov	r5, sp
 80042c0:	f106 0410 	add.w	r4, r6, #16
 80042c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	1d33      	adds	r3, r6, #4
 80042ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d0:	6838      	ldr	r0, [r7, #0]
 80042d2:	f004 faad 	bl	8008830 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004300:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f001 b823 	b.w	800535c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 817d 	beq.w	8004626 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800432c:	4bbc      	ldr	r3, [pc, #752]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b04      	cmp	r3, #4
 8004336:	d00c      	beq.n	8004352 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004338:	4bb9      	ldr	r3, [pc, #740]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d15c      	bne.n	80043fe <HAL_RCC_OscConfig+0x10e>
 8004344:	4bb6      	ldr	r3, [pc, #728]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d155      	bne.n	80043fe <HAL_RCC_OscConfig+0x10e>
 8004352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004356:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004366:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d102      	bne.n	8004384 <HAL_RCC_OscConfig+0x94>
 800437e:	4ba8      	ldr	r3, [pc, #672]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	e015      	b.n	80043b0 <HAL_RCC_OscConfig+0xc0>
 8004384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004388:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800439c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80043ac:	4b9c      	ldr	r3, [pc, #624]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80043b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80043bc:	fa92 f2a2 	rbit	r2, r2
 80043c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80043c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80043c8:	fab2 f282 	clz	r2, r2
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	f042 0220 	orr.w	r2, r2, #32
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	f002 021f 	and.w	r2, r2, #31
 80043d8:	2101      	movs	r1, #1
 80043da:	fa01 f202 	lsl.w	r2, r1, r2
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 811f 	beq.w	8004624 <HAL_RCC_OscConfig+0x334>
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 8116 	bne.w	8004624 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f000 bfaf 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x12e>
 8004410:	4b83      	ldr	r3, [pc, #524]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a82      	ldr	r2, [pc, #520]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e036      	b.n	800448c <HAL_RCC_OscConfig+0x19c>
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x158>
 800442e:	4b7c      	ldr	r3, [pc, #496]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7b      	ldr	r2, [pc, #492]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b79      	ldr	r3, [pc, #484]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a78      	ldr	r2, [pc, #480]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e021      	b.n	800448c <HAL_RCC_OscConfig+0x19c>
 8004448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x184>
 800445a:	4b71      	ldr	r3, [pc, #452]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a70      	ldr	r2, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6d      	ldr	r2, [pc, #436]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0x19c>
 8004474:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a69      	ldr	r2, [pc, #420]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b67      	ldr	r3, [pc, #412]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a66      	ldr	r2, [pc, #408]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800448c:	4b64      	ldr	r3, [pc, #400]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f023 020f 	bic.w	r2, r3, #15
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	495f      	ldr	r1, [pc, #380]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d059      	beq.n	800456a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b6:	f7ff f9a9 	bl	800380c <HAL_GetTick>
 80044ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c0:	f7ff f9a4 	bl	800380c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d902      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	f000 bf43 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 80044d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80044ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_RCC_OscConfig+0x218>
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	e015      	b.n	8004534 <HAL_RCC_OscConfig+0x244>
 8004508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800450c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800451c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004520:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004524:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004538:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800453c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004540:	fa92 f2a2 	rbit	r2, r2
 8004544:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004548:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800454c:	fab2 f282 	clz	r2, r2
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	f042 0220 	orr.w	r2, r2, #32
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	f002 021f 	and.w	r2, r2, #31
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f202 	lsl.w	r2, r1, r2
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ab      	beq.n	80044c0 <HAL_RCC_OscConfig+0x1d0>
 8004568:	e05d      	b.n	8004626 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7ff f94f 	bl	800380c <HAL_GetTick>
 800456e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e00a      	b.n	800458a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7ff f94a 	bl	800380c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	; 0x64
 8004582:	d902      	bls.n	800458a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	f000 bee9 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 800458a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800458e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800459e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <HAL_RCC_OscConfig+0x2cc>
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	e015      	b.n	80045e8 <HAL_RCC_OscConfig+0x2f8>
 80045bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80045d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045ec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80045f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80045f4:	fa92 f2a2 	rbit	r2, r2
 80045f8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80045fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004600:	fab2 f282 	clz	r2, r2
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	f042 0220 	orr.w	r2, r2, #32
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	f002 021f 	and.w	r2, r2, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f202 	lsl.w	r2, r1, r2
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ab      	bne.n	8004574 <HAL_RCC_OscConfig+0x284>
 800461c:	e003      	b.n	8004626 <HAL_RCC_OscConfig+0x336>
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 817d 	beq.w	8004936 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800463c:	4ba6      	ldr	r3, [pc, #664]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004648:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b08      	cmp	r3, #8
 8004652:	d172      	bne.n	800473a <HAL_RCC_OscConfig+0x44a>
 8004654:	4ba0      	ldr	r3, [pc, #640]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d16c      	bne.n	800473a <HAL_RCC_OscConfig+0x44a>
 8004660:	2302      	movs	r3, #2
 8004662:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004672:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d102      	bne.n	8004690 <HAL_RCC_OscConfig+0x3a0>
 800468a:	4b93      	ldr	r3, [pc, #588]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e013      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c8>
 8004690:	2302      	movs	r3, #2
 8004692:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046a2:	2302      	movs	r3, #2
 80046a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80046b4:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2202      	movs	r2, #2
 80046ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046c2:	fa92 f2a2 	rbit	r2, r2
 80046c6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80046ca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80046ce:	fab2 f282 	clz	r2, r2
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f042 0220 	orr.w	r2, r2, #32
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	f002 021f 	and.w	r2, r2, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCC_OscConfig+0x410>
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f000 be2e 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	21f8      	movs	r1, #248	; 0xf8
 8004716:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800471e:	fa91 f1a1 	rbit	r1, r1
 8004722:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004726:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800472a:	fab1 f181 	clz	r1, r1
 800472e:	b2c9      	uxtb	r1, r1
 8004730:	408b      	lsls	r3, r1
 8004732:	4969      	ldr	r1, [pc, #420]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004738:	e0fd      	b.n	8004936 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8088 	beq.w	800485c <HAL_RCC_OscConfig+0x56c>
 800474c:	2301      	movs	r3, #1
 800474e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800475e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800476c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	461a      	mov	r2, r3
 8004774:	2301      	movs	r3, #1
 8004776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7ff f848 	bl	800380c <HAL_GetTick>
 800477c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004782:	f7ff f843 	bl	800380c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	f000 bde2 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 8004798:	2302      	movs	r3, #2
 800479a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80047aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4d8>
 80047c2:	4b45      	ldr	r3, [pc, #276]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	e013      	b.n	80047f0 <HAL_RCC_OscConfig+0x500>
 80047c8:	2302      	movs	r3, #2
 80047ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047da:	2302      	movs	r3, #2
 80047dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80047e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047e4:	fa93 f3a3 	rbit	r3, r3
 80047e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80047ec:	4b3a      	ldr	r3, [pc, #232]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2202      	movs	r2, #2
 80047f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80047f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80047fa:	fa92 f2a2 	rbit	r2, r2
 80047fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004802:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004806:	fab2 f282 	clz	r2, r2
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	f042 0220 	orr.w	r2, r2, #32
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	f002 021f 	and.w	r2, r2, #31
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f202 	lsl.w	r2, r1, r2
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0af      	beq.n	8004782 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	21f8      	movs	r1, #248	; 0xf8
 8004838:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004840:	fa91 f1a1 	rbit	r1, r1
 8004844:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004848:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800484c:	fab1 f181 	clz	r1, r1
 8004850:	b2c9      	uxtb	r1, r1
 8004852:	408b      	lsls	r3, r1
 8004854:	4920      	ldr	r1, [pc, #128]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
 800485a:	e06c      	b.n	8004936 <HAL_RCC_OscConfig+0x646>
 800485c:	2301      	movs	r3, #1
 800485e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800486e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800487c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	461a      	mov	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fe ffc0 	bl	800380c <HAL_GetTick>
 800488c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004892:	f7fe ffbb 	bl	800380c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d902      	bls.n	80048a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	f000 bd5a 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d104      	bne.n	80048dc <HAL_RCC_OscConfig+0x5ec>
 80048d2:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	e015      	b.n	8004904 <HAL_RCC_OscConfig+0x614>
 80048d8:	40021000 	.word	0x40021000
 80048dc:	2302      	movs	r3, #2
 80048de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048ee:	2302      	movs	r3, #2
 80048f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80048f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004900:	4bc8      	ldr	r3, [pc, #800]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2202      	movs	r2, #2
 8004906:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800490a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800490e:	fa92 f2a2 	rbit	r2, r2
 8004912:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004916:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800491a:	fab2 f282 	clz	r2, r2
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	f042 0220 	orr.w	r2, r2, #32
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	f002 021f 	and.w	r2, r2, #31
 800492a:	2101      	movs	r1, #1
 800492c:	fa01 f202 	lsl.w	r2, r1, r2
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ad      	bne.n	8004892 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8110 	beq.w	8004b6c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d079      	beq.n	8004a50 <HAL_RCC_OscConfig+0x760>
 800495c:	2301      	movs	r3, #1
 800495e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800496e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	4bab      	ldr	r3, [pc, #684]	; (8004c28 <HAL_RCC_OscConfig+0x938>)
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	461a      	mov	r2, r3
 8004982:	2301      	movs	r3, #1
 8004984:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fe ff41 	bl	800380c <HAL_GetTick>
 800498a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004990:	f7fe ff3c 	bl	800380c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d902      	bls.n	80049a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	f000 bcdb 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 80049a6:	2302      	movs	r3, #2
 80049a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049c0:	2202      	movs	r2, #2
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e4:	2202      	movs	r2, #2
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	fa93 f2a3 	rbit	r2, r3
 80049f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a00:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	6019      	str	r1, [r3, #0]
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	fa93 f1a3 	rbit	r1, r3
 8004a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a26:	6019      	str	r1, [r3, #0]
  return result;
 8004a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f303 	lsl.w	r3, r1, r3
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0a0      	beq.n	8004990 <HAL_RCC_OscConfig+0x6a0>
 8004a4e:	e08d      	b.n	8004b6c <HAL_RCC_OscConfig+0x87c>
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	fa93 f2a3 	rbit	r2, r3
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a72:	601a      	str	r2, [r3, #0]
  return result;
 8004a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b68      	ldr	r3, [pc, #416]	; (8004c28 <HAL_RCC_OscConfig+0x938>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7fe febb 	bl	800380c <HAL_GetTick>
 8004a96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fe feb6 	bl	800380c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d902      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	f000 bc55 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 8004ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aba:	2202      	movs	r2, #2
 8004abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	fa93 f2a3 	rbit	r2, r3
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ada:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ade:	2202      	movs	r2, #2
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	fa93 f2a3 	rbit	r2, r3
 8004af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b02:	2202      	movs	r2, #2
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	fa93 f2a3 	rbit	r2, r3
 8004b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1e:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	6019      	str	r1, [r3, #0]
 8004b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	fa93 f1a3 	rbit	r1, r3
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b44:	6019      	str	r1, [r3, #0]
  return result;
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	fab3 f383 	clz	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2101      	movs	r1, #1
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d197      	bne.n	8004a9c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 81a1 	beq.w	8004ec4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b88:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b94:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	61d3      	str	r3, [r2, #28]
 8004ba0:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004bba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11a      	bne.n	8004c04 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bda:	f7fe fe17 	bl	800380c <HAL_GetTick>
 8004bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be2:	e009      	b.n	8004bf8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be4:	f7fe fe12 	bl	800380c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e3b1      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ef      	beq.n	8004be4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10d      	bne.n	8004c30 <HAL_RCC_OscConfig+0x940>
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4a02      	ldr	r2, [pc, #8]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6213      	str	r3, [r2, #32]
 8004c20:	e03c      	b.n	8004c9c <HAL_RCC_OscConfig+0x9ac>
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	10908120 	.word	0x10908120
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCC_OscConfig+0x96a>
 8004c40:	4bc1      	ldr	r3, [pc, #772]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4ac0      	ldr	r2, [pc, #768]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6213      	str	r3, [r2, #32]
 8004c4c:	4bbe      	ldr	r3, [pc, #760]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4abd      	ldr	r2, [pc, #756]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6213      	str	r3, [r2, #32]
 8004c58:	e020      	b.n	8004c9c <HAL_RCC_OscConfig+0x9ac>
 8004c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x994>
 8004c6a:	4bb7      	ldr	r3, [pc, #732]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4ab6      	ldr	r2, [pc, #728]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	6213      	str	r3, [r2, #32]
 8004c76:	4bb4      	ldr	r3, [pc, #720]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4ab3      	ldr	r2, [pc, #716]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6213      	str	r3, [r2, #32]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0x9ac>
 8004c84:	4bb0      	ldr	r3, [pc, #704]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4aaf      	ldr	r2, [pc, #700]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	6213      	str	r3, [r2, #32]
 8004c90:	4bad      	ldr	r3, [pc, #692]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4aac      	ldr	r2, [pc, #688]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c96:	f023 0304 	bic.w	r3, r3, #4
 8004c9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8081 	beq.w	8004db0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cae:	f7fe fdad 	bl	800380c <HAL_GetTick>
 8004cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fe fda8 	bl	800380c <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e345      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 8004cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004cd8:	2202      	movs	r2, #2
 8004cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	fa93 f2a3 	rbit	r2, r3
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	fa93 f2a3 	rbit	r2, r3
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d16:	601a      	str	r2, [r3, #0]
  return result;
 8004d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f043 0302 	orr.w	r3, r3, #2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_OscConfig+0xa4c>
 8004d36:	4b84      	ldr	r3, [pc, #528]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	e013      	b.n	8004d64 <HAL_RCC_OscConfig+0xa74>
 8004d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d44:	2202      	movs	r2, #2
 8004d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	fa93 f2a3 	rbit	r2, r3
 8004d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	4b79      	ldr	r3, [pc, #484]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	6011      	str	r1, [r2, #0]
 8004d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d74:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	fa92 f1a2 	rbit	r1, r2
 8004d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d86:	6011      	str	r1, [r2, #0]
  return result;
 8004d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d8c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	fab2 f282 	clz	r2, r2
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	f002 021f 	and.w	r2, r2, #31
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f202 	lsl.w	r2, r1, r2
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d084      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x9c8>
 8004dae:	e07f      	b.n	8004eb0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db0:	f7fe fd2c 	bl	800380c <HAL_GetTick>
 8004db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	e00b      	b.n	8004dd2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fe fd27 	bl	800380c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e2c4      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004dda:	2202      	movs	r2, #2
 8004ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	fa93 f2a3 	rbit	r2, r3
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004dfe:	2202      	movs	r2, #2
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	fa93 f2a3 	rbit	r2, r3
 8004e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e14:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e18:	601a      	str	r2, [r3, #0]
  return result;
 8004e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e24:	fab3 f383 	clz	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f043 0302 	orr.w	r3, r3, #2
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d102      	bne.n	8004e3e <HAL_RCC_OscConfig+0xb4e>
 8004e38:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	e013      	b.n	8004e66 <HAL_RCC_OscConfig+0xb76>
 8004e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e46:	2202      	movs	r2, #2
 8004e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	fa93 f2a3 	rbit	r2, r3
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e6e:	2102      	movs	r1, #2
 8004e70:	6011      	str	r1, [r2, #0]
 8004e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	fa92 f1a2 	rbit	r1, r2
 8004e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e88:	6011      	str	r1, [r2, #0]
  return result;
 8004e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e8e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	fab2 f282 	clz	r2, r2
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	f002 021f 	and.w	r2, r2, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d184      	bne.n	8004dba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb8:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8242 	beq.w	800535a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	f000 8213 	beq.w	800530a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	f040 8162 	bne.w	80051ba <HAL_RCC_OscConfig+0xeca>
 8004ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f08:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	fa93 f2a3 	rbit	r2, r3
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f1a:	601a      	str	r2, [r3, #0]
  return result;
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	461a      	mov	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fc66 	bl	800380c <HAL_GetTick>
 8004f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f44:	e00c      	b.n	8004f60 <HAL_RCC_OscConfig+0xc70>
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe fc5e 	bl	800380c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1fd      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 8004f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f72:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	fa93 f2a3 	rbit	r2, r3
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f84:	601a      	str	r2, [r3, #0]
  return result;
 8004f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f90:	fab3 f383 	clz	r3, r3
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d102      	bne.n	8004faa <HAL_RCC_OscConfig+0xcba>
 8004fa4:	4bb0      	ldr	r3, [pc, #704]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	e027      	b.n	8004ffa <HAL_RCC_OscConfig+0xd0a>
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	fa93 f2a3 	rbit	r2, r3
 8004fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4b9c      	ldr	r3, [pc, #624]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ffe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005002:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005006:	6011      	str	r1, [r2, #0]
 8005008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800500c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	fa92 f1a2 	rbit	r1, r2
 8005016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800501a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800501e:	6011      	str	r1, [r2, #0]
  return result;
 8005020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005024:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	fab2 f282 	clz	r2, r2
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	f042 0220 	orr.w	r2, r2, #32
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	f002 021f 	and.w	r2, r2, #31
 800503a:	2101      	movs	r1, #1
 800503c:	fa01 f202 	lsl.w	r2, r1, r2
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d182      	bne.n	8004f4c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005046:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800504e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	430b      	orrs	r3, r1
 8005068:	497f      	ldr	r1, [pc, #508]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005076:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800507a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005080:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	fa93 f2a3 	rbit	r2, r3
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005092:	601a      	str	r2, [r3, #0]
  return result;
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800509c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509e:	fab3 f383 	clz	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	461a      	mov	r2, r3
 80050b0:	2301      	movs	r3, #1
 80050b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fe fbaa 	bl	800380c <HAL_GetTick>
 80050b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050bc:	e009      	b.n	80050d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050be:	f7fe fba5 	bl	800380c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e144      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	fa93 f2a3 	rbit	r2, r3
 80050ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80050f6:	601a      	str	r2, [r3, #0]
  return result;
 80050f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005100:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_RCC_OscConfig+0xe2c>
 8005116:	4b54      	ldr	r3, [pc, #336]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e027      	b.n	800516c <HAL_RCC_OscConfig+0xe7c>
 800511c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005120:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fa93 f2a3 	rbit	r2, r3
 8005138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005146:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800514a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005154:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	fa93 f2a3 	rbit	r2, r3
 800515e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005162:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005170:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800517e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	fa92 f1a2 	rbit	r1, r2
 8005188:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800518c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005190:	6011      	str	r1, [r2, #0]
  return result;
 8005192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005196:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	fab2 f282 	clz	r2, r2
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	f042 0220 	orr.w	r2, r2, #32
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	f002 021f 	and.w	r2, r2, #31
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f202 	lsl.w	r2, r1, r2
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d082      	beq.n	80050be <HAL_RCC_OscConfig+0xdce>
 80051b8:	e0cf      	b.n	800535a <HAL_RCC_OscConfig+0x106a>
 80051ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	fa93 f2a3 	rbit	r2, r3
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051de:	601a      	str	r2, [r3, #0]
  return result;
 80051e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fe fb04 	bl	800380c <HAL_GetTick>
 8005204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005208:	e009      	b.n	800521e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520a:	f7fe faff 	bl	800380c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e09e      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 800521e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005222:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800522a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005230:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	fa93 f2a3 	rbit	r2, r3
 800523a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005242:	601a      	str	r2, [r3, #0]
  return result;
 8005244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005248:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800524c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d104      	bne.n	800526c <HAL_RCC_OscConfig+0xf7c>
 8005262:	4b01      	ldr	r3, [pc, #4]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	e029      	b.n	80052bc <HAL_RCC_OscConfig+0xfcc>
 8005268:	40021000 	.word	0x40021000
 800526c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005270:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	fa93 f2a3 	rbit	r2, r3
 8005288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005296:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800529a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	fa93 f2a3 	rbit	r2, r3
 80052ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <HAL_RCC_OscConfig+0x1078>)
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	fa92 f1a2 	rbit	r1, r2
 80052d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80052e0:	6011      	str	r1, [r2, #0]
  return result;
 80052e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	fab2 f282 	clz	r2, r2
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	f042 0220 	orr.w	r2, r2, #32
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	f002 021f 	and.w	r2, r2, #31
 80052fc:	2101      	movs	r1, #1
 80052fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d180      	bne.n	800520a <HAL_RCC_OscConfig+0xf1a>
 8005308:	e027      	b.n	800535a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e01e      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <HAL_RCC_OscConfig+0x1078>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800532a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	429a      	cmp	r2, r3
 800533c:	d10b      	bne.n	8005356 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800533e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000

0800536c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b09e      	sub	sp, #120	; 0x78
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e162      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b90      	ldr	r3, [pc, #576]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d910      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b8d      	ldr	r3, [pc, #564]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 0207 	bic.w	r2, r3, #7
 800539a:	498b      	ldr	r1, [pc, #556]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b89      	ldr	r3, [pc, #548]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e14a      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c0:	4b82      	ldr	r3, [pc, #520]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	497f      	ldr	r1, [pc, #508]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80dc 	beq.w	8005598 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d13c      	bne.n	8005462 <HAL_RCC_ClockConfig+0xf6>
 80053e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f8:	fab3 f383 	clz	r3, r3
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d102      	bne.n	8005412 <HAL_RCC_ClockConfig+0xa6>
 800540c:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	e00f      	b.n	8005432 <HAL_RCC_ClockConfig+0xc6>
 8005412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005416:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	667b      	str	r3, [r7, #100]	; 0x64
 8005420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005424:	663b      	str	r3, [r7, #96]	; 0x60
 8005426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005428:	fa93 f3a3 	rbit	r3, r3
 800542c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542e:	4b67      	ldr	r3, [pc, #412]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005436:	65ba      	str	r2, [r7, #88]	; 0x58
 8005438:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800543a:	fa92 f2a2 	rbit	r2, r2
 800543e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005442:	fab2 f282 	clz	r2, r2
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	f042 0220 	orr.w	r2, r2, #32
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	f002 021f 	and.w	r2, r2, #31
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f202 	lsl.w	r2, r1, r2
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d17b      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e0f3      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d13c      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x178>
 800546a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800546e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d102      	bne.n	8005494 <HAL_RCC_ClockConfig+0x128>
 800548e:	4b4f      	ldr	r3, [pc, #316]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	e00f      	b.n	80054b4 <HAL_RCC_ClockConfig+0x148>
 8005494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005498:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
 80054a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054a6:	643b      	str	r3, [r7, #64]	; 0x40
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b0:	4b46      	ldr	r3, [pc, #280]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80054ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054bc:	fa92 f2a2 	rbit	r2, r2
 80054c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80054c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c4:	fab2 f282 	clz	r2, r2
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	f042 0220 	orr.w	r2, r2, #32
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	f002 021f 	and.w	r2, r2, #31
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f202 	lsl.w	r2, r1, r2
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d13a      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0b2      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
 80054e4:	2302      	movs	r3, #2
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	fa93 f3a3 	rbit	r3, r3
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f2:	fab3 f383 	clz	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <HAL_RCC_ClockConfig+0x1a0>
 8005506:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	e00d      	b.n	8005528 <HAL_RCC_ClockConfig+0x1bc>
 800550c:	2302      	movs	r3, #2
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	fa93 f3a3 	rbit	r3, r3
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
 8005518:	2302      	movs	r3, #2
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	fa93 f3a3 	rbit	r3, r3
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	4b29      	ldr	r3, [pc, #164]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2202      	movs	r2, #2
 800552a:	61ba      	str	r2, [r7, #24]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	fa92 f2a2 	rbit	r2, r2
 8005532:	617a      	str	r2, [r7, #20]
  return result;
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	fab2 f282 	clz	r2, r2
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	f042 0220 	orr.w	r2, r2, #32
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	f002 021f 	and.w	r2, r2, #31
 8005546:	2101      	movs	r1, #1
 8005548:	fa01 f202 	lsl.w	r2, r1, r2
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e079      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	491a      	ldr	r1, [pc, #104]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005568:	f7fe f950 	bl	800380c <HAL_GetTick>
 800556c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	e00a      	b.n	8005586 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005570:	f7fe f94c 	bl	800380c <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e061      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	4b11      	ldr	r3, [pc, #68]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 020c 	and.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	429a      	cmp	r2, r3
 8005596:	d1eb      	bne.n	8005570 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d214      	bcs.n	80055d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 0207 	bic.w	r2, r3, #7
 80055ae:	4906      	ldr	r1, [pc, #24]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e040      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
 80055c8:	40022000 	.word	0x40022000
 80055cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055dc:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	491a      	ldr	r1, [pc, #104]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055fa:	4b16      	ldr	r3, [pc, #88]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4912      	ldr	r1, [pc, #72]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800560e:	f000 f829 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8005612:	4601      	mov	r1, r0
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561c:	22f0      	movs	r2, #240	; 0xf0
 800561e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	fa92 f2a2 	rbit	r2, r2
 8005626:	60fa      	str	r2, [r7, #12]
  return result;
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	fab2 f282 	clz	r2, r2
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	40d3      	lsrs	r3, r2
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <HAL_RCC_ClockConfig+0x2ec>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
 8005636:	fa21 f303 	lsr.w	r3, r1, r3
 800563a:	4a08      	ldr	r2, [pc, #32]	; (800565c <HAL_RCC_ClockConfig+0x2f0>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_RCC_ClockConfig+0x2f4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe f89e 	bl	8003784 <HAL_InitTick>
  
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3778      	adds	r7, #120	; 0x78
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	0800a0d4 	.word	0x0800a0d4
 800565c:	20000084 	.word	0x20000084
 8005660:	20000088 	.word	0x20000088

08005664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005664:	b480      	push	{r7}
 8005666:	b08b      	sub	sp, #44	; 0x2c
 8005668:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	2300      	movs	r3, #0
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800567e:	4b29      	ldr	r3, [pc, #164]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b04      	cmp	r3, #4
 800568c:	d002      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x30>
 800568e:	2b08      	cmp	r3, #8
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x36>
 8005692:	e03c      	b.n	800570e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005694:	4b24      	ldr	r3, [pc, #144]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005696:	623b      	str	r3, [r7, #32]
      break;
 8005698:	e03c      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80056a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80056a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	fa92 f2a2 	rbit	r2, r2
 80056ac:	607a      	str	r2, [r7, #4]
  return result;
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	fab2 f282 	clz	r2, r2
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	40d3      	lsrs	r3, r2
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <HAL_RCC_GetSysClockFreq+0xc8>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80056be:	4b19      	ldr	r3, [pc, #100]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	220f      	movs	r2, #15
 80056c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	fa92 f2a2 	rbit	r2, r2
 80056d0:	60fa      	str	r2, [r7, #12]
  return result;
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	fab2 f282 	clz	r2, r2
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	40d3      	lsrs	r3, r2
 80056dc:	4a14      	ldr	r2, [pc, #80]	; (8005730 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056de:	5cd3      	ldrb	r3, [r2, r3]
 80056e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056ec:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	e004      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	623b      	str	r3, [r7, #32]
      break;
 800570c:	e002      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005710:	623b      	str	r3, [r7, #32]
      break;
 8005712:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005714:	6a3b      	ldr	r3, [r7, #32]
}
 8005716:	4618      	mov	r0, r3
 8005718:	372c      	adds	r7, #44	; 0x2c
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	007a1200 	.word	0x007a1200
 800572c:	0800a0ec 	.word	0x0800a0ec
 8005730:	0800a0fc 	.word	0x0800a0fc
 8005734:	003d0900 	.word	0x003d0900

08005738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <HAL_RCC_GetHCLKFreq+0x14>)
 800573e:	681b      	ldr	r3, [r3, #0]
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000084 	.word	0x20000084

08005750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005756:	f7ff ffef 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 800575a:	4601      	mov	r1, r0
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005764:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005768:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	fa92 f2a2 	rbit	r2, r2
 8005770:	603a      	str	r2, [r7, #0]
  return result;
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	fab2 f282 	clz	r2, r2
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	40d3      	lsrs	r3, r2
 800577c:	4a04      	ldr	r2, [pc, #16]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x40>)
 800577e:	5cd3      	ldrb	r3, [r2, r3]
 8005780:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40021000 	.word	0x40021000
 8005790:	0800a0e4 	.word	0x0800a0e4

08005794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800579a:	f7ff ffcd 	bl	8005738 <HAL_RCC_GetHCLKFreq>
 800579e:	4601      	mov	r1, r0
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80057a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80057ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	fa92 f2a2 	rbit	r2, r2
 80057b4:	603a      	str	r2, [r7, #0]
  return result;
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	fab2 f282 	clz	r2, r2
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	40d3      	lsrs	r3, r2
 80057c0:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80057c2:	5cd3      	ldrb	r3, [r2, r3]
 80057c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40021000 	.word	0x40021000
 80057d4:	0800a0e4 	.word	0x0800a0e4

080057d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b092      	sub	sp, #72	; 0x48
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80d4 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fc:	4b4e      	ldr	r3, [pc, #312]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10e      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005808:	4b4b      	ldr	r3, [pc, #300]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4a4a      	ldr	r2, [pc, #296]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005812:	61d3      	str	r3, [r2, #28]
 8005814:	4b48      	ldr	r3, [pc, #288]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005826:	4b45      	ldr	r3, [pc, #276]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d118      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005832:	4b42      	ldr	r3, [pc, #264]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a41      	ldr	r2, [pc, #260]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800583e:	f7fd ffe5 	bl	800380c <HAL_GetTick>
 8005842:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005844:	e008      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7fd ffe1 	bl	800380c <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b64      	cmp	r3, #100	; 0x64
 8005852:	d901      	bls.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e169      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005858:	4b38      	ldr	r3, [pc, #224]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005864:	4b34      	ldr	r3, [pc, #208]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8084 	beq.w	800597e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005880:	429a      	cmp	r2, r3
 8005882:	d07c      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005884:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	461a      	mov	r2, r3
 80058ae:	2301      	movs	r3, #1
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058d6:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d04b      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e6:	f7fd ff91 	bl	800380c <HAL_GetTick>
 80058ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ec:	e00a      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fd ff8d 	bl	800380c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e113      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005904:	2302      	movs	r3, #2
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	fa93 f3a3 	rbit	r3, r3
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	2302      	movs	r3, #2
 8005912:	623b      	str	r3, [r7, #32]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	fa93 f3a3 	rbit	r3, r3
 800591a:	61fb      	str	r3, [r7, #28]
  return result;
 800591c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591e:	fab3 f383 	clz	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d108      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005932:	4b01      	ldr	r3, [pc, #4]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	e00d      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005938:	40021000 	.word	0x40021000
 800593c:	40007000 	.word	0x40007000
 8005940:	10908100 	.word	0x10908100
 8005944:	2302      	movs	r3, #2
 8005946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	4b78      	ldr	r3, [pc, #480]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2202      	movs	r2, #2
 8005956:	613a      	str	r2, [r7, #16]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	fa92 f2a2 	rbit	r2, r2
 800595e:	60fa      	str	r2, [r7, #12]
  return result;
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	fab2 f282 	clz	r2, r2
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	f002 021f 	and.w	r2, r2, #31
 8005972:	2101      	movs	r1, #1
 8005974:	fa01 f202 	lsl.w	r2, r1, r2
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0b7      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	496a      	ldr	r1, [pc, #424]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800598c:	4313      	orrs	r3, r2
 800598e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005990:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005994:	2b01      	cmp	r3, #1
 8005996:	d105      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005998:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4a65      	ldr	r2, [pc, #404]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059b0:	4b60      	ldr	r3, [pc, #384]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	f023 0203 	bic.w	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	495d      	ldr	r1, [pc, #372]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ce:	4b59      	ldr	r3, [pc, #356]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	4956      	ldr	r1, [pc, #344]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ec:	4b51      	ldr	r3, [pc, #324]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	494e      	ldr	r1, [pc, #312]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0a:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	f023 0210 	bic.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4947      	ldr	r1, [pc, #284]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a28:	4b42      	ldr	r3, [pc, #264]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	493f      	ldr	r1, [pc, #252]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a46:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	f023 0220 	bic.w	r2, r3, #32
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	4938      	ldr	r1, [pc, #224]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a64:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	4930      	ldr	r1, [pc, #192]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a82:	4b2c      	ldr	r3, [pc, #176]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	4929      	ldr	r1, [pc, #164]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4921      	ldr	r1, [pc, #132]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	491a      	ldr	r1, [pc, #104]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005adc:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	4912      	ldr	r1, [pc, #72]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	490b      	ldr	r1, [pc, #44]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	4903      	ldr	r1, [pc, #12]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3748      	adds	r7, #72	; 0x48
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000

08005b38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e073      	b.n	8005c36 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7f5b      	ldrb	r3, [r3, #29]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fd f9ac 	bl	8002ebc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d055      	beq.n	8005c24 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	22ca      	movs	r2, #202	; 0xca
 8005b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2253      	movs	r2, #83	; 0x53
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa49 	bl	8006020 <RTC_EnterInitMode>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d12c      	bne.n	8005bf2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005baa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6899      	ldr	r1, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68d2      	ldr	r2, [r2, #12]
 8005bd2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6919      	ldr	r1, [r3, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	041a      	lsls	r2, r3, #16
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa50 	bl	800608e <RTC_ExitInitMode>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d110      	bne.n	8005c1a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699a      	ldr	r2, [r3, #24]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	22ff      	movs	r2, #255	; 0xff
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24
 8005c22:	e001      	b.n	8005c28 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c3e:	b590      	push	{r4, r7, lr}
 8005c40:	b087      	sub	sp, #28
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	7f1b      	ldrb	r3, [r3, #28]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_RTC_SetTime+0x1c>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e087      	b.n	8005d6a <HAL_RTC_SetTime+0x12c>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2202      	movs	r2, #2
 8005c64:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d126      	bne.n	8005cba <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fa27 	bl	80060d8 <RTC_ByteToBcd2>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fa20 	bl	80060d8 <RTC_ByteToBcd2>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c9c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	789b      	ldrb	r3, [r3, #2]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa18 	bl	80060d8 <RTC_ByteToBcd2>
 8005ca8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005caa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	78db      	ldrb	r3, [r3, #3]
 8005cb2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e018      	b.n	8005cec <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cda:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ce0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	78db      	ldrb	r3, [r3, #3]
 8005ce6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	22ca      	movs	r2, #202	; 0xca
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2253      	movs	r2, #83	; 0x53
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f98f 	bl	8006020 <RTC_EnterInitMode>
 8005d02:	4603      	mov	r3, r0
 8005d04:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d06:	7cfb      	ldrb	r3, [r7, #19]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d120      	bne.n	8005d4e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f9a2 	bl	800608e <RTC_ExitInitMode>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d4e:	7cfb      	ldrb	r3, [r7, #19]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	22ff      	movs	r2, #255	; 0xff
 8005d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]

  return status;
 8005d68:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd90      	pop	{r4, r7, pc}

08005d72 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005da4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005da8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	0d9b      	lsrs	r3, r3, #22
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d11a      	bne.n	8005e24 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 f98e 	bl	8006114 <RTC_Bcd2ToByte>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 f985 	bl	8006114 <RTC_Bcd2ToByte>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	789b      	ldrb	r3, [r3, #2]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f97c 	bl	8006114 <RTC_Bcd2ToByte>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e2e:	b590      	push	{r4, r7, lr}
 8005e30:	b087      	sub	sp, #28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	7f1b      	ldrb	r3, [r3, #28]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_RTC_SetDate+0x1c>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e071      	b.n	8005f2e <HAL_RTC_SetDate+0x100>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2202      	movs	r2, #2
 8005e54:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10e      	bne.n	8005e7a <HAL_RTC_SetDate+0x4c>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	f023 0310 	bic.w	r3, r3, #16
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	330a      	adds	r3, #10
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11c      	bne.n	8005eba <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f927 	bl	80060d8 <RTC_ByteToBcd2>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f920 	bl	80060d8 <RTC_ByteToBcd2>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	789b      	ldrb	r3, [r3, #2]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f918 	bl	80060d8 <RTC_ByteToBcd2>
 8005ea8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005eaa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e00e      	b.n	8005ed8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ec6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ecc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	22ca      	movs	r2, #202	; 0xca
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2253      	movs	r2, #83	; 0x53
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f899 	bl	8006020 <RTC_EnterInitMode>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ef2:	7cfb      	ldrb	r3, [r7, #19]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10c      	bne.n	8005f12 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f8c0 	bl	800608e <RTC_ExitInitMode>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f12:	7cfb      	ldrb	r3, [r7, #19]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	22ff      	movs	r2, #255	; 0xff
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]

  return status;
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd90      	pop	{r4, r7, pc}

08005f36 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	0b5b      	lsrs	r3, r3, #13
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11a      	bne.n	8005fca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	78db      	ldrb	r3, [r3, #3]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f8bb 	bl	8006114 <RTC_Bcd2ToByte>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f8b2 	bl	8006114 <RTC_Bcd2ToByte>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	789b      	ldrb	r3, [r3, #2]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f8a9 	bl	8006114 <RTC_Bcd2ToByte>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	; (800601c <HAL_RTC_WaitForSynchro+0x48>)
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fe8:	f7fd fc10 	bl	800380c <HAL_GetTick>
 8005fec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fee:	e009      	b.n	8006004 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ff0:	f7fd fc0c 	bl	800380c <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ffe:	d901      	bls.n	8006004 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e007      	b.n	8006014 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0ee      	beq.n	8005ff0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	0001ff5f 	.word	0x0001ff5f

08006020 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d122      	bne.n	8006084 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800604c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800604e:	f7fd fbdd 	bl	800380c <HAL_GetTick>
 8006052:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006054:	e00c      	b.n	8006070 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006056:	f7fd fbd9 	bl	800380c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006064:	d904      	bls.n	8006070 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2204      	movs	r2, #4
 800606a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <RTC_EnterInitMode+0x64>
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d1e8      	bne.n	8006056 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff ff8b 	bl	8005fd4 <HAL_RTC_WaitForSynchro>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2204      	movs	r2, #4
 80060c8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80060e6:	e005      	b.n	80060f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	3b0a      	subs	r3, #10
 80060f2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	d8f6      	bhi.n	80060e8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	b2da      	uxtb	r2, r3
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	4313      	orrs	r3, r2
 8006106:	b2db      	uxtb	r3, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	091b      	lsrs	r3, r3, #4
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	b2db      	uxtb	r3, r3
 8006140:	4413      	add	r3, r2
 8006142:	b2db      	uxtb	r3, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e09d      	b.n	800629e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d108      	bne.n	800617c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006172:	d009      	beq.n	8006188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	61da      	str	r2, [r3, #28]
 800617a:	e005      	b.n	8006188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fc feb0 	bl	8002f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061c8:	d902      	bls.n	80061d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	e002      	b.n	80061d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061de:	d007      	beq.n	80061f0 <HAL_SPI_Init+0xa0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061e8:	d002      	beq.n	80061f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	ea42 0103 	orr.w	r1, r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	0c1b      	lsrs	r3, r3, #16
 800624c:	f003 0204 	and.w	r2, r3, #4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	431a      	orrs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800626c:	ea42 0103 	orr.w	r1, r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800628c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e049      	b.n	800634c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7fc fe5d 	bl	8002f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f000 fdb3 	bl	8006e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b01      	cmp	r3, #1
 8006366:	d001      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e04a      	b.n	8006402 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a21      	ldr	r2, [pc, #132]	; (8006410 <HAL_TIM_Base_Start_IT+0xbc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d018      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0x6c>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006396:	d013      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0x6c>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1d      	ldr	r2, [pc, #116]	; (8006414 <HAL_TIM_Base_Start_IT+0xc0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00e      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0x6c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <HAL_TIM_Base_Start_IT+0xc4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d009      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0x6c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1a      	ldr	r2, [pc, #104]	; (800641c <HAL_TIM_Base_Start_IT+0xc8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <HAL_TIM_Base_Start_IT+0x6c>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a19      	ldr	r2, [pc, #100]	; (8006420 <HAL_TIM_Base_Start_IT+0xcc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d115      	bne.n	80063ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	4b17      	ldr	r3, [pc, #92]	; (8006424 <HAL_TIM_Base_Start_IT+0xd0>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b06      	cmp	r3, #6
 80063d0:	d015      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0xaa>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d8:	d011      	beq.n	80063fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ea:	e008      	b.n	80063fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	e000      	b.n	8006400 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40013400 	.word	0x40013400
 8006420:	40014000 	.word	0x40014000
 8006424:	00010007 	.word	0x00010007

08006428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e049      	b.n	80064ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc fdda 	bl	8003008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f000 fcf2 	bl	8006e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <HAL_TIM_PWM_Start+0x24>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	bf14      	ite	ne
 80064f4:	2301      	movne	r3, #1
 80064f6:	2300      	moveq	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	e03c      	b.n	8006576 <HAL_TIM_PWM_Start+0x9e>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d109      	bne.n	8006516 <HAL_TIM_PWM_Start+0x3e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	bf14      	ite	ne
 800650e:	2301      	movne	r3, #1
 8006510:	2300      	moveq	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	e02f      	b.n	8006576 <HAL_TIM_PWM_Start+0x9e>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d109      	bne.n	8006530 <HAL_TIM_PWM_Start+0x58>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	e022      	b.n	8006576 <HAL_TIM_PWM_Start+0x9e>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b0c      	cmp	r3, #12
 8006534:	d109      	bne.n	800654a <HAL_TIM_PWM_Start+0x72>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b01      	cmp	r3, #1
 8006540:	bf14      	ite	ne
 8006542:	2301      	movne	r3, #1
 8006544:	2300      	moveq	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	e015      	b.n	8006576 <HAL_TIM_PWM_Start+0x9e>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b10      	cmp	r3, #16
 800654e:	d109      	bne.n	8006564 <HAL_TIM_PWM_Start+0x8c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	bf14      	ite	ne
 800655c:	2301      	movne	r3, #1
 800655e:	2300      	moveq	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	e008      	b.n	8006576 <HAL_TIM_PWM_Start+0x9e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	bf14      	ite	ne
 8006570:	2301      	movne	r3, #1
 8006572:	2300      	moveq	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e097      	b.n	80066ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start+0xb6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658c:	e023      	b.n	80065d6 <HAL_TIM_PWM_Start+0xfe>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0xc6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800659c:	e01b      	b.n	80065d6 <HAL_TIM_PWM_Start+0xfe>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Start+0xd6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ac:	e013      	b.n	80065d6 <HAL_TIM_PWM_Start+0xfe>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b0c      	cmp	r3, #12
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xe6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065bc:	e00b      	b.n	80065d6 <HAL_TIM_PWM_Start+0xfe>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d104      	bne.n	80065ce <HAL_TIM_PWM_Start+0xf6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065cc:	e003      	b.n	80065d6 <HAL_TIM_PWM_Start+0xfe>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2201      	movs	r2, #1
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f836 	bl	8007650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a33      	ldr	r2, [pc, #204]	; (80066b8 <HAL_TIM_PWM_Start+0x1e0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <HAL_TIM_PWM_Start+0x13e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a32      	ldr	r2, [pc, #200]	; (80066bc <HAL_TIM_PWM_Start+0x1e4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00e      	beq.n	8006616 <HAL_TIM_PWM_Start+0x13e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a30      	ldr	r2, [pc, #192]	; (80066c0 <HAL_TIM_PWM_Start+0x1e8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d009      	beq.n	8006616 <HAL_TIM_PWM_Start+0x13e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a2f      	ldr	r2, [pc, #188]	; (80066c4 <HAL_TIM_PWM_Start+0x1ec>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_TIM_PWM_Start+0x13e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a2d      	ldr	r2, [pc, #180]	; (80066c8 <HAL_TIM_PWM_Start+0x1f0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d101      	bne.n	800661a <HAL_TIM_PWM_Start+0x142>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <HAL_TIM_PWM_Start+0x144>
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800662e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a20      	ldr	r2, [pc, #128]	; (80066b8 <HAL_TIM_PWM_Start+0x1e0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d018      	beq.n	800666c <HAL_TIM_PWM_Start+0x194>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d013      	beq.n	800666c <HAL_TIM_PWM_Start+0x194>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a20      	ldr	r2, [pc, #128]	; (80066cc <HAL_TIM_PWM_Start+0x1f4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_TIM_PWM_Start+0x194>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <HAL_TIM_PWM_Start+0x1f8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <HAL_TIM_PWM_Start+0x194>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a17      	ldr	r2, [pc, #92]	; (80066bc <HAL_TIM_PWM_Start+0x1e4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIM_PWM_Start+0x194>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a16      	ldr	r2, [pc, #88]	; (80066c0 <HAL_TIM_PWM_Start+0x1e8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d115      	bne.n	8006698 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <HAL_TIM_PWM_Start+0x1fc>)
 8006674:	4013      	ands	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b06      	cmp	r3, #6
 800667c:	d015      	beq.n	80066aa <HAL_TIM_PWM_Start+0x1d2>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006684:	d011      	beq.n	80066aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006696:	e008      	b.n	80066aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	e000      	b.n	80066ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40013400 	.word	0x40013400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	00010007 	.word	0x00010007

080066d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 ffb0 	bl	8007650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a3e      	ldr	r2, [pc, #248]	; (80067f0 <HAL_TIM_PWM_Stop+0x118>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_TIM_PWM_Stop+0x4a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a3d      	ldr	r2, [pc, #244]	; (80067f4 <HAL_TIM_PWM_Stop+0x11c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_TIM_PWM_Stop+0x4a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3b      	ldr	r2, [pc, #236]	; (80067f8 <HAL_TIM_PWM_Stop+0x120>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIM_PWM_Stop+0x4a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a3a      	ldr	r2, [pc, #232]	; (80067fc <HAL_TIM_PWM_Stop+0x124>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIM_PWM_Stop+0x4a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a38      	ldr	r2, [pc, #224]	; (8006800 <HAL_TIM_PWM_Stop+0x128>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <HAL_TIM_PWM_Stop+0x4e>
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <HAL_TIM_PWM_Stop+0x50>
 8006726:	2300      	movs	r3, #0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d017      	beq.n	800675c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	f241 1311 	movw	r3, #4369	; 0x1111
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10f      	bne.n	800675c <HAL_TIM_PWM_Stop+0x84>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	f240 4344 	movw	r3, #1092	; 0x444
 8006746:	4013      	ands	r3, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d107      	bne.n	800675c <HAL_TIM_PWM_Stop+0x84>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800675a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	f241 1311 	movw	r3, #4369	; 0x1111
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10f      	bne.n	800678c <HAL_TIM_PWM_Stop+0xb4>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	f240 4344 	movw	r3, #1092	; 0x444
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d107      	bne.n	800678c <HAL_TIM_PWM_Stop+0xb4>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_TIM_PWM_Stop+0xc4>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679a:	e023      	b.n	80067e4 <HAL_TIM_PWM_Stop+0x10c>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d104      	bne.n	80067ac <HAL_TIM_PWM_Stop+0xd4>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067aa:	e01b      	b.n	80067e4 <HAL_TIM_PWM_Stop+0x10c>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d104      	bne.n	80067bc <HAL_TIM_PWM_Stop+0xe4>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ba:	e013      	b.n	80067e4 <HAL_TIM_PWM_Stop+0x10c>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b0c      	cmp	r3, #12
 80067c0:	d104      	bne.n	80067cc <HAL_TIM_PWM_Stop+0xf4>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ca:	e00b      	b.n	80067e4 <HAL_TIM_PWM_Stop+0x10c>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b10      	cmp	r3, #16
 80067d0:	d104      	bne.n	80067dc <HAL_TIM_PWM_Stop+0x104>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067da:	e003      	b.n	80067e4 <HAL_TIM_PWM_Stop+0x10c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40013400 	.word	0x40013400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800

08006804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b02      	cmp	r3, #2
 8006818:	d122      	bne.n	8006860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	d11b      	bne.n	8006860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0202 	mvn.w	r2, #2
 8006830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fae3 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 800684c:	e005      	b.n	800685a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fad5 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fae6 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d122      	bne.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b04      	cmp	r3, #4
 800687a:	d11b      	bne.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0204 	mvn.w	r2, #4
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fab9 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 faab 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fabc 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d122      	bne.n	8006908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d11b      	bne.n	8006908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0208 	mvn.w	r2, #8
 80068d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2204      	movs	r2, #4
 80068de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa8f 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 80068f4:	e005      	b.n	8006902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fa81 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa92 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b10      	cmp	r3, #16
 8006914:	d122      	bne.n	800695c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b10      	cmp	r3, #16
 8006922:	d11b      	bne.n	800695c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0210 	mvn.w	r2, #16
 800692c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2208      	movs	r2, #8
 8006932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa65 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa57 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fa68 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b01      	cmp	r3, #1
 8006968:	d10e      	bne.n	8006988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d107      	bne.n	8006988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0201 	mvn.w	r2, #1
 8006980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fb fd56 	bl	8002434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d10e      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a0:	2b80      	cmp	r3, #128	; 0x80
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fefe 	bl	80077b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c2:	d10e      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d107      	bne.n	80069e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fef1 	bl	80077c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b40      	cmp	r3, #64	; 0x40
 80069ee:	d10e      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d107      	bne.n	8006a0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fa16 	bl	8006e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d10e      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d107      	bne.n	8006a3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f06f 0220 	mvn.w	r2, #32
 8006a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 feb1 	bl	800779c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0ff      	b.n	8006c62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b14      	cmp	r3, #20
 8006a6e:	f200 80f0 	bhi.w	8006c52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006acd 	.word	0x08006acd
 8006a7c:	08006c53 	.word	0x08006c53
 8006a80:	08006c53 	.word	0x08006c53
 8006a84:	08006c53 	.word	0x08006c53
 8006a88:	08006b0d 	.word	0x08006b0d
 8006a8c:	08006c53 	.word	0x08006c53
 8006a90:	08006c53 	.word	0x08006c53
 8006a94:	08006c53 	.word	0x08006c53
 8006a98:	08006b4f 	.word	0x08006b4f
 8006a9c:	08006c53 	.word	0x08006c53
 8006aa0:	08006c53 	.word	0x08006c53
 8006aa4:	08006c53 	.word	0x08006c53
 8006aa8:	08006b8f 	.word	0x08006b8f
 8006aac:	08006c53 	.word	0x08006c53
 8006ab0:	08006c53 	.word	0x08006c53
 8006ab4:	08006c53 	.word	0x08006c53
 8006ab8:	08006bd1 	.word	0x08006bd1
 8006abc:	08006c53 	.word	0x08006c53
 8006ac0:	08006c53 	.word	0x08006c53
 8006ac4:	08006c53 	.word	0x08006c53
 8006ac8:	08006c11 	.word	0x08006c11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fa4c 	bl	8006f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0208 	orr.w	r2, r2, #8
 8006ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0204 	bic.w	r2, r2, #4
 8006af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6999      	ldr	r1, [r3, #24]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	619a      	str	r2, [r3, #24]
      break;
 8006b0a:	e0a5      	b.n	8006c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fabc 	bl	8007090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6999      	ldr	r1, [r3, #24]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	619a      	str	r2, [r3, #24]
      break;
 8006b4c:	e084      	b.n	8006c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fb25 	bl	80071a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0208 	orr.w	r2, r2, #8
 8006b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0204 	bic.w	r2, r2, #4
 8006b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	61da      	str	r2, [r3, #28]
      break;
 8006b8c:	e064      	b.n	8006c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fb8d 	bl	80072b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69d9      	ldr	r1, [r3, #28]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	021a      	lsls	r2, r3, #8
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	61da      	str	r2, [r3, #28]
      break;
 8006bce:	e043      	b.n	8006c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fbd6 	bl	8007388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0208 	orr.w	r2, r2, #8
 8006bea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0204 	bic.w	r2, r2, #4
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c0e:	e023      	b.n	8006c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fc1a 	bl	8007450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	021a      	lsls	r2, r3, #8
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c50:	e002      	b.n	8006c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	75fb      	strb	r3, [r7, #23]
      break;
 8006c56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop

08006c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_TIM_ConfigClockSource+0x1c>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e0b6      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc4:	d03e      	beq.n	8006d44 <HAL_TIM_ConfigClockSource+0xd8>
 8006cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cca:	f200 8087 	bhi.w	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd2:	f000 8086 	beq.w	8006de2 <HAL_TIM_ConfigClockSource+0x176>
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cda:	d87f      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006cdc:	2b70      	cmp	r3, #112	; 0x70
 8006cde:	d01a      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0xaa>
 8006ce0:	2b70      	cmp	r3, #112	; 0x70
 8006ce2:	d87b      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006ce4:	2b60      	cmp	r3, #96	; 0x60
 8006ce6:	d050      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x11e>
 8006ce8:	2b60      	cmp	r3, #96	; 0x60
 8006cea:	d877      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006cec:	2b50      	cmp	r3, #80	; 0x50
 8006cee:	d03c      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0xfe>
 8006cf0:	2b50      	cmp	r3, #80	; 0x50
 8006cf2:	d873      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	d058      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x13e>
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d86f      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006cfc:	2b30      	cmp	r3, #48	; 0x30
 8006cfe:	d064      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15e>
 8006d00:	2b30      	cmp	r3, #48	; 0x30
 8006d02:	d86b      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	d060      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15e>
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d867      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d05c      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15e>
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	d05a      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15e>
 8006d14:	e062      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6899      	ldr	r1, [r3, #8]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f000 fc73 	bl	8007610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	609a      	str	r2, [r3, #8]
      break;
 8006d42:	e04f      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	6899      	ldr	r1, [r3, #8]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f000 fc5c 	bl	8007610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d66:	609a      	str	r2, [r3, #8]
      break;
 8006d68:	e03c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6859      	ldr	r1, [r3, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f000 fbd0 	bl	800751c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2150      	movs	r1, #80	; 0x50
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fc29 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006d88:	e02c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6859      	ldr	r1, [r3, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	461a      	mov	r2, r3
 8006d98:	f000 fbef 	bl	800757a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2160      	movs	r1, #96	; 0x60
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fc19 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006da8:	e01c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 fbb0 	bl	800751c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fc09 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006dc8:	e00c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f000 fc00 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006dda:	e003      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]
      break;
 8006de0:	e000      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a3c      	ldr	r2, [pc, #240]	; (8006f54 <TIM_Base_SetConfig+0x104>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00f      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e6e:	d00b      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a39      	ldr	r2, [pc, #228]	; (8006f58 <TIM_Base_SetConfig+0x108>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a38      	ldr	r2, [pc, #224]	; (8006f5c <TIM_Base_SetConfig+0x10c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_Base_SetConfig+0x38>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a37      	ldr	r2, [pc, #220]	; (8006f60 <TIM_Base_SetConfig+0x110>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d108      	bne.n	8006e9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <TIM_Base_SetConfig+0x104>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01b      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea8:	d017      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <TIM_Base_SetConfig+0x108>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d013      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a29      	ldr	r2, [pc, #164]	; (8006f5c <TIM_Base_SetConfig+0x10c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00f      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a28      	ldr	r2, [pc, #160]	; (8006f60 <TIM_Base_SetConfig+0x110>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00b      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a27      	ldr	r2, [pc, #156]	; (8006f64 <TIM_Base_SetConfig+0x114>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d007      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	; (8006f68 <TIM_Base_SetConfig+0x118>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_Base_SetConfig+0x8a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a25      	ldr	r2, [pc, #148]	; (8006f6c <TIM_Base_SetConfig+0x11c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a10      	ldr	r2, [pc, #64]	; (8006f54 <TIM_Base_SetConfig+0x104>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00f      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a11      	ldr	r2, [pc, #68]	; (8006f60 <TIM_Base_SetConfig+0x110>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00b      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a10      	ldr	r2, [pc, #64]	; (8006f64 <TIM_Base_SetConfig+0x114>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <TIM_Base_SetConfig+0x118>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_Base_SetConfig+0xe8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a0e      	ldr	r2, [pc, #56]	; (8006f6c <TIM_Base_SetConfig+0x11c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d103      	bne.n	8006f40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	615a      	str	r2, [r3, #20]
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40013400 	.word	0x40013400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0201 	bic.w	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0302 	bic.w	r3, r3, #2
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a2c      	ldr	r2, [pc, #176]	; (800707c <TIM_OC1_SetConfig+0x10c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00f      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <TIM_OC1_SetConfig+0x110>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00b      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <TIM_OC1_SetConfig+0x114>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d007      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a29      	ldr	r2, [pc, #164]	; (8007088 <TIM_OC1_SetConfig+0x118>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC1_SetConfig+0x80>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a28      	ldr	r2, [pc, #160]	; (800708c <TIM_OC1_SetConfig+0x11c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10c      	bne.n	800700a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 0308 	bic.w	r3, r3, #8
 8006ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f023 0304 	bic.w	r3, r3, #4
 8007008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a1b      	ldr	r2, [pc, #108]	; (800707c <TIM_OC1_SetConfig+0x10c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00f      	beq.n	8007032 <TIM_OC1_SetConfig+0xc2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a1a      	ldr	r2, [pc, #104]	; (8007080 <TIM_OC1_SetConfig+0x110>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <TIM_OC1_SetConfig+0xc2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a19      	ldr	r2, [pc, #100]	; (8007084 <TIM_OC1_SetConfig+0x114>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d007      	beq.n	8007032 <TIM_OC1_SetConfig+0xc2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a18      	ldr	r2, [pc, #96]	; (8007088 <TIM_OC1_SetConfig+0x118>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC1_SetConfig+0xc2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a17      	ldr	r2, [pc, #92]	; (800708c <TIM_OC1_SetConfig+0x11c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d111      	bne.n	8007056 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	621a      	str	r2, [r3, #32]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	40012c00 	.word	0x40012c00
 8007080:	40013400 	.word	0x40013400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800

08007090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f023 0210 	bic.w	r2, r3, #16
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0320 	bic.w	r3, r3, #32
 80070de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a28      	ldr	r2, [pc, #160]	; (8007190 <TIM_OC2_SetConfig+0x100>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_OC2_SetConfig+0x6c>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a27      	ldr	r2, [pc, #156]	; (8007194 <TIM_OC2_SetConfig+0x104>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d10d      	bne.n	8007118 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a1d      	ldr	r2, [pc, #116]	; (8007190 <TIM_OC2_SetConfig+0x100>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00f      	beq.n	8007140 <TIM_OC2_SetConfig+0xb0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <TIM_OC2_SetConfig+0x104>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00b      	beq.n	8007140 <TIM_OC2_SetConfig+0xb0>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a1b      	ldr	r2, [pc, #108]	; (8007198 <TIM_OC2_SetConfig+0x108>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <TIM_OC2_SetConfig+0xb0>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a1a      	ldr	r2, [pc, #104]	; (800719c <TIM_OC2_SetConfig+0x10c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_OC2_SetConfig+0xb0>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <TIM_OC2_SetConfig+0x110>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d113      	bne.n	8007168 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007146:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800714e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40013400 	.word	0x40013400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a27      	ldr	r2, [pc, #156]	; (80072a0 <TIM_OC3_SetConfig+0xfc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d003      	beq.n	800720e <TIM_OC3_SetConfig+0x6a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a26      	ldr	r2, [pc, #152]	; (80072a4 <TIM_OC3_SetConfig+0x100>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d10d      	bne.n	800722a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007228:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1c      	ldr	r2, [pc, #112]	; (80072a0 <TIM_OC3_SetConfig+0xfc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00f      	beq.n	8007252 <TIM_OC3_SetConfig+0xae>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a1b      	ldr	r2, [pc, #108]	; (80072a4 <TIM_OC3_SetConfig+0x100>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00b      	beq.n	8007252 <TIM_OC3_SetConfig+0xae>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a1a      	ldr	r2, [pc, #104]	; (80072a8 <TIM_OC3_SetConfig+0x104>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <TIM_OC3_SetConfig+0xae>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a19      	ldr	r2, [pc, #100]	; (80072ac <TIM_OC3_SetConfig+0x108>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_OC3_SetConfig+0xae>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <TIM_OC3_SetConfig+0x10c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d113      	bne.n	800727a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	621a      	str	r2, [r3, #32]
}
 8007294:	bf00      	nop
 8007296:	371c      	adds	r7, #28
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40013400 	.word	0x40013400
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400
 80072b0:	40014800 	.word	0x40014800

080072b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	031b      	lsls	r3, r3, #12
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a18      	ldr	r2, [pc, #96]	; (8007374 <TIM_OC4_SetConfig+0xc0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00f      	beq.n	8007338 <TIM_OC4_SetConfig+0x84>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a17      	ldr	r2, [pc, #92]	; (8007378 <TIM_OC4_SetConfig+0xc4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00b      	beq.n	8007338 <TIM_OC4_SetConfig+0x84>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a16      	ldr	r2, [pc, #88]	; (800737c <TIM_OC4_SetConfig+0xc8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d007      	beq.n	8007338 <TIM_OC4_SetConfig+0x84>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a15      	ldr	r2, [pc, #84]	; (8007380 <TIM_OC4_SetConfig+0xcc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC4_SetConfig+0x84>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a14      	ldr	r2, [pc, #80]	; (8007384 <TIM_OC4_SetConfig+0xd0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d109      	bne.n	800734c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	019b      	lsls	r3, r3, #6
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	621a      	str	r2, [r3, #32]
}
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40013400 	.word	0x40013400
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800

08007388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a17      	ldr	r2, [pc, #92]	; (800743c <TIM_OC5_SetConfig+0xb4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00f      	beq.n	8007402 <TIM_OC5_SetConfig+0x7a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a16      	ldr	r2, [pc, #88]	; (8007440 <TIM_OC5_SetConfig+0xb8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00b      	beq.n	8007402 <TIM_OC5_SetConfig+0x7a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a15      	ldr	r2, [pc, #84]	; (8007444 <TIM_OC5_SetConfig+0xbc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d007      	beq.n	8007402 <TIM_OC5_SetConfig+0x7a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a14      	ldr	r2, [pc, #80]	; (8007448 <TIM_OC5_SetConfig+0xc0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <TIM_OC5_SetConfig+0x7a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a13      	ldr	r2, [pc, #76]	; (800744c <TIM_OC5_SetConfig+0xc4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d109      	bne.n	8007416 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	621a      	str	r2, [r3, #32]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40012c00 	.word	0x40012c00
 8007440:	40013400 	.word	0x40013400
 8007444:	40014000 	.word	0x40014000
 8007448:	40014400 	.word	0x40014400
 800744c:	40014800 	.word	0x40014800

08007450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	051b      	lsls	r3, r3, #20
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <TIM_OC6_SetConfig+0xb8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00f      	beq.n	80074cc <TIM_OC6_SetConfig+0x7c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a17      	ldr	r2, [pc, #92]	; (800750c <TIM_OC6_SetConfig+0xbc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <TIM_OC6_SetConfig+0x7c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a16      	ldr	r2, [pc, #88]	; (8007510 <TIM_OC6_SetConfig+0xc0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_OC6_SetConfig+0x7c>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a15      	ldr	r2, [pc, #84]	; (8007514 <TIM_OC6_SetConfig+0xc4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC6_SetConfig+0x7c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a14      	ldr	r2, [pc, #80]	; (8007518 <TIM_OC6_SetConfig+0xc8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d109      	bne.n	80074e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	029b      	lsls	r3, r3, #10
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40012c00 	.word	0x40012c00
 800750c:	40013400 	.word	0x40013400
 8007510:	40014000 	.word	0x40014000
 8007514:	40014400 	.word	0x40014400
 8007518:	40014800 	.word	0x40014800

0800751c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0201 	bic.w	r2, r3, #1
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 030a 	bic.w	r3, r3, #10
 8007558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f023 0210 	bic.w	r2, r3, #16
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	031b      	lsls	r3, r3, #12
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f043 0307 	orr.w	r3, r3, #7
 80075fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	609a      	str	r2, [r3, #8]
}
 8007604:	bf00      	nop
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	021a      	lsls	r2, r3, #8
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	431a      	orrs	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4313      	orrs	r3, r2
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	2201      	movs	r2, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	43db      	mvns	r3, r3
 8007672:	401a      	ands	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	fa01 f303 	lsl.w	r3, r1, r3
 8007688:	431a      	orrs	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	621a      	str	r2, [r3, #32]
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e063      	b.n	800777c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2b      	ldr	r2, [pc, #172]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2a      	ldr	r2, [pc, #168]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d108      	bne.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4313      	orrs	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a1b      	ldr	r2, [pc, #108]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d018      	beq.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007726:	d013      	beq.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a18      	ldr	r2, [pc, #96]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00e      	beq.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d009      	beq.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a12      	ldr	r2, [pc, #72]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d004      	beq.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a13      	ldr	r2, [pc, #76]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d10c      	bne.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4313      	orrs	r3, r2
 8007760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40014000 	.word	0x40014000

0800779c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e040      	b.n	800786c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fb fc56 	bl	80030ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2224      	movs	r2, #36	; 0x24
 8007804:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0201 	bic.w	r2, r2, #1
 8007814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fbbc 	bl	8007f94 <UART_SetConfig>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e022      	b.n	800786c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fd84 	bl	800833c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fe0b 	bl	8008480 <UART_CheckIdleState>
 800786a:	4603      	mov	r3, r0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af02      	add	r7, sp, #8
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	4613      	mov	r3, r2
 8007882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007888:	2b20      	cmp	r3, #32
 800788a:	d178      	bne.n	800797e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_UART_Transmit+0x24>
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e071      	b.n	8007980 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2221      	movs	r2, #33	; 0x21
 80078a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078aa:	f7fb ffaf 	bl	800380c <HAL_GetTick>
 80078ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	88fa      	ldrh	r2, [r7, #6]
 80078bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c8:	d108      	bne.n	80078dc <HAL_UART_Transmit+0x68>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e003      	b.n	80078e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078e4:	e030      	b.n	8007948 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2180      	movs	r1, #128	; 0x80
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fe6d 	bl	80085d0 <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e03c      	b.n	8007980 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10b      	bne.n	8007924 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007918:	b292      	uxth	r2, r2
 800791a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	3302      	adds	r3, #2
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	e008      	b.n	8007936 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	781a      	ldrb	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	b292      	uxth	r2, r2
 800792e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3301      	adds	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1c8      	bne.n	80078e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2200      	movs	r2, #0
 800795c:	2140      	movs	r1, #64	; 0x40
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fe36 	bl	80085d0 <UART_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e005      	b.n	8007980 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2220      	movs	r2, #32
 8007978:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e000      	b.n	8007980 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800797e:	2302      	movs	r3, #2
  }
}
 8007980:	4618      	mov	r0, r3
 8007982:	3720      	adds	r7, #32
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b0ba      	sub	sp, #232	; 0xe8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80079b6:	4013      	ands	r3, r2
 80079b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d115      	bne.n	80079f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c8:	f003 0320 	and.w	r3, r3, #32
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00f      	beq.n	80079f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 82ab 	beq.w	8007f3c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
      }
      return;
 80079ee:	e2a5      	b.n	8007f3c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8117 	beq.w	8007c28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a0a:	4b85      	ldr	r3, [pc, #532]	; (8007c20 <HAL_UART_IRQHandler+0x298>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 810a 	beq.w	8007c28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <HAL_UART_IRQHandler+0xbc>
 8007a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2201      	movs	r2, #1
 8007a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3a:	f043 0201 	orr.w	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d011      	beq.n	8007a74 <HAL_UART_IRQHandler+0xec>
 8007a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2202      	movs	r2, #2
 8007a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d011      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x11c>
 8007a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2204      	movs	r2, #4
 8007a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a9a:	f043 0202 	orr.w	r2, r3, #2
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d017      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2208      	movs	r2, #8
 8007ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad6:	f043 0208 	orr.w	r2, r3, #8
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <HAL_UART_IRQHandler+0x18a>
 8007aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00c      	beq.n	8007b12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b08:	f043 0220 	orr.w	r2, r3, #32
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8211 	beq.w	8007f40 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00d      	beq.n	8007b46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d005      	beq.n	8007b6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d04f      	beq.n	8007c0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fd97 	bl	800869e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d141      	bne.n	8007c02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007baa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1d9      	bne.n	8007b7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d013      	beq.n	8007bfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd6:	4a13      	ldr	r2, [pc, #76]	; (8007c24 <HAL_UART_IRQHandler+0x29c>)
 8007bd8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fb ff8e 	bl	8003b00 <HAL_DMA_Abort_IT>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d017      	beq.n	8007c1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	e00f      	b.n	8007c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f9b4 	bl	8007f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e00b      	b.n	8007c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9b0 	bl	8007f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e007      	b.n	8007c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f9ac 	bl	8007f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c18:	e192      	b.n	8007f40 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1a:	bf00      	nop
    return;
 8007c1c:	e190      	b.n	8007f40 <HAL_UART_IRQHandler+0x5b8>
 8007c1e:	bf00      	nop
 8007c20:	04000120 	.word	0x04000120
 8007c24:	08008767 	.word	0x08008767

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	f040 814b 	bne.w	8007ec8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 8144 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 813d 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2210      	movs	r2, #16
 8007c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b40      	cmp	r3, #64	; 0x40
 8007c62:	f040 80b5 	bne.w	8007dd0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 8164 	beq.w	8007f44 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c86:	429a      	cmp	r2, r3
 8007c88:	f080 815c 	bcs.w	8007f44 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	f000 8086 	beq.w	8007dae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cd0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cd8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1da      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e1      	bne.n	8007cec <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3308      	adds	r3, #8
 8007d48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d4c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e3      	bne.n	8007d28 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d7e:	f023 0310 	bic.w	r3, r3, #16
 8007d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e4      	bne.n	8007d6e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fb fe70 	bl	8003a8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2202      	movs	r2, #2
 8007db2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8d7 	bl	8007f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dce:	e0b9      	b.n	8007f44 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80ab 	beq.w	8007f48 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 80a6 	beq.w	8007f48 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e4      	bne.n	8007dfc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	623b      	str	r3, [r7, #32]
   return(result);
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e56:	633a      	str	r2, [r7, #48]	; 0x30
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e3      	bne.n	8007e32 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0310 	bic.w	r3, r3, #16
 8007e92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	69b9      	ldr	r1, [r7, #24]
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	617b      	str	r3, [r7, #20]
   return(result);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e4      	bne.n	8007e7e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f85b 	bl	8007f7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ec6:	e03f      	b.n	8007f48 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00e      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x56a>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d008      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fc7b 	bl	80087e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ef0:	e02d      	b.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00e      	beq.n	8007f1c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01c      	beq.n	8007f4c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
    }
    return;
 8007f1a:	e017      	b.n	8007f4c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d012      	beq.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
 8007f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00c      	beq.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fc2c 	bl	8008792 <UART_EndTransmit_IT>
    return;
 8007f3a:	e008      	b.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f3c:	bf00      	nop
 8007f3e:	e006      	b.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007f40:	bf00      	nop
 8007f42:	e004      	b.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f44:	bf00      	nop
 8007f46:	e002      	b.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f48:	bf00      	nop
 8007f4a:	e000      	b.n	8007f4e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007f4c:	bf00      	nop
  }

}
 8007f4e:	37e8      	adds	r7, #232	; 0xe8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007fc2:	f023 030c 	bic.w	r3, r3, #12
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	430a      	orrs	r2, r1
 8008008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4aa7      	ldr	r2, [pc, #668]	; (80082ac <UART_SetConfig+0x318>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d120      	bne.n	8008056 <UART_SetConfig+0xc2>
 8008014:	4ba6      	ldr	r3, [pc, #664]	; (80082b0 <UART_SetConfig+0x31c>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	2b03      	cmp	r3, #3
 800801e:	d817      	bhi.n	8008050 <UART_SetConfig+0xbc>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <UART_SetConfig+0x94>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008039 	.word	0x08008039
 800802c:	08008045 	.word	0x08008045
 8008030:	0800804b 	.word	0x0800804b
 8008034:	0800803f 	.word	0x0800803f
 8008038:	2301      	movs	r3, #1
 800803a:	77fb      	strb	r3, [r7, #31]
 800803c:	e0b5      	b.n	80081aa <UART_SetConfig+0x216>
 800803e:	2302      	movs	r3, #2
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e0b2      	b.n	80081aa <UART_SetConfig+0x216>
 8008044:	2304      	movs	r3, #4
 8008046:	77fb      	strb	r3, [r7, #31]
 8008048:	e0af      	b.n	80081aa <UART_SetConfig+0x216>
 800804a:	2308      	movs	r3, #8
 800804c:	77fb      	strb	r3, [r7, #31]
 800804e:	e0ac      	b.n	80081aa <UART_SetConfig+0x216>
 8008050:	2310      	movs	r3, #16
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e0a9      	b.n	80081aa <UART_SetConfig+0x216>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a96      	ldr	r2, [pc, #600]	; (80082b4 <UART_SetConfig+0x320>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d124      	bne.n	80080aa <UART_SetConfig+0x116>
 8008060:	4b93      	ldr	r3, [pc, #588]	; (80082b0 <UART_SetConfig+0x31c>)
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800806c:	d011      	beq.n	8008092 <UART_SetConfig+0xfe>
 800806e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008072:	d817      	bhi.n	80080a4 <UART_SetConfig+0x110>
 8008074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008078:	d011      	beq.n	800809e <UART_SetConfig+0x10a>
 800807a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800807e:	d811      	bhi.n	80080a4 <UART_SetConfig+0x110>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <UART_SetConfig+0xf8>
 8008084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008088:	d006      	beq.n	8008098 <UART_SetConfig+0x104>
 800808a:	e00b      	b.n	80080a4 <UART_SetConfig+0x110>
 800808c:	2300      	movs	r3, #0
 800808e:	77fb      	strb	r3, [r7, #31]
 8008090:	e08b      	b.n	80081aa <UART_SetConfig+0x216>
 8008092:	2302      	movs	r3, #2
 8008094:	77fb      	strb	r3, [r7, #31]
 8008096:	e088      	b.n	80081aa <UART_SetConfig+0x216>
 8008098:	2304      	movs	r3, #4
 800809a:	77fb      	strb	r3, [r7, #31]
 800809c:	e085      	b.n	80081aa <UART_SetConfig+0x216>
 800809e:	2308      	movs	r3, #8
 80080a0:	77fb      	strb	r3, [r7, #31]
 80080a2:	e082      	b.n	80081aa <UART_SetConfig+0x216>
 80080a4:	2310      	movs	r3, #16
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e07f      	b.n	80081aa <UART_SetConfig+0x216>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a82      	ldr	r2, [pc, #520]	; (80082b8 <UART_SetConfig+0x324>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d124      	bne.n	80080fe <UART_SetConfig+0x16a>
 80080b4:	4b7e      	ldr	r3, [pc, #504]	; (80082b0 <UART_SetConfig+0x31c>)
 80080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80080bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080c0:	d011      	beq.n	80080e6 <UART_SetConfig+0x152>
 80080c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080c6:	d817      	bhi.n	80080f8 <UART_SetConfig+0x164>
 80080c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080cc:	d011      	beq.n	80080f2 <UART_SetConfig+0x15e>
 80080ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080d2:	d811      	bhi.n	80080f8 <UART_SetConfig+0x164>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <UART_SetConfig+0x14c>
 80080d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080dc:	d006      	beq.n	80080ec <UART_SetConfig+0x158>
 80080de:	e00b      	b.n	80080f8 <UART_SetConfig+0x164>
 80080e0:	2300      	movs	r3, #0
 80080e2:	77fb      	strb	r3, [r7, #31]
 80080e4:	e061      	b.n	80081aa <UART_SetConfig+0x216>
 80080e6:	2302      	movs	r3, #2
 80080e8:	77fb      	strb	r3, [r7, #31]
 80080ea:	e05e      	b.n	80081aa <UART_SetConfig+0x216>
 80080ec:	2304      	movs	r3, #4
 80080ee:	77fb      	strb	r3, [r7, #31]
 80080f0:	e05b      	b.n	80081aa <UART_SetConfig+0x216>
 80080f2:	2308      	movs	r3, #8
 80080f4:	77fb      	strb	r3, [r7, #31]
 80080f6:	e058      	b.n	80081aa <UART_SetConfig+0x216>
 80080f8:	2310      	movs	r3, #16
 80080fa:	77fb      	strb	r3, [r7, #31]
 80080fc:	e055      	b.n	80081aa <UART_SetConfig+0x216>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a6e      	ldr	r2, [pc, #440]	; (80082bc <UART_SetConfig+0x328>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d124      	bne.n	8008152 <UART_SetConfig+0x1be>
 8008108:	4b69      	ldr	r3, [pc, #420]	; (80082b0 <UART_SetConfig+0x31c>)
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008110:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008114:	d011      	beq.n	800813a <UART_SetConfig+0x1a6>
 8008116:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800811a:	d817      	bhi.n	800814c <UART_SetConfig+0x1b8>
 800811c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008120:	d011      	beq.n	8008146 <UART_SetConfig+0x1b2>
 8008122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008126:	d811      	bhi.n	800814c <UART_SetConfig+0x1b8>
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <UART_SetConfig+0x1a0>
 800812c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008130:	d006      	beq.n	8008140 <UART_SetConfig+0x1ac>
 8008132:	e00b      	b.n	800814c <UART_SetConfig+0x1b8>
 8008134:	2300      	movs	r3, #0
 8008136:	77fb      	strb	r3, [r7, #31]
 8008138:	e037      	b.n	80081aa <UART_SetConfig+0x216>
 800813a:	2302      	movs	r3, #2
 800813c:	77fb      	strb	r3, [r7, #31]
 800813e:	e034      	b.n	80081aa <UART_SetConfig+0x216>
 8008140:	2304      	movs	r3, #4
 8008142:	77fb      	strb	r3, [r7, #31]
 8008144:	e031      	b.n	80081aa <UART_SetConfig+0x216>
 8008146:	2308      	movs	r3, #8
 8008148:	77fb      	strb	r3, [r7, #31]
 800814a:	e02e      	b.n	80081aa <UART_SetConfig+0x216>
 800814c:	2310      	movs	r3, #16
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	e02b      	b.n	80081aa <UART_SetConfig+0x216>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a5a      	ldr	r2, [pc, #360]	; (80082c0 <UART_SetConfig+0x32c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d124      	bne.n	80081a6 <UART_SetConfig+0x212>
 800815c:	4b54      	ldr	r3, [pc, #336]	; (80082b0 <UART_SetConfig+0x31c>)
 800815e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008160:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008164:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008168:	d011      	beq.n	800818e <UART_SetConfig+0x1fa>
 800816a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800816e:	d817      	bhi.n	80081a0 <UART_SetConfig+0x20c>
 8008170:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008174:	d011      	beq.n	800819a <UART_SetConfig+0x206>
 8008176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800817a:	d811      	bhi.n	80081a0 <UART_SetConfig+0x20c>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <UART_SetConfig+0x1f4>
 8008180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008184:	d006      	beq.n	8008194 <UART_SetConfig+0x200>
 8008186:	e00b      	b.n	80081a0 <UART_SetConfig+0x20c>
 8008188:	2300      	movs	r3, #0
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e00d      	b.n	80081aa <UART_SetConfig+0x216>
 800818e:	2302      	movs	r3, #2
 8008190:	77fb      	strb	r3, [r7, #31]
 8008192:	e00a      	b.n	80081aa <UART_SetConfig+0x216>
 8008194:	2304      	movs	r3, #4
 8008196:	77fb      	strb	r3, [r7, #31]
 8008198:	e007      	b.n	80081aa <UART_SetConfig+0x216>
 800819a:	2308      	movs	r3, #8
 800819c:	77fb      	strb	r3, [r7, #31]
 800819e:	e004      	b.n	80081aa <UART_SetConfig+0x216>
 80081a0:	2310      	movs	r3, #16
 80081a2:	77fb      	strb	r3, [r7, #31]
 80081a4:	e001      	b.n	80081aa <UART_SetConfig+0x216>
 80081a6:	2310      	movs	r3, #16
 80081a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b2:	d15b      	bne.n	800826c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80081b4:	7ffb      	ldrb	r3, [r7, #31]
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d827      	bhi.n	800820a <UART_SetConfig+0x276>
 80081ba:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <UART_SetConfig+0x22c>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081e5 	.word	0x080081e5
 80081c4:	080081ed 	.word	0x080081ed
 80081c8:	080081f5 	.word	0x080081f5
 80081cc:	0800820b 	.word	0x0800820b
 80081d0:	080081fb 	.word	0x080081fb
 80081d4:	0800820b 	.word	0x0800820b
 80081d8:	0800820b 	.word	0x0800820b
 80081dc:	0800820b 	.word	0x0800820b
 80081e0:	08008203 	.word	0x08008203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e4:	f7fd fab4 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 80081e8:	61b8      	str	r0, [r7, #24]
        break;
 80081ea:	e013      	b.n	8008214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081ec:	f7fd fad2 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 80081f0:	61b8      	str	r0, [r7, #24]
        break;
 80081f2:	e00f      	b.n	8008214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f4:	4b33      	ldr	r3, [pc, #204]	; (80082c4 <UART_SetConfig+0x330>)
 80081f6:	61bb      	str	r3, [r7, #24]
        break;
 80081f8:	e00c      	b.n	8008214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081fa:	f7fd fa33 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 80081fe:	61b8      	str	r0, [r7, #24]
        break;
 8008200:	e008      	b.n	8008214 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008206:	61bb      	str	r3, [r7, #24]
        break;
 8008208:	e004      	b.n	8008214 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	77bb      	strb	r3, [r7, #30]
        break;
 8008212:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8082 	beq.w	8008320 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	005a      	lsls	r2, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	085b      	lsrs	r3, r3, #1
 8008226:	441a      	add	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d916      	bls.n	8008266 <UART_SetConfig+0x2d2>
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823e:	d212      	bcs.n	8008266 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f023 030f 	bic.w	r3, r3, #15
 8008248:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	085b      	lsrs	r3, r3, #1
 800824e:	b29b      	uxth	r3, r3
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	b29a      	uxth	r2, r3
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	4313      	orrs	r3, r2
 800825a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	89fa      	ldrh	r2, [r7, #14]
 8008262:	60da      	str	r2, [r3, #12]
 8008264:	e05c      	b.n	8008320 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	77bb      	strb	r3, [r7, #30]
 800826a:	e059      	b.n	8008320 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800826c:	7ffb      	ldrb	r3, [r7, #31]
 800826e:	2b08      	cmp	r3, #8
 8008270:	d835      	bhi.n	80082de <UART_SetConfig+0x34a>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0x2e4>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082a5 	.word	0x080082a5
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082df 	.word	0x080082df
 8008288:	080082cf 	.word	0x080082cf
 800828c:	080082df 	.word	0x080082df
 8008290:	080082df 	.word	0x080082df
 8008294:	080082df 	.word	0x080082df
 8008298:	080082d7 	.word	0x080082d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800829c:	f7fd fa58 	bl	8005750 <HAL_RCC_GetPCLK1Freq>
 80082a0:	61b8      	str	r0, [r7, #24]
        break;
 80082a2:	e021      	b.n	80082e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a4:	f7fd fa76 	bl	8005794 <HAL_RCC_GetPCLK2Freq>
 80082a8:	61b8      	str	r0, [r7, #24]
        break;
 80082aa:	e01d      	b.n	80082e8 <UART_SetConfig+0x354>
 80082ac:	40013800 	.word	0x40013800
 80082b0:	40021000 	.word	0x40021000
 80082b4:	40004400 	.word	0x40004400
 80082b8:	40004800 	.word	0x40004800
 80082bc:	40004c00 	.word	0x40004c00
 80082c0:	40005000 	.word	0x40005000
 80082c4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c8:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <UART_SetConfig+0x3a4>)
 80082ca:	61bb      	str	r3, [r7, #24]
        break;
 80082cc:	e00c      	b.n	80082e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ce:	f7fd f9c9 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 80082d2:	61b8      	str	r0, [r7, #24]
        break;
 80082d4:	e008      	b.n	80082e8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082da:	61bb      	str	r3, [r7, #24]
        break;
 80082dc:	e004      	b.n	80082e8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	77bb      	strb	r3, [r7, #30]
        break;
 80082e6:	bf00      	nop
    }

    if (pclk != 0U)
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d018      	beq.n	8008320 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	085a      	lsrs	r2, r3, #1
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	441a      	add	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008300:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b0f      	cmp	r3, #15
 8008306:	d909      	bls.n	800831c <UART_SetConfig+0x388>
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800830e:	d205      	bcs.n	800831c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60da      	str	r2, [r3, #12]
 800831a:	e001      	b.n	8008320 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800832c:	7fbb      	ldrb	r3, [r7, #30]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3720      	adds	r7, #32
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	007a1200 	.word	0x007a1200

0800833c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00a      	beq.n	8008366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00a      	beq.n	80083aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00a      	beq.n	80083cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01a      	beq.n	8008452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800843a:	d10a      	bne.n	8008452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	605a      	str	r2, [r3, #4]
  }
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b098      	sub	sp, #96	; 0x60
 8008484:	af02      	add	r7, sp, #8
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008490:	f7fb f9bc 	bl	800380c <HAL_GetTick>
 8008494:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d12e      	bne.n	8008502 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ac:	2200      	movs	r2, #0
 80084ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f88c 	bl	80085d0 <UART_WaitOnFlagUntilTimeout>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d021      	beq.n	8008502 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084dc:	647b      	str	r3, [r7, #68]	; 0x44
 80084de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e6      	bne.n	80084be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2220      	movs	r2, #32
 80084f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e062      	b.n	80085c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b04      	cmp	r3, #4
 800850e:	d149      	bne.n	80085a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008518:	2200      	movs	r2, #0
 800851a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f856 	bl	80085d0 <UART_WaitOnFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d03c      	beq.n	80085a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	623b      	str	r3, [r7, #32]
   return(result);
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800853e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008548:	633b      	str	r3, [r7, #48]	; 0x30
 800854a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800854e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e6      	bne.n	800852a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3308      	adds	r3, #8
 8008562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	60fb      	str	r3, [r7, #12]
   return(result);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0301 	bic.w	r3, r3, #1
 8008572:	64bb      	str	r3, [r7, #72]	; 0x48
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800857c:	61fa      	str	r2, [r7, #28]
 800857e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	69b9      	ldr	r1, [r7, #24]
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	617b      	str	r3, [r7, #20]
   return(result);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e5      	bne.n	800855c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e011      	b.n	80085c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3758      	adds	r7, #88	; 0x58
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085e0:	e049      	b.n	8008676 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d045      	beq.n	8008676 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ea:	f7fb f90f 	bl	800380c <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d302      	bcc.n	8008600 <UART_WaitOnFlagUntilTimeout+0x30>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e048      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	d031      	beq.n	8008676 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b08      	cmp	r3, #8
 800861e:	d110      	bne.n	8008642 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2208      	movs	r2, #8
 8008626:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 f838 	bl	800869e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2208      	movs	r2, #8
 8008632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e029      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800864c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008650:	d111      	bne.n	8008676 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800865a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f81e 	bl	800869e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e00f      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69da      	ldr	r2, [r3, #28]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4013      	ands	r3, r2
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	429a      	cmp	r2, r3
 8008684:	bf0c      	ite	eq
 8008686:	2301      	moveq	r3, #1
 8008688:	2300      	movne	r3, #0
 800868a:	b2db      	uxtb	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	429a      	cmp	r2, r3
 8008692:	d0a6      	beq.n	80085e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800869e:	b480      	push	{r7}
 80086a0:	b095      	sub	sp, #84	; 0x54
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	461a      	mov	r2, r3
 80086c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c4:	643b      	str	r3, [r7, #64]	; 0x40
 80086c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086cc:	e841 2300 	strex	r3, r2, [r1]
 80086d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1e6      	bne.n	80086a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3308      	adds	r3, #8
 80086de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3308      	adds	r3, #8
 80086f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e5      	bne.n	80086d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008710:	2b01      	cmp	r3, #1
 8008712:	d118      	bne.n	8008746 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	60bb      	str	r3, [r7, #8]
   return(result);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f023 0310 	bic.w	r3, r3, #16
 8008728:	647b      	str	r3, [r7, #68]	; 0x44
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008732:	61bb      	str	r3, [r7, #24]
 8008734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6979      	ldr	r1, [r7, #20]
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	613b      	str	r3, [r7, #16]
   return(result);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e6      	bne.n	8008714 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2220      	movs	r2, #32
 800874a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	669a      	str	r2, [r3, #104]	; 0x68
}
 800875a:	bf00      	nop
 800875c:	3754      	adds	r7, #84	; 0x54
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fbef 	bl	8007f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800878a:	bf00      	nop
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b088      	sub	sp, #32
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ae:	61fb      	str	r3, [r7, #28]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6979      	ldr	r1, [r7, #20]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	613b      	str	r3, [r7, #16]
   return(result);
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e6      	bne.n	800879a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff fbbb 	bl	8007f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087de:	bf00      	nop
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008802:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008806:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800880e:	b29a      	uxth	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	b29b      	uxth	r3, r3
 8008814:	43db      	mvns	r3, r3
 8008816:	b29b      	uxth	r3, r3
 8008818:	4013      	ands	r3, r2
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008830:	b084      	sub	sp, #16
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	f107 0014 	add.w	r0, r7, #20
 800883e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	b004      	add	sp, #16
 8008870:	4770      	bx	lr
	...

08008874 <__errno>:
 8008874:	4b01      	ldr	r3, [pc, #4]	; (800887c <__errno+0x8>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000090 	.word	0x20000090

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	4d0d      	ldr	r5, [pc, #52]	; (80088b8 <__libc_init_array+0x38>)
 8008884:	4c0d      	ldr	r4, [pc, #52]	; (80088bc <__libc_init_array+0x3c>)
 8008886:	1b64      	subs	r4, r4, r5
 8008888:	10a4      	asrs	r4, r4, #2
 800888a:	2600      	movs	r6, #0
 800888c:	42a6      	cmp	r6, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	4d0b      	ldr	r5, [pc, #44]	; (80088c0 <__libc_init_array+0x40>)
 8008892:	4c0c      	ldr	r4, [pc, #48]	; (80088c4 <__libc_init_array+0x44>)
 8008894:	f001 fa98 	bl	8009dc8 <_init>
 8008898:	1b64      	subs	r4, r4, r5
 800889a:	10a4      	asrs	r4, r4, #2
 800889c:	2600      	movs	r6, #0
 800889e:	42a6      	cmp	r6, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a8:	4798      	blx	r3
 80088aa:	3601      	adds	r6, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b2:	4798      	blx	r3
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	0800a254 	.word	0x0800a254
 80088bc:	0800a254 	.word	0x0800a254
 80088c0:	0800a254 	.word	0x0800a254
 80088c4:	0800a258 	.word	0x0800a258

080088c8 <memset>:
 80088c8:	4402      	add	r2, r0
 80088ca:	4603      	mov	r3, r0
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d100      	bne.n	80088d2 <memset+0xa>
 80088d0:	4770      	bx	lr
 80088d2:	f803 1b01 	strb.w	r1, [r3], #1
 80088d6:	e7f9      	b.n	80088cc <memset+0x4>

080088d8 <srand>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <srand+0x44>)
 80088dc:	681d      	ldr	r5, [r3, #0]
 80088de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80088e0:	4604      	mov	r4, r0
 80088e2:	b9b3      	cbnz	r3, 8008912 <srand+0x3a>
 80088e4:	2018      	movs	r0, #24
 80088e6:	f000 f9d9 	bl	8008c9c <malloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	63a8      	str	r0, [r5, #56]	; 0x38
 80088ee:	b920      	cbnz	r0, 80088fa <srand+0x22>
 80088f0:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <srand+0x48>)
 80088f2:	480c      	ldr	r0, [pc, #48]	; (8008924 <srand+0x4c>)
 80088f4:	2142      	movs	r1, #66	; 0x42
 80088f6:	f000 f895 	bl	8008a24 <__assert_func>
 80088fa:	490b      	ldr	r1, [pc, #44]	; (8008928 <srand+0x50>)
 80088fc:	4b0b      	ldr	r3, [pc, #44]	; (800892c <srand+0x54>)
 80088fe:	e9c0 1300 	strd	r1, r3, [r0]
 8008902:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <srand+0x58>)
 8008904:	6083      	str	r3, [r0, #8]
 8008906:	230b      	movs	r3, #11
 8008908:	8183      	strh	r3, [r0, #12]
 800890a:	2100      	movs	r1, #0
 800890c:	2001      	movs	r0, #1
 800890e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008912:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008914:	2200      	movs	r2, #0
 8008916:	611c      	str	r4, [r3, #16]
 8008918:	615a      	str	r2, [r3, #20]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20000090 	.word	0x20000090
 8008920:	0800a110 	.word	0x0800a110
 8008924:	0800a127 	.word	0x0800a127
 8008928:	abcd330e 	.word	0xabcd330e
 800892c:	e66d1234 	.word	0xe66d1234
 8008930:	0005deec 	.word	0x0005deec

08008934 <rand>:
 8008934:	4b16      	ldr	r3, [pc, #88]	; (8008990 <rand+0x5c>)
 8008936:	b510      	push	{r4, lr}
 8008938:	681c      	ldr	r4, [r3, #0]
 800893a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800893c:	b9b3      	cbnz	r3, 800896c <rand+0x38>
 800893e:	2018      	movs	r0, #24
 8008940:	f000 f9ac 	bl	8008c9c <malloc>
 8008944:	63a0      	str	r0, [r4, #56]	; 0x38
 8008946:	b928      	cbnz	r0, 8008954 <rand+0x20>
 8008948:	4602      	mov	r2, r0
 800894a:	4b12      	ldr	r3, [pc, #72]	; (8008994 <rand+0x60>)
 800894c:	4812      	ldr	r0, [pc, #72]	; (8008998 <rand+0x64>)
 800894e:	214e      	movs	r1, #78	; 0x4e
 8008950:	f000 f868 	bl	8008a24 <__assert_func>
 8008954:	4a11      	ldr	r2, [pc, #68]	; (800899c <rand+0x68>)
 8008956:	4b12      	ldr	r3, [pc, #72]	; (80089a0 <rand+0x6c>)
 8008958:	e9c0 2300 	strd	r2, r3, [r0]
 800895c:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <rand+0x70>)
 800895e:	6083      	str	r3, [r0, #8]
 8008960:	230b      	movs	r3, #11
 8008962:	8183      	strh	r3, [r0, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	2300      	movs	r3, #0
 8008968:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800896c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800896e:	4a0e      	ldr	r2, [pc, #56]	; (80089a8 <rand+0x74>)
 8008970:	6920      	ldr	r0, [r4, #16]
 8008972:	6963      	ldr	r3, [r4, #20]
 8008974:	490d      	ldr	r1, [pc, #52]	; (80089ac <rand+0x78>)
 8008976:	4342      	muls	r2, r0
 8008978:	fb01 2203 	mla	r2, r1, r3, r2
 800897c:	fba0 0101 	umull	r0, r1, r0, r1
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	eb42 0001 	adc.w	r0, r2, r1
 8008986:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800898a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800898e:	bd10      	pop	{r4, pc}
 8008990:	20000090 	.word	0x20000090
 8008994:	0800a110 	.word	0x0800a110
 8008998:	0800a127 	.word	0x0800a127
 800899c:	abcd330e 	.word	0xabcd330e
 80089a0:	e66d1234 	.word	0xe66d1234
 80089a4:	0005deec 	.word	0x0005deec
 80089a8:	5851f42d 	.word	0x5851f42d
 80089ac:	4c957f2d 	.word	0x4c957f2d

080089b0 <siprintf>:
 80089b0:	b40e      	push	{r1, r2, r3}
 80089b2:	b500      	push	{lr}
 80089b4:	b09c      	sub	sp, #112	; 0x70
 80089b6:	ab1d      	add	r3, sp, #116	; 0x74
 80089b8:	9002      	str	r0, [sp, #8]
 80089ba:	9006      	str	r0, [sp, #24]
 80089bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c0:	4809      	ldr	r0, [pc, #36]	; (80089e8 <siprintf+0x38>)
 80089c2:	9107      	str	r1, [sp, #28]
 80089c4:	9104      	str	r1, [sp, #16]
 80089c6:	4909      	ldr	r1, [pc, #36]	; (80089ec <siprintf+0x3c>)
 80089c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089cc:	9105      	str	r1, [sp, #20]
 80089ce:	6800      	ldr	r0, [r0, #0]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	a902      	add	r1, sp, #8
 80089d4:	f000 faa6 	bl	8008f24 <_svfiprintf_r>
 80089d8:	9b02      	ldr	r3, [sp, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	b01c      	add	sp, #112	; 0x70
 80089e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089e4:	b003      	add	sp, #12
 80089e6:	4770      	bx	lr
 80089e8:	20000090 	.word	0x20000090
 80089ec:	ffff0208 	.word	0xffff0208

080089f0 <time>:
 80089f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089f2:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <time+0x30>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	4669      	mov	r1, sp
 80089f8:	4604      	mov	r4, r0
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	f000 f938 	bl	8008c70 <_gettimeofday_r>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	bfbe      	ittt	lt
 8008a04:	f04f 32ff 	movlt.w	r2, #4294967295
 8008a08:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a0c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8008a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a14:	b10c      	cbz	r4, 8008a1a <time+0x2a>
 8008a16:	e9c4 0100 	strd	r0, r1, [r4]
 8008a1a:	b004      	add	sp, #16
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000090 	.word	0x20000090

08008a24 <__assert_func>:
 8008a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a26:	4614      	mov	r4, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4b09      	ldr	r3, [pc, #36]	; (8008a50 <__assert_func+0x2c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4605      	mov	r5, r0
 8008a30:	68d8      	ldr	r0, [r3, #12]
 8008a32:	b14c      	cbz	r4, 8008a48 <__assert_func+0x24>
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <__assert_func+0x30>)
 8008a36:	9100      	str	r1, [sp, #0]
 8008a38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a3c:	4906      	ldr	r1, [pc, #24]	; (8008a58 <__assert_func+0x34>)
 8008a3e:	462b      	mov	r3, r5
 8008a40:	f000 f8e4 	bl	8008c0c <fiprintf>
 8008a44:	f000 ff82 	bl	800994c <abort>
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <__assert_func+0x38>)
 8008a4a:	461c      	mov	r4, r3
 8008a4c:	e7f3      	b.n	8008a36 <__assert_func+0x12>
 8008a4e:	bf00      	nop
 8008a50:	20000090 	.word	0x20000090
 8008a54:	0800a182 	.word	0x0800a182
 8008a58:	0800a18f 	.word	0x0800a18f
 8008a5c:	0800a1bd 	.word	0x0800a1bd

08008a60 <std>:
 8008a60:	2300      	movs	r3, #0
 8008a62:	b510      	push	{r4, lr}
 8008a64:	4604      	mov	r4, r0
 8008a66:	e9c0 3300 	strd	r3, r3, [r0]
 8008a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a6e:	6083      	str	r3, [r0, #8]
 8008a70:	8181      	strh	r1, [r0, #12]
 8008a72:	6643      	str	r3, [r0, #100]	; 0x64
 8008a74:	81c2      	strh	r2, [r0, #14]
 8008a76:	6183      	str	r3, [r0, #24]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	305c      	adds	r0, #92	; 0x5c
 8008a7e:	f7ff ff23 	bl	80088c8 <memset>
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <std+0x38>)
 8008a84:	6263      	str	r3, [r4, #36]	; 0x24
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <std+0x3c>)
 8008a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a8a:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <std+0x40>)
 8008a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <std+0x44>)
 8008a90:	6224      	str	r4, [r4, #32]
 8008a92:	6323      	str	r3, [r4, #48]	; 0x30
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	bf00      	nop
 8008a98:	08009721 	.word	0x08009721
 8008a9c:	08009743 	.word	0x08009743
 8008aa0:	0800977b 	.word	0x0800977b
 8008aa4:	0800979f 	.word	0x0800979f

08008aa8 <_cleanup_r>:
 8008aa8:	4901      	ldr	r1, [pc, #4]	; (8008ab0 <_cleanup_r+0x8>)
 8008aaa:	f000 b8c1 	b.w	8008c30 <_fwalk_reent>
 8008aae:	bf00      	nop
 8008ab0:	08009a89 	.word	0x08009a89

08008ab4 <__sfmoreglue>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	2268      	movs	r2, #104	; 0x68
 8008ab8:	1e4d      	subs	r5, r1, #1
 8008aba:	4355      	muls	r5, r2
 8008abc:	460e      	mov	r6, r1
 8008abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ac2:	f000 f95f 	bl	8008d84 <_malloc_r>
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	b140      	cbz	r0, 8008adc <__sfmoreglue+0x28>
 8008aca:	2100      	movs	r1, #0
 8008acc:	e9c0 1600 	strd	r1, r6, [r0]
 8008ad0:	300c      	adds	r0, #12
 8008ad2:	60a0      	str	r0, [r4, #8]
 8008ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ad8:	f7ff fef6 	bl	80088c8 <memset>
 8008adc:	4620      	mov	r0, r4
 8008ade:	bd70      	pop	{r4, r5, r6, pc}

08008ae0 <__sfp_lock_acquire>:
 8008ae0:	4801      	ldr	r0, [pc, #4]	; (8008ae8 <__sfp_lock_acquire+0x8>)
 8008ae2:	f000 b8d8 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8008ae6:	bf00      	nop
 8008ae8:	20000db5 	.word	0x20000db5

08008aec <__sfp_lock_release>:
 8008aec:	4801      	ldr	r0, [pc, #4]	; (8008af4 <__sfp_lock_release+0x8>)
 8008aee:	f000 b8d3 	b.w	8008c98 <__retarget_lock_release_recursive>
 8008af2:	bf00      	nop
 8008af4:	20000db5 	.word	0x20000db5

08008af8 <__sinit_lock_acquire>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__sinit_lock_acquire+0x8>)
 8008afa:	f000 b8cc 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8008afe:	bf00      	nop
 8008b00:	20000db6 	.word	0x20000db6

08008b04 <__sinit_lock_release>:
 8008b04:	4801      	ldr	r0, [pc, #4]	; (8008b0c <__sinit_lock_release+0x8>)
 8008b06:	f000 b8c7 	b.w	8008c98 <__retarget_lock_release_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	20000db6 	.word	0x20000db6

08008b10 <__sinit>:
 8008b10:	b510      	push	{r4, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	f7ff fff0 	bl	8008af8 <__sinit_lock_acquire>
 8008b18:	69a3      	ldr	r3, [r4, #24]
 8008b1a:	b11b      	cbz	r3, 8008b24 <__sinit+0x14>
 8008b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b20:	f7ff bff0 	b.w	8008b04 <__sinit_lock_release>
 8008b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b28:	6523      	str	r3, [r4, #80]	; 0x50
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <__sinit+0x68>)
 8008b2c:	4a13      	ldr	r2, [pc, #76]	; (8008b7c <__sinit+0x6c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b32:	42a3      	cmp	r3, r4
 8008b34:	bf04      	itt	eq
 8008b36:	2301      	moveq	r3, #1
 8008b38:	61a3      	streq	r3, [r4, #24]
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f820 	bl	8008b80 <__sfp>
 8008b40:	6060      	str	r0, [r4, #4]
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f81c 	bl	8008b80 <__sfp>
 8008b48:	60a0      	str	r0, [r4, #8]
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 f818 	bl	8008b80 <__sfp>
 8008b50:	2200      	movs	r2, #0
 8008b52:	60e0      	str	r0, [r4, #12]
 8008b54:	2104      	movs	r1, #4
 8008b56:	6860      	ldr	r0, [r4, #4]
 8008b58:	f7ff ff82 	bl	8008a60 <std>
 8008b5c:	68a0      	ldr	r0, [r4, #8]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	2109      	movs	r1, #9
 8008b62:	f7ff ff7d 	bl	8008a60 <std>
 8008b66:	68e0      	ldr	r0, [r4, #12]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	2112      	movs	r1, #18
 8008b6c:	f7ff ff78 	bl	8008a60 <std>
 8008b70:	2301      	movs	r3, #1
 8008b72:	61a3      	str	r3, [r4, #24]
 8008b74:	e7d2      	b.n	8008b1c <__sinit+0xc>
 8008b76:	bf00      	nop
 8008b78:	0800a10c 	.word	0x0800a10c
 8008b7c:	08008aa9 	.word	0x08008aa9

08008b80 <__sfp>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	4607      	mov	r7, r0
 8008b84:	f7ff ffac 	bl	8008ae0 <__sfp_lock_acquire>
 8008b88:	4b1e      	ldr	r3, [pc, #120]	; (8008c04 <__sfp+0x84>)
 8008b8a:	681e      	ldr	r6, [r3, #0]
 8008b8c:	69b3      	ldr	r3, [r6, #24]
 8008b8e:	b913      	cbnz	r3, 8008b96 <__sfp+0x16>
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ffbd 	bl	8008b10 <__sinit>
 8008b96:	3648      	adds	r6, #72	; 0x48
 8008b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	d503      	bpl.n	8008ba8 <__sfp+0x28>
 8008ba0:	6833      	ldr	r3, [r6, #0]
 8008ba2:	b30b      	cbz	r3, 8008be8 <__sfp+0x68>
 8008ba4:	6836      	ldr	r6, [r6, #0]
 8008ba6:	e7f7      	b.n	8008b98 <__sfp+0x18>
 8008ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bac:	b9d5      	cbnz	r5, 8008be4 <__sfp+0x64>
 8008bae:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <__sfp+0x88>)
 8008bb0:	60e3      	str	r3, [r4, #12]
 8008bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bb6:	6665      	str	r5, [r4, #100]	; 0x64
 8008bb8:	f000 f86c 	bl	8008c94 <__retarget_lock_init_recursive>
 8008bbc:	f7ff ff96 	bl	8008aec <__sfp_lock_release>
 8008bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bc8:	6025      	str	r5, [r4, #0]
 8008bca:	61a5      	str	r5, [r4, #24]
 8008bcc:	2208      	movs	r2, #8
 8008bce:	4629      	mov	r1, r5
 8008bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bd4:	f7ff fe78 	bl	80088c8 <memset>
 8008bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008be0:	4620      	mov	r0, r4
 8008be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be4:	3468      	adds	r4, #104	; 0x68
 8008be6:	e7d9      	b.n	8008b9c <__sfp+0x1c>
 8008be8:	2104      	movs	r1, #4
 8008bea:	4638      	mov	r0, r7
 8008bec:	f7ff ff62 	bl	8008ab4 <__sfmoreglue>
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	6030      	str	r0, [r6, #0]
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	d1d5      	bne.n	8008ba4 <__sfp+0x24>
 8008bf8:	f7ff ff78 	bl	8008aec <__sfp_lock_release>
 8008bfc:	230c      	movs	r3, #12
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	e7ee      	b.n	8008be0 <__sfp+0x60>
 8008c02:	bf00      	nop
 8008c04:	0800a10c 	.word	0x0800a10c
 8008c08:	ffff0001 	.word	0xffff0001

08008c0c <fiprintf>:
 8008c0c:	b40e      	push	{r1, r2, r3}
 8008c0e:	b503      	push	{r0, r1, lr}
 8008c10:	4601      	mov	r1, r0
 8008c12:	ab03      	add	r3, sp, #12
 8008c14:	4805      	ldr	r0, [pc, #20]	; (8008c2c <fiprintf+0x20>)
 8008c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c1a:	6800      	ldr	r0, [r0, #0]
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	f000 faab 	bl	8009178 <_vfiprintf_r>
 8008c22:	b002      	add	sp, #8
 8008c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c28:	b003      	add	sp, #12
 8008c2a:	4770      	bx	lr
 8008c2c:	20000090 	.word	0x20000090

08008c30 <_fwalk_reent>:
 8008c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c34:	4606      	mov	r6, r0
 8008c36:	4688      	mov	r8, r1
 8008c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c3c:	2700      	movs	r7, #0
 8008c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c42:	f1b9 0901 	subs.w	r9, r9, #1
 8008c46:	d505      	bpl.n	8008c54 <_fwalk_reent+0x24>
 8008c48:	6824      	ldr	r4, [r4, #0]
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	d1f7      	bne.n	8008c3e <_fwalk_reent+0xe>
 8008c4e:	4638      	mov	r0, r7
 8008c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c54:	89ab      	ldrh	r3, [r5, #12]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d907      	bls.n	8008c6a <_fwalk_reent+0x3a>
 8008c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	d003      	beq.n	8008c6a <_fwalk_reent+0x3a>
 8008c62:	4629      	mov	r1, r5
 8008c64:	4630      	mov	r0, r6
 8008c66:	47c0      	blx	r8
 8008c68:	4307      	orrs	r7, r0
 8008c6a:	3568      	adds	r5, #104	; 0x68
 8008c6c:	e7e9      	b.n	8008c42 <_fwalk_reent+0x12>
	...

08008c70 <_gettimeofday_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d07      	ldr	r5, [pc, #28]	; (8008c90 <_gettimeofday_r+0x20>)
 8008c74:	2300      	movs	r3, #0
 8008c76:	4604      	mov	r4, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	f001 f89b 	bl	8009db8 <_gettimeofday>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	d102      	bne.n	8008c8c <_gettimeofday_r+0x1c>
 8008c86:	682b      	ldr	r3, [r5, #0]
 8008c88:	b103      	cbz	r3, 8008c8c <_gettimeofday_r+0x1c>
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000dc0 	.word	0x20000dc0

08008c94 <__retarget_lock_init_recursive>:
 8008c94:	4770      	bx	lr

08008c96 <__retarget_lock_acquire_recursive>:
 8008c96:	4770      	bx	lr

08008c98 <__retarget_lock_release_recursive>:
 8008c98:	4770      	bx	lr
	...

08008c9c <malloc>:
 8008c9c:	4b02      	ldr	r3, [pc, #8]	; (8008ca8 <malloc+0xc>)
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	f000 b86f 	b.w	8008d84 <_malloc_r>
 8008ca6:	bf00      	nop
 8008ca8:	20000090 	.word	0x20000090

08008cac <_free_r>:
 8008cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	d044      	beq.n	8008d3c <_free_r+0x90>
 8008cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cb6:	9001      	str	r0, [sp, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f1a1 0404 	sub.w	r4, r1, #4
 8008cbe:	bfb8      	it	lt
 8008cc0:	18e4      	addlt	r4, r4, r3
 8008cc2:	f000 ffbd 	bl	8009c40 <__malloc_lock>
 8008cc6:	4a1e      	ldr	r2, [pc, #120]	; (8008d40 <_free_r+0x94>)
 8008cc8:	9801      	ldr	r0, [sp, #4]
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	b933      	cbnz	r3, 8008cdc <_free_r+0x30>
 8008cce:	6063      	str	r3, [r4, #4]
 8008cd0:	6014      	str	r4, [r2, #0]
 8008cd2:	b003      	add	sp, #12
 8008cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cd8:	f000 bfb8 	b.w	8009c4c <__malloc_unlock>
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	d908      	bls.n	8008cf2 <_free_r+0x46>
 8008ce0:	6825      	ldr	r5, [r4, #0]
 8008ce2:	1961      	adds	r1, r4, r5
 8008ce4:	428b      	cmp	r3, r1
 8008ce6:	bf01      	itttt	eq
 8008ce8:	6819      	ldreq	r1, [r3, #0]
 8008cea:	685b      	ldreq	r3, [r3, #4]
 8008cec:	1949      	addeq	r1, r1, r5
 8008cee:	6021      	streq	r1, [r4, #0]
 8008cf0:	e7ed      	b.n	8008cce <_free_r+0x22>
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	b10b      	cbz	r3, 8008cfc <_free_r+0x50>
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d9fa      	bls.n	8008cf2 <_free_r+0x46>
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	1855      	adds	r5, r2, r1
 8008d00:	42a5      	cmp	r5, r4
 8008d02:	d10b      	bne.n	8008d1c <_free_r+0x70>
 8008d04:	6824      	ldr	r4, [r4, #0]
 8008d06:	4421      	add	r1, r4
 8008d08:	1854      	adds	r4, r2, r1
 8008d0a:	42a3      	cmp	r3, r4
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	d1e0      	bne.n	8008cd2 <_free_r+0x26>
 8008d10:	681c      	ldr	r4, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	6053      	str	r3, [r2, #4]
 8008d16:	4421      	add	r1, r4
 8008d18:	6011      	str	r1, [r2, #0]
 8008d1a:	e7da      	b.n	8008cd2 <_free_r+0x26>
 8008d1c:	d902      	bls.n	8008d24 <_free_r+0x78>
 8008d1e:	230c      	movs	r3, #12
 8008d20:	6003      	str	r3, [r0, #0]
 8008d22:	e7d6      	b.n	8008cd2 <_free_r+0x26>
 8008d24:	6825      	ldr	r5, [r4, #0]
 8008d26:	1961      	adds	r1, r4, r5
 8008d28:	428b      	cmp	r3, r1
 8008d2a:	bf04      	itt	eq
 8008d2c:	6819      	ldreq	r1, [r3, #0]
 8008d2e:	685b      	ldreq	r3, [r3, #4]
 8008d30:	6063      	str	r3, [r4, #4]
 8008d32:	bf04      	itt	eq
 8008d34:	1949      	addeq	r1, r1, r5
 8008d36:	6021      	streq	r1, [r4, #0]
 8008d38:	6054      	str	r4, [r2, #4]
 8008d3a:	e7ca      	b.n	8008cd2 <_free_r+0x26>
 8008d3c:	b003      	add	sp, #12
 8008d3e:	bd30      	pop	{r4, r5, pc}
 8008d40:	20000db8 	.word	0x20000db8

08008d44 <sbrk_aligned>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	4e0e      	ldr	r6, [pc, #56]	; (8008d80 <sbrk_aligned+0x3c>)
 8008d48:	460c      	mov	r4, r1
 8008d4a:	6831      	ldr	r1, [r6, #0]
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	b911      	cbnz	r1, 8008d56 <sbrk_aligned+0x12>
 8008d50:	f000 fcd6 	bl	8009700 <_sbrk_r>
 8008d54:	6030      	str	r0, [r6, #0]
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 fcd1 	bl	8009700 <_sbrk_r>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	d00a      	beq.n	8008d78 <sbrk_aligned+0x34>
 8008d62:	1cc4      	adds	r4, r0, #3
 8008d64:	f024 0403 	bic.w	r4, r4, #3
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d007      	beq.n	8008d7c <sbrk_aligned+0x38>
 8008d6c:	1a21      	subs	r1, r4, r0
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 fcc6 	bl	8009700 <_sbrk_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d101      	bne.n	8008d7c <sbrk_aligned+0x38>
 8008d78:	f04f 34ff 	mov.w	r4, #4294967295
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}
 8008d80:	20000dbc 	.word	0x20000dbc

08008d84 <_malloc_r>:
 8008d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d88:	1ccd      	adds	r5, r1, #3
 8008d8a:	f025 0503 	bic.w	r5, r5, #3
 8008d8e:	3508      	adds	r5, #8
 8008d90:	2d0c      	cmp	r5, #12
 8008d92:	bf38      	it	cc
 8008d94:	250c      	movcc	r5, #12
 8008d96:	2d00      	cmp	r5, #0
 8008d98:	4607      	mov	r7, r0
 8008d9a:	db01      	blt.n	8008da0 <_malloc_r+0x1c>
 8008d9c:	42a9      	cmp	r1, r5
 8008d9e:	d905      	bls.n	8008dac <_malloc_r+0x28>
 8008da0:	230c      	movs	r3, #12
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	2600      	movs	r6, #0
 8008da6:	4630      	mov	r0, r6
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dac:	4e2e      	ldr	r6, [pc, #184]	; (8008e68 <_malloc_r+0xe4>)
 8008dae:	f000 ff47 	bl	8009c40 <__malloc_lock>
 8008db2:	6833      	ldr	r3, [r6, #0]
 8008db4:	461c      	mov	r4, r3
 8008db6:	bb34      	cbnz	r4, 8008e06 <_malloc_r+0x82>
 8008db8:	4629      	mov	r1, r5
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f7ff ffc2 	bl	8008d44 <sbrk_aligned>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	d14d      	bne.n	8008e62 <_malloc_r+0xde>
 8008dc6:	6834      	ldr	r4, [r6, #0]
 8008dc8:	4626      	mov	r6, r4
 8008dca:	2e00      	cmp	r6, #0
 8008dcc:	d140      	bne.n	8008e50 <_malloc_r+0xcc>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	eb04 0803 	add.w	r8, r4, r3
 8008dd8:	f000 fc92 	bl	8009700 <_sbrk_r>
 8008ddc:	4580      	cmp	r8, r0
 8008dde:	d13a      	bne.n	8008e56 <_malloc_r+0xd2>
 8008de0:	6821      	ldr	r1, [r4, #0]
 8008de2:	3503      	adds	r5, #3
 8008de4:	1a6d      	subs	r5, r5, r1
 8008de6:	f025 0503 	bic.w	r5, r5, #3
 8008dea:	3508      	adds	r5, #8
 8008dec:	2d0c      	cmp	r5, #12
 8008dee:	bf38      	it	cc
 8008df0:	250c      	movcc	r5, #12
 8008df2:	4629      	mov	r1, r5
 8008df4:	4638      	mov	r0, r7
 8008df6:	f7ff ffa5 	bl	8008d44 <sbrk_aligned>
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d02b      	beq.n	8008e56 <_malloc_r+0xd2>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	442b      	add	r3, r5
 8008e02:	6023      	str	r3, [r4, #0]
 8008e04:	e00e      	b.n	8008e24 <_malloc_r+0xa0>
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	1b52      	subs	r2, r2, r5
 8008e0a:	d41e      	bmi.n	8008e4a <_malloc_r+0xc6>
 8008e0c:	2a0b      	cmp	r2, #11
 8008e0e:	d916      	bls.n	8008e3e <_malloc_r+0xba>
 8008e10:	1961      	adds	r1, r4, r5
 8008e12:	42a3      	cmp	r3, r4
 8008e14:	6025      	str	r5, [r4, #0]
 8008e16:	bf18      	it	ne
 8008e18:	6059      	strne	r1, [r3, #4]
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	bf08      	it	eq
 8008e1e:	6031      	streq	r1, [r6, #0]
 8008e20:	5162      	str	r2, [r4, r5]
 8008e22:	604b      	str	r3, [r1, #4]
 8008e24:	4638      	mov	r0, r7
 8008e26:	f104 060b 	add.w	r6, r4, #11
 8008e2a:	f000 ff0f 	bl	8009c4c <__malloc_unlock>
 8008e2e:	f026 0607 	bic.w	r6, r6, #7
 8008e32:	1d23      	adds	r3, r4, #4
 8008e34:	1af2      	subs	r2, r6, r3
 8008e36:	d0b6      	beq.n	8008da6 <_malloc_r+0x22>
 8008e38:	1b9b      	subs	r3, r3, r6
 8008e3a:	50a3      	str	r3, [r4, r2]
 8008e3c:	e7b3      	b.n	8008da6 <_malloc_r+0x22>
 8008e3e:	6862      	ldr	r2, [r4, #4]
 8008e40:	42a3      	cmp	r3, r4
 8008e42:	bf0c      	ite	eq
 8008e44:	6032      	streq	r2, [r6, #0]
 8008e46:	605a      	strne	r2, [r3, #4]
 8008e48:	e7ec      	b.n	8008e24 <_malloc_r+0xa0>
 8008e4a:	4623      	mov	r3, r4
 8008e4c:	6864      	ldr	r4, [r4, #4]
 8008e4e:	e7b2      	b.n	8008db6 <_malloc_r+0x32>
 8008e50:	4634      	mov	r4, r6
 8008e52:	6876      	ldr	r6, [r6, #4]
 8008e54:	e7b9      	b.n	8008dca <_malloc_r+0x46>
 8008e56:	230c      	movs	r3, #12
 8008e58:	603b      	str	r3, [r7, #0]
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f000 fef6 	bl	8009c4c <__malloc_unlock>
 8008e60:	e7a1      	b.n	8008da6 <_malloc_r+0x22>
 8008e62:	6025      	str	r5, [r4, #0]
 8008e64:	e7de      	b.n	8008e24 <_malloc_r+0xa0>
 8008e66:	bf00      	nop
 8008e68:	20000db8 	.word	0x20000db8

08008e6c <__ssputs_r>:
 8008e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e70:	688e      	ldr	r6, [r1, #8]
 8008e72:	429e      	cmp	r6, r3
 8008e74:	4682      	mov	sl, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	4690      	mov	r8, r2
 8008e7a:	461f      	mov	r7, r3
 8008e7c:	d838      	bhi.n	8008ef0 <__ssputs_r+0x84>
 8008e7e:	898a      	ldrh	r2, [r1, #12]
 8008e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e84:	d032      	beq.n	8008eec <__ssputs_r+0x80>
 8008e86:	6825      	ldr	r5, [r4, #0]
 8008e88:	6909      	ldr	r1, [r1, #16]
 8008e8a:	eba5 0901 	sub.w	r9, r5, r1
 8008e8e:	6965      	ldr	r5, [r4, #20]
 8008e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e98:	3301      	adds	r3, #1
 8008e9a:	444b      	add	r3, r9
 8008e9c:	106d      	asrs	r5, r5, #1
 8008e9e:	429d      	cmp	r5, r3
 8008ea0:	bf38      	it	cc
 8008ea2:	461d      	movcc	r5, r3
 8008ea4:	0553      	lsls	r3, r2, #21
 8008ea6:	d531      	bpl.n	8008f0c <__ssputs_r+0xa0>
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7ff ff6b 	bl	8008d84 <_malloc_r>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	b950      	cbnz	r0, 8008ec8 <__ssputs_r+0x5c>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	f8ca 3000 	str.w	r3, [sl]
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec8:	6921      	ldr	r1, [r4, #16]
 8008eca:	464a      	mov	r2, r9
 8008ecc:	f000 fe90 	bl	8009bf0 <memcpy>
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	6126      	str	r6, [r4, #16]
 8008ede:	6165      	str	r5, [r4, #20]
 8008ee0:	444e      	add	r6, r9
 8008ee2:	eba5 0509 	sub.w	r5, r5, r9
 8008ee6:	6026      	str	r6, [r4, #0]
 8008ee8:	60a5      	str	r5, [r4, #8]
 8008eea:	463e      	mov	r6, r7
 8008eec:	42be      	cmp	r6, r7
 8008eee:	d900      	bls.n	8008ef2 <__ssputs_r+0x86>
 8008ef0:	463e      	mov	r6, r7
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	f000 fe88 	bl	8009c0c <memmove>
 8008efc:	68a3      	ldr	r3, [r4, #8]
 8008efe:	1b9b      	subs	r3, r3, r6
 8008f00:	60a3      	str	r3, [r4, #8]
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4433      	add	r3, r6
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	2000      	movs	r0, #0
 8008f0a:	e7db      	b.n	8008ec4 <__ssputs_r+0x58>
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	f000 fea3 	bl	8009c58 <_realloc_r>
 8008f12:	4606      	mov	r6, r0
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d1e1      	bne.n	8008edc <__ssputs_r+0x70>
 8008f18:	6921      	ldr	r1, [r4, #16]
 8008f1a:	4650      	mov	r0, sl
 8008f1c:	f7ff fec6 	bl	8008cac <_free_r>
 8008f20:	e7c7      	b.n	8008eb2 <__ssputs_r+0x46>
	...

08008f24 <_svfiprintf_r>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	4698      	mov	r8, r3
 8008f2a:	898b      	ldrh	r3, [r1, #12]
 8008f2c:	061b      	lsls	r3, r3, #24
 8008f2e:	b09d      	sub	sp, #116	; 0x74
 8008f30:	4607      	mov	r7, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	4614      	mov	r4, r2
 8008f36:	d50e      	bpl.n	8008f56 <_svfiprintf_r+0x32>
 8008f38:	690b      	ldr	r3, [r1, #16]
 8008f3a:	b963      	cbnz	r3, 8008f56 <_svfiprintf_r+0x32>
 8008f3c:	2140      	movs	r1, #64	; 0x40
 8008f3e:	f7ff ff21 	bl	8008d84 <_malloc_r>
 8008f42:	6028      	str	r0, [r5, #0]
 8008f44:	6128      	str	r0, [r5, #16]
 8008f46:	b920      	cbnz	r0, 8008f52 <_svfiprintf_r+0x2e>
 8008f48:	230c      	movs	r3, #12
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f50:	e0d1      	b.n	80090f6 <_svfiprintf_r+0x1d2>
 8008f52:	2340      	movs	r3, #64	; 0x40
 8008f54:	616b      	str	r3, [r5, #20]
 8008f56:	2300      	movs	r3, #0
 8008f58:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5a:	2320      	movs	r3, #32
 8008f5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f64:	2330      	movs	r3, #48	; 0x30
 8008f66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009110 <_svfiprintf_r+0x1ec>
 8008f6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f6e:	f04f 0901 	mov.w	r9, #1
 8008f72:	4623      	mov	r3, r4
 8008f74:	469a      	mov	sl, r3
 8008f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f7a:	b10a      	cbz	r2, 8008f80 <_svfiprintf_r+0x5c>
 8008f7c:	2a25      	cmp	r2, #37	; 0x25
 8008f7e:	d1f9      	bne.n	8008f74 <_svfiprintf_r+0x50>
 8008f80:	ebba 0b04 	subs.w	fp, sl, r4
 8008f84:	d00b      	beq.n	8008f9e <_svfiprintf_r+0x7a>
 8008f86:	465b      	mov	r3, fp
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff ff6d 	bl	8008e6c <__ssputs_r>
 8008f92:	3001      	adds	r0, #1
 8008f94:	f000 80aa 	beq.w	80090ec <_svfiprintf_r+0x1c8>
 8008f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f9a:	445a      	add	r2, fp
 8008f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 80a2 	beq.w	80090ec <_svfiprintf_r+0x1c8>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
 8008fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb2:	f10a 0a01 	add.w	sl, sl, #1
 8008fb6:	9304      	str	r3, [sp, #16]
 8008fb8:	9307      	str	r3, [sp, #28]
 8008fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc0:	4654      	mov	r4, sl
 8008fc2:	2205      	movs	r2, #5
 8008fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc8:	4851      	ldr	r0, [pc, #324]	; (8009110 <_svfiprintf_r+0x1ec>)
 8008fca:	f7f7 f909 	bl	80001e0 <memchr>
 8008fce:	9a04      	ldr	r2, [sp, #16]
 8008fd0:	b9d8      	cbnz	r0, 800900a <_svfiprintf_r+0xe6>
 8008fd2:	06d0      	lsls	r0, r2, #27
 8008fd4:	bf44      	itt	mi
 8008fd6:	2320      	movmi	r3, #32
 8008fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fdc:	0711      	lsls	r1, r2, #28
 8008fde:	bf44      	itt	mi
 8008fe0:	232b      	movmi	r3, #43	; 0x2b
 8008fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fea:	2b2a      	cmp	r3, #42	; 0x2a
 8008fec:	d015      	beq.n	800901a <_svfiprintf_r+0xf6>
 8008fee:	9a07      	ldr	r2, [sp, #28]
 8008ff0:	4654      	mov	r4, sl
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f04f 0c0a 	mov.w	ip, #10
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffe:	3b30      	subs	r3, #48	; 0x30
 8009000:	2b09      	cmp	r3, #9
 8009002:	d94e      	bls.n	80090a2 <_svfiprintf_r+0x17e>
 8009004:	b1b0      	cbz	r0, 8009034 <_svfiprintf_r+0x110>
 8009006:	9207      	str	r2, [sp, #28]
 8009008:	e014      	b.n	8009034 <_svfiprintf_r+0x110>
 800900a:	eba0 0308 	sub.w	r3, r0, r8
 800900e:	fa09 f303 	lsl.w	r3, r9, r3
 8009012:	4313      	orrs	r3, r2
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	46a2      	mov	sl, r4
 8009018:	e7d2      	b.n	8008fc0 <_svfiprintf_r+0x9c>
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	1d19      	adds	r1, r3, #4
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	9103      	str	r1, [sp, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfbb      	ittet	lt
 8009026:	425b      	neglt	r3, r3
 8009028:	f042 0202 	orrlt.w	r2, r2, #2
 800902c:	9307      	strge	r3, [sp, #28]
 800902e:	9307      	strlt	r3, [sp, #28]
 8009030:	bfb8      	it	lt
 8009032:	9204      	strlt	r2, [sp, #16]
 8009034:	7823      	ldrb	r3, [r4, #0]
 8009036:	2b2e      	cmp	r3, #46	; 0x2e
 8009038:	d10c      	bne.n	8009054 <_svfiprintf_r+0x130>
 800903a:	7863      	ldrb	r3, [r4, #1]
 800903c:	2b2a      	cmp	r3, #42	; 0x2a
 800903e:	d135      	bne.n	80090ac <_svfiprintf_r+0x188>
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	1d1a      	adds	r2, r3, #4
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	9203      	str	r2, [sp, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfb8      	it	lt
 800904c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009050:	3402      	adds	r4, #2
 8009052:	9305      	str	r3, [sp, #20]
 8009054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009120 <_svfiprintf_r+0x1fc>
 8009058:	7821      	ldrb	r1, [r4, #0]
 800905a:	2203      	movs	r2, #3
 800905c:	4650      	mov	r0, sl
 800905e:	f7f7 f8bf 	bl	80001e0 <memchr>
 8009062:	b140      	cbz	r0, 8009076 <_svfiprintf_r+0x152>
 8009064:	2340      	movs	r3, #64	; 0x40
 8009066:	eba0 000a 	sub.w	r0, r0, sl
 800906a:	fa03 f000 	lsl.w	r0, r3, r0
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	4303      	orrs	r3, r0
 8009072:	3401      	adds	r4, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907a:	4826      	ldr	r0, [pc, #152]	; (8009114 <_svfiprintf_r+0x1f0>)
 800907c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009080:	2206      	movs	r2, #6
 8009082:	f7f7 f8ad 	bl	80001e0 <memchr>
 8009086:	2800      	cmp	r0, #0
 8009088:	d038      	beq.n	80090fc <_svfiprintf_r+0x1d8>
 800908a:	4b23      	ldr	r3, [pc, #140]	; (8009118 <_svfiprintf_r+0x1f4>)
 800908c:	bb1b      	cbnz	r3, 80090d6 <_svfiprintf_r+0x1b2>
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	3307      	adds	r3, #7
 8009092:	f023 0307 	bic.w	r3, r3, #7
 8009096:	3308      	adds	r3, #8
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800909c:	4433      	add	r3, r6
 800909e:	9309      	str	r3, [sp, #36]	; 0x24
 80090a0:	e767      	b.n	8008f72 <_svfiprintf_r+0x4e>
 80090a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090a6:	460c      	mov	r4, r1
 80090a8:	2001      	movs	r0, #1
 80090aa:	e7a5      	b.n	8008ff8 <_svfiprintf_r+0xd4>
 80090ac:	2300      	movs	r3, #0
 80090ae:	3401      	adds	r4, #1
 80090b0:	9305      	str	r3, [sp, #20]
 80090b2:	4619      	mov	r1, r3
 80090b4:	f04f 0c0a 	mov.w	ip, #10
 80090b8:	4620      	mov	r0, r4
 80090ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090be:	3a30      	subs	r2, #48	; 0x30
 80090c0:	2a09      	cmp	r2, #9
 80090c2:	d903      	bls.n	80090cc <_svfiprintf_r+0x1a8>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0c5      	beq.n	8009054 <_svfiprintf_r+0x130>
 80090c8:	9105      	str	r1, [sp, #20]
 80090ca:	e7c3      	b.n	8009054 <_svfiprintf_r+0x130>
 80090cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d0:	4604      	mov	r4, r0
 80090d2:	2301      	movs	r3, #1
 80090d4:	e7f0      	b.n	80090b8 <_svfiprintf_r+0x194>
 80090d6:	ab03      	add	r3, sp, #12
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	462a      	mov	r2, r5
 80090dc:	4b0f      	ldr	r3, [pc, #60]	; (800911c <_svfiprintf_r+0x1f8>)
 80090de:	a904      	add	r1, sp, #16
 80090e0:	4638      	mov	r0, r7
 80090e2:	f3af 8000 	nop.w
 80090e6:	1c42      	adds	r2, r0, #1
 80090e8:	4606      	mov	r6, r0
 80090ea:	d1d6      	bne.n	800909a <_svfiprintf_r+0x176>
 80090ec:	89ab      	ldrh	r3, [r5, #12]
 80090ee:	065b      	lsls	r3, r3, #25
 80090f0:	f53f af2c 	bmi.w	8008f4c <_svfiprintf_r+0x28>
 80090f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090f6:	b01d      	add	sp, #116	; 0x74
 80090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	462a      	mov	r2, r5
 8009102:	4b06      	ldr	r3, [pc, #24]	; (800911c <_svfiprintf_r+0x1f8>)
 8009104:	a904      	add	r1, sp, #16
 8009106:	4638      	mov	r0, r7
 8009108:	f000 f9d4 	bl	80094b4 <_printf_i>
 800910c:	e7eb      	b.n	80090e6 <_svfiprintf_r+0x1c2>
 800910e:	bf00      	nop
 8009110:	0800a220 	.word	0x0800a220
 8009114:	0800a22a 	.word	0x0800a22a
 8009118:	00000000 	.word	0x00000000
 800911c:	08008e6d 	.word	0x08008e6d
 8009120:	0800a226 	.word	0x0800a226

08009124 <__sfputc_r>:
 8009124:	6893      	ldr	r3, [r2, #8]
 8009126:	3b01      	subs	r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	b410      	push	{r4}
 800912c:	6093      	str	r3, [r2, #8]
 800912e:	da08      	bge.n	8009142 <__sfputc_r+0x1e>
 8009130:	6994      	ldr	r4, [r2, #24]
 8009132:	42a3      	cmp	r3, r4
 8009134:	db01      	blt.n	800913a <__sfputc_r+0x16>
 8009136:	290a      	cmp	r1, #10
 8009138:	d103      	bne.n	8009142 <__sfputc_r+0x1e>
 800913a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800913e:	f000 bb33 	b.w	80097a8 <__swbuf_r>
 8009142:	6813      	ldr	r3, [r2, #0]
 8009144:	1c58      	adds	r0, r3, #1
 8009146:	6010      	str	r0, [r2, #0]
 8009148:	7019      	strb	r1, [r3, #0]
 800914a:	4608      	mov	r0, r1
 800914c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009150:	4770      	bx	lr

08009152 <__sfputs_r>:
 8009152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009154:	4606      	mov	r6, r0
 8009156:	460f      	mov	r7, r1
 8009158:	4614      	mov	r4, r2
 800915a:	18d5      	adds	r5, r2, r3
 800915c:	42ac      	cmp	r4, r5
 800915e:	d101      	bne.n	8009164 <__sfputs_r+0x12>
 8009160:	2000      	movs	r0, #0
 8009162:	e007      	b.n	8009174 <__sfputs_r+0x22>
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	463a      	mov	r2, r7
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff ffda 	bl	8009124 <__sfputc_r>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d1f3      	bne.n	800915c <__sfputs_r+0xa>
 8009174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009178 <_vfiprintf_r>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	460d      	mov	r5, r1
 800917e:	b09d      	sub	sp, #116	; 0x74
 8009180:	4614      	mov	r4, r2
 8009182:	4698      	mov	r8, r3
 8009184:	4606      	mov	r6, r0
 8009186:	b118      	cbz	r0, 8009190 <_vfiprintf_r+0x18>
 8009188:	6983      	ldr	r3, [r0, #24]
 800918a:	b90b      	cbnz	r3, 8009190 <_vfiprintf_r+0x18>
 800918c:	f7ff fcc0 	bl	8008b10 <__sinit>
 8009190:	4b89      	ldr	r3, [pc, #548]	; (80093b8 <_vfiprintf_r+0x240>)
 8009192:	429d      	cmp	r5, r3
 8009194:	d11b      	bne.n	80091ce <_vfiprintf_r+0x56>
 8009196:	6875      	ldr	r5, [r6, #4]
 8009198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	d405      	bmi.n	80091aa <_vfiprintf_r+0x32>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	059a      	lsls	r2, r3, #22
 80091a2:	d402      	bmi.n	80091aa <_vfiprintf_r+0x32>
 80091a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a6:	f7ff fd76 	bl	8008c96 <__retarget_lock_acquire_recursive>
 80091aa:	89ab      	ldrh	r3, [r5, #12]
 80091ac:	071b      	lsls	r3, r3, #28
 80091ae:	d501      	bpl.n	80091b4 <_vfiprintf_r+0x3c>
 80091b0:	692b      	ldr	r3, [r5, #16]
 80091b2:	b9eb      	cbnz	r3, 80091f0 <_vfiprintf_r+0x78>
 80091b4:	4629      	mov	r1, r5
 80091b6:	4630      	mov	r0, r6
 80091b8:	f000 fb5a 	bl	8009870 <__swsetup_r>
 80091bc:	b1c0      	cbz	r0, 80091f0 <_vfiprintf_r+0x78>
 80091be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091c0:	07dc      	lsls	r4, r3, #31
 80091c2:	d50e      	bpl.n	80091e2 <_vfiprintf_r+0x6a>
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	b01d      	add	sp, #116	; 0x74
 80091ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ce:	4b7b      	ldr	r3, [pc, #492]	; (80093bc <_vfiprintf_r+0x244>)
 80091d0:	429d      	cmp	r5, r3
 80091d2:	d101      	bne.n	80091d8 <_vfiprintf_r+0x60>
 80091d4:	68b5      	ldr	r5, [r6, #8]
 80091d6:	e7df      	b.n	8009198 <_vfiprintf_r+0x20>
 80091d8:	4b79      	ldr	r3, [pc, #484]	; (80093c0 <_vfiprintf_r+0x248>)
 80091da:	429d      	cmp	r5, r3
 80091dc:	bf08      	it	eq
 80091de:	68f5      	ldreq	r5, [r6, #12]
 80091e0:	e7da      	b.n	8009198 <_vfiprintf_r+0x20>
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	0598      	lsls	r0, r3, #22
 80091e6:	d4ed      	bmi.n	80091c4 <_vfiprintf_r+0x4c>
 80091e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091ea:	f7ff fd55 	bl	8008c98 <__retarget_lock_release_recursive>
 80091ee:	e7e9      	b.n	80091c4 <_vfiprintf_r+0x4c>
 80091f0:	2300      	movs	r3, #0
 80091f2:	9309      	str	r3, [sp, #36]	; 0x24
 80091f4:	2320      	movs	r3, #32
 80091f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80091fe:	2330      	movs	r3, #48	; 0x30
 8009200:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093c4 <_vfiprintf_r+0x24c>
 8009204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009208:	f04f 0901 	mov.w	r9, #1
 800920c:	4623      	mov	r3, r4
 800920e:	469a      	mov	sl, r3
 8009210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009214:	b10a      	cbz	r2, 800921a <_vfiprintf_r+0xa2>
 8009216:	2a25      	cmp	r2, #37	; 0x25
 8009218:	d1f9      	bne.n	800920e <_vfiprintf_r+0x96>
 800921a:	ebba 0b04 	subs.w	fp, sl, r4
 800921e:	d00b      	beq.n	8009238 <_vfiprintf_r+0xc0>
 8009220:	465b      	mov	r3, fp
 8009222:	4622      	mov	r2, r4
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff ff93 	bl	8009152 <__sfputs_r>
 800922c:	3001      	adds	r0, #1
 800922e:	f000 80aa 	beq.w	8009386 <_vfiprintf_r+0x20e>
 8009232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009234:	445a      	add	r2, fp
 8009236:	9209      	str	r2, [sp, #36]	; 0x24
 8009238:	f89a 3000 	ldrb.w	r3, [sl]
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 80a2 	beq.w	8009386 <_vfiprintf_r+0x20e>
 8009242:	2300      	movs	r3, #0
 8009244:	f04f 32ff 	mov.w	r2, #4294967295
 8009248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800924c:	f10a 0a01 	add.w	sl, sl, #1
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009258:	931a      	str	r3, [sp, #104]	; 0x68
 800925a:	4654      	mov	r4, sl
 800925c:	2205      	movs	r2, #5
 800925e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009262:	4858      	ldr	r0, [pc, #352]	; (80093c4 <_vfiprintf_r+0x24c>)
 8009264:	f7f6 ffbc 	bl	80001e0 <memchr>
 8009268:	9a04      	ldr	r2, [sp, #16]
 800926a:	b9d8      	cbnz	r0, 80092a4 <_vfiprintf_r+0x12c>
 800926c:	06d1      	lsls	r1, r2, #27
 800926e:	bf44      	itt	mi
 8009270:	2320      	movmi	r3, #32
 8009272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009276:	0713      	lsls	r3, r2, #28
 8009278:	bf44      	itt	mi
 800927a:	232b      	movmi	r3, #43	; 0x2b
 800927c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009280:	f89a 3000 	ldrb.w	r3, [sl]
 8009284:	2b2a      	cmp	r3, #42	; 0x2a
 8009286:	d015      	beq.n	80092b4 <_vfiprintf_r+0x13c>
 8009288:	9a07      	ldr	r2, [sp, #28]
 800928a:	4654      	mov	r4, sl
 800928c:	2000      	movs	r0, #0
 800928e:	f04f 0c0a 	mov.w	ip, #10
 8009292:	4621      	mov	r1, r4
 8009294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009298:	3b30      	subs	r3, #48	; 0x30
 800929a:	2b09      	cmp	r3, #9
 800929c:	d94e      	bls.n	800933c <_vfiprintf_r+0x1c4>
 800929e:	b1b0      	cbz	r0, 80092ce <_vfiprintf_r+0x156>
 80092a0:	9207      	str	r2, [sp, #28]
 80092a2:	e014      	b.n	80092ce <_vfiprintf_r+0x156>
 80092a4:	eba0 0308 	sub.w	r3, r0, r8
 80092a8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	46a2      	mov	sl, r4
 80092b2:	e7d2      	b.n	800925a <_vfiprintf_r+0xe2>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	1d19      	adds	r1, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	9103      	str	r1, [sp, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bfbb      	ittet	lt
 80092c0:	425b      	neglt	r3, r3
 80092c2:	f042 0202 	orrlt.w	r2, r2, #2
 80092c6:	9307      	strge	r3, [sp, #28]
 80092c8:	9307      	strlt	r3, [sp, #28]
 80092ca:	bfb8      	it	lt
 80092cc:	9204      	strlt	r2, [sp, #16]
 80092ce:	7823      	ldrb	r3, [r4, #0]
 80092d0:	2b2e      	cmp	r3, #46	; 0x2e
 80092d2:	d10c      	bne.n	80092ee <_vfiprintf_r+0x176>
 80092d4:	7863      	ldrb	r3, [r4, #1]
 80092d6:	2b2a      	cmp	r3, #42	; 0x2a
 80092d8:	d135      	bne.n	8009346 <_vfiprintf_r+0x1ce>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	1d1a      	adds	r2, r3, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9203      	str	r2, [sp, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfb8      	it	lt
 80092e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80092ea:	3402      	adds	r4, #2
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093d4 <_vfiprintf_r+0x25c>
 80092f2:	7821      	ldrb	r1, [r4, #0]
 80092f4:	2203      	movs	r2, #3
 80092f6:	4650      	mov	r0, sl
 80092f8:	f7f6 ff72 	bl	80001e0 <memchr>
 80092fc:	b140      	cbz	r0, 8009310 <_vfiprintf_r+0x198>
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	eba0 000a 	sub.w	r0, r0, sl
 8009304:	fa03 f000 	lsl.w	r0, r3, r0
 8009308:	9b04      	ldr	r3, [sp, #16]
 800930a:	4303      	orrs	r3, r0
 800930c:	3401      	adds	r4, #1
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009314:	482c      	ldr	r0, [pc, #176]	; (80093c8 <_vfiprintf_r+0x250>)
 8009316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800931a:	2206      	movs	r2, #6
 800931c:	f7f6 ff60 	bl	80001e0 <memchr>
 8009320:	2800      	cmp	r0, #0
 8009322:	d03f      	beq.n	80093a4 <_vfiprintf_r+0x22c>
 8009324:	4b29      	ldr	r3, [pc, #164]	; (80093cc <_vfiprintf_r+0x254>)
 8009326:	bb1b      	cbnz	r3, 8009370 <_vfiprintf_r+0x1f8>
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	3307      	adds	r3, #7
 800932c:	f023 0307 	bic.w	r3, r3, #7
 8009330:	3308      	adds	r3, #8
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009336:	443b      	add	r3, r7
 8009338:	9309      	str	r3, [sp, #36]	; 0x24
 800933a:	e767      	b.n	800920c <_vfiprintf_r+0x94>
 800933c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009340:	460c      	mov	r4, r1
 8009342:	2001      	movs	r0, #1
 8009344:	e7a5      	b.n	8009292 <_vfiprintf_r+0x11a>
 8009346:	2300      	movs	r3, #0
 8009348:	3401      	adds	r4, #1
 800934a:	9305      	str	r3, [sp, #20]
 800934c:	4619      	mov	r1, r3
 800934e:	f04f 0c0a 	mov.w	ip, #10
 8009352:	4620      	mov	r0, r4
 8009354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009358:	3a30      	subs	r2, #48	; 0x30
 800935a:	2a09      	cmp	r2, #9
 800935c:	d903      	bls.n	8009366 <_vfiprintf_r+0x1ee>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0c5      	beq.n	80092ee <_vfiprintf_r+0x176>
 8009362:	9105      	str	r1, [sp, #20]
 8009364:	e7c3      	b.n	80092ee <_vfiprintf_r+0x176>
 8009366:	fb0c 2101 	mla	r1, ip, r1, r2
 800936a:	4604      	mov	r4, r0
 800936c:	2301      	movs	r3, #1
 800936e:	e7f0      	b.n	8009352 <_vfiprintf_r+0x1da>
 8009370:	ab03      	add	r3, sp, #12
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	462a      	mov	r2, r5
 8009376:	4b16      	ldr	r3, [pc, #88]	; (80093d0 <_vfiprintf_r+0x258>)
 8009378:	a904      	add	r1, sp, #16
 800937a:	4630      	mov	r0, r6
 800937c:	f3af 8000 	nop.w
 8009380:	4607      	mov	r7, r0
 8009382:	1c78      	adds	r0, r7, #1
 8009384:	d1d6      	bne.n	8009334 <_vfiprintf_r+0x1bc>
 8009386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009388:	07d9      	lsls	r1, r3, #31
 800938a:	d405      	bmi.n	8009398 <_vfiprintf_r+0x220>
 800938c:	89ab      	ldrh	r3, [r5, #12]
 800938e:	059a      	lsls	r2, r3, #22
 8009390:	d402      	bmi.n	8009398 <_vfiprintf_r+0x220>
 8009392:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009394:	f7ff fc80 	bl	8008c98 <__retarget_lock_release_recursive>
 8009398:	89ab      	ldrh	r3, [r5, #12]
 800939a:	065b      	lsls	r3, r3, #25
 800939c:	f53f af12 	bmi.w	80091c4 <_vfiprintf_r+0x4c>
 80093a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a2:	e711      	b.n	80091c8 <_vfiprintf_r+0x50>
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	462a      	mov	r2, r5
 80093aa:	4b09      	ldr	r3, [pc, #36]	; (80093d0 <_vfiprintf_r+0x258>)
 80093ac:	a904      	add	r1, sp, #16
 80093ae:	4630      	mov	r0, r6
 80093b0:	f000 f880 	bl	80094b4 <_printf_i>
 80093b4:	e7e4      	b.n	8009380 <_vfiprintf_r+0x208>
 80093b6:	bf00      	nop
 80093b8:	0800a1e0 	.word	0x0800a1e0
 80093bc:	0800a200 	.word	0x0800a200
 80093c0:	0800a1c0 	.word	0x0800a1c0
 80093c4:	0800a220 	.word	0x0800a220
 80093c8:	0800a22a 	.word	0x0800a22a
 80093cc:	00000000 	.word	0x00000000
 80093d0:	08009153 	.word	0x08009153
 80093d4:	0800a226 	.word	0x0800a226

080093d8 <_printf_common>:
 80093d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	4616      	mov	r6, r2
 80093de:	4699      	mov	r9, r3
 80093e0:	688a      	ldr	r2, [r1, #8]
 80093e2:	690b      	ldr	r3, [r1, #16]
 80093e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	bfb8      	it	lt
 80093ec:	4613      	movlt	r3, r2
 80093ee:	6033      	str	r3, [r6, #0]
 80093f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093f4:	4607      	mov	r7, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	b10a      	cbz	r2, 80093fe <_printf_common+0x26>
 80093fa:	3301      	adds	r3, #1
 80093fc:	6033      	str	r3, [r6, #0]
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	0699      	lsls	r1, r3, #26
 8009402:	bf42      	ittt	mi
 8009404:	6833      	ldrmi	r3, [r6, #0]
 8009406:	3302      	addmi	r3, #2
 8009408:	6033      	strmi	r3, [r6, #0]
 800940a:	6825      	ldr	r5, [r4, #0]
 800940c:	f015 0506 	ands.w	r5, r5, #6
 8009410:	d106      	bne.n	8009420 <_printf_common+0x48>
 8009412:	f104 0a19 	add.w	sl, r4, #25
 8009416:	68e3      	ldr	r3, [r4, #12]
 8009418:	6832      	ldr	r2, [r6, #0]
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	42ab      	cmp	r3, r5
 800941e:	dc26      	bgt.n	800946e <_printf_common+0x96>
 8009420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009424:	1e13      	subs	r3, r2, #0
 8009426:	6822      	ldr	r2, [r4, #0]
 8009428:	bf18      	it	ne
 800942a:	2301      	movne	r3, #1
 800942c:	0692      	lsls	r2, r2, #26
 800942e:	d42b      	bmi.n	8009488 <_printf_common+0xb0>
 8009430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009434:	4649      	mov	r1, r9
 8009436:	4638      	mov	r0, r7
 8009438:	47c0      	blx	r8
 800943a:	3001      	adds	r0, #1
 800943c:	d01e      	beq.n	800947c <_printf_common+0xa4>
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	68e5      	ldr	r5, [r4, #12]
 8009442:	6832      	ldr	r2, [r6, #0]
 8009444:	f003 0306 	and.w	r3, r3, #6
 8009448:	2b04      	cmp	r3, #4
 800944a:	bf08      	it	eq
 800944c:	1aad      	subeq	r5, r5, r2
 800944e:	68a3      	ldr	r3, [r4, #8]
 8009450:	6922      	ldr	r2, [r4, #16]
 8009452:	bf0c      	ite	eq
 8009454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009458:	2500      	movne	r5, #0
 800945a:	4293      	cmp	r3, r2
 800945c:	bfc4      	itt	gt
 800945e:	1a9b      	subgt	r3, r3, r2
 8009460:	18ed      	addgt	r5, r5, r3
 8009462:	2600      	movs	r6, #0
 8009464:	341a      	adds	r4, #26
 8009466:	42b5      	cmp	r5, r6
 8009468:	d11a      	bne.n	80094a0 <_printf_common+0xc8>
 800946a:	2000      	movs	r0, #0
 800946c:	e008      	b.n	8009480 <_printf_common+0xa8>
 800946e:	2301      	movs	r3, #1
 8009470:	4652      	mov	r2, sl
 8009472:	4649      	mov	r1, r9
 8009474:	4638      	mov	r0, r7
 8009476:	47c0      	blx	r8
 8009478:	3001      	adds	r0, #1
 800947a:	d103      	bne.n	8009484 <_printf_common+0xac>
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009484:	3501      	adds	r5, #1
 8009486:	e7c6      	b.n	8009416 <_printf_common+0x3e>
 8009488:	18e1      	adds	r1, r4, r3
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	2030      	movs	r0, #48	; 0x30
 800948e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009492:	4422      	add	r2, r4
 8009494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800949c:	3302      	adds	r3, #2
 800949e:	e7c7      	b.n	8009430 <_printf_common+0x58>
 80094a0:	2301      	movs	r3, #1
 80094a2:	4622      	mov	r2, r4
 80094a4:	4649      	mov	r1, r9
 80094a6:	4638      	mov	r0, r7
 80094a8:	47c0      	blx	r8
 80094aa:	3001      	adds	r0, #1
 80094ac:	d0e6      	beq.n	800947c <_printf_common+0xa4>
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7d9      	b.n	8009466 <_printf_common+0x8e>
	...

080094b4 <_printf_i>:
 80094b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b8:	7e0f      	ldrb	r7, [r1, #24]
 80094ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094bc:	2f78      	cmp	r7, #120	; 0x78
 80094be:	4691      	mov	r9, r2
 80094c0:	4680      	mov	r8, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	469a      	mov	sl, r3
 80094c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094ca:	d807      	bhi.n	80094dc <_printf_i+0x28>
 80094cc:	2f62      	cmp	r7, #98	; 0x62
 80094ce:	d80a      	bhi.n	80094e6 <_printf_i+0x32>
 80094d0:	2f00      	cmp	r7, #0
 80094d2:	f000 80d8 	beq.w	8009686 <_printf_i+0x1d2>
 80094d6:	2f58      	cmp	r7, #88	; 0x58
 80094d8:	f000 80a3 	beq.w	8009622 <_printf_i+0x16e>
 80094dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094e4:	e03a      	b.n	800955c <_printf_i+0xa8>
 80094e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094ea:	2b15      	cmp	r3, #21
 80094ec:	d8f6      	bhi.n	80094dc <_printf_i+0x28>
 80094ee:	a101      	add	r1, pc, #4	; (adr r1, 80094f4 <_printf_i+0x40>)
 80094f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094f4:	0800954d 	.word	0x0800954d
 80094f8:	08009561 	.word	0x08009561
 80094fc:	080094dd 	.word	0x080094dd
 8009500:	080094dd 	.word	0x080094dd
 8009504:	080094dd 	.word	0x080094dd
 8009508:	080094dd 	.word	0x080094dd
 800950c:	08009561 	.word	0x08009561
 8009510:	080094dd 	.word	0x080094dd
 8009514:	080094dd 	.word	0x080094dd
 8009518:	080094dd 	.word	0x080094dd
 800951c:	080094dd 	.word	0x080094dd
 8009520:	0800966d 	.word	0x0800966d
 8009524:	08009591 	.word	0x08009591
 8009528:	0800964f 	.word	0x0800964f
 800952c:	080094dd 	.word	0x080094dd
 8009530:	080094dd 	.word	0x080094dd
 8009534:	0800968f 	.word	0x0800968f
 8009538:	080094dd 	.word	0x080094dd
 800953c:	08009591 	.word	0x08009591
 8009540:	080094dd 	.word	0x080094dd
 8009544:	080094dd 	.word	0x080094dd
 8009548:	08009657 	.word	0x08009657
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	1d1a      	adds	r2, r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	602a      	str	r2, [r5, #0]
 8009554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800955c:	2301      	movs	r3, #1
 800955e:	e0a3      	b.n	80096a8 <_printf_i+0x1f4>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	6829      	ldr	r1, [r5, #0]
 8009564:	0606      	lsls	r6, r0, #24
 8009566:	f101 0304 	add.w	r3, r1, #4
 800956a:	d50a      	bpl.n	8009582 <_printf_i+0xce>
 800956c:	680e      	ldr	r6, [r1, #0]
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	2e00      	cmp	r6, #0
 8009572:	da03      	bge.n	800957c <_printf_i+0xc8>
 8009574:	232d      	movs	r3, #45	; 0x2d
 8009576:	4276      	negs	r6, r6
 8009578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957c:	485e      	ldr	r0, [pc, #376]	; (80096f8 <_printf_i+0x244>)
 800957e:	230a      	movs	r3, #10
 8009580:	e019      	b.n	80095b6 <_printf_i+0x102>
 8009582:	680e      	ldr	r6, [r1, #0]
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	f010 0f40 	tst.w	r0, #64	; 0x40
 800958a:	bf18      	it	ne
 800958c:	b236      	sxthne	r6, r6
 800958e:	e7ef      	b.n	8009570 <_printf_i+0xbc>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	6820      	ldr	r0, [r4, #0]
 8009594:	1d19      	adds	r1, r3, #4
 8009596:	6029      	str	r1, [r5, #0]
 8009598:	0601      	lsls	r1, r0, #24
 800959a:	d501      	bpl.n	80095a0 <_printf_i+0xec>
 800959c:	681e      	ldr	r6, [r3, #0]
 800959e:	e002      	b.n	80095a6 <_printf_i+0xf2>
 80095a0:	0646      	lsls	r6, r0, #25
 80095a2:	d5fb      	bpl.n	800959c <_printf_i+0xe8>
 80095a4:	881e      	ldrh	r6, [r3, #0]
 80095a6:	4854      	ldr	r0, [pc, #336]	; (80096f8 <_printf_i+0x244>)
 80095a8:	2f6f      	cmp	r7, #111	; 0x6f
 80095aa:	bf0c      	ite	eq
 80095ac:	2308      	moveq	r3, #8
 80095ae:	230a      	movne	r3, #10
 80095b0:	2100      	movs	r1, #0
 80095b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095b6:	6865      	ldr	r5, [r4, #4]
 80095b8:	60a5      	str	r5, [r4, #8]
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	bfa2      	ittt	ge
 80095be:	6821      	ldrge	r1, [r4, #0]
 80095c0:	f021 0104 	bicge.w	r1, r1, #4
 80095c4:	6021      	strge	r1, [r4, #0]
 80095c6:	b90e      	cbnz	r6, 80095cc <_printf_i+0x118>
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	d04d      	beq.n	8009668 <_printf_i+0x1b4>
 80095cc:	4615      	mov	r5, r2
 80095ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80095d2:	fb03 6711 	mls	r7, r3, r1, r6
 80095d6:	5dc7      	ldrb	r7, [r0, r7]
 80095d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095dc:	4637      	mov	r7, r6
 80095de:	42bb      	cmp	r3, r7
 80095e0:	460e      	mov	r6, r1
 80095e2:	d9f4      	bls.n	80095ce <_printf_i+0x11a>
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d10b      	bne.n	8009600 <_printf_i+0x14c>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	07de      	lsls	r6, r3, #31
 80095ec:	d508      	bpl.n	8009600 <_printf_i+0x14c>
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	6861      	ldr	r1, [r4, #4]
 80095f2:	4299      	cmp	r1, r3
 80095f4:	bfde      	ittt	le
 80095f6:	2330      	movle	r3, #48	; 0x30
 80095f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009600:	1b52      	subs	r2, r2, r5
 8009602:	6122      	str	r2, [r4, #16]
 8009604:	f8cd a000 	str.w	sl, [sp]
 8009608:	464b      	mov	r3, r9
 800960a:	aa03      	add	r2, sp, #12
 800960c:	4621      	mov	r1, r4
 800960e:	4640      	mov	r0, r8
 8009610:	f7ff fee2 	bl	80093d8 <_printf_common>
 8009614:	3001      	adds	r0, #1
 8009616:	d14c      	bne.n	80096b2 <_printf_i+0x1fe>
 8009618:	f04f 30ff 	mov.w	r0, #4294967295
 800961c:	b004      	add	sp, #16
 800961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009622:	4835      	ldr	r0, [pc, #212]	; (80096f8 <_printf_i+0x244>)
 8009624:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009628:	6829      	ldr	r1, [r5, #0]
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009630:	6029      	str	r1, [r5, #0]
 8009632:	061d      	lsls	r5, r3, #24
 8009634:	d514      	bpl.n	8009660 <_printf_i+0x1ac>
 8009636:	07df      	lsls	r7, r3, #31
 8009638:	bf44      	itt	mi
 800963a:	f043 0320 	orrmi.w	r3, r3, #32
 800963e:	6023      	strmi	r3, [r4, #0]
 8009640:	b91e      	cbnz	r6, 800964a <_printf_i+0x196>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	f023 0320 	bic.w	r3, r3, #32
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	2310      	movs	r3, #16
 800964c:	e7b0      	b.n	80095b0 <_printf_i+0xfc>
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	f043 0320 	orr.w	r3, r3, #32
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	2378      	movs	r3, #120	; 0x78
 8009658:	4828      	ldr	r0, [pc, #160]	; (80096fc <_printf_i+0x248>)
 800965a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800965e:	e7e3      	b.n	8009628 <_printf_i+0x174>
 8009660:	0659      	lsls	r1, r3, #25
 8009662:	bf48      	it	mi
 8009664:	b2b6      	uxthmi	r6, r6
 8009666:	e7e6      	b.n	8009636 <_printf_i+0x182>
 8009668:	4615      	mov	r5, r2
 800966a:	e7bb      	b.n	80095e4 <_printf_i+0x130>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	6826      	ldr	r6, [r4, #0]
 8009670:	6961      	ldr	r1, [r4, #20]
 8009672:	1d18      	adds	r0, r3, #4
 8009674:	6028      	str	r0, [r5, #0]
 8009676:	0635      	lsls	r5, r6, #24
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	d501      	bpl.n	8009680 <_printf_i+0x1cc>
 800967c:	6019      	str	r1, [r3, #0]
 800967e:	e002      	b.n	8009686 <_printf_i+0x1d2>
 8009680:	0670      	lsls	r0, r6, #25
 8009682:	d5fb      	bpl.n	800967c <_printf_i+0x1c8>
 8009684:	8019      	strh	r1, [r3, #0]
 8009686:	2300      	movs	r3, #0
 8009688:	6123      	str	r3, [r4, #16]
 800968a:	4615      	mov	r5, r2
 800968c:	e7ba      	b.n	8009604 <_printf_i+0x150>
 800968e:	682b      	ldr	r3, [r5, #0]
 8009690:	1d1a      	adds	r2, r3, #4
 8009692:	602a      	str	r2, [r5, #0]
 8009694:	681d      	ldr	r5, [r3, #0]
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	2100      	movs	r1, #0
 800969a:	4628      	mov	r0, r5
 800969c:	f7f6 fda0 	bl	80001e0 <memchr>
 80096a0:	b108      	cbz	r0, 80096a6 <_printf_i+0x1f2>
 80096a2:	1b40      	subs	r0, r0, r5
 80096a4:	6060      	str	r0, [r4, #4]
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	6123      	str	r3, [r4, #16]
 80096aa:	2300      	movs	r3, #0
 80096ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096b0:	e7a8      	b.n	8009604 <_printf_i+0x150>
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	462a      	mov	r2, r5
 80096b6:	4649      	mov	r1, r9
 80096b8:	4640      	mov	r0, r8
 80096ba:	47d0      	blx	sl
 80096bc:	3001      	adds	r0, #1
 80096be:	d0ab      	beq.n	8009618 <_printf_i+0x164>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	079b      	lsls	r3, r3, #30
 80096c4:	d413      	bmi.n	80096ee <_printf_i+0x23a>
 80096c6:	68e0      	ldr	r0, [r4, #12]
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	4298      	cmp	r0, r3
 80096cc:	bfb8      	it	lt
 80096ce:	4618      	movlt	r0, r3
 80096d0:	e7a4      	b.n	800961c <_printf_i+0x168>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4632      	mov	r2, r6
 80096d6:	4649      	mov	r1, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	47d0      	blx	sl
 80096dc:	3001      	adds	r0, #1
 80096de:	d09b      	beq.n	8009618 <_printf_i+0x164>
 80096e0:	3501      	adds	r5, #1
 80096e2:	68e3      	ldr	r3, [r4, #12]
 80096e4:	9903      	ldr	r1, [sp, #12]
 80096e6:	1a5b      	subs	r3, r3, r1
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	dcf2      	bgt.n	80096d2 <_printf_i+0x21e>
 80096ec:	e7eb      	b.n	80096c6 <_printf_i+0x212>
 80096ee:	2500      	movs	r5, #0
 80096f0:	f104 0619 	add.w	r6, r4, #25
 80096f4:	e7f5      	b.n	80096e2 <_printf_i+0x22e>
 80096f6:	bf00      	nop
 80096f8:	0800a231 	.word	0x0800a231
 80096fc:	0800a242 	.word	0x0800a242

08009700 <_sbrk_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4d06      	ldr	r5, [pc, #24]	; (800971c <_sbrk_r+0x1c>)
 8009704:	2300      	movs	r3, #0
 8009706:	4604      	mov	r4, r0
 8009708:	4608      	mov	r0, r1
 800970a:	602b      	str	r3, [r5, #0]
 800970c:	f7f9 ffb2 	bl	8003674 <_sbrk>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_sbrk_r+0x1a>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	b103      	cbz	r3, 800971a <_sbrk_r+0x1a>
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	20000dc0 	.word	0x20000dc0

08009720 <__sread>:
 8009720:	b510      	push	{r4, lr}
 8009722:	460c      	mov	r4, r1
 8009724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009728:	f000 fac6 	bl	8009cb8 <_read_r>
 800972c:	2800      	cmp	r0, #0
 800972e:	bfab      	itete	ge
 8009730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009732:	89a3      	ldrhlt	r3, [r4, #12]
 8009734:	181b      	addge	r3, r3, r0
 8009736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800973a:	bfac      	ite	ge
 800973c:	6563      	strge	r3, [r4, #84]	; 0x54
 800973e:	81a3      	strhlt	r3, [r4, #12]
 8009740:	bd10      	pop	{r4, pc}

08009742 <__swrite>:
 8009742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009746:	461f      	mov	r7, r3
 8009748:	898b      	ldrh	r3, [r1, #12]
 800974a:	05db      	lsls	r3, r3, #23
 800974c:	4605      	mov	r5, r0
 800974e:	460c      	mov	r4, r1
 8009750:	4616      	mov	r6, r2
 8009752:	d505      	bpl.n	8009760 <__swrite+0x1e>
 8009754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009758:	2302      	movs	r3, #2
 800975a:	2200      	movs	r2, #0
 800975c:	f000 f9d0 	bl	8009b00 <_lseek_r>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800976a:	81a3      	strh	r3, [r4, #12]
 800976c:	4632      	mov	r2, r6
 800976e:	463b      	mov	r3, r7
 8009770:	4628      	mov	r0, r5
 8009772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009776:	f000 b869 	b.w	800984c <_write_r>

0800977a <__sseek>:
 800977a:	b510      	push	{r4, lr}
 800977c:	460c      	mov	r4, r1
 800977e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009782:	f000 f9bd 	bl	8009b00 <_lseek_r>
 8009786:	1c43      	adds	r3, r0, #1
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	bf15      	itete	ne
 800978c:	6560      	strne	r0, [r4, #84]	; 0x54
 800978e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009796:	81a3      	strheq	r3, [r4, #12]
 8009798:	bf18      	it	ne
 800979a:	81a3      	strhne	r3, [r4, #12]
 800979c:	bd10      	pop	{r4, pc}

0800979e <__sclose>:
 800979e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a2:	f000 b8db 	b.w	800995c <_close_r>
	...

080097a8 <__swbuf_r>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	460e      	mov	r6, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	4605      	mov	r5, r0
 80097b0:	b118      	cbz	r0, 80097ba <__swbuf_r+0x12>
 80097b2:	6983      	ldr	r3, [r0, #24]
 80097b4:	b90b      	cbnz	r3, 80097ba <__swbuf_r+0x12>
 80097b6:	f7ff f9ab 	bl	8008b10 <__sinit>
 80097ba:	4b21      	ldr	r3, [pc, #132]	; (8009840 <__swbuf_r+0x98>)
 80097bc:	429c      	cmp	r4, r3
 80097be:	d12b      	bne.n	8009818 <__swbuf_r+0x70>
 80097c0:	686c      	ldr	r4, [r5, #4]
 80097c2:	69a3      	ldr	r3, [r4, #24]
 80097c4:	60a3      	str	r3, [r4, #8]
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	071a      	lsls	r2, r3, #28
 80097ca:	d52f      	bpl.n	800982c <__swbuf_r+0x84>
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	b36b      	cbz	r3, 800982c <__swbuf_r+0x84>
 80097d0:	6923      	ldr	r3, [r4, #16]
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	1ac0      	subs	r0, r0, r3
 80097d6:	6963      	ldr	r3, [r4, #20]
 80097d8:	b2f6      	uxtb	r6, r6
 80097da:	4283      	cmp	r3, r0
 80097dc:	4637      	mov	r7, r6
 80097de:	dc04      	bgt.n	80097ea <__swbuf_r+0x42>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f000 f950 	bl	8009a88 <_fflush_r>
 80097e8:	bb30      	cbnz	r0, 8009838 <__swbuf_r+0x90>
 80097ea:	68a3      	ldr	r3, [r4, #8]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	60a3      	str	r3, [r4, #8]
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	6022      	str	r2, [r4, #0]
 80097f6:	701e      	strb	r6, [r3, #0]
 80097f8:	6963      	ldr	r3, [r4, #20]
 80097fa:	3001      	adds	r0, #1
 80097fc:	4283      	cmp	r3, r0
 80097fe:	d004      	beq.n	800980a <__swbuf_r+0x62>
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	07db      	lsls	r3, r3, #31
 8009804:	d506      	bpl.n	8009814 <__swbuf_r+0x6c>
 8009806:	2e0a      	cmp	r6, #10
 8009808:	d104      	bne.n	8009814 <__swbuf_r+0x6c>
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f000 f93b 	bl	8009a88 <_fflush_r>
 8009812:	b988      	cbnz	r0, 8009838 <__swbuf_r+0x90>
 8009814:	4638      	mov	r0, r7
 8009816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009818:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <__swbuf_r+0x9c>)
 800981a:	429c      	cmp	r4, r3
 800981c:	d101      	bne.n	8009822 <__swbuf_r+0x7a>
 800981e:	68ac      	ldr	r4, [r5, #8]
 8009820:	e7cf      	b.n	80097c2 <__swbuf_r+0x1a>
 8009822:	4b09      	ldr	r3, [pc, #36]	; (8009848 <__swbuf_r+0xa0>)
 8009824:	429c      	cmp	r4, r3
 8009826:	bf08      	it	eq
 8009828:	68ec      	ldreq	r4, [r5, #12]
 800982a:	e7ca      	b.n	80097c2 <__swbuf_r+0x1a>
 800982c:	4621      	mov	r1, r4
 800982e:	4628      	mov	r0, r5
 8009830:	f000 f81e 	bl	8009870 <__swsetup_r>
 8009834:	2800      	cmp	r0, #0
 8009836:	d0cb      	beq.n	80097d0 <__swbuf_r+0x28>
 8009838:	f04f 37ff 	mov.w	r7, #4294967295
 800983c:	e7ea      	b.n	8009814 <__swbuf_r+0x6c>
 800983e:	bf00      	nop
 8009840:	0800a1e0 	.word	0x0800a1e0
 8009844:	0800a200 	.word	0x0800a200
 8009848:	0800a1c0 	.word	0x0800a1c0

0800984c <_write_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4d07      	ldr	r5, [pc, #28]	; (800986c <_write_r+0x20>)
 8009850:	4604      	mov	r4, r0
 8009852:	4608      	mov	r0, r1
 8009854:	4611      	mov	r1, r2
 8009856:	2200      	movs	r2, #0
 8009858:	602a      	str	r2, [r5, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	f7f9 feb9 	bl	80035d2 <_write>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_write_r+0x1e>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_write_r+0x1e>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20000dc0 	.word	0x20000dc0

08009870 <__swsetup_r>:
 8009870:	4b32      	ldr	r3, [pc, #200]	; (800993c <__swsetup_r+0xcc>)
 8009872:	b570      	push	{r4, r5, r6, lr}
 8009874:	681d      	ldr	r5, [r3, #0]
 8009876:	4606      	mov	r6, r0
 8009878:	460c      	mov	r4, r1
 800987a:	b125      	cbz	r5, 8009886 <__swsetup_r+0x16>
 800987c:	69ab      	ldr	r3, [r5, #24]
 800987e:	b913      	cbnz	r3, 8009886 <__swsetup_r+0x16>
 8009880:	4628      	mov	r0, r5
 8009882:	f7ff f945 	bl	8008b10 <__sinit>
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <__swsetup_r+0xd0>)
 8009888:	429c      	cmp	r4, r3
 800988a:	d10f      	bne.n	80098ac <__swsetup_r+0x3c>
 800988c:	686c      	ldr	r4, [r5, #4]
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009894:	0719      	lsls	r1, r3, #28
 8009896:	d42c      	bmi.n	80098f2 <__swsetup_r+0x82>
 8009898:	06dd      	lsls	r5, r3, #27
 800989a:	d411      	bmi.n	80098c0 <__swsetup_r+0x50>
 800989c:	2309      	movs	r3, #9
 800989e:	6033      	str	r3, [r6, #0]
 80098a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	f04f 30ff 	mov.w	r0, #4294967295
 80098aa:	e03e      	b.n	800992a <__swsetup_r+0xba>
 80098ac:	4b25      	ldr	r3, [pc, #148]	; (8009944 <__swsetup_r+0xd4>)
 80098ae:	429c      	cmp	r4, r3
 80098b0:	d101      	bne.n	80098b6 <__swsetup_r+0x46>
 80098b2:	68ac      	ldr	r4, [r5, #8]
 80098b4:	e7eb      	b.n	800988e <__swsetup_r+0x1e>
 80098b6:	4b24      	ldr	r3, [pc, #144]	; (8009948 <__swsetup_r+0xd8>)
 80098b8:	429c      	cmp	r4, r3
 80098ba:	bf08      	it	eq
 80098bc:	68ec      	ldreq	r4, [r5, #12]
 80098be:	e7e6      	b.n	800988e <__swsetup_r+0x1e>
 80098c0:	0758      	lsls	r0, r3, #29
 80098c2:	d512      	bpl.n	80098ea <__swsetup_r+0x7a>
 80098c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c6:	b141      	cbz	r1, 80098da <__swsetup_r+0x6a>
 80098c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098cc:	4299      	cmp	r1, r3
 80098ce:	d002      	beq.n	80098d6 <__swsetup_r+0x66>
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7ff f9eb 	bl	8008cac <_free_r>
 80098d6:	2300      	movs	r3, #0
 80098d8:	6363      	str	r3, [r4, #52]	; 0x34
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	2300      	movs	r3, #0
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f043 0308 	orr.w	r3, r3, #8
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	b94b      	cbnz	r3, 800990a <__swsetup_r+0x9a>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009900:	d003      	beq.n	800990a <__swsetup_r+0x9a>
 8009902:	4621      	mov	r1, r4
 8009904:	4630      	mov	r0, r6
 8009906:	f000 f933 	bl	8009b70 <__smakebuf_r>
 800990a:	89a0      	ldrh	r0, [r4, #12]
 800990c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009910:	f010 0301 	ands.w	r3, r0, #1
 8009914:	d00a      	beq.n	800992c <__swsetup_r+0xbc>
 8009916:	2300      	movs	r3, #0
 8009918:	60a3      	str	r3, [r4, #8]
 800991a:	6963      	ldr	r3, [r4, #20]
 800991c:	425b      	negs	r3, r3
 800991e:	61a3      	str	r3, [r4, #24]
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	b943      	cbnz	r3, 8009936 <__swsetup_r+0xc6>
 8009924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009928:	d1ba      	bne.n	80098a0 <__swsetup_r+0x30>
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	0781      	lsls	r1, r0, #30
 800992e:	bf58      	it	pl
 8009930:	6963      	ldrpl	r3, [r4, #20]
 8009932:	60a3      	str	r3, [r4, #8]
 8009934:	e7f4      	b.n	8009920 <__swsetup_r+0xb0>
 8009936:	2000      	movs	r0, #0
 8009938:	e7f7      	b.n	800992a <__swsetup_r+0xba>
 800993a:	bf00      	nop
 800993c:	20000090 	.word	0x20000090
 8009940:	0800a1e0 	.word	0x0800a1e0
 8009944:	0800a200 	.word	0x0800a200
 8009948:	0800a1c0 	.word	0x0800a1c0

0800994c <abort>:
 800994c:	b508      	push	{r3, lr}
 800994e:	2006      	movs	r0, #6
 8009950:	f000 f9ec 	bl	8009d2c <raise>
 8009954:	2001      	movs	r0, #1
 8009956:	f7f9 fe15 	bl	8003584 <_exit>
	...

0800995c <_close_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d06      	ldr	r5, [pc, #24]	; (8009978 <_close_r+0x1c>)
 8009960:	2300      	movs	r3, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	f7f9 fe4f 	bl	800360a <_close>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_close_r+0x1a>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_close_r+0x1a>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	20000dc0 	.word	0x20000dc0

0800997c <__sflush_r>:
 800997c:	898a      	ldrh	r2, [r1, #12]
 800997e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009982:	4605      	mov	r5, r0
 8009984:	0710      	lsls	r0, r2, #28
 8009986:	460c      	mov	r4, r1
 8009988:	d458      	bmi.n	8009a3c <__sflush_r+0xc0>
 800998a:	684b      	ldr	r3, [r1, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	dc05      	bgt.n	800999c <__sflush_r+0x20>
 8009990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009992:	2b00      	cmp	r3, #0
 8009994:	dc02      	bgt.n	800999c <__sflush_r+0x20>
 8009996:	2000      	movs	r0, #0
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800999e:	2e00      	cmp	r6, #0
 80099a0:	d0f9      	beq.n	8009996 <__sflush_r+0x1a>
 80099a2:	2300      	movs	r3, #0
 80099a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099a8:	682f      	ldr	r7, [r5, #0]
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	d032      	beq.n	8009a14 <__sflush_r+0x98>
 80099ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	075a      	lsls	r2, r3, #29
 80099b4:	d505      	bpl.n	80099c2 <__sflush_r+0x46>
 80099b6:	6863      	ldr	r3, [r4, #4]
 80099b8:	1ac0      	subs	r0, r0, r3
 80099ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099bc:	b10b      	cbz	r3, 80099c2 <__sflush_r+0x46>
 80099be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099c0:	1ac0      	subs	r0, r0, r3
 80099c2:	2300      	movs	r3, #0
 80099c4:	4602      	mov	r2, r0
 80099c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099c8:	6a21      	ldr	r1, [r4, #32]
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b0      	blx	r6
 80099ce:	1c43      	adds	r3, r0, #1
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	d106      	bne.n	80099e2 <__sflush_r+0x66>
 80099d4:	6829      	ldr	r1, [r5, #0]
 80099d6:	291d      	cmp	r1, #29
 80099d8:	d82c      	bhi.n	8009a34 <__sflush_r+0xb8>
 80099da:	4a2a      	ldr	r2, [pc, #168]	; (8009a84 <__sflush_r+0x108>)
 80099dc:	40ca      	lsrs	r2, r1
 80099de:	07d6      	lsls	r6, r2, #31
 80099e0:	d528      	bpl.n	8009a34 <__sflush_r+0xb8>
 80099e2:	2200      	movs	r2, #0
 80099e4:	6062      	str	r2, [r4, #4]
 80099e6:	04d9      	lsls	r1, r3, #19
 80099e8:	6922      	ldr	r2, [r4, #16]
 80099ea:	6022      	str	r2, [r4, #0]
 80099ec:	d504      	bpl.n	80099f8 <__sflush_r+0x7c>
 80099ee:	1c42      	adds	r2, r0, #1
 80099f0:	d101      	bne.n	80099f6 <__sflush_r+0x7a>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	b903      	cbnz	r3, 80099f8 <__sflush_r+0x7c>
 80099f6:	6560      	str	r0, [r4, #84]	; 0x54
 80099f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099fa:	602f      	str	r7, [r5, #0]
 80099fc:	2900      	cmp	r1, #0
 80099fe:	d0ca      	beq.n	8009996 <__sflush_r+0x1a>
 8009a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a04:	4299      	cmp	r1, r3
 8009a06:	d002      	beq.n	8009a0e <__sflush_r+0x92>
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff f94f 	bl	8008cac <_free_r>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	6360      	str	r0, [r4, #52]	; 0x34
 8009a12:	e7c1      	b.n	8009998 <__sflush_r+0x1c>
 8009a14:	6a21      	ldr	r1, [r4, #32]
 8009a16:	2301      	movs	r3, #1
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b0      	blx	r6
 8009a1c:	1c41      	adds	r1, r0, #1
 8009a1e:	d1c7      	bne.n	80099b0 <__sflush_r+0x34>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0c4      	beq.n	80099b0 <__sflush_r+0x34>
 8009a26:	2b1d      	cmp	r3, #29
 8009a28:	d001      	beq.n	8009a2e <__sflush_r+0xb2>
 8009a2a:	2b16      	cmp	r3, #22
 8009a2c:	d101      	bne.n	8009a32 <__sflush_r+0xb6>
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	e7b1      	b.n	8009996 <__sflush_r+0x1a>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e7ad      	b.n	8009998 <__sflush_r+0x1c>
 8009a3c:	690f      	ldr	r7, [r1, #16]
 8009a3e:	2f00      	cmp	r7, #0
 8009a40:	d0a9      	beq.n	8009996 <__sflush_r+0x1a>
 8009a42:	0793      	lsls	r3, r2, #30
 8009a44:	680e      	ldr	r6, [r1, #0]
 8009a46:	bf08      	it	eq
 8009a48:	694b      	ldreq	r3, [r1, #20]
 8009a4a:	600f      	str	r7, [r1, #0]
 8009a4c:	bf18      	it	ne
 8009a4e:	2300      	movne	r3, #0
 8009a50:	eba6 0807 	sub.w	r8, r6, r7
 8009a54:	608b      	str	r3, [r1, #8]
 8009a56:	f1b8 0f00 	cmp.w	r8, #0
 8009a5a:	dd9c      	ble.n	8009996 <__sflush_r+0x1a>
 8009a5c:	6a21      	ldr	r1, [r4, #32]
 8009a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a60:	4643      	mov	r3, r8
 8009a62:	463a      	mov	r2, r7
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b0      	blx	r6
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	dc06      	bgt.n	8009a7a <__sflush_r+0xfe>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a72:	81a3      	strh	r3, [r4, #12]
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	e78e      	b.n	8009998 <__sflush_r+0x1c>
 8009a7a:	4407      	add	r7, r0
 8009a7c:	eba8 0800 	sub.w	r8, r8, r0
 8009a80:	e7e9      	b.n	8009a56 <__sflush_r+0xda>
 8009a82:	bf00      	nop
 8009a84:	20400001 	.word	0x20400001

08009a88 <_fflush_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	690b      	ldr	r3, [r1, #16]
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	b913      	cbnz	r3, 8009a98 <_fflush_r+0x10>
 8009a92:	2500      	movs	r5, #0
 8009a94:	4628      	mov	r0, r5
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	b118      	cbz	r0, 8009aa2 <_fflush_r+0x1a>
 8009a9a:	6983      	ldr	r3, [r0, #24]
 8009a9c:	b90b      	cbnz	r3, 8009aa2 <_fflush_r+0x1a>
 8009a9e:	f7ff f837 	bl	8008b10 <__sinit>
 8009aa2:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <_fflush_r+0x6c>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	d11b      	bne.n	8009ae0 <_fflush_r+0x58>
 8009aa8:	686c      	ldr	r4, [r5, #4]
 8009aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0ef      	beq.n	8009a92 <_fflush_r+0xa>
 8009ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab4:	07d0      	lsls	r0, r2, #31
 8009ab6:	d404      	bmi.n	8009ac2 <_fflush_r+0x3a>
 8009ab8:	0599      	lsls	r1, r3, #22
 8009aba:	d402      	bmi.n	8009ac2 <_fflush_r+0x3a>
 8009abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009abe:	f7ff f8ea 	bl	8008c96 <__retarget_lock_acquire_recursive>
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f7ff ff59 	bl	800997c <__sflush_r>
 8009aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009acc:	07da      	lsls	r2, r3, #31
 8009ace:	4605      	mov	r5, r0
 8009ad0:	d4e0      	bmi.n	8009a94 <_fflush_r+0xc>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	059b      	lsls	r3, r3, #22
 8009ad6:	d4dd      	bmi.n	8009a94 <_fflush_r+0xc>
 8009ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ada:	f7ff f8dd 	bl	8008c98 <__retarget_lock_release_recursive>
 8009ade:	e7d9      	b.n	8009a94 <_fflush_r+0xc>
 8009ae0:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <_fflush_r+0x70>)
 8009ae2:	429c      	cmp	r4, r3
 8009ae4:	d101      	bne.n	8009aea <_fflush_r+0x62>
 8009ae6:	68ac      	ldr	r4, [r5, #8]
 8009ae8:	e7df      	b.n	8009aaa <_fflush_r+0x22>
 8009aea:	4b04      	ldr	r3, [pc, #16]	; (8009afc <_fflush_r+0x74>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	bf08      	it	eq
 8009af0:	68ec      	ldreq	r4, [r5, #12]
 8009af2:	e7da      	b.n	8009aaa <_fflush_r+0x22>
 8009af4:	0800a1e0 	.word	0x0800a1e0
 8009af8:	0800a200 	.word	0x0800a200
 8009afc:	0800a1c0 	.word	0x0800a1c0

08009b00 <_lseek_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d07      	ldr	r5, [pc, #28]	; (8009b20 <_lseek_r+0x20>)
 8009b04:	4604      	mov	r4, r0
 8009b06:	4608      	mov	r0, r1
 8009b08:	4611      	mov	r1, r2
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	602a      	str	r2, [r5, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f7f9 fda2 	bl	8003658 <_lseek>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d102      	bne.n	8009b1e <_lseek_r+0x1e>
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	b103      	cbz	r3, 8009b1e <_lseek_r+0x1e>
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	bd38      	pop	{r3, r4, r5, pc}
 8009b20:	20000dc0 	.word	0x20000dc0

08009b24 <__swhatbuf_r>:
 8009b24:	b570      	push	{r4, r5, r6, lr}
 8009b26:	460e      	mov	r6, r1
 8009b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	b096      	sub	sp, #88	; 0x58
 8009b30:	4614      	mov	r4, r2
 8009b32:	461d      	mov	r5, r3
 8009b34:	da08      	bge.n	8009b48 <__swhatbuf_r+0x24>
 8009b36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	602a      	str	r2, [r5, #0]
 8009b3e:	061a      	lsls	r2, r3, #24
 8009b40:	d410      	bmi.n	8009b64 <__swhatbuf_r+0x40>
 8009b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b46:	e00e      	b.n	8009b66 <__swhatbuf_r+0x42>
 8009b48:	466a      	mov	r2, sp
 8009b4a:	f000 f90b 	bl	8009d64 <_fstat_r>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	dbf1      	blt.n	8009b36 <__swhatbuf_r+0x12>
 8009b52:	9a01      	ldr	r2, [sp, #4]
 8009b54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b5c:	425a      	negs	r2, r3
 8009b5e:	415a      	adcs	r2, r3
 8009b60:	602a      	str	r2, [r5, #0]
 8009b62:	e7ee      	b.n	8009b42 <__swhatbuf_r+0x1e>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	2000      	movs	r0, #0
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	b016      	add	sp, #88	; 0x58
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b70 <__smakebuf_r>:
 8009b70:	898b      	ldrh	r3, [r1, #12]
 8009b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b74:	079d      	lsls	r5, r3, #30
 8009b76:	4606      	mov	r6, r0
 8009b78:	460c      	mov	r4, r1
 8009b7a:	d507      	bpl.n	8009b8c <__smakebuf_r+0x1c>
 8009b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	2301      	movs	r3, #1
 8009b86:	6163      	str	r3, [r4, #20]
 8009b88:	b002      	add	sp, #8
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	ab01      	add	r3, sp, #4
 8009b8e:	466a      	mov	r2, sp
 8009b90:	f7ff ffc8 	bl	8009b24 <__swhatbuf_r>
 8009b94:	9900      	ldr	r1, [sp, #0]
 8009b96:	4605      	mov	r5, r0
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f7ff f8f3 	bl	8008d84 <_malloc_r>
 8009b9e:	b948      	cbnz	r0, 8009bb4 <__smakebuf_r+0x44>
 8009ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba4:	059a      	lsls	r2, r3, #22
 8009ba6:	d4ef      	bmi.n	8009b88 <__smakebuf_r+0x18>
 8009ba8:	f023 0303 	bic.w	r3, r3, #3
 8009bac:	f043 0302 	orr.w	r3, r3, #2
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	e7e3      	b.n	8009b7c <__smakebuf_r+0xc>
 8009bb4:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <__smakebuf_r+0x7c>)
 8009bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	6020      	str	r0, [r4, #0]
 8009bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	9b00      	ldr	r3, [sp, #0]
 8009bc4:	6163      	str	r3, [r4, #20]
 8009bc6:	9b01      	ldr	r3, [sp, #4]
 8009bc8:	6120      	str	r0, [r4, #16]
 8009bca:	b15b      	cbz	r3, 8009be4 <__smakebuf_r+0x74>
 8009bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 f8d9 	bl	8009d88 <_isatty_r>
 8009bd6:	b128      	cbz	r0, 8009be4 <__smakebuf_r+0x74>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	89a0      	ldrh	r0, [r4, #12]
 8009be6:	4305      	orrs	r5, r0
 8009be8:	81a5      	strh	r5, [r4, #12]
 8009bea:	e7cd      	b.n	8009b88 <__smakebuf_r+0x18>
 8009bec:	08008aa9 	.word	0x08008aa9

08009bf0 <memcpy>:
 8009bf0:	440a      	add	r2, r1
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bf8:	d100      	bne.n	8009bfc <memcpy+0xc>
 8009bfa:	4770      	bx	lr
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c06:	4291      	cmp	r1, r2
 8009c08:	d1f9      	bne.n	8009bfe <memcpy+0xe>
 8009c0a:	bd10      	pop	{r4, pc}

08009c0c <memmove>:
 8009c0c:	4288      	cmp	r0, r1
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	eb01 0402 	add.w	r4, r1, r2
 8009c14:	d902      	bls.n	8009c1c <memmove+0x10>
 8009c16:	4284      	cmp	r4, r0
 8009c18:	4623      	mov	r3, r4
 8009c1a:	d807      	bhi.n	8009c2c <memmove+0x20>
 8009c1c:	1e43      	subs	r3, r0, #1
 8009c1e:	42a1      	cmp	r1, r4
 8009c20:	d008      	beq.n	8009c34 <memmove+0x28>
 8009c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c2a:	e7f8      	b.n	8009c1e <memmove+0x12>
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4601      	mov	r1, r0
 8009c30:	428a      	cmp	r2, r1
 8009c32:	d100      	bne.n	8009c36 <memmove+0x2a>
 8009c34:	bd10      	pop	{r4, pc}
 8009c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c3e:	e7f7      	b.n	8009c30 <memmove+0x24>

08009c40 <__malloc_lock>:
 8009c40:	4801      	ldr	r0, [pc, #4]	; (8009c48 <__malloc_lock+0x8>)
 8009c42:	f7ff b828 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8009c46:	bf00      	nop
 8009c48:	20000db4 	.word	0x20000db4

08009c4c <__malloc_unlock>:
 8009c4c:	4801      	ldr	r0, [pc, #4]	; (8009c54 <__malloc_unlock+0x8>)
 8009c4e:	f7ff b823 	b.w	8008c98 <__retarget_lock_release_recursive>
 8009c52:	bf00      	nop
 8009c54:	20000db4 	.word	0x20000db4

08009c58 <_realloc_r>:
 8009c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4614      	mov	r4, r2
 8009c60:	460e      	mov	r6, r1
 8009c62:	b921      	cbnz	r1, 8009c6e <_realloc_r+0x16>
 8009c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c68:	4611      	mov	r1, r2
 8009c6a:	f7ff b88b 	b.w	8008d84 <_malloc_r>
 8009c6e:	b92a      	cbnz	r2, 8009c7c <_realloc_r+0x24>
 8009c70:	f7ff f81c 	bl	8008cac <_free_r>
 8009c74:	4625      	mov	r5, r4
 8009c76:	4628      	mov	r0, r5
 8009c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c7c:	f000 f894 	bl	8009da8 <_malloc_usable_size_r>
 8009c80:	4284      	cmp	r4, r0
 8009c82:	4607      	mov	r7, r0
 8009c84:	d802      	bhi.n	8009c8c <_realloc_r+0x34>
 8009c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c8a:	d812      	bhi.n	8009cb2 <_realloc_r+0x5a>
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4640      	mov	r0, r8
 8009c90:	f7ff f878 	bl	8008d84 <_malloc_r>
 8009c94:	4605      	mov	r5, r0
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d0ed      	beq.n	8009c76 <_realloc_r+0x1e>
 8009c9a:	42bc      	cmp	r4, r7
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	bf28      	it	cs
 8009ca2:	463a      	movcs	r2, r7
 8009ca4:	f7ff ffa4 	bl	8009bf0 <memcpy>
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4640      	mov	r0, r8
 8009cac:	f7fe fffe 	bl	8008cac <_free_r>
 8009cb0:	e7e1      	b.n	8009c76 <_realloc_r+0x1e>
 8009cb2:	4635      	mov	r5, r6
 8009cb4:	e7df      	b.n	8009c76 <_realloc_r+0x1e>
	...

08009cb8 <_read_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d07      	ldr	r5, [pc, #28]	; (8009cd8 <_read_r+0x20>)
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	4608      	mov	r0, r1
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	602a      	str	r2, [r5, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f7f9 fc66 	bl	8003598 <_read>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d102      	bne.n	8009cd6 <_read_r+0x1e>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b103      	cbz	r3, 8009cd6 <_read_r+0x1e>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
 8009cd8:	20000dc0 	.word	0x20000dc0

08009cdc <_raise_r>:
 8009cdc:	291f      	cmp	r1, #31
 8009cde:	b538      	push	{r3, r4, r5, lr}
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	460d      	mov	r5, r1
 8009ce4:	d904      	bls.n	8009cf0 <_raise_r+0x14>
 8009ce6:	2316      	movs	r3, #22
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	f04f 30ff 	mov.w	r0, #4294967295
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cf2:	b112      	cbz	r2, 8009cfa <_raise_r+0x1e>
 8009cf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cf8:	b94b      	cbnz	r3, 8009d0e <_raise_r+0x32>
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f000 f830 	bl	8009d60 <_getpid_r>
 8009d00:	462a      	mov	r2, r5
 8009d02:	4601      	mov	r1, r0
 8009d04:	4620      	mov	r0, r4
 8009d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d0a:	f000 b817 	b.w	8009d3c <_kill_r>
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d00a      	beq.n	8009d28 <_raise_r+0x4c>
 8009d12:	1c59      	adds	r1, r3, #1
 8009d14:	d103      	bne.n	8009d1e <_raise_r+0x42>
 8009d16:	2316      	movs	r3, #22
 8009d18:	6003      	str	r3, [r0, #0]
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	e7e7      	b.n	8009cee <_raise_r+0x12>
 8009d1e:	2400      	movs	r4, #0
 8009d20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d24:	4628      	mov	r0, r5
 8009d26:	4798      	blx	r3
 8009d28:	2000      	movs	r0, #0
 8009d2a:	e7e0      	b.n	8009cee <_raise_r+0x12>

08009d2c <raise>:
 8009d2c:	4b02      	ldr	r3, [pc, #8]	; (8009d38 <raise+0xc>)
 8009d2e:	4601      	mov	r1, r0
 8009d30:	6818      	ldr	r0, [r3, #0]
 8009d32:	f7ff bfd3 	b.w	8009cdc <_raise_r>
 8009d36:	bf00      	nop
 8009d38:	20000090 	.word	0x20000090

08009d3c <_kill_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d07      	ldr	r5, [pc, #28]	; (8009d5c <_kill_r+0x20>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	4611      	mov	r1, r2
 8009d48:	602b      	str	r3, [r5, #0]
 8009d4a:	f7f9 fc0b 	bl	8003564 <_kill>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d102      	bne.n	8009d58 <_kill_r+0x1c>
 8009d52:	682b      	ldr	r3, [r5, #0]
 8009d54:	b103      	cbz	r3, 8009d58 <_kill_r+0x1c>
 8009d56:	6023      	str	r3, [r4, #0]
 8009d58:	bd38      	pop	{r3, r4, r5, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000dc0 	.word	0x20000dc0

08009d60 <_getpid_r>:
 8009d60:	f7f9 bbf8 	b.w	8003554 <_getpid>

08009d64 <_fstat_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d07      	ldr	r5, [pc, #28]	; (8009d84 <_fstat_r+0x20>)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4611      	mov	r1, r2
 8009d70:	602b      	str	r3, [r5, #0]
 8009d72:	f7f9 fc56 	bl	8003622 <_fstat>
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	d102      	bne.n	8009d80 <_fstat_r+0x1c>
 8009d7a:	682b      	ldr	r3, [r5, #0]
 8009d7c:	b103      	cbz	r3, 8009d80 <_fstat_r+0x1c>
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
 8009d82:	bf00      	nop
 8009d84:	20000dc0 	.word	0x20000dc0

08009d88 <_isatty_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d06      	ldr	r5, [pc, #24]	; (8009da4 <_isatty_r+0x1c>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	f7f9 fc55 	bl	8003642 <_isatty>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_isatty_r+0x1a>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_isatty_r+0x1a>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	20000dc0 	.word	0x20000dc0

08009da8 <_malloc_usable_size_r>:
 8009da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dac:	1f18      	subs	r0, r3, #4
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bfbc      	itt	lt
 8009db2:	580b      	ldrlt	r3, [r1, r0]
 8009db4:	18c0      	addlt	r0, r0, r3
 8009db6:	4770      	bx	lr

08009db8 <_gettimeofday>:
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <_gettimeofday+0xc>)
 8009dba:	2258      	movs	r2, #88	; 0x58
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc2:	4770      	bx	lr
 8009dc4:	20000dc0 	.word	0x20000dc0

08009dc8 <_init>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	bf00      	nop
 8009dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dce:	bc08      	pop	{r3}
 8009dd0:	469e      	mov	lr, r3
 8009dd2:	4770      	bx	lr

08009dd4 <_fini>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr
